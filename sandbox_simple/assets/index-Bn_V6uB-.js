var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var require_index_001 = __commonJS({
  "assets/index-Bn_V6uB-.js"(exports, module) {
    const BasicFuncs = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      get LINEAR_REGRESSION() {
        return LINEAR_REGRESSION;
      },
      get LOWER() {
        return LOWER;
      },
      get NOW() {
        return NOW;
      },
      get RELATIVE_DATETIME() {
        return RELATIVE_DATETIME;
      },
      get UPPER() {
        return UPPER;
      }
    }, Symbol.toStringTag, { value: "Module" }));
    (function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node of mutation.addedNodes) {
            if (node.tagName === "LINK" && node.rel === "modulepreload")
              processPreload(node);
          }
        }
      }).observe(document, { childList: true, subtree: true });
      function getFetchOpts(link) {
        const fetchOpts = {};
        if (link.integrity) fetchOpts.integrity = link.integrity;
        if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
        if (link.crossOrigin === "use-credentials")
          fetchOpts.credentials = "include";
        else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
        else fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link) {
        if (link.ep)
          return;
        link.ep = true;
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
      }
    })();
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x2) {
      return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
    }
    var jsxRuntime = { exports: {} };
    var reactJsxRuntime_production_min = {};
    var react = { exports: {} };
    var react_production_min = {};
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
    var hasOwnProperty$e = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject$2(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
      var from2;
      var to2 = toObject$2(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from2 = Object(arguments[s]);
        for (var key in from2) {
          if (hasOwnProperty$e.call(from2, key)) {
            to2[key] = from2[key];
          }
        }
        if (getOwnPropertySymbols$1) {
          symbols = getOwnPropertySymbols$1(from2);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from2, symbols[i])) {
              to2[symbols[i]] = from2[symbols[i]];
            }
          }
        }
      }
      return to2;
    };
    /** @license React v16.14.0
     * react.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var l$3 = objectAssign, n$6 = "function" === typeof Symbol && Symbol.for, p$5 = n$6 ? Symbol.for("react.element") : 60103, q$5 = n$6 ? Symbol.for("react.portal") : 60106, r$4 = n$6 ? Symbol.for("react.fragment") : 60107, t$4 = n$6 ? Symbol.for("react.strict_mode") : 60108, u$4 = n$6 ? Symbol.for("react.profiler") : 60114, v$4 = n$6 ? Symbol.for("react.provider") : 60109, w$2 = n$6 ? Symbol.for("react.context") : 60110, x$1 = n$6 ? Symbol.for("react.forward_ref") : 60112, y$1 = n$6 ? Symbol.for("react.suspense") : 60113, z$1 = n$6 ? Symbol.for("react.memo") : 60115, A$1 = n$6 ? Symbol.for("react.lazy") : 60116, B = "function" === typeof Symbol && Symbol.iterator;
    function C$1(a) {
      for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c2 = 1; c2 < arguments.length; c2++) b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
      return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var D = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } }, E$1 = {};
    function F$1(a, b2, c2) {
      this.props = a;
      this.context = b2;
      this.refs = E$1;
      this.updater = c2 || D;
    }
    F$1.prototype.isReactComponent = {};
    F$1.prototype.setState = function(a, b2) {
      if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(C$1(85));
      this.updater.enqueueSetState(this, a, b2, "setState");
    };
    F$1.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function G$1() {
    }
    G$1.prototype = F$1.prototype;
    function H$1(a, b2, c2) {
      this.props = a;
      this.context = b2;
      this.refs = E$1;
      this.updater = c2 || D;
    }
    var I$1 = H$1.prototype = new G$1();
    I$1.constructor = H$1;
    l$3(I$1, F$1.prototype);
    I$1.isPureReactComponent = true;
    var J$1 = { current: null }, K$1 = Object.prototype.hasOwnProperty, L$1 = { key: true, ref: true, __self: true, __source: true };
    function M$1(a, b2, c2) {
      var e2, d2 = {}, g2 = null, k2 = null;
      if (null != b2) for (e2 in void 0 !== b2.ref && (k2 = b2.ref), void 0 !== b2.key && (g2 = "" + b2.key), b2) K$1.call(b2, e2) && !L$1.hasOwnProperty(e2) && (d2[e2] = b2[e2]);
      var f2 = arguments.length - 2;
      if (1 === f2) d2.children = c2;
      else if (1 < f2) {
        for (var h2 = Array(f2), m2 = 0; m2 < f2; m2++) h2[m2] = arguments[m2 + 2];
        d2.children = h2;
      }
      if (a && a.defaultProps) for (e2 in f2 = a.defaultProps, f2) void 0 === d2[e2] && (d2[e2] = f2[e2]);
      return { $$typeof: p$5, type: a, key: g2, ref: k2, props: d2, _owner: J$1.current };
    }
    function N$1(a, b2) {
      return { $$typeof: p$5, type: a.type, key: b2, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function O$1(a) {
      return "object" === typeof a && null !== a && a.$$typeof === p$5;
    }
    function escape$1(a) {
      var b2 = { "=": "=0", ":": "=2" };
      return "$" + ("" + a).replace(/[=:]/g, function(a2) {
        return b2[a2];
      });
    }
    var P$1 = /\/+/g, Q$1 = [];
    function R$1(a, b2, c2, e2) {
      if (Q$1.length) {
        var d2 = Q$1.pop();
        d2.result = a;
        d2.keyPrefix = b2;
        d2.func = c2;
        d2.context = e2;
        d2.count = 0;
        return d2;
      }
      return { result: a, keyPrefix: b2, func: c2, context: e2, count: 0 };
    }
    function S$1(a) {
      a.result = null;
      a.keyPrefix = null;
      a.func = null;
      a.context = null;
      a.count = 0;
      10 > Q$1.length && Q$1.push(a);
    }
    function T$1(a, b2, c2, e2) {
      var d2 = typeof a;
      if ("undefined" === d2 || "boolean" === d2) a = null;
      var g2 = false;
      if (null === a) g2 = true;
      else switch (d2) {
        case "string":
        case "number":
          g2 = true;
          break;
        case "object":
          switch (a.$$typeof) {
            case p$5:
            case q$5:
              g2 = true;
          }
      }
      if (g2) return c2(e2, a, "" === b2 ? "." + U$1(a, 0) : b2), 1;
      g2 = 0;
      b2 = "" === b2 ? "." : b2 + ":";
      if (Array.isArray(a)) for (var k2 = 0; k2 < a.length; k2++) {
        d2 = a[k2];
        var f2 = b2 + U$1(d2, k2);
        g2 += T$1(d2, f2, c2, e2);
      }
      else if (null === a || "object" !== typeof a ? f2 = null : (f2 = B && a[B] || a["@@iterator"], f2 = "function" === typeof f2 ? f2 : null), "function" === typeof f2) for (a = f2.call(a), k2 = 0; !(d2 = a.next()).done; ) d2 = d2.value, f2 = b2 + U$1(d2, k2++), g2 += T$1(d2, f2, c2, e2);
      else if ("object" === d2) throw c2 = "" + a, Error(C$1(31, "[object Object]" === c2 ? "object with keys {" + Object.keys(a).join(", ") + "}" : c2, ""));
      return g2;
    }
    function V$1(a, b2, c2) {
      return null == a ? 0 : T$1(a, "", b2, c2);
    }
    function U$1(a, b2) {
      return "object" === typeof a && null !== a && null != a.key ? escape$1(a.key) : b2.toString(36);
    }
    function W$1(a, b2) {
      a.func.call(a.context, b2, a.count++);
    }
    function aa$1(a, b2, c2) {
      var e2 = a.result, d2 = a.keyPrefix;
      a = a.func.call(a.context, b2, a.count++);
      Array.isArray(a) ? X$1(a, e2, c2, function(a2) {
        return a2;
      }) : null != a && (O$1(a) && (a = N$1(a, d2 + (!a.key || b2 && b2.key === a.key ? "" : ("" + a.key).replace(P$1, "$&/") + "/") + c2)), e2.push(a));
    }
    function X$1(a, b2, c2, e2, d2) {
      var g2 = "";
      null != c2 && (g2 = ("" + c2).replace(P$1, "$&/") + "/");
      b2 = R$1(b2, g2, e2, d2);
      V$1(a, aa$1, b2);
      S$1(b2);
    }
    var Y$1 = { current: null };
    function Z$1() {
      var a = Y$1.current;
      if (null === a) throw Error(C$1(321));
      return a;
    }
    var ba$1 = { ReactCurrentDispatcher: Y$1, ReactCurrentBatchConfig: { suspense: null }, ReactCurrentOwner: J$1, IsSomeRendererActing: { current: false }, assign: l$3 };
    react_production_min.Children = { map: function(a, b2, c2) {
      if (null == a) return a;
      var e2 = [];
      X$1(a, e2, null, b2, c2);
      return e2;
    }, forEach: function(a, b2, c2) {
      if (null == a) return a;
      b2 = R$1(null, null, b2, c2);
      V$1(a, W$1, b2);
      S$1(b2);
    }, count: function(a) {
      return V$1(a, function() {
        return null;
      }, null);
    }, toArray: function(a) {
      var b2 = [];
      X$1(a, b2, null, function(a2) {
        return a2;
      });
      return b2;
    }, only: function(a) {
      if (!O$1(a)) throw Error(C$1(143));
      return a;
    } };
    react_production_min.Component = F$1;
    react_production_min.Fragment = r$4;
    react_production_min.Profiler = u$4;
    react_production_min.PureComponent = H$1;
    react_production_min.StrictMode = t$4;
    react_production_min.Suspense = y$1;
    react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ba$1;
    react_production_min.cloneElement = function(a, b2, c2) {
      if (null === a || void 0 === a) throw Error(C$1(267, a));
      var e2 = l$3({}, a.props), d2 = a.key, g2 = a.ref, k2 = a._owner;
      if (null != b2) {
        void 0 !== b2.ref && (g2 = b2.ref, k2 = J$1.current);
        void 0 !== b2.key && (d2 = "" + b2.key);
        if (a.type && a.type.defaultProps) var f2 = a.type.defaultProps;
        for (h2 in b2) K$1.call(b2, h2) && !L$1.hasOwnProperty(h2) && (e2[h2] = void 0 === b2[h2] && void 0 !== f2 ? f2[h2] : b2[h2]);
      }
      var h2 = arguments.length - 2;
      if (1 === h2) e2.children = c2;
      else if (1 < h2) {
        f2 = Array(h2);
        for (var m2 = 0; m2 < h2; m2++) f2[m2] = arguments[m2 + 2];
        e2.children = f2;
      }
      return {
        $$typeof: p$5,
        type: a.type,
        key: d2,
        ref: g2,
        props: e2,
        _owner: k2
      };
    };
    react_production_min.createContext = function(a, b2) {
      void 0 === b2 && (b2 = null);
      a = { $$typeof: w$2, _calculateChangedBits: b2, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null };
      a.Provider = { $$typeof: v$4, _context: a };
      return a.Consumer = a;
    };
    react_production_min.createElement = M$1;
    react_production_min.createFactory = function(a) {
      var b2 = M$1.bind(null, a);
      b2.type = a;
      return b2;
    };
    react_production_min.createRef = function() {
      return { current: null };
    };
    react_production_min.forwardRef = function(a) {
      return { $$typeof: x$1, render: a };
    };
    react_production_min.isValidElement = O$1;
    react_production_min.lazy = function(a) {
      return { $$typeof: A$1, _ctor: a, _status: -1, _result: null };
    };
    react_production_min.memo = function(a, b2) {
      return { $$typeof: z$1, type: a, compare: void 0 === b2 ? null : b2 };
    };
    react_production_min.useCallback = function(a, b2) {
      return Z$1().useCallback(a, b2);
    };
    react_production_min.useContext = function(a, b2) {
      return Z$1().useContext(a, b2);
    };
    react_production_min.useDebugValue = function() {
    };
    react_production_min.useEffect = function(a, b2) {
      return Z$1().useEffect(a, b2);
    };
    react_production_min.useImperativeHandle = function(a, b2, c2) {
      return Z$1().useImperativeHandle(a, b2, c2);
    };
    react_production_min.useLayoutEffect = function(a, b2) {
      return Z$1().useLayoutEffect(a, b2);
    };
    react_production_min.useMemo = function(a, b2) {
      return Z$1().useMemo(a, b2);
    };
    react_production_min.useReducer = function(a, b2, c2) {
      return Z$1().useReducer(a, b2, c2);
    };
    react_production_min.useRef = function(a) {
      return Z$1().useRef(a);
    };
    react_production_min.useState = function(a) {
      return Z$1().useState(a);
    };
    react_production_min.version = "16.14.0";
    {
      react.exports = react_production_min;
    }
    var reactExports = react.exports;
    const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
    /** @license React v16.14.0
     * react-jsx-runtime.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var f$2 = reactExports, g$2 = 60103;
    reactJsxRuntime_production_min.Fragment = 60107;
    if ("function" === typeof Symbol && Symbol.for) {
      var h$4 = Symbol.for;
      g$2 = h$4("react.element");
      reactJsxRuntime_production_min.Fragment = h$4("react.fragment");
    }
    var m$3 = f$2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, n$5 = Object.prototype.hasOwnProperty, p$4 = { key: true, ref: true, __self: true, __source: true };
    function q$4(c2, a, k2) {
      var b2, d2 = {}, e2 = null, l2 = null;
      void 0 !== k2 && (e2 = "" + k2);
      void 0 !== a.key && (e2 = "" + a.key);
      void 0 !== a.ref && (l2 = a.ref);
      for (b2 in a) n$5.call(a, b2) && !p$4.hasOwnProperty(b2) && (d2[b2] = a[b2]);
      if (c2 && c2.defaultProps) for (b2 in a = c2.defaultProps, a) void 0 === d2[b2] && (d2[b2] = a[b2]);
      return { $$typeof: g$2, type: c2, key: e2, ref: l2, props: d2, _owner: m$3.current };
    }
    reactJsxRuntime_production_min.jsx = q$4;
    reactJsxRuntime_production_min.jsxs = q$4;
    {
      jsxRuntime.exports = reactJsxRuntime_production_min;
    }
    var jsxRuntimeExports = jsxRuntime.exports;
    var reactDom = { exports: {} };
    var reactDom_production_min = {};
    var scheduler = { exports: {} };
    var scheduler_production_min = {};
    /** @license React v0.19.1
     * scheduler.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      var f2, g2, h2, k2, l2;
      if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
        var p2 = null, q2 = null, t2 = function() {
          if (null !== p2) try {
            var a = exports2.unstable_now();
            p2(true, a);
            p2 = null;
          } catch (b2) {
            throw setTimeout(t2, 0), b2;
          }
        }, u2 = Date.now();
        exports2.unstable_now = function() {
          return Date.now() - u2;
        };
        f2 = function(a) {
          null !== p2 ? setTimeout(f2, 0, a) : (p2 = a, setTimeout(t2, 0));
        };
        g2 = function(a, b2) {
          q2 = setTimeout(a, b2);
        };
        h2 = function() {
          clearTimeout(q2);
        };
        k2 = function() {
          return false;
        };
        l2 = exports2.unstable_forceFrameRate = function() {
        };
      } else {
        var w2 = window.performance, x2 = window.Date, y2 = window.setTimeout, z2 = window.clearTimeout;
        if ("undefined" !== typeof console) {
          var A2 = window.cancelAnimationFrame;
          "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
          "function" !== typeof A2 && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
        }
        if ("object" === typeof w2 && "function" === typeof w2.now) exports2.unstable_now = function() {
          return w2.now();
        };
        else {
          var B2 = x2.now();
          exports2.unstable_now = function() {
            return x2.now() - B2;
          };
        }
        var C2 = false, D2 = null, E2 = -1, F2 = 5, G2 = 0;
        k2 = function() {
          return exports2.unstable_now() >= G2;
        };
        l2 = function() {
        };
        exports2.unstable_forceFrameRate = function(a) {
          0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported") : F2 = 0 < a ? Math.floor(1e3 / a) : 5;
        };
        var H2 = new MessageChannel(), I2 = H2.port2;
        H2.port1.onmessage = function() {
          if (null !== D2) {
            var a = exports2.unstable_now();
            G2 = a + F2;
            try {
              D2(true, a) ? I2.postMessage(null) : (C2 = false, D2 = null);
            } catch (b2) {
              throw I2.postMessage(null), b2;
            }
          } else C2 = false;
        };
        f2 = function(a) {
          D2 = a;
          C2 || (C2 = true, I2.postMessage(null));
        };
        g2 = function(a, b2) {
          E2 = y2(function() {
            a(exports2.unstable_now());
          }, b2);
        };
        h2 = function() {
          z2(E2);
          E2 = -1;
        };
      }
      function J2(a, b2) {
        var c2 = a.length;
        a.push(b2);
        a: for (; ; ) {
          var d2 = c2 - 1 >>> 1, e2 = a[d2];
          if (void 0 !== e2 && 0 < K2(e2, b2)) a[d2] = b2, a[c2] = e2, c2 = d2;
          else break a;
        }
      }
      function L2(a) {
        a = a[0];
        return void 0 === a ? null : a;
      }
      function M2(a) {
        var b2 = a[0];
        if (void 0 !== b2) {
          var c2 = a.pop();
          if (c2 !== b2) {
            a[0] = c2;
            a: for (var d2 = 0, e2 = a.length; d2 < e2; ) {
              var m2 = 2 * (d2 + 1) - 1, n2 = a[m2], v2 = m2 + 1, r2 = a[v2];
              if (void 0 !== n2 && 0 > K2(n2, c2)) void 0 !== r2 && 0 > K2(r2, n2) ? (a[d2] = r2, a[v2] = c2, d2 = v2) : (a[d2] = n2, a[m2] = c2, d2 = m2);
              else if (void 0 !== r2 && 0 > K2(r2, c2)) a[d2] = r2, a[v2] = c2, d2 = v2;
              else break a;
            }
          }
          return b2;
        }
        return null;
      }
      function K2(a, b2) {
        var c2 = a.sortIndex - b2.sortIndex;
        return 0 !== c2 ? c2 : a.id - b2.id;
      }
      var N2 = [], O2 = [], P2 = 1, Q2 = null, R2 = 3, S2 = false, T2 = false, U2 = false;
      function V2(a) {
        for (var b2 = L2(O2); null !== b2; ) {
          if (null === b2.callback) M2(O2);
          else if (b2.startTime <= a) M2(O2), b2.sortIndex = b2.expirationTime, J2(N2, b2);
          else break;
          b2 = L2(O2);
        }
      }
      function W2(a) {
        U2 = false;
        V2(a);
        if (!T2) if (null !== L2(N2)) T2 = true, f2(X2);
        else {
          var b2 = L2(O2);
          null !== b2 && g2(W2, b2.startTime - a);
        }
      }
      function X2(a, b2) {
        T2 = false;
        U2 && (U2 = false, h2());
        S2 = true;
        var c2 = R2;
        try {
          V2(b2);
          for (Q2 = L2(N2); null !== Q2 && (!(Q2.expirationTime > b2) || a && !k2()); ) {
            var d2 = Q2.callback;
            if (null !== d2) {
              Q2.callback = null;
              R2 = Q2.priorityLevel;
              var e2 = d2(Q2.expirationTime <= b2);
              b2 = exports2.unstable_now();
              "function" === typeof e2 ? Q2.callback = e2 : Q2 === L2(N2) && M2(N2);
              V2(b2);
            } else M2(N2);
            Q2 = L2(N2);
          }
          if (null !== Q2) var m2 = true;
          else {
            var n2 = L2(O2);
            null !== n2 && g2(W2, n2.startTime - b2);
            m2 = false;
          }
          return m2;
        } finally {
          Q2 = null, R2 = c2, S2 = false;
        }
      }
      function Y2(a) {
        switch (a) {
          case 1:
            return -1;
          case 2:
            return 250;
          case 5:
            return 1073741823;
          case 4:
            return 1e4;
          default:
            return 5e3;
        }
      }
      var Z2 = l2;
      exports2.unstable_IdlePriority = 5;
      exports2.unstable_ImmediatePriority = 1;
      exports2.unstable_LowPriority = 4;
      exports2.unstable_NormalPriority = 3;
      exports2.unstable_Profiling = null;
      exports2.unstable_UserBlockingPriority = 2;
      exports2.unstable_cancelCallback = function(a) {
        a.callback = null;
      };
      exports2.unstable_continueExecution = function() {
        T2 || S2 || (T2 = true, f2(X2));
      };
      exports2.unstable_getCurrentPriorityLevel = function() {
        return R2;
      };
      exports2.unstable_getFirstCallbackNode = function() {
        return L2(N2);
      };
      exports2.unstable_next = function(a) {
        switch (R2) {
          case 1:
          case 2:
          case 3:
            var b2 = 3;
            break;
          default:
            b2 = R2;
        }
        var c2 = R2;
        R2 = b2;
        try {
          return a();
        } finally {
          R2 = c2;
        }
      };
      exports2.unstable_pauseExecution = function() {
      };
      exports2.unstable_requestPaint = Z2;
      exports2.unstable_runWithPriority = function(a, b2) {
        switch (a) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a = 3;
        }
        var c2 = R2;
        R2 = a;
        try {
          return b2();
        } finally {
          R2 = c2;
        }
      };
      exports2.unstable_scheduleCallback = function(a, b2, c2) {
        var d2 = exports2.unstable_now();
        if ("object" === typeof c2 && null !== c2) {
          var e2 = c2.delay;
          e2 = "number" === typeof e2 && 0 < e2 ? d2 + e2 : d2;
          c2 = "number" === typeof c2.timeout ? c2.timeout : Y2(a);
        } else c2 = Y2(a), e2 = d2;
        c2 = e2 + c2;
        a = { id: P2++, callback: b2, priorityLevel: a, startTime: e2, expirationTime: c2, sortIndex: -1 };
        e2 > d2 ? (a.sortIndex = e2, J2(O2, a), null === L2(N2) && a === L2(O2) && (U2 ? h2() : U2 = true, g2(W2, e2 - d2))) : (a.sortIndex = c2, J2(N2, a), T2 || S2 || (T2 = true, f2(X2)));
        return a;
      };
      exports2.unstable_shouldYield = function() {
        var a = exports2.unstable_now();
        V2(a);
        var b2 = L2(N2);
        return b2 !== Q2 && null !== Q2 && null !== b2 && null !== b2.callback && b2.startTime <= a && b2.expirationTime < Q2.expirationTime || k2();
      };
      exports2.unstable_wrapCallback = function(a) {
        var b2 = R2;
        return function() {
          var c2 = R2;
          R2 = b2;
          try {
            return a.apply(this, arguments);
          } finally {
            R2 = c2;
          }
        };
      };
    })(scheduler_production_min);
    {
      scheduler.exports = scheduler_production_min;
    }
    var schedulerExports = scheduler.exports;
    /** @license React v16.14.0
     * react-dom.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var aa = reactExports, n$4 = objectAssign, r$3 = schedulerExports;
    function u$3(a) {
      for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c2 = 1; c2 < arguments.length; c2++) b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
      return "Minified React error #" + a + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    if (!aa) throw Error(u$3(227));
    function ba(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      var l2 = Array.prototype.slice.call(arguments, 3);
      try {
        b2.apply(c2, l2);
      } catch (m2) {
        this.onError(m2);
      }
    }
    var da = false, ea = null, fa = false, ha = null, ia = { onError: function(a) {
      da = true;
      ea = a;
    } };
    function ja(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      da = false;
      ea = null;
      ba.apply(ia, arguments);
    }
    function ka(a, b2, c2, d2, e2, f2, g2, h2, k2) {
      ja.apply(this, arguments);
      if (da) {
        if (da) {
          var l2 = ea;
          da = false;
          ea = null;
        } else throw Error(u$3(198));
        fa || (fa = true, ha = l2);
      }
    }
    var la = null, ma = null, na = null;
    function oa(a, b2, c2) {
      var d2 = a.type || "unknown-event";
      a.currentTarget = na(c2);
      ka(d2, b2, void 0, a);
      a.currentTarget = null;
    }
    var pa = null, qa = {};
    function ra() {
      if (pa) for (var a in qa) {
        var b2 = qa[a], c2 = pa.indexOf(a);
        if (!(-1 < c2)) throw Error(u$3(96, a));
        if (!sa[c2]) {
          if (!b2.extractEvents) throw Error(u$3(97, a));
          sa[c2] = b2;
          c2 = b2.eventTypes;
          for (var d2 in c2) {
            var e2 = void 0;
            var f2 = c2[d2], g2 = b2, h2 = d2;
            if (ta.hasOwnProperty(h2)) throw Error(u$3(99, h2));
            ta[h2] = f2;
            var k2 = f2.phasedRegistrationNames;
            if (k2) {
              for (e2 in k2) k2.hasOwnProperty(e2) && ua(k2[e2], g2, h2);
              e2 = true;
            } else f2.registrationName ? (ua(f2.registrationName, g2, h2), e2 = true) : e2 = false;
            if (!e2) throw Error(u$3(98, d2, a));
          }
        }
      }
    }
    function ua(a, b2, c2) {
      if (va[a]) throw Error(u$3(100, a));
      va[a] = b2;
      wa[a] = b2.eventTypes[c2].dependencies;
    }
    var sa = [], ta = {}, va = {}, wa = {};
    function xa(a) {
      var b2 = false, c2;
      for (c2 in a) if (a.hasOwnProperty(c2)) {
        var d2 = a[c2];
        if (!qa.hasOwnProperty(c2) || qa[c2] !== d2) {
          if (qa[c2]) throw Error(u$3(102, c2));
          qa[c2] = d2;
          b2 = true;
        }
      }
      b2 && ra();
    }
    var ya = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), za = null, Aa = null, Ba = null;
    function Ca(a) {
      if (a = ma(a)) {
        if ("function" !== typeof za) throw Error(u$3(280));
        var b2 = a.stateNode;
        b2 && (b2 = la(b2), za(a.stateNode, a.type, b2));
      }
    }
    function Da(a) {
      Aa ? Ba ? Ba.push(a) : Ba = [a] : Aa = a;
    }
    function Ea() {
      if (Aa) {
        var a = Aa, b2 = Ba;
        Ba = Aa = null;
        Ca(a);
        if (b2) for (a = 0; a < b2.length; a++) Ca(b2[a]);
      }
    }
    function Fa(a, b2) {
      return a(b2);
    }
    function Ga(a, b2, c2, d2, e2) {
      return a(b2, c2, d2, e2);
    }
    function Ha() {
    }
    var Ia = Fa, Ja = false, Ka = false;
    function La() {
      if (null !== Aa || null !== Ba) Ha(), Ea();
    }
    function Ma(a, b2, c2) {
      if (Ka) return a(b2, c2);
      Ka = true;
      try {
        return Ia(a, b2, c2);
      } finally {
        Ka = false, La();
      }
    }
    var Na = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, Oa = Object.prototype.hasOwnProperty, Pa = {}, Qa = {};
    function Ra(a) {
      if (Oa.call(Qa, a)) return true;
      if (Oa.call(Pa, a)) return false;
      if (Na.test(a)) return Qa[a] = true;
      Pa[a] = true;
      return false;
    }
    function Sa(a, b2, c2, d2) {
      if (null !== c2 && 0 === c2.type) return false;
      switch (typeof b2) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d2) return false;
          if (null !== c2) return !c2.acceptsBooleans;
          a = a.toLowerCase().slice(0, 5);
          return "data-" !== a && "aria-" !== a;
        default:
          return false;
      }
    }
    function Ta(a, b2, c2, d2) {
      if (null === b2 || "undefined" === typeof b2 || Sa(a, b2, c2, d2)) return true;
      if (d2) return false;
      if (null !== c2) switch (c2.type) {
        case 3:
          return !b2;
        case 4:
          return false === b2;
        case 5:
          return isNaN(b2);
        case 6:
          return isNaN(b2) || 1 > b2;
      }
      return false;
    }
    function v$3(a, b2, c2, d2, e2, f2) {
      this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
      this.attributeName = d2;
      this.attributeNamespace = e2;
      this.mustUseProperty = c2;
      this.propertyName = a;
      this.type = b2;
      this.sanitizeURL = f2;
    }
    var C = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
      C[a] = new v$3(a, 0, false, a, null, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
      var b2 = a[0];
      C[b2] = new v$3(b2, 1, false, a[1], null, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
      C[a] = new v$3(a, 2, false, a.toLowerCase(), null, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
      C[a] = new v$3(a, 2, false, a, null, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
      C[a] = new v$3(a, 3, false, a.toLowerCase(), null, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a) {
      C[a] = new v$3(a, 3, true, a, null, false);
    });
    ["capture", "download"].forEach(function(a) {
      C[a] = new v$3(a, 4, false, a, null, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a) {
      C[a] = new v$3(a, 6, false, a, null, false);
    });
    ["rowSpan", "start"].forEach(function(a) {
      C[a] = new v$3(a, 5, false, a.toLowerCase(), null, false);
    });
    var Ua = /[\-:]([a-z])/g;
    function Va(a) {
      return a[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
      var b2 = a.replace(
        Ua,
        Va
      );
      C[b2] = new v$3(b2, 1, false, a, null, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
      var b2 = a.replace(Ua, Va);
      C[b2] = new v$3(b2, 1, false, a, "http://www.w3.org/1999/xlink", false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
      var b2 = a.replace(Ua, Va);
      C[b2] = new v$3(b2, 1, false, a, "http://www.w3.org/XML/1998/namespace", false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a) {
      C[a] = new v$3(a, 1, false, a.toLowerCase(), null, false);
    });
    C.xlinkHref = new v$3("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true);
    ["src", "href", "action", "formAction"].forEach(function(a) {
      C[a] = new v$3(a, 1, false, a.toLowerCase(), null, true);
    });
    var Wa = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    Wa.hasOwnProperty("ReactCurrentDispatcher") || (Wa.ReactCurrentDispatcher = { current: null });
    Wa.hasOwnProperty("ReactCurrentBatchConfig") || (Wa.ReactCurrentBatchConfig = { suspense: null });
    function Xa(a, b2, c2, d2) {
      var e2 = C.hasOwnProperty(b2) ? C[b2] : null;
      var f2 = null !== e2 ? 0 === e2.type : d2 ? false : !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1] ? false : true;
      f2 || (Ta(b2, c2, e2, d2) && (c2 = null), d2 || null === e2 ? Ra(b2) && (null === c2 ? a.removeAttribute(b2) : a.setAttribute(b2, "" + c2)) : e2.mustUseProperty ? a[e2.propertyName] = null === c2 ? 3 === e2.type ? false : "" : c2 : (b2 = e2.attributeName, d2 = e2.attributeNamespace, null === c2 ? a.removeAttribute(b2) : (e2 = e2.type, c2 = 3 === e2 || 4 === e2 && true === c2 ? "" : "" + c2, d2 ? a.setAttributeNS(d2, b2, c2) : a.setAttribute(b2, c2))));
    }
    var Ya = /^(.*)[\\\/]/, E = "function" === typeof Symbol && Symbol.for, Za = E ? Symbol.for("react.element") : 60103, $a = E ? Symbol.for("react.portal") : 60106, ab = E ? Symbol.for("react.fragment") : 60107, bb = E ? Symbol.for("react.strict_mode") : 60108, cb = E ? Symbol.for("react.profiler") : 60114, db = E ? Symbol.for("react.provider") : 60109, eb = E ? Symbol.for("react.context") : 60110, fb = E ? Symbol.for("react.concurrent_mode") : 60111, gb = E ? Symbol.for("react.forward_ref") : 60112, hb = E ? Symbol.for("react.suspense") : 60113, ib = E ? Symbol.for("react.suspense_list") : 60120, jb = E ? Symbol.for("react.memo") : 60115, kb = E ? Symbol.for("react.lazy") : 60116, lb = E ? Symbol.for("react.block") : 60121, mb = "function" === typeof Symbol && Symbol.iterator;
    function nb(a) {
      if (null === a || "object" !== typeof a) return null;
      a = mb && a[mb] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    function ob(a) {
      if (-1 === a._status) {
        a._status = 0;
        var b2 = a._ctor;
        b2 = b2();
        a._result = b2;
        b2.then(function(b3) {
          0 === a._status && (b3 = b3.default, a._status = 1, a._result = b3);
        }, function(b3) {
          0 === a._status && (a._status = 2, a._result = b3);
        });
      }
    }
    function pb(a) {
      if (null == a) return null;
      if ("function" === typeof a) return a.displayName || a.name || null;
      if ("string" === typeof a) return a;
      switch (a) {
        case ab:
          return "Fragment";
        case $a:
          return "Portal";
        case cb:
          return "Profiler";
        case bb:
          return "StrictMode";
        case hb:
          return "Suspense";
        case ib:
          return "SuspenseList";
      }
      if ("object" === typeof a) switch (a.$$typeof) {
        case eb:
          return "Context.Consumer";
        case db:
          return "Context.Provider";
        case gb:
          var b2 = a.render;
          b2 = b2.displayName || b2.name || "";
          return a.displayName || ("" !== b2 ? "ForwardRef(" + b2 + ")" : "ForwardRef");
        case jb:
          return pb(a.type);
        case lb:
          return pb(a.render);
        case kb:
          if (a = 1 === a._status ? a._result : null) return pb(a);
      }
      return null;
    }
    function qb(a) {
      var b2 = "";
      do {
        a: switch (a.tag) {
          case 3:
          case 4:
          case 6:
          case 7:
          case 10:
          case 9:
            var c2 = "";
            break a;
          default:
            var d2 = a._debugOwner, e2 = a._debugSource, f2 = pb(a.type);
            c2 = null;
            d2 && (c2 = pb(d2.type));
            d2 = f2;
            f2 = "";
            e2 ? f2 = " (at " + e2.fileName.replace(Ya, "") + ":" + e2.lineNumber + ")" : c2 && (f2 = " (created by " + c2 + ")");
            c2 = "\n    in " + (d2 || "Unknown") + f2;
        }
        b2 += c2;
        a = a.return;
      } while (a);
      return b2;
    }
    function rb(a) {
      switch (typeof a) {
        case "boolean":
        case "number":
        case "object":
        case "string":
        case "undefined":
          return a;
        default:
          return "";
      }
    }
    function sb(a) {
      var b2 = a.type;
      return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
    }
    function tb(a) {
      var b2 = sb(a) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a.constructor.prototype, b2), d2 = "" + a[b2];
      if (!a.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
        var e2 = c2.get, f2 = c2.set;
        Object.defineProperty(a, b2, { configurable: true, get: function() {
          return e2.call(this);
        }, set: function(a2) {
          d2 = "" + a2;
          f2.call(this, a2);
        } });
        Object.defineProperty(a, b2, { enumerable: c2.enumerable });
        return { getValue: function() {
          return d2;
        }, setValue: function(a2) {
          d2 = "" + a2;
        }, stopTracking: function() {
          a._valueTracker = null;
          delete a[b2];
        } };
      }
    }
    function xb(a) {
      a._valueTracker || (a._valueTracker = tb(a));
    }
    function yb(a) {
      if (!a) return false;
      var b2 = a._valueTracker;
      if (!b2) return true;
      var c2 = b2.getValue();
      var d2 = "";
      a && (d2 = sb(a) ? a.checked ? "true" : "false" : a.value);
      a = d2;
      return a !== c2 ? (b2.setValue(a), true) : false;
    }
    function zb(a, b2) {
      var c2 = b2.checked;
      return n$4({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a._wrapperState.initialChecked });
    }
    function Ab(a, b2) {
      var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
      c2 = rb(null != b2.value ? b2.value : c2);
      a._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
    }
    function Bb(a, b2) {
      b2 = b2.checked;
      null != b2 && Xa(a, "checked", b2, false);
    }
    function Cb(a, b2) {
      Bb(a, b2);
      var c2 = rb(b2.value), d2 = b2.type;
      if (null != c2) if ("number" === d2) {
        if (0 === c2 && "" === a.value || a.value != c2) a.value = "" + c2;
      } else a.value !== "" + c2 && (a.value = "" + c2);
      else if ("submit" === d2 || "reset" === d2) {
        a.removeAttribute("value");
        return;
      }
      b2.hasOwnProperty("value") ? Db(a, b2.type, c2) : b2.hasOwnProperty("defaultValue") && Db(a, b2.type, rb(b2.defaultValue));
      null == b2.checked && null != b2.defaultChecked && (a.defaultChecked = !!b2.defaultChecked);
    }
    function Eb(a, b2, c2) {
      if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
        var d2 = b2.type;
        if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value)) return;
        b2 = "" + a._wrapperState.initialValue;
        c2 || b2 === a.value || (a.value = b2);
        a.defaultValue = b2;
      }
      c2 = a.name;
      "" !== c2 && (a.name = "");
      a.defaultChecked = !!a._wrapperState.initialChecked;
      "" !== c2 && (a.name = c2);
    }
    function Db(a, b2, c2) {
      if ("number" !== b2 || a.ownerDocument.activeElement !== a) null == c2 ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c2 && (a.defaultValue = "" + c2);
    }
    function Fb(a) {
      var b2 = "";
      aa.Children.forEach(a, function(a2) {
        null != a2 && (b2 += a2);
      });
      return b2;
    }
    function Gb(a, b2) {
      a = n$4({ children: void 0 }, b2);
      if (b2 = Fb(b2.children)) a.children = b2;
      return a;
    }
    function Hb(a, b2, c2, d2) {
      a = a.options;
      if (b2) {
        b2 = {};
        for (var e2 = 0; e2 < c2.length; e2++) b2["$" + c2[e2]] = true;
        for (c2 = 0; c2 < a.length; c2++) e2 = b2.hasOwnProperty("$" + a[c2].value), a[c2].selected !== e2 && (a[c2].selected = e2), e2 && d2 && (a[c2].defaultSelected = true);
      } else {
        c2 = "" + rb(c2);
        b2 = null;
        for (e2 = 0; e2 < a.length; e2++) {
          if (a[e2].value === c2) {
            a[e2].selected = true;
            d2 && (a[e2].defaultSelected = true);
            return;
          }
          null !== b2 || a[e2].disabled || (b2 = a[e2]);
        }
        null !== b2 && (b2.selected = true);
      }
    }
    function Ib(a, b2) {
      if (null != b2.dangerouslySetInnerHTML) throw Error(u$3(91));
      return n$4({}, b2, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
    }
    function Jb(a, b2) {
      var c2 = b2.value;
      if (null == c2) {
        c2 = b2.children;
        b2 = b2.defaultValue;
        if (null != c2) {
          if (null != b2) throw Error(u$3(92));
          if (Array.isArray(c2)) {
            if (!(1 >= c2.length)) throw Error(u$3(93));
            c2 = c2[0];
          }
          b2 = c2;
        }
        null == b2 && (b2 = "");
        c2 = b2;
      }
      a._wrapperState = { initialValue: rb(c2) };
    }
    function Kb(a, b2) {
      var c2 = rb(b2.value), d2 = rb(b2.defaultValue);
      null != c2 && (c2 = "" + c2, c2 !== a.value && (a.value = c2), null == b2.defaultValue && a.defaultValue !== c2 && (a.defaultValue = c2));
      null != d2 && (a.defaultValue = "" + d2);
    }
    function Lb(a) {
      var b2 = a.textContent;
      b2 === a._wrapperState.initialValue && "" !== b2 && null !== b2 && (a.value = b2);
    }
    var Mb = { html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg" };
    function Nb(a) {
      switch (a) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function Ob(a, b2) {
      return null == a || "http://www.w3.org/1999/xhtml" === a ? Nb(b2) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a;
    }
    var Pb, Qb = function(a) {
      return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e2) {
        MSApp.execUnsafeLocalFunction(function() {
          return a(b2, c2, d2, e2);
        });
      } : a;
    }(function(a, b2) {
      if (a.namespaceURI !== Mb.svg || "innerHTML" in a) a.innerHTML = b2;
      else {
        Pb = Pb || document.createElement("div");
        Pb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
        for (b2 = Pb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
        for (; b2.firstChild; ) a.appendChild(b2.firstChild);
      }
    });
    function Rb(a, b2) {
      if (b2) {
        var c2 = a.firstChild;
        if (c2 && c2 === a.lastChild && 3 === c2.nodeType) {
          c2.nodeValue = b2;
          return;
        }
      }
      a.textContent = b2;
    }
    function Sb(a, b2) {
      var c2 = {};
      c2[a.toLowerCase()] = b2.toLowerCase();
      c2["Webkit" + a] = "webkit" + b2;
      c2["Moz" + a] = "moz" + b2;
      return c2;
    }
    var Tb = { animationend: Sb("Animation", "AnimationEnd"), animationiteration: Sb("Animation", "AnimationIteration"), animationstart: Sb("Animation", "AnimationStart"), transitionend: Sb("Transition", "TransitionEnd") }, Ub = {}, Vb = {};
    ya && (Vb = document.createElement("div").style, "AnimationEvent" in window || (delete Tb.animationend.animation, delete Tb.animationiteration.animation, delete Tb.animationstart.animation), "TransitionEvent" in window || delete Tb.transitionend.transition);
    function Wb(a) {
      if (Ub[a]) return Ub[a];
      if (!Tb[a]) return a;
      var b2 = Tb[a], c2;
      for (c2 in b2) if (b2.hasOwnProperty(c2) && c2 in Vb) return Ub[a] = b2[c2];
      return a;
    }
    var Xb = Wb("animationend"), Yb = Wb("animationiteration"), Zb = Wb("animationstart"), $b = Wb("transitionend"), ac = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), bc = new ("function" === typeof WeakMap ? WeakMap : Map)();
    function cc(a) {
      var b2 = bc.get(a);
      void 0 === b2 && (b2 = /* @__PURE__ */ new Map(), bc.set(a, b2));
      return b2;
    }
    function dc(a) {
      var b2 = a, c2 = a;
      if (a.alternate) for (; b2.return; ) b2 = b2.return;
      else {
        a = b2;
        do
          b2 = a, 0 !== (b2.effectTag & 1026) && (c2 = b2.return), a = b2.return;
        while (a);
      }
      return 3 === b2.tag ? c2 : null;
    }
    function ec(a) {
      if (13 === a.tag) {
        var b2 = a.memoizedState;
        null === b2 && (a = a.alternate, null !== a && (b2 = a.memoizedState));
        if (null !== b2) return b2.dehydrated;
      }
      return null;
    }
    function fc(a) {
      if (dc(a) !== a) throw Error(u$3(188));
    }
    function gc(a) {
      var b2 = a.alternate;
      if (!b2) {
        b2 = dc(a);
        if (null === b2) throw Error(u$3(188));
        return b2 !== a ? null : a;
      }
      for (var c2 = a, d2 = b2; ; ) {
        var e2 = c2.return;
        if (null === e2) break;
        var f2 = e2.alternate;
        if (null === f2) {
          d2 = e2.return;
          if (null !== d2) {
            c2 = d2;
            continue;
          }
          break;
        }
        if (e2.child === f2.child) {
          for (f2 = e2.child; f2; ) {
            if (f2 === c2) return fc(e2), a;
            if (f2 === d2) return fc(e2), b2;
            f2 = f2.sibling;
          }
          throw Error(u$3(188));
        }
        if (c2.return !== d2.return) c2 = e2, d2 = f2;
        else {
          for (var g2 = false, h2 = e2.child; h2; ) {
            if (h2 === c2) {
              g2 = true;
              c2 = e2;
              d2 = f2;
              break;
            }
            if (h2 === d2) {
              g2 = true;
              d2 = e2;
              c2 = f2;
              break;
            }
            h2 = h2.sibling;
          }
          if (!g2) {
            for (h2 = f2.child; h2; ) {
              if (h2 === c2) {
                g2 = true;
                c2 = f2;
                d2 = e2;
                break;
              }
              if (h2 === d2) {
                g2 = true;
                d2 = f2;
                c2 = e2;
                break;
              }
              h2 = h2.sibling;
            }
            if (!g2) throw Error(u$3(189));
          }
        }
        if (c2.alternate !== d2) throw Error(u$3(190));
      }
      if (3 !== c2.tag) throw Error(u$3(188));
      return c2.stateNode.current === c2 ? a : b2;
    }
    function hc(a) {
      a = gc(a);
      if (!a) return null;
      for (var b2 = a; ; ) {
        if (5 === b2.tag || 6 === b2.tag) return b2;
        if (b2.child) b2.child.return = b2, b2 = b2.child;
        else {
          if (b2 === a) break;
          for (; !b2.sibling; ) {
            if (!b2.return || b2.return === a) return null;
            b2 = b2.return;
          }
          b2.sibling.return = b2.return;
          b2 = b2.sibling;
        }
      }
      return null;
    }
    function ic(a, b2) {
      if (null == b2) throw Error(u$3(30));
      if (null == a) return b2;
      if (Array.isArray(a)) {
        if (Array.isArray(b2)) return a.push.apply(a, b2), a;
        a.push(b2);
        return a;
      }
      return Array.isArray(b2) ? [a].concat(b2) : [a, b2];
    }
    function jc(a, b2, c2) {
      Array.isArray(a) ? a.forEach(b2, c2) : a && b2.call(c2, a);
    }
    var kc = null;
    function lc(a) {
      if (a) {
        var b2 = a._dispatchListeners, c2 = a._dispatchInstances;
        if (Array.isArray(b2)) for (var d2 = 0; d2 < b2.length && !a.isPropagationStopped(); d2++) oa(a, b2[d2], c2[d2]);
        else b2 && oa(a, b2, c2);
        a._dispatchListeners = null;
        a._dispatchInstances = null;
        a.isPersistent() || a.constructor.release(a);
      }
    }
    function mc(a) {
      null !== a && (kc = ic(kc, a));
      a = kc;
      kc = null;
      if (a) {
        jc(a, lc);
        if (kc) throw Error(u$3(95));
        if (fa) throw a = ha, fa = false, ha = null, a;
      }
    }
    function nc(a) {
      a = a.target || a.srcElement || window;
      a.correspondingUseElement && (a = a.correspondingUseElement);
      return 3 === a.nodeType ? a.parentNode : a;
    }
    function oc(a) {
      if (!ya) return false;
      a = "on" + a;
      var b2 = a in document;
      b2 || (b2 = document.createElement("div"), b2.setAttribute(a, "return;"), b2 = "function" === typeof b2[a]);
      return b2;
    }
    var pc = [];
    function qc(a) {
      a.topLevelType = null;
      a.nativeEvent = null;
      a.targetInst = null;
      a.ancestors.length = 0;
      10 > pc.length && pc.push(a);
    }
    function rc(a, b2, c2, d2) {
      if (pc.length) {
        var e2 = pc.pop();
        e2.topLevelType = a;
        e2.eventSystemFlags = d2;
        e2.nativeEvent = b2;
        e2.targetInst = c2;
        return e2;
      }
      return { topLevelType: a, eventSystemFlags: d2, nativeEvent: b2, targetInst: c2, ancestors: [] };
    }
    function sc(a) {
      var b2 = a.targetInst, c2 = b2;
      do {
        if (!c2) {
          a.ancestors.push(c2);
          break;
        }
        var d2 = c2;
        if (3 === d2.tag) d2 = d2.stateNode.containerInfo;
        else {
          for (; d2.return; ) d2 = d2.return;
          d2 = 3 !== d2.tag ? null : d2.stateNode.containerInfo;
        }
        if (!d2) break;
        b2 = c2.tag;
        5 !== b2 && 6 !== b2 || a.ancestors.push(c2);
        c2 = tc(d2);
      } while (c2);
      for (c2 = 0; c2 < a.ancestors.length; c2++) {
        b2 = a.ancestors[c2];
        var e2 = nc(a.nativeEvent);
        d2 = a.topLevelType;
        var f2 = a.nativeEvent, g2 = a.eventSystemFlags;
        0 === c2 && (g2 |= 64);
        for (var h2 = null, k2 = 0; k2 < sa.length; k2++) {
          var l2 = sa[k2];
          l2 && (l2 = l2.extractEvents(d2, b2, f2, e2, g2)) && (h2 = ic(h2, l2));
        }
        mc(h2);
      }
    }
    function uc(a, b2, c2) {
      if (!c2.has(a)) {
        switch (a) {
          case "scroll":
            vc(b2, "scroll", true);
            break;
          case "focus":
          case "blur":
            vc(b2, "focus", true);
            vc(b2, "blur", true);
            c2.set("blur", null);
            c2.set("focus", null);
            break;
          case "cancel":
          case "close":
            oc(a) && vc(b2, a, true);
            break;
          case "invalid":
          case "submit":
          case "reset":
            break;
          default:
            -1 === ac.indexOf(a) && F(a, b2);
        }
        c2.set(a, null);
      }
    }
    var wc, xc, yc, zc = false, Ac = [], Bc = null, Cc = null, Dc = null, Ec = /* @__PURE__ */ new Map(), Fc = /* @__PURE__ */ new Map(), Gc = [], Hc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "), Ic = "focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");
    function Jc(a, b2) {
      var c2 = cc(b2);
      Hc.forEach(function(a2) {
        uc(a2, b2, c2);
      });
      Ic.forEach(function(a2) {
        uc(a2, b2, c2);
      });
    }
    function Kc(a, b2, c2, d2, e2) {
      return { blockedOn: a, topLevelType: b2, eventSystemFlags: c2 | 32, nativeEvent: e2, container: d2 };
    }
    function Lc(a, b2) {
      switch (a) {
        case "focus":
        case "blur":
          Bc = null;
          break;
        case "dragenter":
        case "dragleave":
          Cc = null;
          break;
        case "mouseover":
        case "mouseout":
          Dc = null;
          break;
        case "pointerover":
        case "pointerout":
          Ec.delete(b2.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          Fc.delete(b2.pointerId);
      }
    }
    function Mc(a, b2, c2, d2, e2, f2) {
      if (null === a || a.nativeEvent !== f2) return a = Kc(b2, c2, d2, e2, f2), null !== b2 && (b2 = Nc(b2), null !== b2 && xc(b2)), a;
      a.eventSystemFlags |= d2;
      return a;
    }
    function Oc(a, b2, c2, d2, e2) {
      switch (b2) {
        case "focus":
          return Bc = Mc(Bc, a, b2, c2, d2, e2), true;
        case "dragenter":
          return Cc = Mc(Cc, a, b2, c2, d2, e2), true;
        case "mouseover":
          return Dc = Mc(Dc, a, b2, c2, d2, e2), true;
        case "pointerover":
          var f2 = e2.pointerId;
          Ec.set(f2, Mc(Ec.get(f2) || null, a, b2, c2, d2, e2));
          return true;
        case "gotpointercapture":
          return f2 = e2.pointerId, Fc.set(f2, Mc(Fc.get(f2) || null, a, b2, c2, d2, e2)), true;
      }
      return false;
    }
    function Pc(a) {
      var b2 = tc(a.target);
      if (null !== b2) {
        var c2 = dc(b2);
        if (null !== c2) {
          if (b2 = c2.tag, 13 === b2) {
            if (b2 = ec(c2), null !== b2) {
              a.blockedOn = b2;
              r$3.unstable_runWithPriority(a.priority, function() {
                yc(c2);
              });
              return;
            }
          } else if (3 === b2 && c2.stateNode.hydrate) {
            a.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a.blockedOn = null;
    }
    function Qc(a) {
      if (null !== a.blockedOn) return false;
      var b2 = Rc(a.topLevelType, a.eventSystemFlags, a.container, a.nativeEvent);
      if (null !== b2) {
        var c2 = Nc(b2);
        null !== c2 && xc(c2);
        a.blockedOn = b2;
        return false;
      }
      return true;
    }
    function Sc(a, b2, c2) {
      Qc(a) && c2.delete(b2);
    }
    function Tc() {
      for (zc = false; 0 < Ac.length; ) {
        var a = Ac[0];
        if (null !== a.blockedOn) {
          a = Nc(a.blockedOn);
          null !== a && wc(a);
          break;
        }
        var b2 = Rc(a.topLevelType, a.eventSystemFlags, a.container, a.nativeEvent);
        null !== b2 ? a.blockedOn = b2 : Ac.shift();
      }
      null !== Bc && Qc(Bc) && (Bc = null);
      null !== Cc && Qc(Cc) && (Cc = null);
      null !== Dc && Qc(Dc) && (Dc = null);
      Ec.forEach(Sc);
      Fc.forEach(Sc);
    }
    function Uc(a, b2) {
      a.blockedOn === b2 && (a.blockedOn = null, zc || (zc = true, r$3.unstable_scheduleCallback(r$3.unstable_NormalPriority, Tc)));
    }
    function Vc(a) {
      function b2(b3) {
        return Uc(b3, a);
      }
      if (0 < Ac.length) {
        Uc(Ac[0], a);
        for (var c2 = 1; c2 < Ac.length; c2++) {
          var d2 = Ac[c2];
          d2.blockedOn === a && (d2.blockedOn = null);
        }
      }
      null !== Bc && Uc(Bc, a);
      null !== Cc && Uc(Cc, a);
      null !== Dc && Uc(Dc, a);
      Ec.forEach(b2);
      Fc.forEach(b2);
      for (c2 = 0; c2 < Gc.length; c2++) d2 = Gc[c2], d2.blockedOn === a && (d2.blockedOn = null);
      for (; 0 < Gc.length && (c2 = Gc[0], null === c2.blockedOn); ) Pc(c2), null === c2.blockedOn && Gc.shift();
    }
    var Wc = {}, Yc = /* @__PURE__ */ new Map(), Zc = /* @__PURE__ */ new Map(), $c = [
      "abort",
      "abort",
      Xb,
      "animationEnd",
      Yb,
      "animationIteration",
      Zb,
      "animationStart",
      "canplay",
      "canPlay",
      "canplaythrough",
      "canPlayThrough",
      "durationchange",
      "durationChange",
      "emptied",
      "emptied",
      "encrypted",
      "encrypted",
      "ended",
      "ended",
      "error",
      "error",
      "gotpointercapture",
      "gotPointerCapture",
      "load",
      "load",
      "loadeddata",
      "loadedData",
      "loadedmetadata",
      "loadedMetadata",
      "loadstart",
      "loadStart",
      "lostpointercapture",
      "lostPointerCapture",
      "playing",
      "playing",
      "progress",
      "progress",
      "seeking",
      "seeking",
      "stalled",
      "stalled",
      "suspend",
      "suspend",
      "timeupdate",
      "timeUpdate",
      $b,
      "transitionEnd",
      "waiting",
      "waiting"
    ];
    function ad(a, b2) {
      for (var c2 = 0; c2 < a.length; c2 += 2) {
        var d2 = a[c2], e2 = a[c2 + 1], f2 = "on" + (e2[0].toUpperCase() + e2.slice(1));
        f2 = { phasedRegistrationNames: { bubbled: f2, captured: f2 + "Capture" }, dependencies: [d2], eventPriority: b2 };
        Zc.set(d2, b2);
        Yc.set(d2, f2);
        Wc[e2] = f2;
      }
    }
    ad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
    ad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
    ad($c, 2);
    for (var bd = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), cd = 0; cd < bd.length; cd++) Zc.set(bd[cd], 0);
    var dd = r$3.unstable_UserBlockingPriority, ed = r$3.unstable_runWithPriority, fd = true;
    function F(a, b2) {
      vc(b2, a, false);
    }
    function vc(a, b2, c2) {
      var d2 = Zc.get(b2);
      switch (void 0 === d2 ? 2 : d2) {
        case 0:
          d2 = gd.bind(null, b2, 1, a);
          break;
        case 1:
          d2 = hd.bind(null, b2, 1, a);
          break;
        default:
          d2 = id.bind(null, b2, 1, a);
      }
      c2 ? a.addEventListener(b2, d2, true) : a.addEventListener(b2, d2, false);
    }
    function gd(a, b2, c2, d2) {
      Ja || Ha();
      var e2 = id, f2 = Ja;
      Ja = true;
      try {
        Ga(e2, a, b2, c2, d2);
      } finally {
        (Ja = f2) || La();
      }
    }
    function hd(a, b2, c2, d2) {
      ed(dd, id.bind(null, a, b2, c2, d2));
    }
    function id(a, b2, c2, d2) {
      if (fd) if (0 < Ac.length && -1 < Hc.indexOf(a)) a = Kc(null, a, b2, c2, d2), Ac.push(a);
      else {
        var e2 = Rc(a, b2, c2, d2);
        if (null === e2) Lc(a, d2);
        else if (-1 < Hc.indexOf(a)) a = Kc(e2, a, b2, c2, d2), Ac.push(a);
        else if (!Oc(e2, a, b2, c2, d2)) {
          Lc(a, d2);
          a = rc(a, d2, null, b2);
          try {
            Ma(sc, a);
          } finally {
            qc(a);
          }
        }
      }
    }
    function Rc(a, b2, c2, d2) {
      c2 = nc(d2);
      c2 = tc(c2);
      if (null !== c2) {
        var e2 = dc(c2);
        if (null === e2) c2 = null;
        else {
          var f2 = e2.tag;
          if (13 === f2) {
            c2 = ec(e2);
            if (null !== c2) return c2;
            c2 = null;
          } else if (3 === f2) {
            if (e2.stateNode.hydrate) return 3 === e2.tag ? e2.stateNode.containerInfo : null;
            c2 = null;
          } else e2 !== c2 && (c2 = null);
        }
      }
      a = rc(a, d2, c2, b2);
      try {
        Ma(sc, a);
      } finally {
        qc(a);
      }
      return null;
    }
    var jd = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    }, kd = ["Webkit", "ms", "Moz", "O"];
    Object.keys(jd).forEach(function(a) {
      kd.forEach(function(b2) {
        b2 = b2 + a.charAt(0).toUpperCase() + a.substring(1);
        jd[b2] = jd[a];
      });
    });
    function ld(a, b2, c2) {
      return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || jd.hasOwnProperty(a) && jd[a] ? ("" + b2).trim() : b2 + "px";
    }
    function md(a, b2) {
      a = a.style;
      for (var c2 in b2) if (b2.hasOwnProperty(c2)) {
        var d2 = 0 === c2.indexOf("--"), e2 = ld(c2, b2[c2], d2);
        "float" === c2 && (c2 = "cssFloat");
        d2 ? a.setProperty(c2, e2) : a[c2] = e2;
      }
    }
    var nd = n$4({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
    function od(a, b2) {
      if (b2) {
        if (nd[a] && (null != b2.children || null != b2.dangerouslySetInnerHTML)) throw Error(u$3(137, a, ""));
        if (null != b2.dangerouslySetInnerHTML) {
          if (null != b2.children) throw Error(u$3(60));
          if (!("object" === typeof b2.dangerouslySetInnerHTML && "__html" in b2.dangerouslySetInnerHTML)) throw Error(u$3(61));
        }
        if (null != b2.style && "object" !== typeof b2.style) throw Error(u$3(62, ""));
      }
    }
    function pd(a, b2) {
      if (-1 === a.indexOf("-")) return "string" === typeof b2.is;
      switch (a) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var qd = Mb.html;
    function rd(a, b2) {
      a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument;
      var c2 = cc(a);
      b2 = wa[b2];
      for (var d2 = 0; d2 < b2.length; d2++) uc(b2[d2], a, c2);
    }
    function sd() {
    }
    function td(a) {
      a = a || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof a) return null;
      try {
        return a.activeElement || a.body;
      } catch (b2) {
        return a.body;
      }
    }
    function ud(a) {
      for (; a && a.firstChild; ) a = a.firstChild;
      return a;
    }
    function vd(a, b2) {
      var c2 = ud(a);
      a = 0;
      for (var d2; c2; ) {
        if (3 === c2.nodeType) {
          d2 = a + c2.textContent.length;
          if (a <= b2 && d2 >= b2) return { node: c2, offset: b2 - a };
          a = d2;
        }
        a: {
          for (; c2; ) {
            if (c2.nextSibling) {
              c2 = c2.nextSibling;
              break a;
            }
            c2 = c2.parentNode;
          }
          c2 = void 0;
        }
        c2 = ud(c2);
      }
    }
    function wd(a, b2) {
      return a && b2 ? a === b2 ? true : a && 3 === a.nodeType ? false : b2 && 3 === b2.nodeType ? wd(a, b2.parentNode) : "contains" in a ? a.contains(b2) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b2) & 16) : false : false;
    }
    function xd() {
      for (var a = window, b2 = td(); b2 instanceof a.HTMLIFrameElement; ) {
        try {
          var c2 = "string" === typeof b2.contentWindow.location.href;
        } catch (d2) {
          c2 = false;
        }
        if (c2) a = b2.contentWindow;
        else break;
        b2 = td(a.document);
      }
      return b2;
    }
    function yd(a) {
      var b2 = a && a.nodeName && a.nodeName.toLowerCase();
      return b2 && ("input" === b2 && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b2 || "true" === a.contentEditable);
    }
    var zd = "$", Ad = "/$", Bd = "$?", Cd = "$!", Dd = null, Ed = null;
    function Fd(a, b2) {
      switch (a) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!b2.autoFocus;
      }
      return false;
    }
    function Gd(a, b2) {
      return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
    }
    var Hd = "function" === typeof setTimeout ? setTimeout : void 0, Id = "function" === typeof clearTimeout ? clearTimeout : void 0;
    function Jd(a) {
      for (; null != a; a = a.nextSibling) {
        var b2 = a.nodeType;
        if (1 === b2 || 3 === b2) break;
      }
      return a;
    }
    function Kd(a) {
      a = a.previousSibling;
      for (var b2 = 0; a; ) {
        if (8 === a.nodeType) {
          var c2 = a.data;
          if (c2 === zd || c2 === Cd || c2 === Bd) {
            if (0 === b2) return a;
            b2--;
          } else c2 === Ad && b2++;
        }
        a = a.previousSibling;
      }
      return null;
    }
    var Ld = Math.random().toString(36).slice(2), Md = "__reactInternalInstance$" + Ld, Nd = "__reactEventHandlers$" + Ld, Od = "__reactContainere$" + Ld;
    function tc(a) {
      var b2 = a[Md];
      if (b2) return b2;
      for (var c2 = a.parentNode; c2; ) {
        if (b2 = c2[Od] || c2[Md]) {
          c2 = b2.alternate;
          if (null !== b2.child || null !== c2 && null !== c2.child) for (a = Kd(a); null !== a; ) {
            if (c2 = a[Md]) return c2;
            a = Kd(a);
          }
          return b2;
        }
        a = c2;
        c2 = a.parentNode;
      }
      return null;
    }
    function Nc(a) {
      a = a[Md] || a[Od];
      return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
    }
    function Pd(a) {
      if (5 === a.tag || 6 === a.tag) return a.stateNode;
      throw Error(u$3(33));
    }
    function Qd(a) {
      return a[Nd] || null;
    }
    function Rd(a) {
      do
        a = a.return;
      while (a && 5 !== a.tag);
      return a ? a : null;
    }
    function Sd(a, b2) {
      var c2 = a.stateNode;
      if (!c2) return null;
      var d2 = la(c2);
      if (!d2) return null;
      c2 = d2[b2];
      a: switch (b2) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (d2 = !d2.disabled) || (a = a.type, d2 = !("button" === a || "input" === a || "select" === a || "textarea" === a));
          a = !d2;
          break a;
        default:
          a = false;
      }
      if (a) return null;
      if (c2 && "function" !== typeof c2) throw Error(u$3(
        231,
        b2,
        typeof c2
      ));
      return c2;
    }
    function Td(a, b2, c2) {
      if (b2 = Sd(a, c2.dispatchConfig.phasedRegistrationNames[b2])) c2._dispatchListeners = ic(c2._dispatchListeners, b2), c2._dispatchInstances = ic(c2._dispatchInstances, a);
    }
    function Ud(a) {
      if (a && a.dispatchConfig.phasedRegistrationNames) {
        for (var b2 = a._targetInst, c2 = []; b2; ) c2.push(b2), b2 = Rd(b2);
        for (b2 = c2.length; 0 < b2--; ) Td(c2[b2], "captured", a);
        for (b2 = 0; b2 < c2.length; b2++) Td(c2[b2], "bubbled", a);
      }
    }
    function Vd(a, b2, c2) {
      a && c2 && c2.dispatchConfig.registrationName && (b2 = Sd(a, c2.dispatchConfig.registrationName)) && (c2._dispatchListeners = ic(c2._dispatchListeners, b2), c2._dispatchInstances = ic(c2._dispatchInstances, a));
    }
    function Wd(a) {
      a && a.dispatchConfig.registrationName && Vd(a._targetInst, null, a);
    }
    function Xd(a) {
      jc(a, Ud);
    }
    var Yd = null, Zd = null, $d = null;
    function ae() {
      if ($d) return $d;
      var a, b2 = Zd, c2 = b2.length, d2, e2 = "value" in Yd ? Yd.value : Yd.textContent, f2 = e2.length;
      for (a = 0; a < c2 && b2[a] === e2[a]; a++) ;
      var g2 = c2 - a;
      for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e2[f2 - d2]; d2++) ;
      return $d = e2.slice(a, 1 < d2 ? 1 - d2 : void 0);
    }
    function be() {
      return true;
    }
    function ce() {
      return false;
    }
    function G(a, b2, c2, d2) {
      this.dispatchConfig = a;
      this._targetInst = b2;
      this.nativeEvent = c2;
      a = this.constructor.Interface;
      for (var e2 in a) a.hasOwnProperty(e2) && ((b2 = a[e2]) ? this[e2] = b2(c2) : "target" === e2 ? this.target = d2 : this[e2] = c2[e2]);
      this.isDefaultPrevented = (null != c2.defaultPrevented ? c2.defaultPrevented : false === c2.returnValue) ? be : ce;
      this.isPropagationStopped = ce;
      return this;
    }
    n$4(G.prototype, { preventDefault: function() {
      this.defaultPrevented = true;
      var a = this.nativeEvent;
      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = false), this.isDefaultPrevented = be);
    }, stopPropagation: function() {
      var a = this.nativeEvent;
      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = true), this.isPropagationStopped = be);
    }, persist: function() {
      this.isPersistent = be;
    }, isPersistent: ce, destructor: function() {
      var a = this.constructor.Interface, b2;
      for (b2 in a) this[b2] = null;
      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = ce;
      this._dispatchInstances = this._dispatchListeners = null;
    } });
    G.Interface = { type: null, target: null, currentTarget: function() {
      return null;
    }, eventPhase: null, bubbles: null, cancelable: null, timeStamp: function(a) {
      return a.timeStamp || Date.now();
    }, defaultPrevented: null, isTrusted: null };
    G.extend = function(a) {
      function b2() {
      }
      function c2() {
        return d2.apply(this, arguments);
      }
      var d2 = this;
      b2.prototype = d2.prototype;
      var e2 = new b2();
      n$4(e2, c2.prototype);
      c2.prototype = e2;
      c2.prototype.constructor = c2;
      c2.Interface = n$4({}, d2.Interface, a);
      c2.extend = d2.extend;
      de(c2);
      return c2;
    };
    de(G);
    function ee(a, b2, c2, d2) {
      if (this.eventPool.length) {
        var e2 = this.eventPool.pop();
        this.call(e2, a, b2, c2, d2);
        return e2;
      }
      return new this(a, b2, c2, d2);
    }
    function fe(a) {
      if (!(a instanceof this)) throw Error(u$3(279));
      a.destructor();
      10 > this.eventPool.length && this.eventPool.push(a);
    }
    function de(a) {
      a.eventPool = [];
      a.getPooled = ee;
      a.release = fe;
    }
    var ge = G.extend({ data: null }), he = G.extend({ data: null }), ie = [9, 13, 27, 32], je = ya && "CompositionEvent" in window, ke = null;
    ya && "documentMode" in document && (ke = document.documentMode);
    var le = ya && "TextEvent" in window && !ke, me = ya && (!je || ke && 8 < ke && 11 >= ke), ne = String.fromCharCode(32), oe = { beforeInput: { phasedRegistrationNames: { bubbled: "onBeforeInput", captured: "onBeforeInputCapture" }, dependencies: ["compositionend", "keypress", "textInput", "paste"] }, compositionEnd: { phasedRegistrationNames: { bubbled: "onCompositionEnd", captured: "onCompositionEndCapture" }, dependencies: "blur compositionend keydown keypress keyup mousedown".split(" ") }, compositionStart: { phasedRegistrationNames: {
      bubbled: "onCompositionStart",
      captured: "onCompositionStartCapture"
    }, dependencies: "blur compositionstart keydown keypress keyup mousedown".split(" ") }, compositionUpdate: { phasedRegistrationNames: { bubbled: "onCompositionUpdate", captured: "onCompositionUpdateCapture" }, dependencies: "blur compositionupdate keydown keypress keyup mousedown".split(" ") } }, pe = false;
    function qe(a, b2) {
      switch (a) {
        case "keyup":
          return -1 !== ie.indexOf(b2.keyCode);
        case "keydown":
          return 229 !== b2.keyCode;
        case "keypress":
        case "mousedown":
        case "blur":
          return true;
        default:
          return false;
      }
    }
    function re(a) {
      a = a.detail;
      return "object" === typeof a && "data" in a ? a.data : null;
    }
    var se = false;
    function te(a, b2) {
      switch (a) {
        case "compositionend":
          return re(b2);
        case "keypress":
          if (32 !== b2.which) return null;
          pe = true;
          return ne;
        case "textInput":
          return a = b2.data, a === ne && pe ? null : a;
        default:
          return null;
      }
    }
    function ue(a, b2) {
      if (se) return "compositionend" === a || !je && qe(a, b2) ? (a = ae(), $d = Zd = Yd = null, se = false, a) : null;
      switch (a) {
        case "paste":
          return null;
        case "keypress":
          if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
            if (b2.char && 1 < b2.char.length) return b2.char;
            if (b2.which) return String.fromCharCode(b2.which);
          }
          return null;
        case "compositionend":
          return me && "ko" !== b2.locale ? null : b2.data;
        default:
          return null;
      }
    }
    var ve = { eventTypes: oe, extractEvents: function(a, b2, c2, d2) {
      var e2;
      if (je) b: {
        switch (a) {
          case "compositionstart":
            var f2 = oe.compositionStart;
            break b;
          case "compositionend":
            f2 = oe.compositionEnd;
            break b;
          case "compositionupdate":
            f2 = oe.compositionUpdate;
            break b;
        }
        f2 = void 0;
      }
      else se ? qe(a, c2) && (f2 = oe.compositionEnd) : "keydown" === a && 229 === c2.keyCode && (f2 = oe.compositionStart);
      f2 ? (me && "ko" !== c2.locale && (se || f2 !== oe.compositionStart ? f2 === oe.compositionEnd && se && (e2 = ae()) : (Yd = d2, Zd = "value" in Yd ? Yd.value : Yd.textContent, se = true)), f2 = ge.getPooled(
        f2,
        b2,
        c2,
        d2
      ), e2 ? f2.data = e2 : (e2 = re(c2), null !== e2 && (f2.data = e2)), Xd(f2), e2 = f2) : e2 = null;
      (a = le ? te(a, c2) : ue(a, c2)) ? (b2 = he.getPooled(oe.beforeInput, b2, c2, d2), b2.data = a, Xd(b2)) : b2 = null;
      return null === e2 ? b2 : null === b2 ? e2 : [e2, b2];
    } }, we = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function xe(a) {
      var b2 = a && a.nodeName && a.nodeName.toLowerCase();
      return "input" === b2 ? !!we[a.type] : "textarea" === b2 ? true : false;
    }
    var ye = { change: { phasedRegistrationNames: { bubbled: "onChange", captured: "onChangeCapture" }, dependencies: "blur change click focus input keydown keyup selectionchange".split(" ") } };
    function ze(a, b2, c2) {
      a = G.getPooled(ye.change, a, b2, c2);
      a.type = "change";
      Da(c2);
      Xd(a);
      return a;
    }
    var Ae = null, Be = null;
    function Ce(a) {
      mc(a);
    }
    function De(a) {
      var b2 = Pd(a);
      if (yb(b2)) return a;
    }
    function Ee(a, b2) {
      if ("change" === a) return b2;
    }
    var Fe = false;
    ya && (Fe = oc("input") && (!document.documentMode || 9 < document.documentMode));
    function Ge() {
      Ae && (Ae.detachEvent("onpropertychange", He), Be = Ae = null);
    }
    function He(a) {
      if ("value" === a.propertyName && De(Be)) if (a = ze(Be, a, nc(a)), Ja) mc(a);
      else {
        Ja = true;
        try {
          Fa(Ce, a);
        } finally {
          Ja = false, La();
        }
      }
    }
    function Ie(a, b2, c2) {
      "focus" === a ? (Ge(), Ae = b2, Be = c2, Ae.attachEvent("onpropertychange", He)) : "blur" === a && Ge();
    }
    function Je(a) {
      if ("selectionchange" === a || "keyup" === a || "keydown" === a) return De(Be);
    }
    function Ke(a, b2) {
      if ("click" === a) return De(b2);
    }
    function Le(a, b2) {
      if ("input" === a || "change" === a) return De(b2);
    }
    var Me = { eventTypes: ye, _isInputEventSupported: Fe, extractEvents: function(a, b2, c2, d2) {
      var e2 = b2 ? Pd(b2) : window, f2 = e2.nodeName && e2.nodeName.toLowerCase();
      if ("select" === f2 || "input" === f2 && "file" === e2.type) var g2 = Ee;
      else if (xe(e2)) if (Fe) g2 = Le;
      else {
        g2 = Je;
        var h2 = Ie;
      }
      else (f2 = e2.nodeName) && "input" === f2.toLowerCase() && ("checkbox" === e2.type || "radio" === e2.type) && (g2 = Ke);
      if (g2 && (g2 = g2(a, b2))) return ze(g2, c2, d2);
      h2 && h2(a, e2, b2);
      "blur" === a && (a = e2._wrapperState) && a.controlled && "number" === e2.type && Db(e2, "number", e2.value);
    } }, Ne = G.extend({ view: null, detail: null }), Oe = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Pe(a) {
      var b2 = this.nativeEvent;
      return b2.getModifierState ? b2.getModifierState(a) : (a = Oe[a]) ? !!b2[a] : false;
    }
    function Qe() {
      return Pe;
    }
    var Re = 0, Se = 0, Te = false, Ue = false, Ve = Ne.extend({ screenX: null, screenY: null, clientX: null, clientY: null, pageX: null, pageY: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, getModifierState: Qe, button: null, buttons: null, relatedTarget: function(a) {
      return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);
    }, movementX: function(a) {
      if ("movementX" in a) return a.movementX;
      var b2 = Re;
      Re = a.screenX;
      return Te ? "mousemove" === a.type ? a.screenX - b2 : 0 : (Te = true, 0);
    }, movementY: function(a) {
      if ("movementY" in a) return a.movementY;
      var b2 = Se;
      Se = a.screenY;
      return Ue ? "mousemove" === a.type ? a.screenY - b2 : 0 : (Ue = true, 0);
    } }), We = Ve.extend({ pointerId: null, width: null, height: null, pressure: null, tangentialPressure: null, tiltX: null, tiltY: null, twist: null, pointerType: null, isPrimary: null }), Xe = { mouseEnter: { registrationName: "onMouseEnter", dependencies: ["mouseout", "mouseover"] }, mouseLeave: { registrationName: "onMouseLeave", dependencies: ["mouseout", "mouseover"] }, pointerEnter: { registrationName: "onPointerEnter", dependencies: ["pointerout", "pointerover"] }, pointerLeave: {
      registrationName: "onPointerLeave",
      dependencies: ["pointerout", "pointerover"]
    } }, Ye = { eventTypes: Xe, extractEvents: function(a, b2, c2, d2, e2) {
      var f2 = "mouseover" === a || "pointerover" === a, g2 = "mouseout" === a || "pointerout" === a;
      if (f2 && 0 === (e2 & 32) && (c2.relatedTarget || c2.fromElement) || !g2 && !f2) return null;
      f2 = d2.window === d2 ? d2 : (f2 = d2.ownerDocument) ? f2.defaultView || f2.parentWindow : window;
      if (g2) {
        if (g2 = b2, b2 = (b2 = c2.relatedTarget || c2.toElement) ? tc(b2) : null, null !== b2) {
          var h2 = dc(b2);
          if (b2 !== h2 || 5 !== b2.tag && 6 !== b2.tag) b2 = null;
        }
      } else g2 = null;
      if (g2 === b2) return null;
      if ("mouseout" === a || "mouseover" === a) {
        var k2 = Ve;
        var l2 = Xe.mouseLeave;
        var m2 = Xe.mouseEnter;
        var p2 = "mouse";
      } else if ("pointerout" === a || "pointerover" === a) k2 = We, l2 = Xe.pointerLeave, m2 = Xe.pointerEnter, p2 = "pointer";
      a = null == g2 ? f2 : Pd(g2);
      f2 = null == b2 ? f2 : Pd(b2);
      l2 = k2.getPooled(l2, g2, c2, d2);
      l2.type = p2 + "leave";
      l2.target = a;
      l2.relatedTarget = f2;
      c2 = k2.getPooled(m2, b2, c2, d2);
      c2.type = p2 + "enter";
      c2.target = f2;
      c2.relatedTarget = a;
      d2 = g2;
      p2 = b2;
      if (d2 && p2) a: {
        k2 = d2;
        m2 = p2;
        g2 = 0;
        for (a = k2; a; a = Rd(a)) g2++;
        a = 0;
        for (b2 = m2; b2; b2 = Rd(b2)) a++;
        for (; 0 < g2 - a; ) k2 = Rd(k2), g2--;
        for (; 0 < a - g2; ) m2 = Rd(m2), a--;
        for (; g2--; ) {
          if (k2 === m2 || k2 === m2.alternate) break a;
          k2 = Rd(k2);
          m2 = Rd(m2);
        }
        k2 = null;
      }
      else k2 = null;
      m2 = k2;
      for (k2 = []; d2 && d2 !== m2; ) {
        g2 = d2.alternate;
        if (null !== g2 && g2 === m2) break;
        k2.push(d2);
        d2 = Rd(d2);
      }
      for (d2 = []; p2 && p2 !== m2; ) {
        g2 = p2.alternate;
        if (null !== g2 && g2 === m2) break;
        d2.push(p2);
        p2 = Rd(p2);
      }
      for (p2 = 0; p2 < k2.length; p2++) Vd(k2[p2], "bubbled", l2);
      for (p2 = d2.length; 0 < p2--; ) Vd(d2[p2], "captured", c2);
      return 0 === (e2 & 64) ? [l2] : [l2, c2];
    } };
    function Ze(a, b2) {
      return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
    }
    var $e = "function" === typeof Object.is ? Object.is : Ze, af = Object.prototype.hasOwnProperty;
    function bf(a, b2) {
      if ($e(a, b2)) return true;
      if ("object" !== typeof a || null === a || "object" !== typeof b2 || null === b2) return false;
      var c2 = Object.keys(a), d2 = Object.keys(b2);
      if (c2.length !== d2.length) return false;
      for (d2 = 0; d2 < c2.length; d2++) if (!af.call(b2, c2[d2]) || !$e(a[c2[d2]], b2[c2[d2]])) return false;
      return true;
    }
    var cf = ya && "documentMode" in document && 11 >= document.documentMode, df = { select: { phasedRegistrationNames: { bubbled: "onSelect", captured: "onSelectCapture" }, dependencies: "blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ") } }, ef = null, ff = null, gf = null, hf = false;
    function jf(a, b2) {
      var c2 = b2.window === b2 ? b2.document : 9 === b2.nodeType ? b2 : b2.ownerDocument;
      if (hf || null == ef || ef !== td(c2)) return null;
      c2 = ef;
      "selectionStart" in c2 && yd(c2) ? c2 = { start: c2.selectionStart, end: c2.selectionEnd } : (c2 = (c2.ownerDocument && c2.ownerDocument.defaultView || window).getSelection(), c2 = { anchorNode: c2.anchorNode, anchorOffset: c2.anchorOffset, focusNode: c2.focusNode, focusOffset: c2.focusOffset });
      return gf && bf(gf, c2) ? null : (gf = c2, a = G.getPooled(df.select, ff, a, b2), a.type = "select", a.target = ef, Xd(a), a);
    }
    var kf = { eventTypes: df, extractEvents: function(a, b2, c2, d2, e2, f2) {
      e2 = f2 || (d2.window === d2 ? d2.document : 9 === d2.nodeType ? d2 : d2.ownerDocument);
      if (!(f2 = !e2)) {
        a: {
          e2 = cc(e2);
          f2 = wa.onSelect;
          for (var g2 = 0; g2 < f2.length; g2++) if (!e2.has(f2[g2])) {
            e2 = false;
            break a;
          }
          e2 = true;
        }
        f2 = !e2;
      }
      if (f2) return null;
      e2 = b2 ? Pd(b2) : window;
      switch (a) {
        case "focus":
          if (xe(e2) || "true" === e2.contentEditable) ef = e2, ff = b2, gf = null;
          break;
        case "blur":
          gf = ff = ef = null;
          break;
        case "mousedown":
          hf = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          return hf = false, jf(c2, d2);
        case "selectionchange":
          if (cf) break;
        case "keydown":
        case "keyup":
          return jf(c2, d2);
      }
      return null;
    } }, lf = G.extend({ animationName: null, elapsedTime: null, pseudoElement: null }), mf = G.extend({ clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    } }), nf = Ne.extend({ relatedTarget: null });
    function of(a) {
      var b2 = a.keyCode;
      "charCode" in a ? (a = a.charCode, 0 === a && 13 === b2 && (a = 13)) : a = b2;
      10 === a && (a = 13);
      return 32 <= a || 13 === a ? a : 0;
    }
    var pf = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" }, qf = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    }, rf = Ne.extend({ key: function(a) {
      if (a.key) {
        var b2 = pf[a.key] || a.key;
        if ("Unidentified" !== b2) return b2;
      }
      return "keypress" === a.type ? (a = of(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? qf[a.keyCode] || "Unidentified" : "";
    }, location: null, ctrlKey: null, shiftKey: null, altKey: null, metaKey: null, repeat: null, locale: null, getModifierState: Qe, charCode: function(a) {
      return "keypress" === a.type ? of(a) : 0;
    }, keyCode: function(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }, which: function(a) {
      return "keypress" === a.type ? of(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    } }), sf = Ve.extend({ dataTransfer: null }), tf = Ne.extend({ touches: null, targetTouches: null, changedTouches: null, altKey: null, metaKey: null, ctrlKey: null, shiftKey: null, getModifierState: Qe }), uf = G.extend({ propertyName: null, elapsedTime: null, pseudoElement: null }), vf = Ve.extend({ deltaX: function(a) {
      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    }, deltaY: function(a) {
      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    }, deltaZ: null, deltaMode: null }), wf = { eventTypes: Wc, extractEvents: function(a, b2, c2, d2) {
      var e2 = Yc.get(a);
      if (!e2) return null;
      switch (a) {
        case "keypress":
          if (0 === of(c2)) return null;
        case "keydown":
        case "keyup":
          a = rf;
          break;
        case "blur":
        case "focus":
          a = nf;
          break;
        case "click":
          if (2 === c2.button) return null;
        case "auxclick":
        case "dblclick":
        case "mousedown":
        case "mousemove":
        case "mouseup":
        case "mouseout":
        case "mouseover":
        case "contextmenu":
          a = Ve;
          break;
        case "drag":
        case "dragend":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "dragstart":
        case "drop":
          a = sf;
          break;
        case "touchcancel":
        case "touchend":
        case "touchmove":
        case "touchstart":
          a = tf;
          break;
        case Xb:
        case Yb:
        case Zb:
          a = lf;
          break;
        case $b:
          a = uf;
          break;
        case "scroll":
          a = Ne;
          break;
        case "wheel":
          a = vf;
          break;
        case "copy":
        case "cut":
        case "paste":
          a = mf;
          break;
        case "gotpointercapture":
        case "lostpointercapture":
        case "pointercancel":
        case "pointerdown":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "pointerup":
          a = We;
          break;
        default:
          a = G;
      }
      b2 = a.getPooled(e2, b2, c2, d2);
      Xd(b2);
      return b2;
    } };
    if (pa) throw Error(u$3(101));
    pa = Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));
    ra();
    var xf = Nc;
    la = Qd;
    ma = xf;
    na = Pd;
    xa({ SimpleEventPlugin: wf, EnterLeaveEventPlugin: Ye, ChangeEventPlugin: Me, SelectEventPlugin: kf, BeforeInputEventPlugin: ve });
    var yf = [], zf = -1;
    function H(a) {
      0 > zf || (a.current = yf[zf], yf[zf] = null, zf--);
    }
    function I(a, b2) {
      zf++;
      yf[zf] = a.current;
      a.current = b2;
    }
    var Af = {}, J = { current: Af }, K = { current: false }, Bf = Af;
    function Cf(a, b2) {
      var c2 = a.type.contextTypes;
      if (!c2) return Af;
      var d2 = a.stateNode;
      if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2) return d2.__reactInternalMemoizedMaskedChildContext;
      var e2 = {}, f2;
      for (f2 in c2) e2[f2] = b2[f2];
      d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b2, a.__reactInternalMemoizedMaskedChildContext = e2);
      return e2;
    }
    function L(a) {
      a = a.childContextTypes;
      return null !== a && void 0 !== a;
    }
    function Df() {
      H(K);
      H(J);
    }
    function Ef(a, b2, c2) {
      if (J.current !== Af) throw Error(u$3(168));
      I(J, b2);
      I(K, c2);
    }
    function Ff(a, b2, c2) {
      var d2 = a.stateNode;
      a = b2.childContextTypes;
      if ("function" !== typeof d2.getChildContext) return c2;
      d2 = d2.getChildContext();
      for (var e2 in d2) if (!(e2 in a)) throw Error(u$3(108, pb(b2) || "Unknown", e2));
      return n$4({}, c2, {}, d2);
    }
    function Gf(a) {
      a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Af;
      Bf = J.current;
      I(J, a);
      I(K, K.current);
      return true;
    }
    function Hf(a, b2, c2) {
      var d2 = a.stateNode;
      if (!d2) throw Error(u$3(169));
      c2 ? (a = Ff(a, b2, Bf), d2.__reactInternalMemoizedMergedChildContext = a, H(K), H(J), I(J, a)) : H(K);
      I(K, c2);
    }
    var If = r$3.unstable_runWithPriority, Jf = r$3.unstable_scheduleCallback, Kf = r$3.unstable_cancelCallback, Lf = r$3.unstable_requestPaint, Mf = r$3.unstable_now, Nf = r$3.unstable_getCurrentPriorityLevel, Of = r$3.unstable_ImmediatePriority, Pf = r$3.unstable_UserBlockingPriority, Qf = r$3.unstable_NormalPriority, Rf = r$3.unstable_LowPriority, Sf = r$3.unstable_IdlePriority, Tf = {}, Uf = r$3.unstable_shouldYield, Vf = void 0 !== Lf ? Lf : function() {
    }, Wf = null, Xf = null, Yf = false, Zf = Mf(), $f = 1e4 > Zf ? Mf : function() {
      return Mf() - Zf;
    };
    function ag() {
      switch (Nf()) {
        case Of:
          return 99;
        case Pf:
          return 98;
        case Qf:
          return 97;
        case Rf:
          return 96;
        case Sf:
          return 95;
        default:
          throw Error(u$3(332));
      }
    }
    function bg(a) {
      switch (a) {
        case 99:
          return Of;
        case 98:
          return Pf;
        case 97:
          return Qf;
        case 96:
          return Rf;
        case 95:
          return Sf;
        default:
          throw Error(u$3(332));
      }
    }
    function cg(a, b2) {
      a = bg(a);
      return If(a, b2);
    }
    function dg(a, b2, c2) {
      a = bg(a);
      return Jf(a, b2, c2);
    }
    function eg(a) {
      null === Wf ? (Wf = [a], Xf = Jf(Of, fg)) : Wf.push(a);
      return Tf;
    }
    function gg() {
      if (null !== Xf) {
        var a = Xf;
        Xf = null;
        Kf(a);
      }
      fg();
    }
    function fg() {
      if (!Yf && null !== Wf) {
        Yf = true;
        var a = 0;
        try {
          var b2 = Wf;
          cg(99, function() {
            for (; a < b2.length; a++) {
              var c2 = b2[a];
              do
                c2 = c2(true);
              while (null !== c2);
            }
          });
          Wf = null;
        } catch (c2) {
          throw null !== Wf && (Wf = Wf.slice(a + 1)), Jf(Of, gg), c2;
        } finally {
          Yf = false;
        }
      }
    }
    function hg(a, b2, c2) {
      c2 /= 10;
      return 1073741821 - (((1073741821 - a + b2 / 10) / c2 | 0) + 1) * c2;
    }
    function ig(a, b2) {
      if (a && a.defaultProps) {
        b2 = n$4({}, b2);
        a = a.defaultProps;
        for (var c2 in a) void 0 === b2[c2] && (b2[c2] = a[c2]);
      }
      return b2;
    }
    var jg = { current: null }, kg = null, lg = null, mg = null;
    function ng() {
      mg = lg = kg = null;
    }
    function og(a) {
      var b2 = jg.current;
      H(jg);
      a.type._context._currentValue = b2;
    }
    function pg(a, b2) {
      for (; null !== a; ) {
        var c2 = a.alternate;
        if (a.childExpirationTime < b2) a.childExpirationTime = b2, null !== c2 && c2.childExpirationTime < b2 && (c2.childExpirationTime = b2);
        else if (null !== c2 && c2.childExpirationTime < b2) c2.childExpirationTime = b2;
        else break;
        a = a.return;
      }
    }
    function qg(a, b2) {
      kg = a;
      mg = lg = null;
      a = a.dependencies;
      null !== a && null !== a.firstContext && (a.expirationTime >= b2 && (rg = true), a.firstContext = null);
    }
    function sg(a, b2) {
      if (mg !== a && false !== b2 && 0 !== b2) {
        if ("number" !== typeof b2 || 1073741823 === b2) mg = a, b2 = 1073741823;
        b2 = { context: a, observedBits: b2, next: null };
        if (null === lg) {
          if (null === kg) throw Error(u$3(308));
          lg = b2;
          kg.dependencies = { expirationTime: 0, firstContext: b2, responders: null };
        } else lg = lg.next = b2;
      }
      return a._currentValue;
    }
    var tg = false;
    function ug(a) {
      a.updateQueue = { baseState: a.memoizedState, baseQueue: null, shared: { pending: null }, effects: null };
    }
    function vg(a, b2) {
      a = a.updateQueue;
      b2.updateQueue === a && (b2.updateQueue = { baseState: a.baseState, baseQueue: a.baseQueue, shared: a.shared, effects: a.effects });
    }
    function wg(a, b2) {
      a = { expirationTime: a, suspenseConfig: b2, tag: 0, payload: null, callback: null, next: null };
      return a.next = a;
    }
    function xg(a, b2) {
      a = a.updateQueue;
      if (null !== a) {
        a = a.shared;
        var c2 = a.pending;
        null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
        a.pending = b2;
      }
    }
    function yg(a, b2) {
      var c2 = a.alternate;
      null !== c2 && vg(c2, a);
      a = a.updateQueue;
      c2 = a.baseQueue;
      null === c2 ? (a.baseQueue = b2.next = b2, b2.next = b2) : (b2.next = c2.next, c2.next = b2);
    }
    function zg(a, b2, c2, d2) {
      var e2 = a.updateQueue;
      tg = false;
      var f2 = e2.baseQueue, g2 = e2.shared.pending;
      if (null !== g2) {
        if (null !== f2) {
          var h2 = f2.next;
          f2.next = g2.next;
          g2.next = h2;
        }
        f2 = g2;
        e2.shared.pending = null;
        h2 = a.alternate;
        null !== h2 && (h2 = h2.updateQueue, null !== h2 && (h2.baseQueue = g2));
      }
      if (null !== f2) {
        h2 = f2.next;
        var k2 = e2.baseState, l2 = 0, m2 = null, p2 = null, x2 = null;
        if (null !== h2) {
          var z2 = h2;
          do {
            g2 = z2.expirationTime;
            if (g2 < d2) {
              var ca = { expirationTime: z2.expirationTime, suspenseConfig: z2.suspenseConfig, tag: z2.tag, payload: z2.payload, callback: z2.callback, next: null };
              null === x2 ? (p2 = x2 = ca, m2 = k2) : x2 = x2.next = ca;
              g2 > l2 && (l2 = g2);
            } else {
              null !== x2 && (x2 = x2.next = { expirationTime: 1073741823, suspenseConfig: z2.suspenseConfig, tag: z2.tag, payload: z2.payload, callback: z2.callback, next: null });
              Ag(g2, z2.suspenseConfig);
              a: {
                var D2 = a, t2 = z2;
                g2 = b2;
                ca = c2;
                switch (t2.tag) {
                  case 1:
                    D2 = t2.payload;
                    if ("function" === typeof D2) {
                      k2 = D2.call(ca, k2, g2);
                      break a;
                    }
                    k2 = D2;
                    break a;
                  case 3:
                    D2.effectTag = D2.effectTag & -4097 | 64;
                  case 0:
                    D2 = t2.payload;
                    g2 = "function" === typeof D2 ? D2.call(ca, k2, g2) : D2;
                    if (null === g2 || void 0 === g2) break a;
                    k2 = n$4({}, k2, g2);
                    break a;
                  case 2:
                    tg = true;
                }
              }
              null !== z2.callback && (a.effectTag |= 32, g2 = e2.effects, null === g2 ? e2.effects = [z2] : g2.push(z2));
            }
            z2 = z2.next;
            if (null === z2 || z2 === h2) if (g2 = e2.shared.pending, null === g2) break;
            else z2 = f2.next = g2.next, g2.next = h2, e2.baseQueue = f2 = g2, e2.shared.pending = null;
          } while (1);
        }
        null === x2 ? m2 = k2 : x2.next = p2;
        e2.baseState = m2;
        e2.baseQueue = x2;
        Bg(l2);
        a.expirationTime = l2;
        a.memoizedState = k2;
      }
    }
    function Cg(a, b2, c2) {
      a = b2.effects;
      b2.effects = null;
      if (null !== a) for (b2 = 0; b2 < a.length; b2++) {
        var d2 = a[b2], e2 = d2.callback;
        if (null !== e2) {
          d2.callback = null;
          d2 = e2;
          e2 = c2;
          if ("function" !== typeof d2) throw Error(u$3(191, d2));
          d2.call(e2);
        }
      }
    }
    var Dg = Wa.ReactCurrentBatchConfig, Eg = new aa.Component().refs;
    function Fg(a, b2, c2, d2) {
      b2 = a.memoizedState;
      c2 = c2(d2, b2);
      c2 = null === c2 || void 0 === c2 ? b2 : n$4({}, b2, c2);
      a.memoizedState = c2;
      0 === a.expirationTime && (a.updateQueue.baseState = c2);
    }
    var Jg = { isMounted: function(a) {
      return (a = a._reactInternalFiber) ? dc(a) === a : false;
    }, enqueueSetState: function(a, b2, c2) {
      a = a._reactInternalFiber;
      var d2 = Gg(), e2 = Dg.suspense;
      d2 = Hg(d2, a, e2);
      e2 = wg(d2, e2);
      e2.payload = b2;
      void 0 !== c2 && null !== c2 && (e2.callback = c2);
      xg(a, e2);
      Ig(a, d2);
    }, enqueueReplaceState: function(a, b2, c2) {
      a = a._reactInternalFiber;
      var d2 = Gg(), e2 = Dg.suspense;
      d2 = Hg(d2, a, e2);
      e2 = wg(d2, e2);
      e2.tag = 1;
      e2.payload = b2;
      void 0 !== c2 && null !== c2 && (e2.callback = c2);
      xg(a, e2);
      Ig(a, d2);
    }, enqueueForceUpdate: function(a, b2) {
      a = a._reactInternalFiber;
      var c2 = Gg(), d2 = Dg.suspense;
      c2 = Hg(c2, a, d2);
      d2 = wg(c2, d2);
      d2.tag = 2;
      void 0 !== b2 && null !== b2 && (d2.callback = b2);
      xg(a, d2);
      Ig(a, c2);
    } };
    function Kg(a, b2, c2, d2, e2, f2, g2) {
      a = a.stateNode;
      return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !bf(c2, d2) || !bf(e2, f2) : true;
    }
    function Lg(a, b2, c2) {
      var d2 = false, e2 = Af;
      var f2 = b2.contextType;
      "object" === typeof f2 && null !== f2 ? f2 = sg(f2) : (e2 = L(b2) ? Bf : J.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Cf(a, e2) : Af);
      b2 = new b2(c2, f2);
      a.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
      b2.updater = Jg;
      a.stateNode = b2;
      b2._reactInternalFiber = a;
      d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e2, a.__reactInternalMemoizedMaskedChildContext = f2);
      return b2;
    }
    function Mg(a, b2, c2, d2) {
      a = b2.state;
      "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
      "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
      b2.state !== a && Jg.enqueueReplaceState(b2, b2.state, null);
    }
    function Ng(a, b2, c2, d2) {
      var e2 = a.stateNode;
      e2.props = c2;
      e2.state = a.memoizedState;
      e2.refs = Eg;
      ug(a);
      var f2 = b2.contextType;
      "object" === typeof f2 && null !== f2 ? e2.context = sg(f2) : (f2 = L(b2) ? Bf : J.current, e2.context = Cf(a, f2));
      zg(a, c2, e2, d2);
      e2.state = a.memoizedState;
      f2 = b2.getDerivedStateFromProps;
      "function" === typeof f2 && (Fg(a, b2, f2, c2), e2.state = a.memoizedState);
      "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e2.getSnapshotBeforeUpdate || "function" !== typeof e2.UNSAFE_componentWillMount && "function" !== typeof e2.componentWillMount || (b2 = e2.state, "function" === typeof e2.componentWillMount && e2.componentWillMount(), "function" === typeof e2.UNSAFE_componentWillMount && e2.UNSAFE_componentWillMount(), b2 !== e2.state && Jg.enqueueReplaceState(e2, e2.state, null), zg(a, c2, e2, d2), e2.state = a.memoizedState);
      "function" === typeof e2.componentDidMount && (a.effectTag |= 4);
    }
    var Og = Array.isArray;
    function Pg(a, b2, c2) {
      a = c2.ref;
      if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c2._owner) {
          c2 = c2._owner;
          if (c2) {
            if (1 !== c2.tag) throw Error(u$3(309));
            var d2 = c2.stateNode;
          }
          if (!d2) throw Error(u$3(147, a));
          var e2 = "" + a;
          if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === e2) return b2.ref;
          b2 = function(a2) {
            var b3 = d2.refs;
            b3 === Eg && (b3 = d2.refs = {});
            null === a2 ? delete b3[e2] : b3[e2] = a2;
          };
          b2._stringRef = e2;
          return b2;
        }
        if ("string" !== typeof a) throw Error(u$3(284));
        if (!c2._owner) throw Error(u$3(290, a));
      }
      return a;
    }
    function Qg(a, b2) {
      if ("textarea" !== a.type) throw Error(u$3(31, "[object Object]" === Object.prototype.toString.call(b2) ? "object with keys {" + Object.keys(b2).join(", ") + "}" : b2, ""));
    }
    function Rg(a) {
      function b2(b3, c3) {
        if (a) {
          var d3 = b3.lastEffect;
          null !== d3 ? (d3.nextEffect = c3, b3.lastEffect = c3) : b3.firstEffect = b3.lastEffect = c3;
          c3.nextEffect = null;
          c3.effectTag = 8;
        }
      }
      function c2(c3, d3) {
        if (!a) return null;
        for (; null !== d3; ) b2(c3, d3), d3 = d3.sibling;
        return null;
      }
      function d2(a2, b3) {
        for (a2 = /* @__PURE__ */ new Map(); null !== b3; ) null !== b3.key ? a2.set(b3.key, b3) : a2.set(b3.index, b3), b3 = b3.sibling;
        return a2;
      }
      function e2(a2, b3) {
        a2 = Sg(a2, b3);
        a2.index = 0;
        a2.sibling = null;
        return a2;
      }
      function f2(b3, c3, d3) {
        b3.index = d3;
        if (!a) return c3;
        d3 = b3.alternate;
        if (null !== d3) return d3 = d3.index, d3 < c3 ? (b3.effectTag = 2, c3) : d3;
        b3.effectTag = 2;
        return c3;
      }
      function g2(b3) {
        a && null === b3.alternate && (b3.effectTag = 2);
        return b3;
      }
      function h2(a2, b3, c3, d3) {
        if (null === b3 || 6 !== b3.tag) return b3 = Tg(c3, a2.mode, d3), b3.return = a2, b3;
        b3 = e2(b3, c3);
        b3.return = a2;
        return b3;
      }
      function k2(a2, b3, c3, d3) {
        if (null !== b3 && b3.elementType === c3.type) return d3 = e2(b3, c3.props), d3.ref = Pg(a2, b3, c3), d3.return = a2, d3;
        d3 = Ug(c3.type, c3.key, c3.props, null, a2.mode, d3);
        d3.ref = Pg(a2, b3, c3);
        d3.return = a2;
        return d3;
      }
      function l2(a2, b3, c3, d3) {
        if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation) return b3 = Vg(c3, a2.mode, d3), b3.return = a2, b3;
        b3 = e2(b3, c3.children || []);
        b3.return = a2;
        return b3;
      }
      function m2(a2, b3, c3, d3, f3) {
        if (null === b3 || 7 !== b3.tag) return b3 = Wg(c3, a2.mode, d3, f3), b3.return = a2, b3;
        b3 = e2(b3, c3);
        b3.return = a2;
        return b3;
      }
      function p2(a2, b3, c3) {
        if ("string" === typeof b3 || "number" === typeof b3) return b3 = Tg("" + b3, a2.mode, c3), b3.return = a2, b3;
        if ("object" === typeof b3 && null !== b3) {
          switch (b3.$$typeof) {
            case Za:
              return c3 = Ug(b3.type, b3.key, b3.props, null, a2.mode, c3), c3.ref = Pg(a2, null, b3), c3.return = a2, c3;
            case $a:
              return b3 = Vg(b3, a2.mode, c3), b3.return = a2, b3;
          }
          if (Og(b3) || nb(b3)) return b3 = Wg(b3, a2.mode, c3, null), b3.return = a2, b3;
          Qg(a2, b3);
        }
        return null;
      }
      function x2(a2, b3, c3, d3) {
        var e3 = null !== b3 ? b3.key : null;
        if ("string" === typeof c3 || "number" === typeof c3) return null !== e3 ? null : h2(a2, b3, "" + c3, d3);
        if ("object" === typeof c3 && null !== c3) {
          switch (c3.$$typeof) {
            case Za:
              return c3.key === e3 ? c3.type === ab ? m2(a2, b3, c3.props.children, d3, e3) : k2(a2, b3, c3, d3) : null;
            case $a:
              return c3.key === e3 ? l2(a2, b3, c3, d3) : null;
          }
          if (Og(c3) || nb(c3)) return null !== e3 ? null : m2(a2, b3, c3, d3, null);
          Qg(a2, c3);
        }
        return null;
      }
      function z2(a2, b3, c3, d3, e3) {
        if ("string" === typeof d3 || "number" === typeof d3) return a2 = a2.get(c3) || null, h2(b3, a2, "" + d3, e3);
        if ("object" === typeof d3 && null !== d3) {
          switch (d3.$$typeof) {
            case Za:
              return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, d3.type === ab ? m2(b3, a2, d3.props.children, e3, d3.key) : k2(b3, a2, d3, e3);
            case $a:
              return a2 = a2.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a2, d3, e3);
          }
          if (Og(d3) || nb(d3)) return a2 = a2.get(c3) || null, m2(b3, a2, d3, e3, null);
          Qg(b3, d3);
        }
        return null;
      }
      function ca(e3, g3, h3, k3) {
        for (var l3 = null, t2 = null, m3 = g3, y2 = g3 = 0, A2 = null; null !== m3 && y2 < h3.length; y2++) {
          m3.index > y2 ? (A2 = m3, m3 = null) : A2 = m3.sibling;
          var q2 = x2(e3, m3, h3[y2], k3);
          if (null === q2) {
            null === m3 && (m3 = A2);
            break;
          }
          a && m3 && null === q2.alternate && b2(e3, m3);
          g3 = f2(q2, g3, y2);
          null === t2 ? l3 = q2 : t2.sibling = q2;
          t2 = q2;
          m3 = A2;
        }
        if (y2 === h3.length) return c2(e3, m3), l3;
        if (null === m3) {
          for (; y2 < h3.length; y2++) m3 = p2(e3, h3[y2], k3), null !== m3 && (g3 = f2(m3, g3, y2), null === t2 ? l3 = m3 : t2.sibling = m3, t2 = m3);
          return l3;
        }
        for (m3 = d2(e3, m3); y2 < h3.length; y2++) A2 = z2(m3, e3, y2, h3[y2], k3), null !== A2 && (a && null !== A2.alternate && m3.delete(null === A2.key ? y2 : A2.key), g3 = f2(A2, g3, y2), null === t2 ? l3 = A2 : t2.sibling = A2, t2 = A2);
        a && m3.forEach(function(a2) {
          return b2(e3, a2);
        });
        return l3;
      }
      function D2(e3, g3, h3, l3) {
        var k3 = nb(h3);
        if ("function" !== typeof k3) throw Error(u$3(150));
        h3 = k3.call(h3);
        if (null == h3) throw Error(u$3(151));
        for (var m3 = k3 = null, t2 = g3, y2 = g3 = 0, A2 = null, q2 = h3.next(); null !== t2 && !q2.done; y2++, q2 = h3.next()) {
          t2.index > y2 ? (A2 = t2, t2 = null) : A2 = t2.sibling;
          var D3 = x2(e3, t2, q2.value, l3);
          if (null === D3) {
            null === t2 && (t2 = A2);
            break;
          }
          a && t2 && null === D3.alternate && b2(e3, t2);
          g3 = f2(D3, g3, y2);
          null === m3 ? k3 = D3 : m3.sibling = D3;
          m3 = D3;
          t2 = A2;
        }
        if (q2.done) return c2(e3, t2), k3;
        if (null === t2) {
          for (; !q2.done; y2++, q2 = h3.next()) q2 = p2(e3, q2.value, l3), null !== q2 && (g3 = f2(q2, g3, y2), null === m3 ? k3 = q2 : m3.sibling = q2, m3 = q2);
          return k3;
        }
        for (t2 = d2(e3, t2); !q2.done; y2++, q2 = h3.next()) q2 = z2(t2, e3, y2, q2.value, l3), null !== q2 && (a && null !== q2.alternate && t2.delete(null === q2.key ? y2 : q2.key), g3 = f2(q2, g3, y2), null === m3 ? k3 = q2 : m3.sibling = q2, m3 = q2);
        a && t2.forEach(function(a2) {
          return b2(e3, a2);
        });
        return k3;
      }
      return function(a2, d3, f3, h3) {
        var k3 = "object" === typeof f3 && null !== f3 && f3.type === ab && null === f3.key;
        k3 && (f3 = f3.props.children);
        var l3 = "object" === typeof f3 && null !== f3;
        if (l3) switch (f3.$$typeof) {
          case Za:
            a: {
              l3 = f3.key;
              for (k3 = d3; null !== k3; ) {
                if (k3.key === l3) {
                  switch (k3.tag) {
                    case 7:
                      if (f3.type === ab) {
                        c2(a2, k3.sibling);
                        d3 = e2(k3, f3.props.children);
                        d3.return = a2;
                        a2 = d3;
                        break a;
                      }
                      break;
                    default:
                      if (k3.elementType === f3.type) {
                        c2(
                          a2,
                          k3.sibling
                        );
                        d3 = e2(k3, f3.props);
                        d3.ref = Pg(a2, k3, f3);
                        d3.return = a2;
                        a2 = d3;
                        break a;
                      }
                  }
                  c2(a2, k3);
                  break;
                } else b2(a2, k3);
                k3 = k3.sibling;
              }
              f3.type === ab ? (d3 = Wg(f3.props.children, a2.mode, h3, f3.key), d3.return = a2, a2 = d3) : (h3 = Ug(f3.type, f3.key, f3.props, null, a2.mode, h3), h3.ref = Pg(a2, d3, f3), h3.return = a2, a2 = h3);
            }
            return g2(a2);
          case $a:
            a: {
              for (k3 = f3.key; null !== d3; ) {
                if (d3.key === k3) if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                  c2(a2, d3.sibling);
                  d3 = e2(d3, f3.children || []);
                  d3.return = a2;
                  a2 = d3;
                  break a;
                } else {
                  c2(a2, d3);
                  break;
                }
                else b2(a2, d3);
                d3 = d3.sibling;
              }
              d3 = Vg(f3, a2.mode, h3);
              d3.return = a2;
              a2 = d3;
            }
            return g2(a2);
        }
        if ("string" === typeof f3 || "number" === typeof f3) return f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a2, d3.sibling), d3 = e2(d3, f3), d3.return = a2, a2 = d3) : (c2(a2, d3), d3 = Tg(f3, a2.mode, h3), d3.return = a2, a2 = d3), g2(a2);
        if (Og(f3)) return ca(a2, d3, f3, h3);
        if (nb(f3)) return D2(a2, d3, f3, h3);
        l3 && Qg(a2, f3);
        if ("undefined" === typeof f3 && !k3) switch (a2.tag) {
          case 1:
          case 0:
            throw a2 = a2.type, Error(u$3(152, a2.displayName || a2.name || "Component"));
        }
        return c2(a2, d3);
      };
    }
    var Xg = Rg(true), Yg = Rg(false), Zg = {}, $g = { current: Zg }, ah = { current: Zg }, bh = { current: Zg };
    function ch(a) {
      if (a === Zg) throw Error(u$3(174));
      return a;
    }
    function dh(a, b2) {
      I(bh, b2);
      I(ah, a);
      I($g, Zg);
      a = b2.nodeType;
      switch (a) {
        case 9:
        case 11:
          b2 = (b2 = b2.documentElement) ? b2.namespaceURI : Ob(null, "");
          break;
        default:
          a = 8 === a ? b2.parentNode : b2, b2 = a.namespaceURI || null, a = a.tagName, b2 = Ob(b2, a);
      }
      H($g);
      I($g, b2);
    }
    function eh() {
      H($g);
      H(ah);
      H(bh);
    }
    function fh(a) {
      ch(bh.current);
      var b2 = ch($g.current);
      var c2 = Ob(b2, a.type);
      b2 !== c2 && (I(ah, a), I($g, c2));
    }
    function gh(a) {
      ah.current === a && (H($g), H(ah));
    }
    var M = { current: 0 };
    function hh(a) {
      for (var b2 = a; null !== b2; ) {
        if (13 === b2.tag) {
          var c2 = b2.memoizedState;
          if (null !== c2 && (c2 = c2.dehydrated, null === c2 || c2.data === Bd || c2.data === Cd)) return b2;
        } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
          if (0 !== (b2.effectTag & 64)) return b2;
        } else if (null !== b2.child) {
          b2.child.return = b2;
          b2 = b2.child;
          continue;
        }
        if (b2 === a) break;
        for (; null === b2.sibling; ) {
          if (null === b2.return || b2.return === a) return null;
          b2 = b2.return;
        }
        b2.sibling.return = b2.return;
        b2 = b2.sibling;
      }
      return null;
    }
    function ih(a, b2) {
      return { responder: a, props: b2 };
    }
    var jh = Wa.ReactCurrentDispatcher, kh = Wa.ReactCurrentBatchConfig, lh = 0, N = null, O = null, P = null, mh = false;
    function Q() {
      throw Error(u$3(321));
    }
    function nh(a, b2) {
      if (null === b2) return false;
      for (var c2 = 0; c2 < b2.length && c2 < a.length; c2++) if (!$e(a[c2], b2[c2])) return false;
      return true;
    }
    function oh(a, b2, c2, d2, e2, f2) {
      lh = f2;
      N = b2;
      b2.memoizedState = null;
      b2.updateQueue = null;
      b2.expirationTime = 0;
      jh.current = null === a || null === a.memoizedState ? ph : qh;
      a = c2(d2, e2);
      if (b2.expirationTime === lh) {
        f2 = 0;
        do {
          b2.expirationTime = 0;
          if (!(25 > f2)) throw Error(u$3(301));
          f2 += 1;
          P = O = null;
          b2.updateQueue = null;
          jh.current = rh;
          a = c2(d2, e2);
        } while (b2.expirationTime === lh);
      }
      jh.current = sh;
      b2 = null !== O && null !== O.next;
      lh = 0;
      P = O = N = null;
      mh = false;
      if (b2) throw Error(u$3(300));
      return a;
    }
    function th() {
      var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      null === P ? N.memoizedState = P = a : P = P.next = a;
      return P;
    }
    function uh() {
      if (null === O) {
        var a = N.alternate;
        a = null !== a ? a.memoizedState : null;
      } else a = O.next;
      var b2 = null === P ? N.memoizedState : P.next;
      if (null !== b2) P = b2, O = a;
      else {
        if (null === a) throw Error(u$3(310));
        O = a;
        a = { memoizedState: O.memoizedState, baseState: O.baseState, baseQueue: O.baseQueue, queue: O.queue, next: null };
        null === P ? N.memoizedState = P = a : P = P.next = a;
      }
      return P;
    }
    function vh(a, b2) {
      return "function" === typeof b2 ? b2(a) : b2;
    }
    function wh(a) {
      var b2 = uh(), c2 = b2.queue;
      if (null === c2) throw Error(u$3(311));
      c2.lastRenderedReducer = a;
      var d2 = O, e2 = d2.baseQueue, f2 = c2.pending;
      if (null !== f2) {
        if (null !== e2) {
          var g2 = e2.next;
          e2.next = f2.next;
          f2.next = g2;
        }
        d2.baseQueue = e2 = f2;
        c2.pending = null;
      }
      if (null !== e2) {
        e2 = e2.next;
        d2 = d2.baseState;
        var h2 = g2 = f2 = null, k2 = e2;
        do {
          var l2 = k2.expirationTime;
          if (l2 < lh) {
            var m2 = { expirationTime: k2.expirationTime, suspenseConfig: k2.suspenseConfig, action: k2.action, eagerReducer: k2.eagerReducer, eagerState: k2.eagerState, next: null };
            null === h2 ? (g2 = h2 = m2, f2 = d2) : h2 = h2.next = m2;
            l2 > N.expirationTime && (N.expirationTime = l2, Bg(l2));
          } else null !== h2 && (h2 = h2.next = { expirationTime: 1073741823, suspenseConfig: k2.suspenseConfig, action: k2.action, eagerReducer: k2.eagerReducer, eagerState: k2.eagerState, next: null }), Ag(l2, k2.suspenseConfig), d2 = k2.eagerReducer === a ? k2.eagerState : a(d2, k2.action);
          k2 = k2.next;
        } while (null !== k2 && k2 !== e2);
        null === h2 ? f2 = d2 : h2.next = g2;
        $e(d2, b2.memoizedState) || (rg = true);
        b2.memoizedState = d2;
        b2.baseState = f2;
        b2.baseQueue = h2;
        c2.lastRenderedState = d2;
      }
      return [b2.memoizedState, c2.dispatch];
    }
    function xh(a) {
      var b2 = uh(), c2 = b2.queue;
      if (null === c2) throw Error(u$3(311));
      c2.lastRenderedReducer = a;
      var d2 = c2.dispatch, e2 = c2.pending, f2 = b2.memoizedState;
      if (null !== e2) {
        c2.pending = null;
        var g2 = e2 = e2.next;
        do
          f2 = a(f2, g2.action), g2 = g2.next;
        while (g2 !== e2);
        $e(f2, b2.memoizedState) || (rg = true);
        b2.memoizedState = f2;
        null === b2.baseQueue && (b2.baseState = f2);
        c2.lastRenderedState = f2;
      }
      return [f2, d2];
    }
    function yh(a) {
      var b2 = th();
      "function" === typeof a && (a = a());
      b2.memoizedState = b2.baseState = a;
      a = b2.queue = { pending: null, dispatch: null, lastRenderedReducer: vh, lastRenderedState: a };
      a = a.dispatch = zh.bind(null, N, a);
      return [b2.memoizedState, a];
    }
    function Ah(a, b2, c2, d2) {
      a = { tag: a, create: b2, destroy: c2, deps: d2, next: null };
      b2 = N.updateQueue;
      null === b2 ? (b2 = { lastEffect: null }, N.updateQueue = b2, b2.lastEffect = a.next = a) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a.next = a : (d2 = c2.next, c2.next = a, a.next = d2, b2.lastEffect = a));
      return a;
    }
    function Bh() {
      return uh().memoizedState;
    }
    function Ch(a, b2, c2, d2) {
      var e2 = th();
      N.effectTag |= a;
      e2.memoizedState = Ah(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
    }
    function Dh(a, b2, c2, d2) {
      var e2 = uh();
      d2 = void 0 === d2 ? null : d2;
      var f2 = void 0;
      if (null !== O) {
        var g2 = O.memoizedState;
        f2 = g2.destroy;
        if (null !== d2 && nh(d2, g2.deps)) {
          Ah(b2, c2, f2, d2);
          return;
        }
      }
      N.effectTag |= a;
      e2.memoizedState = Ah(1 | b2, c2, f2, d2);
    }
    function Eh(a, b2) {
      return Ch(516, 4, a, b2);
    }
    function Fh(a, b2) {
      return Dh(516, 4, a, b2);
    }
    function Gh(a, b2) {
      return Dh(4, 2, a, b2);
    }
    function Hh(a, b2) {
      if ("function" === typeof b2) return a = a(), b2(a), function() {
        b2(null);
      };
      if (null !== b2 && void 0 !== b2) return a = a(), b2.current = a, function() {
        b2.current = null;
      };
    }
    function Ih(a, b2, c2) {
      c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
      return Dh(4, 2, Hh.bind(null, b2, a), c2);
    }
    function Jh() {
    }
    function Kh(a, b2) {
      th().memoizedState = [a, void 0 === b2 ? null : b2];
      return a;
    }
    function Lh(a, b2) {
      var c2 = uh();
      b2 = void 0 === b2 ? null : b2;
      var d2 = c2.memoizedState;
      if (null !== d2 && null !== b2 && nh(b2, d2[1])) return d2[0];
      c2.memoizedState = [a, b2];
      return a;
    }
    function Mh(a, b2) {
      var c2 = uh();
      b2 = void 0 === b2 ? null : b2;
      var d2 = c2.memoizedState;
      if (null !== d2 && null !== b2 && nh(b2, d2[1])) return d2[0];
      a = a();
      c2.memoizedState = [a, b2];
      return a;
    }
    function Nh(a, b2, c2) {
      var d2 = ag();
      cg(98 > d2 ? 98 : d2, function() {
        a(true);
      });
      cg(97 < d2 ? 97 : d2, function() {
        var d3 = kh.suspense;
        kh.suspense = void 0 === b2 ? null : b2;
        try {
          a(false), c2();
        } finally {
          kh.suspense = d3;
        }
      });
    }
    function zh(a, b2, c2) {
      var d2 = Gg(), e2 = Dg.suspense;
      d2 = Hg(d2, a, e2);
      e2 = { expirationTime: d2, suspenseConfig: e2, action: c2, eagerReducer: null, eagerState: null, next: null };
      var f2 = b2.pending;
      null === f2 ? e2.next = e2 : (e2.next = f2.next, f2.next = e2);
      b2.pending = e2;
      f2 = a.alternate;
      if (a === N || null !== f2 && f2 === N) mh = true, e2.expirationTime = lh, N.expirationTime = lh;
      else {
        if (0 === a.expirationTime && (null === f2 || 0 === f2.expirationTime) && (f2 = b2.lastRenderedReducer, null !== f2)) try {
          var g2 = b2.lastRenderedState, h2 = f2(g2, c2);
          e2.eagerReducer = f2;
          e2.eagerState = h2;
          if ($e(h2, g2)) return;
        } catch (k2) {
        } finally {
        }
        Ig(
          a,
          d2
        );
      }
    }
    var sh = { readContext: sg, useCallback: Q, useContext: Q, useEffect: Q, useImperativeHandle: Q, useLayoutEffect: Q, useMemo: Q, useReducer: Q, useRef: Q, useState: Q, useDebugValue: Q, useResponder: Q, useDeferredValue: Q, useTransition: Q }, ph = { readContext: sg, useCallback: Kh, useContext: sg, useEffect: Eh, useImperativeHandle: function(a, b2, c2) {
      c2 = null !== c2 && void 0 !== c2 ? c2.concat([a]) : null;
      return Ch(4, 2, Hh.bind(null, b2, a), c2);
    }, useLayoutEffect: function(a, b2) {
      return Ch(4, 2, a, b2);
    }, useMemo: function(a, b2) {
      var c2 = th();
      b2 = void 0 === b2 ? null : b2;
      a = a();
      c2.memoizedState = [
        a,
        b2
      ];
      return a;
    }, useReducer: function(a, b2, c2) {
      var d2 = th();
      b2 = void 0 !== c2 ? c2(b2) : b2;
      d2.memoizedState = d2.baseState = b2;
      a = d2.queue = { pending: null, dispatch: null, lastRenderedReducer: a, lastRenderedState: b2 };
      a = a.dispatch = zh.bind(null, N, a);
      return [d2.memoizedState, a];
    }, useRef: function(a) {
      var b2 = th();
      a = { current: a };
      return b2.memoizedState = a;
    }, useState: yh, useDebugValue: Jh, useResponder: ih, useDeferredValue: function(a, b2) {
      var c2 = yh(a), d2 = c2[0], e2 = c2[1];
      Eh(function() {
        var c3 = kh.suspense;
        kh.suspense = void 0 === b2 ? null : b2;
        try {
          e2(a);
        } finally {
          kh.suspense = c3;
        }
      }, [a, b2]);
      return d2;
    }, useTransition: function(a) {
      var b2 = yh(false), c2 = b2[0];
      b2 = b2[1];
      return [Kh(Nh.bind(null, b2, a), [b2, a]), c2];
    } }, qh = { readContext: sg, useCallback: Lh, useContext: sg, useEffect: Fh, useImperativeHandle: Ih, useLayoutEffect: Gh, useMemo: Mh, useReducer: wh, useRef: Bh, useState: function() {
      return wh(vh);
    }, useDebugValue: Jh, useResponder: ih, useDeferredValue: function(a, b2) {
      var c2 = wh(vh), d2 = c2[0], e2 = c2[1];
      Fh(function() {
        var c3 = kh.suspense;
        kh.suspense = void 0 === b2 ? null : b2;
        try {
          e2(a);
        } finally {
          kh.suspense = c3;
        }
      }, [a, b2]);
      return d2;
    }, useTransition: function(a) {
      var b2 = wh(vh), c2 = b2[0];
      b2 = b2[1];
      return [Lh(Nh.bind(null, b2, a), [b2, a]), c2];
    } }, rh = { readContext: sg, useCallback: Lh, useContext: sg, useEffect: Fh, useImperativeHandle: Ih, useLayoutEffect: Gh, useMemo: Mh, useReducer: xh, useRef: Bh, useState: function() {
      return xh(vh);
    }, useDebugValue: Jh, useResponder: ih, useDeferredValue: function(a, b2) {
      var c2 = xh(vh), d2 = c2[0], e2 = c2[1];
      Fh(function() {
        var c3 = kh.suspense;
        kh.suspense = void 0 === b2 ? null : b2;
        try {
          e2(a);
        } finally {
          kh.suspense = c3;
        }
      }, [a, b2]);
      return d2;
    }, useTransition: function(a) {
      var b2 = xh(vh), c2 = b2[0];
      b2 = b2[1];
      return [Lh(Nh.bind(
        null,
        b2,
        a
      ), [b2, a]), c2];
    } }, Oh = null, Ph = null, Qh = false;
    function Rh(a, b2) {
      var c2 = Sh(5, null, null, 0);
      c2.elementType = "DELETED";
      c2.type = "DELETED";
      c2.stateNode = b2;
      c2.return = a;
      c2.effectTag = 8;
      null !== a.lastEffect ? (a.lastEffect.nextEffect = c2, a.lastEffect = c2) : a.firstEffect = a.lastEffect = c2;
    }
    function Th(a, b2) {
      switch (a.tag) {
        case 5:
          var c2 = a.type;
          b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
          return null !== b2 ? (a.stateNode = b2, true) : false;
        case 6:
          return b2 = "" === a.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a.stateNode = b2, true) : false;
        case 13:
          return false;
        default:
          return false;
      }
    }
    function Uh(a) {
      if (Qh) {
        var b2 = Ph;
        if (b2) {
          var c2 = b2;
          if (!Th(a, b2)) {
            b2 = Jd(c2.nextSibling);
            if (!b2 || !Th(a, b2)) {
              a.effectTag = a.effectTag & -1025 | 2;
              Qh = false;
              Oh = a;
              return;
            }
            Rh(Oh, c2);
          }
          Oh = a;
          Ph = Jd(b2.firstChild);
        } else a.effectTag = a.effectTag & -1025 | 2, Qh = false, Oh = a;
      }
    }
    function Vh(a) {
      for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; ) a = a.return;
      Oh = a;
    }
    function Wh(a) {
      if (a !== Oh) return false;
      if (!Qh) return Vh(a), Qh = true, false;
      var b2 = a.type;
      if (5 !== a.tag || "head" !== b2 && "body" !== b2 && !Gd(b2, a.memoizedProps)) for (b2 = Ph; b2; ) Rh(a, b2), b2 = Jd(b2.nextSibling);
      Vh(a);
      if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a) throw Error(u$3(317));
        a: {
          a = a.nextSibling;
          for (b2 = 0; a; ) {
            if (8 === a.nodeType) {
              var c2 = a.data;
              if (c2 === Ad) {
                if (0 === b2) {
                  Ph = Jd(a.nextSibling);
                  break a;
                }
                b2--;
              } else c2 !== zd && c2 !== Cd && c2 !== Bd || b2++;
            }
            a = a.nextSibling;
          }
          Ph = null;
        }
      } else Ph = Oh ? Jd(a.stateNode.nextSibling) : null;
      return true;
    }
    function Xh() {
      Ph = Oh = null;
      Qh = false;
    }
    var Yh = Wa.ReactCurrentOwner, rg = false;
    function R(a, b2, c2, d2) {
      b2.child = null === a ? Yg(b2, null, c2, d2) : Xg(b2, a.child, c2, d2);
    }
    function Zh(a, b2, c2, d2, e2) {
      c2 = c2.render;
      var f2 = b2.ref;
      qg(b2, e2);
      d2 = oh(a, b2, c2, d2, f2, e2);
      if (null !== a && !rg) return b2.updateQueue = a.updateQueue, b2.effectTag &= -517, a.expirationTime <= e2 && (a.expirationTime = 0), $h(a, b2, e2);
      b2.effectTag |= 1;
      R(a, b2, d2, e2);
      return b2.child;
    }
    function ai(a, b2, c2, d2, e2, f2) {
      if (null === a) {
        var g2 = c2.type;
        if ("function" === typeof g2 && !bi(g2) && void 0 === g2.defaultProps && null === c2.compare && void 0 === c2.defaultProps) return b2.tag = 15, b2.type = g2, ci(a, b2, g2, d2, e2, f2);
        a = Ug(c2.type, null, d2, null, b2.mode, f2);
        a.ref = b2.ref;
        a.return = b2;
        return b2.child = a;
      }
      g2 = a.child;
      if (e2 < f2 && (e2 = g2.memoizedProps, c2 = c2.compare, c2 = null !== c2 ? c2 : bf, c2(e2, d2) && a.ref === b2.ref)) return $h(a, b2, f2);
      b2.effectTag |= 1;
      a = Sg(g2, d2);
      a.ref = b2.ref;
      a.return = b2;
      return b2.child = a;
    }
    function ci(a, b2, c2, d2, e2, f2) {
      return null !== a && bf(a.memoizedProps, d2) && a.ref === b2.ref && (rg = false, e2 < f2) ? (b2.expirationTime = a.expirationTime, $h(a, b2, f2)) : di(a, b2, c2, d2, f2);
    }
    function ei(a, b2) {
      var c2 = b2.ref;
      if (null === a && null !== c2 || null !== a && a.ref !== c2) b2.effectTag |= 128;
    }
    function di(a, b2, c2, d2, e2) {
      var f2 = L(c2) ? Bf : J.current;
      f2 = Cf(b2, f2);
      qg(b2, e2);
      c2 = oh(a, b2, c2, d2, f2, e2);
      if (null !== a && !rg) return b2.updateQueue = a.updateQueue, b2.effectTag &= -517, a.expirationTime <= e2 && (a.expirationTime = 0), $h(a, b2, e2);
      b2.effectTag |= 1;
      R(a, b2, c2, e2);
      return b2.child;
    }
    function fi(a, b2, c2, d2, e2) {
      if (L(c2)) {
        var f2 = true;
        Gf(b2);
      } else f2 = false;
      qg(b2, e2);
      if (null === b2.stateNode) null !== a && (a.alternate = null, b2.alternate = null, b2.effectTag |= 2), Lg(b2, c2, d2), Ng(b2, c2, d2, e2), d2 = true;
      else if (null === a) {
        var g2 = b2.stateNode, h2 = b2.memoizedProps;
        g2.props = h2;
        var k2 = g2.context, l2 = c2.contextType;
        "object" === typeof l2 && null !== l2 ? l2 = sg(l2) : (l2 = L(c2) ? Bf : J.current, l2 = Cf(b2, l2));
        var m2 = c2.getDerivedStateFromProps, p2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
        p2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && Mg(b2, g2, d2, l2);
        tg = false;
        var x2 = b2.memoizedState;
        g2.state = x2;
        zg(b2, d2, g2, e2);
        k2 = b2.memoizedState;
        h2 !== d2 || x2 !== k2 || K.current || tg ? ("function" === typeof m2 && (Fg(b2, c2, m2, d2), k2 = b2.memoizedState), (h2 = tg || Kg(b2, c2, h2, d2, x2, k2, l2)) ? (p2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.effectTag |= 4)) : ("function" === typeof g2.componentDidMount && (b2.effectTag |= 4), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b2.effectTag |= 4), d2 = false);
      } else g2 = b2.stateNode, vg(a, b2), h2 = b2.memoizedProps, g2.props = b2.type === b2.elementType ? h2 : ig(b2.type, h2), k2 = g2.context, l2 = c2.contextType, "object" === typeof l2 && null !== l2 ? l2 = sg(l2) : (l2 = L(c2) ? Bf : J.current, l2 = Cf(b2, l2)), m2 = c2.getDerivedStateFromProps, (p2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && Mg(b2, g2, d2, l2), tg = false, k2 = b2.memoizedState, g2.state = k2, zg(b2, d2, g2, e2), x2 = b2.memoizedState, h2 !== d2 || k2 !== x2 || K.current || tg ? ("function" === typeof m2 && (Fg(b2, c2, m2, d2), x2 = b2.memoizedState), (m2 = tg || Kg(b2, c2, h2, d2, k2, x2, l2)) ? (p2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(
        d2,
        x2,
        l2
      ), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, x2, l2)), "function" === typeof g2.componentDidUpdate && (b2.effectTag |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.effectTag |= 256)) : ("function" !== typeof g2.componentDidUpdate || h2 === a.memoizedProps && k2 === a.memoizedState || (b2.effectTag |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a.memoizedProps && k2 === a.memoizedState || (b2.effectTag |= 256), b2.memoizedProps = d2, b2.memoizedState = x2), g2.props = d2, g2.state = x2, g2.context = l2, d2 = m2) : ("function" !== typeof g2.componentDidUpdate || h2 === a.memoizedProps && k2 === a.memoizedState || (b2.effectTag |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a.memoizedProps && k2 === a.memoizedState || (b2.effectTag |= 256), d2 = false);
      return gi(a, b2, c2, d2, f2, e2);
    }
    function gi(a, b2, c2, d2, e2, f2) {
      ei(a, b2);
      var g2 = 0 !== (b2.effectTag & 64);
      if (!d2 && !g2) return e2 && Hf(b2, c2, false), $h(a, b2, f2);
      d2 = b2.stateNode;
      Yh.current = b2;
      var h2 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
      b2.effectTag |= 1;
      null !== a && g2 ? (b2.child = Xg(b2, a.child, null, f2), b2.child = Xg(b2, null, h2, f2)) : R(a, b2, h2, f2);
      b2.memoizedState = d2.state;
      e2 && Hf(b2, c2, true);
      return b2.child;
    }
    function hi(a) {
      var b2 = a.stateNode;
      b2.pendingContext ? Ef(a, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && Ef(a, b2.context, false);
      dh(a, b2.containerInfo);
    }
    var ii = { dehydrated: null, retryTime: 0 };
    function ji(a, b2, c2) {
      var d2 = b2.mode, e2 = b2.pendingProps, f2 = M.current, g2 = false, h2;
      (h2 = 0 !== (b2.effectTag & 64)) || (h2 = 0 !== (f2 & 2) && (null === a || null !== a.memoizedState));
      h2 ? (g2 = true, b2.effectTag &= -65) : null !== a && null === a.memoizedState || void 0 === e2.fallback || true === e2.unstable_avoidThisFallback || (f2 |= 1);
      I(M, f2 & 1);
      if (null === a) {
        void 0 !== e2.fallback && Uh(b2);
        if (g2) {
          g2 = e2.fallback;
          e2 = Wg(null, d2, 0, null);
          e2.return = b2;
          if (0 === (b2.mode & 2)) for (a = null !== b2.memoizedState ? b2.child.child : b2.child, e2.child = a; null !== a; ) a.return = e2, a = a.sibling;
          c2 = Wg(g2, d2, c2, null);
          c2.return = b2;
          e2.sibling = c2;
          b2.memoizedState = ii;
          b2.child = e2;
          return c2;
        }
        d2 = e2.children;
        b2.memoizedState = null;
        return b2.child = Yg(b2, null, d2, c2);
      }
      if (null !== a.memoizedState) {
        a = a.child;
        d2 = a.sibling;
        if (g2) {
          e2 = e2.fallback;
          c2 = Sg(a, a.pendingProps);
          c2.return = b2;
          if (0 === (b2.mode & 2) && (g2 = null !== b2.memoizedState ? b2.child.child : b2.child, g2 !== a.child)) for (c2.child = g2; null !== g2; ) g2.return = c2, g2 = g2.sibling;
          d2 = Sg(d2, e2);
          d2.return = b2;
          c2.sibling = d2;
          c2.childExpirationTime = 0;
          b2.memoizedState = ii;
          b2.child = c2;
          return d2;
        }
        c2 = Xg(b2, a.child, e2.children, c2);
        b2.memoizedState = null;
        return b2.child = c2;
      }
      a = a.child;
      if (g2) {
        g2 = e2.fallback;
        e2 = Wg(null, d2, 0, null);
        e2.return = b2;
        e2.child = a;
        null !== a && (a.return = e2);
        if (0 === (b2.mode & 2)) for (a = null !== b2.memoizedState ? b2.child.child : b2.child, e2.child = a; null !== a; ) a.return = e2, a = a.sibling;
        c2 = Wg(g2, d2, c2, null);
        c2.return = b2;
        e2.sibling = c2;
        c2.effectTag |= 2;
        e2.childExpirationTime = 0;
        b2.memoizedState = ii;
        b2.child = e2;
        return c2;
      }
      b2.memoizedState = null;
      return b2.child = Xg(b2, a, e2.children, c2);
    }
    function ki(a, b2) {
      a.expirationTime < b2 && (a.expirationTime = b2);
      var c2 = a.alternate;
      null !== c2 && c2.expirationTime < b2 && (c2.expirationTime = b2);
      pg(a.return, b2);
    }
    function li(a, b2, c2, d2, e2, f2) {
      var g2 = a.memoizedState;
      null === g2 ? a.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailExpiration: 0, tailMode: e2, lastEffect: f2 } : (g2.isBackwards = b2, g2.rendering = null, g2.renderingStartTime = 0, g2.last = d2, g2.tail = c2, g2.tailExpiration = 0, g2.tailMode = e2, g2.lastEffect = f2);
    }
    function mi(a, b2, c2) {
      var d2 = b2.pendingProps, e2 = d2.revealOrder, f2 = d2.tail;
      R(a, b2, d2.children, c2);
      d2 = M.current;
      if (0 !== (d2 & 2)) d2 = d2 & 1 | 2, b2.effectTag |= 64;
      else {
        if (null !== a && 0 !== (a.effectTag & 64)) a: for (a = b2.child; null !== a; ) {
          if (13 === a.tag) null !== a.memoizedState && ki(a, c2);
          else if (19 === a.tag) ki(a, c2);
          else if (null !== a.child) {
            a.child.return = a;
            a = a.child;
            continue;
          }
          if (a === b2) break a;
          for (; null === a.sibling; ) {
            if (null === a.return || a.return === b2) break a;
            a = a.return;
          }
          a.sibling.return = a.return;
          a = a.sibling;
        }
        d2 &= 1;
      }
      I(M, d2);
      if (0 === (b2.mode & 2)) b2.memoizedState = null;
      else switch (e2) {
        case "forwards":
          c2 = b2.child;
          for (e2 = null; null !== c2; ) a = c2.alternate, null !== a && null === hh(a) && (e2 = c2), c2 = c2.sibling;
          c2 = e2;
          null === c2 ? (e2 = b2.child, b2.child = null) : (e2 = c2.sibling, c2.sibling = null);
          li(b2, false, e2, c2, f2, b2.lastEffect);
          break;
        case "backwards":
          c2 = null;
          e2 = b2.child;
          for (b2.child = null; null !== e2; ) {
            a = e2.alternate;
            if (null !== a && null === hh(a)) {
              b2.child = e2;
              break;
            }
            a = e2.sibling;
            e2.sibling = c2;
            c2 = e2;
            e2 = a;
          }
          li(b2, true, c2, null, f2, b2.lastEffect);
          break;
        case "together":
          li(b2, false, null, null, void 0, b2.lastEffect);
          break;
        default:
          b2.memoizedState = null;
      }
      return b2.child;
    }
    function $h(a, b2, c2) {
      null !== a && (b2.dependencies = a.dependencies);
      var d2 = b2.expirationTime;
      0 !== d2 && Bg(d2);
      if (b2.childExpirationTime < c2) return null;
      if (null !== a && b2.child !== a.child) throw Error(u$3(153));
      if (null !== b2.child) {
        a = b2.child;
        c2 = Sg(a, a.pendingProps);
        b2.child = c2;
        for (c2.return = b2; null !== a.sibling; ) a = a.sibling, c2 = c2.sibling = Sg(a, a.pendingProps), c2.return = b2;
        c2.sibling = null;
      }
      return b2.child;
    }
    var ni, oi, pi, qi;
    ni = function(a, b2) {
      for (var c2 = b2.child; null !== c2; ) {
        if (5 === c2.tag || 6 === c2.tag) a.appendChild(c2.stateNode);
        else if (4 !== c2.tag && null !== c2.child) {
          c2.child.return = c2;
          c2 = c2.child;
          continue;
        }
        if (c2 === b2) break;
        for (; null === c2.sibling; ) {
          if (null === c2.return || c2.return === b2) return;
          c2 = c2.return;
        }
        c2.sibling.return = c2.return;
        c2 = c2.sibling;
      }
    };
    oi = function() {
    };
    pi = function(a, b2, c2, d2, e2) {
      var f2 = a.memoizedProps;
      if (f2 !== d2) {
        var g2 = b2.stateNode;
        ch($g.current);
        a = null;
        switch (c2) {
          case "input":
            f2 = zb(g2, f2);
            d2 = zb(g2, d2);
            a = [];
            break;
          case "option":
            f2 = Gb(g2, f2);
            d2 = Gb(g2, d2);
            a = [];
            break;
          case "select":
            f2 = n$4({}, f2, { value: void 0 });
            d2 = n$4({}, d2, { value: void 0 });
            a = [];
            break;
          case "textarea":
            f2 = Ib(g2, f2);
            d2 = Ib(g2, d2);
            a = [];
            break;
          default:
            "function" !== typeof f2.onClick && "function" === typeof d2.onClick && (g2.onclick = sd);
        }
        od(c2, d2);
        var h2, k2;
        c2 = null;
        for (h2 in f2) if (!d2.hasOwnProperty(h2) && f2.hasOwnProperty(h2) && null != f2[h2]) if ("style" === h2) for (k2 in g2 = f2[h2], g2) g2.hasOwnProperty(k2) && (c2 || (c2 = {}), c2[k2] = "");
        else "dangerouslySetInnerHTML" !== h2 && "children" !== h2 && "suppressContentEditableWarning" !== h2 && "suppressHydrationWarning" !== h2 && "autoFocus" !== h2 && (va.hasOwnProperty(h2) ? a || (a = []) : (a = a || []).push(h2, null));
        for (h2 in d2) {
          var l2 = d2[h2];
          g2 = null != f2 ? f2[h2] : void 0;
          if (d2.hasOwnProperty(h2) && l2 !== g2 && (null != l2 || null != g2)) if ("style" === h2) if (g2) {
            for (k2 in g2) !g2.hasOwnProperty(k2) || l2 && l2.hasOwnProperty(k2) || (c2 || (c2 = {}), c2[k2] = "");
            for (k2 in l2) l2.hasOwnProperty(k2) && g2[k2] !== l2[k2] && (c2 || (c2 = {}), c2[k2] = l2[k2]);
          } else c2 || (a || (a = []), a.push(h2, c2)), c2 = l2;
          else "dangerouslySetInnerHTML" === h2 ? (l2 = l2 ? l2.__html : void 0, g2 = g2 ? g2.__html : void 0, null != l2 && g2 !== l2 && (a = a || []).push(h2, l2)) : "children" === h2 ? g2 === l2 || "string" !== typeof l2 && "number" !== typeof l2 || (a = a || []).push(h2, "" + l2) : "suppressContentEditableWarning" !== h2 && "suppressHydrationWarning" !== h2 && (va.hasOwnProperty(h2) ? (null != l2 && rd(e2, h2), a || g2 === l2 || (a = [])) : (a = a || []).push(h2, l2));
        }
        c2 && (a = a || []).push("style", c2);
        e2 = a;
        if (b2.updateQueue = e2) b2.effectTag |= 4;
      }
    };
    qi = function(a, b2, c2, d2) {
      c2 !== d2 && (b2.effectTag |= 4);
    };
    function ri(a, b2) {
      switch (a.tailMode) {
        case "hidden":
          b2 = a.tail;
          for (var c2 = null; null !== b2; ) null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
          null === c2 ? a.tail = null : c2.sibling = null;
          break;
        case "collapsed":
          c2 = a.tail;
          for (var d2 = null; null !== c2; ) null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
          null === d2 ? b2 || null === a.tail ? a.tail = null : a.tail.sibling = null : d2.sibling = null;
      }
    }
    function si(a, b2, c2) {
      var d2 = b2.pendingProps;
      switch (b2.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return null;
        case 1:
          return L(b2.type) && Df(), null;
        case 3:
          return eh(), H(K), H(J), c2 = b2.stateNode, c2.pendingContext && (c2.context = c2.pendingContext, c2.pendingContext = null), null !== a && null !== a.child || !Wh(b2) || (b2.effectTag |= 4), oi(b2), null;
        case 5:
          gh(b2);
          c2 = ch(bh.current);
          var e2 = b2.type;
          if (null !== a && null != b2.stateNode) pi(a, b2, e2, d2, c2), a.ref !== b2.ref && (b2.effectTag |= 128);
          else {
            if (!d2) {
              if (null === b2.stateNode) throw Error(u$3(166));
              return null;
            }
            a = ch($g.current);
            if (Wh(b2)) {
              d2 = b2.stateNode;
              e2 = b2.type;
              var f2 = b2.memoizedProps;
              d2[Md] = b2;
              d2[Nd] = f2;
              switch (e2) {
                case "iframe":
                case "object":
                case "embed":
                  F("load", d2);
                  break;
                case "video":
                case "audio":
                  for (a = 0; a < ac.length; a++) F(ac[a], d2);
                  break;
                case "source":
                  F("error", d2);
                  break;
                case "img":
                case "image":
                case "link":
                  F("error", d2);
                  F("load", d2);
                  break;
                case "form":
                  F("reset", d2);
                  F("submit", d2);
                  break;
                case "details":
                  F("toggle", d2);
                  break;
                case "input":
                  Ab(d2, f2);
                  F("invalid", d2);
                  rd(c2, "onChange");
                  break;
                case "select":
                  d2._wrapperState = { wasMultiple: !!f2.multiple };
                  F("invalid", d2);
                  rd(c2, "onChange");
                  break;
                case "textarea":
                  Jb(d2, f2), F("invalid", d2), rd(c2, "onChange");
              }
              od(e2, f2);
              a = null;
              for (var g2 in f2) if (f2.hasOwnProperty(g2)) {
                var h2 = f2[g2];
                "children" === g2 ? "string" === typeof h2 ? d2.textContent !== h2 && (a = ["children", h2]) : "number" === typeof h2 && d2.textContent !== "" + h2 && (a = ["children", "" + h2]) : va.hasOwnProperty(g2) && null != h2 && rd(c2, g2);
              }
              switch (e2) {
                case "input":
                  xb(d2);
                  Eb(d2, f2, true);
                  break;
                case "textarea":
                  xb(d2);
                  Lb(d2);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  "function" === typeof f2.onClick && (d2.onclick = sd);
              }
              c2 = a;
              b2.updateQueue = c2;
              null !== c2 && (b2.effectTag |= 4);
            } else {
              g2 = 9 === c2.nodeType ? c2 : c2.ownerDocument;
              a === qd && (a = Nb(e2));
              a === qd ? "script" === e2 ? (a = g2.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d2.is ? a = g2.createElement(e2, { is: d2.is }) : (a = g2.createElement(e2), "select" === e2 && (g2 = a, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a = g2.createElementNS(a, e2);
              a[Md] = b2;
              a[Nd] = d2;
              ni(a, b2, false, false);
              b2.stateNode = a;
              g2 = pd(e2, d2);
              switch (e2) {
                case "iframe":
                case "object":
                case "embed":
                  F(
                    "load",
                    a
                  );
                  h2 = d2;
                  break;
                case "video":
                case "audio":
                  for (h2 = 0; h2 < ac.length; h2++) F(ac[h2], a);
                  h2 = d2;
                  break;
                case "source":
                  F("error", a);
                  h2 = d2;
                  break;
                case "img":
                case "image":
                case "link":
                  F("error", a);
                  F("load", a);
                  h2 = d2;
                  break;
                case "form":
                  F("reset", a);
                  F("submit", a);
                  h2 = d2;
                  break;
                case "details":
                  F("toggle", a);
                  h2 = d2;
                  break;
                case "input":
                  Ab(a, d2);
                  h2 = zb(a, d2);
                  F("invalid", a);
                  rd(c2, "onChange");
                  break;
                case "option":
                  h2 = Gb(a, d2);
                  break;
                case "select":
                  a._wrapperState = { wasMultiple: !!d2.multiple };
                  h2 = n$4({}, d2, { value: void 0 });
                  F("invalid", a);
                  rd(c2, "onChange");
                  break;
                case "textarea":
                  Jb(
                    a,
                    d2
                  );
                  h2 = Ib(a, d2);
                  F("invalid", a);
                  rd(c2, "onChange");
                  break;
                default:
                  h2 = d2;
              }
              od(e2, h2);
              var k2 = h2;
              for (f2 in k2) if (k2.hasOwnProperty(f2)) {
                var l2 = k2[f2];
                "style" === f2 ? md(a, l2) : "dangerouslySetInnerHTML" === f2 ? (l2 = l2 ? l2.__html : void 0, null != l2 && Qb(a, l2)) : "children" === f2 ? "string" === typeof l2 ? ("textarea" !== e2 || "" !== l2) && Rb(a, l2) : "number" === typeof l2 && Rb(a, "" + l2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (va.hasOwnProperty(f2) ? null != l2 && rd(c2, f2) : null != l2 && Xa(a, f2, l2, g2));
              }
              switch (e2) {
                case "input":
                  xb(a);
                  Eb(a, d2, false);
                  break;
                case "textarea":
                  xb(a);
                  Lb(a);
                  break;
                case "option":
                  null != d2.value && a.setAttribute("value", "" + rb(d2.value));
                  break;
                case "select":
                  a.multiple = !!d2.multiple;
                  c2 = d2.value;
                  null != c2 ? Hb(a, !!d2.multiple, c2, false) : null != d2.defaultValue && Hb(a, !!d2.multiple, d2.defaultValue, true);
                  break;
                default:
                  "function" === typeof h2.onClick && (a.onclick = sd);
              }
              Fd(e2, d2) && (b2.effectTag |= 4);
            }
            null !== b2.ref && (b2.effectTag |= 128);
          }
          return null;
        case 6:
          if (a && null != b2.stateNode) qi(a, b2, a.memoizedProps, d2);
          else {
            if ("string" !== typeof d2 && null === b2.stateNode) throw Error(u$3(166));
            c2 = ch(bh.current);
            ch($g.current);
            Wh(b2) ? (c2 = b2.stateNode, d2 = b2.memoizedProps, c2[Md] = b2, c2.nodeValue !== d2 && (b2.effectTag |= 4)) : (c2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), c2[Md] = b2, b2.stateNode = c2);
          }
          return null;
        case 13:
          H(M);
          d2 = b2.memoizedState;
          if (0 !== (b2.effectTag & 64)) return b2.expirationTime = c2, b2;
          c2 = null !== d2;
          d2 = false;
          null === a ? void 0 !== b2.memoizedProps.fallback && Wh(b2) : (e2 = a.memoizedState, d2 = null !== e2, c2 || null === e2 || (e2 = a.child.sibling, null !== e2 && (f2 = b2.firstEffect, null !== f2 ? (b2.firstEffect = e2, e2.nextEffect = f2) : (b2.firstEffect = b2.lastEffect = e2, e2.nextEffect = null), e2.effectTag = 8)));
          if (c2 && !d2 && 0 !== (b2.mode & 2)) if (null === a && true !== b2.memoizedProps.unstable_avoidThisFallback || 0 !== (M.current & 1)) S === ti && (S = ui);
          else {
            if (S === ti || S === ui) S = vi;
            0 !== wi && null !== T && (xi(T, U), yi(T, wi));
          }
          if (c2 || d2) b2.effectTag |= 4;
          return null;
        case 4:
          return eh(), oi(b2), null;
        case 10:
          return og(b2), null;
        case 17:
          return L(b2.type) && Df(), null;
        case 19:
          H(M);
          d2 = b2.memoizedState;
          if (null === d2) return null;
          e2 = 0 !== (b2.effectTag & 64);
          f2 = d2.rendering;
          if (null === f2) if (e2) ri(d2, false);
          else {
            if (S !== ti || null !== a && 0 !== (a.effectTag & 64)) for (f2 = b2.child; null !== f2; ) {
              a = hh(f2);
              if (null !== a) {
                b2.effectTag |= 64;
                ri(d2, false);
                e2 = a.updateQueue;
                null !== e2 && (b2.updateQueue = e2, b2.effectTag |= 4);
                null === d2.lastEffect && (b2.firstEffect = null);
                b2.lastEffect = d2.lastEffect;
                for (d2 = b2.child; null !== d2; ) e2 = d2, f2 = c2, e2.effectTag &= 2, e2.nextEffect = null, e2.firstEffect = null, e2.lastEffect = null, a = e2.alternate, null === a ? (e2.childExpirationTime = 0, e2.expirationTime = f2, e2.child = null, e2.memoizedProps = null, e2.memoizedState = null, e2.updateQueue = null, e2.dependencies = null) : (e2.childExpirationTime = a.childExpirationTime, e2.expirationTime = a.expirationTime, e2.child = a.child, e2.memoizedProps = a.memoizedProps, e2.memoizedState = a.memoizedState, e2.updateQueue = a.updateQueue, f2 = a.dependencies, e2.dependencies = null === f2 ? null : { expirationTime: f2.expirationTime, firstContext: f2.firstContext, responders: f2.responders }), d2 = d2.sibling;
                I(M, M.current & 1 | 2);
                return b2.child;
              }
              f2 = f2.sibling;
            }
          }
          else {
            if (!e2) if (a = hh(f2), null !== a) {
              if (b2.effectTag |= 64, e2 = true, c2 = a.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.effectTag |= 4), ri(d2, true), null === d2.tail && "hidden" === d2.tailMode && !f2.alternate) return b2 = b2.lastEffect = d2.lastEffect, null !== b2 && (b2.nextEffect = null), null;
            } else 2 * $f() - d2.renderingStartTime > d2.tailExpiration && 1 < c2 && (b2.effectTag |= 64, e2 = true, ri(d2, false), b2.expirationTime = b2.childExpirationTime = c2 - 1);
            d2.isBackwards ? (f2.sibling = b2.child, b2.child = f2) : (c2 = d2.last, null !== c2 ? c2.sibling = f2 : b2.child = f2, d2.last = f2);
          }
          return null !== d2.tail ? (0 === d2.tailExpiration && (d2.tailExpiration = $f() + 500), c2 = d2.tail, d2.rendering = c2, d2.tail = c2.sibling, d2.lastEffect = b2.lastEffect, d2.renderingStartTime = $f(), c2.sibling = null, b2 = M.current, I(M, e2 ? b2 & 1 | 2 : b2 & 1), c2) : null;
      }
      throw Error(u$3(
        156,
        b2.tag
      ));
    }
    function zi(a) {
      switch (a.tag) {
        case 1:
          L(a.type) && Df();
          var b2 = a.effectTag;
          return b2 & 4096 ? (a.effectTag = b2 & -4097 | 64, a) : null;
        case 3:
          eh();
          H(K);
          H(J);
          b2 = a.effectTag;
          if (0 !== (b2 & 64)) throw Error(u$3(285));
          a.effectTag = b2 & -4097 | 64;
          return a;
        case 5:
          return gh(a), null;
        case 13:
          return H(M), b2 = a.effectTag, b2 & 4096 ? (a.effectTag = b2 & -4097 | 64, a) : null;
        case 19:
          return H(M), null;
        case 4:
          return eh(), null;
        case 10:
          return og(a), null;
        default:
          return null;
      }
    }
    function Ai(a, b2) {
      return { value: a, source: b2, stack: qb(b2) };
    }
    var Bi = "function" === typeof WeakSet ? WeakSet : Set;
    function Ci(a, b2) {
      var c2 = b2.source, d2 = b2.stack;
      null === d2 && null !== c2 && (d2 = qb(c2));
      null !== c2 && pb(c2.type);
      b2 = b2.value;
      null !== a && 1 === a.tag && pb(a.type);
      try {
        console.error(b2);
      } catch (e2) {
        setTimeout(function() {
          throw e2;
        });
      }
    }
    function Di(a, b2) {
      try {
        b2.props = a.memoizedProps, b2.state = a.memoizedState, b2.componentWillUnmount();
      } catch (c2) {
        Ei(a, c2);
      }
    }
    function Fi(a) {
      var b2 = a.ref;
      if (null !== b2) if ("function" === typeof b2) try {
        b2(null);
      } catch (c2) {
        Ei(a, c2);
      }
      else b2.current = null;
    }
    function Gi(a, b2) {
      switch (b2.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
          return;
        case 1:
          if (b2.effectTag & 256 && null !== a) {
            var c2 = a.memoizedProps, d2 = a.memoizedState;
            a = b2.stateNode;
            b2 = a.getSnapshotBeforeUpdate(b2.elementType === b2.type ? c2 : ig(b2.type, c2), d2);
            a.__reactInternalSnapshotBeforeUpdate = b2;
          }
          return;
        case 3:
        case 5:
        case 6:
        case 4:
        case 17:
          return;
      }
      throw Error(u$3(163));
    }
    function Hi(a, b2) {
      b2 = b2.updateQueue;
      b2 = null !== b2 ? b2.lastEffect : null;
      if (null !== b2) {
        var c2 = b2 = b2.next;
        do {
          if ((c2.tag & a) === a) {
            var d2 = c2.destroy;
            c2.destroy = void 0;
            void 0 !== d2 && d2();
          }
          c2 = c2.next;
        } while (c2 !== b2);
      }
    }
    function Ii(a, b2) {
      b2 = b2.updateQueue;
      b2 = null !== b2 ? b2.lastEffect : null;
      if (null !== b2) {
        var c2 = b2 = b2.next;
        do {
          if ((c2.tag & a) === a) {
            var d2 = c2.create;
            c2.destroy = d2();
          }
          c2 = c2.next;
        } while (c2 !== b2);
      }
    }
    function Ji(a, b2, c2) {
      switch (c2.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
          Ii(3, c2);
          return;
        case 1:
          a = c2.stateNode;
          if (c2.effectTag & 4) if (null === b2) a.componentDidMount();
          else {
            var d2 = c2.elementType === c2.type ? b2.memoizedProps : ig(c2.type, b2.memoizedProps);
            a.componentDidUpdate(d2, b2.memoizedState, a.__reactInternalSnapshotBeforeUpdate);
          }
          b2 = c2.updateQueue;
          null !== b2 && Cg(c2, b2, a);
          return;
        case 3:
          b2 = c2.updateQueue;
          if (null !== b2) {
            a = null;
            if (null !== c2.child) switch (c2.child.tag) {
              case 5:
                a = c2.child.stateNode;
                break;
              case 1:
                a = c2.child.stateNode;
            }
            Cg(c2, b2, a);
          }
          return;
        case 5:
          a = c2.stateNode;
          null === b2 && c2.effectTag & 4 && Fd(c2.type, c2.memoizedProps) && a.focus();
          return;
        case 6:
          return;
        case 4:
          return;
        case 12:
          return;
        case 13:
          null === c2.memoizedState && (c2 = c2.alternate, null !== c2 && (c2 = c2.memoizedState, null !== c2 && (c2 = c2.dehydrated, null !== c2 && Vc(c2))));
          return;
        case 19:
        case 17:
        case 20:
        case 21:
          return;
      }
      throw Error(u$3(163));
    }
    function Ki(a, b2, c2) {
      "function" === typeof Li && Li(b2);
      switch (b2.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
          a = b2.updateQueue;
          if (null !== a && (a = a.lastEffect, null !== a)) {
            var d2 = a.next;
            cg(97 < c2 ? 97 : c2, function() {
              var a2 = d2;
              do {
                var c3 = a2.destroy;
                if (void 0 !== c3) {
                  var g2 = b2;
                  try {
                    c3();
                  } catch (h2) {
                    Ei(g2, h2);
                  }
                }
                a2 = a2.next;
              } while (a2 !== d2);
            });
          }
          break;
        case 1:
          Fi(b2);
          c2 = b2.stateNode;
          "function" === typeof c2.componentWillUnmount && Di(b2, c2);
          break;
        case 5:
          Fi(b2);
          break;
        case 4:
          Mi(a, b2, c2);
      }
    }
    function Ni(a) {
      var b2 = a.alternate;
      a.return = null;
      a.child = null;
      a.memoizedState = null;
      a.updateQueue = null;
      a.dependencies = null;
      a.alternate = null;
      a.firstEffect = null;
      a.lastEffect = null;
      a.pendingProps = null;
      a.memoizedProps = null;
      a.stateNode = null;
      null !== b2 && Ni(b2);
    }
    function Oi(a) {
      return 5 === a.tag || 3 === a.tag || 4 === a.tag;
    }
    function Pi(a) {
      a: {
        for (var b2 = a.return; null !== b2; ) {
          if (Oi(b2)) {
            var c2 = b2;
            break a;
          }
          b2 = b2.return;
        }
        throw Error(u$3(160));
      }
      b2 = c2.stateNode;
      switch (c2.tag) {
        case 5:
          var d2 = false;
          break;
        case 3:
          b2 = b2.containerInfo;
          d2 = true;
          break;
        case 4:
          b2 = b2.containerInfo;
          d2 = true;
          break;
        default:
          throw Error(u$3(161));
      }
      c2.effectTag & 16 && (Rb(b2, ""), c2.effectTag &= -17);
      a: b: for (c2 = a; ; ) {
        for (; null === c2.sibling; ) {
          if (null === c2.return || Oi(c2.return)) {
            c2 = null;
            break a;
          }
          c2 = c2.return;
        }
        c2.sibling.return = c2.return;
        for (c2 = c2.sibling; 5 !== c2.tag && 6 !== c2.tag && 18 !== c2.tag; ) {
          if (c2.effectTag & 2) continue b;
          if (null === c2.child || 4 === c2.tag) continue b;
          else c2.child.return = c2, c2 = c2.child;
        }
        if (!(c2.effectTag & 2)) {
          c2 = c2.stateNode;
          break a;
        }
      }
      d2 ? Qi(a, c2, b2) : Ri(a, c2, b2);
    }
    function Qi(a, b2, c2) {
      var d2 = a.tag, e2 = 5 === d2 || 6 === d2;
      if (e2) a = e2 ? a.stateNode : a.stateNode.instance, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a, b2) : c2.insertBefore(a, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a, c2)) : (b2 = c2, b2.appendChild(a)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = sd));
      else if (4 !== d2 && (a = a.child, null !== a)) for (Qi(a, b2, c2), a = a.sibling; null !== a; ) Qi(a, b2, c2), a = a.sibling;
    }
    function Ri(a, b2, c2) {
      var d2 = a.tag, e2 = 5 === d2 || 6 === d2;
      if (e2) a = e2 ? a.stateNode : a.stateNode.instance, b2 ? c2.insertBefore(a, b2) : c2.appendChild(a);
      else if (4 !== d2 && (a = a.child, null !== a)) for (Ri(a, b2, c2), a = a.sibling; null !== a; ) Ri(a, b2, c2), a = a.sibling;
    }
    function Mi(a, b2, c2) {
      for (var d2 = b2, e2 = false, f2, g2; ; ) {
        if (!e2) {
          e2 = d2.return;
          a: for (; ; ) {
            if (null === e2) throw Error(u$3(160));
            f2 = e2.stateNode;
            switch (e2.tag) {
              case 5:
                g2 = false;
                break a;
              case 3:
                f2 = f2.containerInfo;
                g2 = true;
                break a;
              case 4:
                f2 = f2.containerInfo;
                g2 = true;
                break a;
            }
            e2 = e2.return;
          }
          e2 = true;
        }
        if (5 === d2.tag || 6 === d2.tag) {
          a: for (var h2 = a, k2 = d2, l2 = c2, m2 = k2; ; ) if (Ki(h2, m2, l2), null !== m2.child && 4 !== m2.tag) m2.child.return = m2, m2 = m2.child;
          else {
            if (m2 === k2) break a;
            for (; null === m2.sibling; ) {
              if (null === m2.return || m2.return === k2) break a;
              m2 = m2.return;
            }
            m2.sibling.return = m2.return;
            m2 = m2.sibling;
          }
          g2 ? (h2 = f2, k2 = d2.stateNode, 8 === h2.nodeType ? h2.parentNode.removeChild(k2) : h2.removeChild(k2)) : f2.removeChild(d2.stateNode);
        } else if (4 === d2.tag) {
          if (null !== d2.child) {
            f2 = d2.stateNode.containerInfo;
            g2 = true;
            d2.child.return = d2;
            d2 = d2.child;
            continue;
          }
        } else if (Ki(a, d2, c2), null !== d2.child) {
          d2.child.return = d2;
          d2 = d2.child;
          continue;
        }
        if (d2 === b2) break;
        for (; null === d2.sibling; ) {
          if (null === d2.return || d2.return === b2) return;
          d2 = d2.return;
          4 === d2.tag && (e2 = false);
        }
        d2.sibling.return = d2.return;
        d2 = d2.sibling;
      }
    }
    function Si(a, b2) {
      switch (b2.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
          Hi(3, b2);
          return;
        case 1:
          return;
        case 5:
          var c2 = b2.stateNode;
          if (null != c2) {
            var d2 = b2.memoizedProps, e2 = null !== a ? a.memoizedProps : d2;
            a = b2.type;
            var f2 = b2.updateQueue;
            b2.updateQueue = null;
            if (null !== f2) {
              c2[Nd] = d2;
              "input" === a && "radio" === d2.type && null != d2.name && Bb(c2, d2);
              pd(a, e2);
              b2 = pd(a, d2);
              for (e2 = 0; e2 < f2.length; e2 += 2) {
                var g2 = f2[e2], h2 = f2[e2 + 1];
                "style" === g2 ? md(c2, h2) : "dangerouslySetInnerHTML" === g2 ? Qb(c2, h2) : "children" === g2 ? Rb(c2, h2) : Xa(c2, g2, h2, b2);
              }
              switch (a) {
                case "input":
                  Cb(c2, d2);
                  break;
                case "textarea":
                  Kb(c2, d2);
                  break;
                case "select":
                  b2 = c2._wrapperState.wasMultiple, c2._wrapperState.wasMultiple = !!d2.multiple, a = d2.value, null != a ? Hb(c2, !!d2.multiple, a, false) : b2 !== !!d2.multiple && (null != d2.defaultValue ? Hb(c2, !!d2.multiple, d2.defaultValue, true) : Hb(c2, !!d2.multiple, d2.multiple ? [] : "", false));
              }
            }
          }
          return;
        case 6:
          if (null === b2.stateNode) throw Error(u$3(162));
          b2.stateNode.nodeValue = b2.memoizedProps;
          return;
        case 3:
          b2 = b2.stateNode;
          b2.hydrate && (b2.hydrate = false, Vc(b2.containerInfo));
          return;
        case 12:
          return;
        case 13:
          c2 = b2;
          null === b2.memoizedState ? d2 = false : (d2 = true, c2 = b2.child, Ti = $f());
          if (null !== c2) a: for (a = c2; ; ) {
            if (5 === a.tag) f2 = a.stateNode, d2 ? (f2 = f2.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (f2 = a.stateNode, e2 = a.memoizedProps.style, e2 = void 0 !== e2 && null !== e2 && e2.hasOwnProperty("display") ? e2.display : null, f2.style.display = ld("display", e2));
            else if (6 === a.tag) a.stateNode.nodeValue = d2 ? "" : a.memoizedProps;
            else if (13 === a.tag && null !== a.memoizedState && null === a.memoizedState.dehydrated) {
              f2 = a.child.sibling;
              f2.return = a;
              a = f2;
              continue;
            } else if (null !== a.child) {
              a.child.return = a;
              a = a.child;
              continue;
            }
            if (a === c2) break;
            for (; null === a.sibling; ) {
              if (null === a.return || a.return === c2) break a;
              a = a.return;
            }
            a.sibling.return = a.return;
            a = a.sibling;
          }
          Ui(b2);
          return;
        case 19:
          Ui(b2);
          return;
        case 17:
          return;
      }
      throw Error(u$3(163));
    }
    function Ui(a) {
      var b2 = a.updateQueue;
      if (null !== b2) {
        a.updateQueue = null;
        var c2 = a.stateNode;
        null === c2 && (c2 = a.stateNode = new Bi());
        b2.forEach(function(b3) {
          var d2 = Vi.bind(null, a, b3);
          c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
        });
      }
    }
    var Wi = "function" === typeof WeakMap ? WeakMap : Map;
    function Xi(a, b2, c2) {
      c2 = wg(c2, null);
      c2.tag = 3;
      c2.payload = { element: null };
      var d2 = b2.value;
      c2.callback = function() {
        Yi || (Yi = true, Zi = d2);
        Ci(a, b2);
      };
      return c2;
    }
    function $i(a, b2, c2) {
      c2 = wg(c2, null);
      c2.tag = 3;
      var d2 = a.type.getDerivedStateFromError;
      if ("function" === typeof d2) {
        var e2 = b2.value;
        c2.payload = function() {
          Ci(a, b2);
          return d2(e2);
        };
      }
      var f2 = a.stateNode;
      null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
        "function" !== typeof d2 && (null === aj ? aj = /* @__PURE__ */ new Set([this]) : aj.add(this), Ci(a, b2));
        var c3 = b2.stack;
        this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
      });
      return c2;
    }
    var bj = Math.ceil, cj = Wa.ReactCurrentDispatcher, dj = Wa.ReactCurrentOwner, V = 0, ej = 8, fj = 16, gj = 32, ti = 0, hj = 1, ij = 2, ui = 3, vi = 4, jj = 5, W = V, T = null, X = null, U = 0, S = ti, kj = null, lj = 1073741823, mj = 1073741823, nj = null, wi = 0, oj = false, Ti = 0, pj = 500, Y = null, Yi = false, Zi = null, aj = null, qj = false, rj = null, sj = 90, tj = null, uj = 0, vj = null, wj = 0;
    function Gg() {
      return (W & (fj | gj)) !== V ? 1073741821 - ($f() / 10 | 0) : 0 !== wj ? wj : wj = 1073741821 - ($f() / 10 | 0);
    }
    function Hg(a, b2, c2) {
      b2 = b2.mode;
      if (0 === (b2 & 2)) return 1073741823;
      var d2 = ag();
      if (0 === (b2 & 4)) return 99 === d2 ? 1073741823 : 1073741822;
      if ((W & fj) !== V) return U;
      if (null !== c2) a = hg(a, c2.timeoutMs | 0 || 5e3, 250);
      else switch (d2) {
        case 99:
          a = 1073741823;
          break;
        case 98:
          a = hg(a, 150, 100);
          break;
        case 97:
        case 96:
          a = hg(a, 5e3, 250);
          break;
        case 95:
          a = 2;
          break;
        default:
          throw Error(u$3(326));
      }
      null !== T && a === U && --a;
      return a;
    }
    function Ig(a, b2) {
      if (50 < uj) throw uj = 0, vj = null, Error(u$3(185));
      a = xj(a, b2);
      if (null !== a) {
        var c2 = ag();
        1073741823 === b2 ? (W & ej) !== V && (W & (fj | gj)) === V ? yj(a) : (Z(a), W === V && gg()) : Z(a);
        (W & 4) === V || 98 !== c2 && 99 !== c2 || (null === tj ? tj = /* @__PURE__ */ new Map([[a, b2]]) : (c2 = tj.get(a), (void 0 === c2 || c2 > b2) && tj.set(a, b2)));
      }
    }
    function xj(a, b2) {
      a.expirationTime < b2 && (a.expirationTime = b2);
      var c2 = a.alternate;
      null !== c2 && c2.expirationTime < b2 && (c2.expirationTime = b2);
      var d2 = a.return, e2 = null;
      if (null === d2 && 3 === a.tag) e2 = a.stateNode;
      else for (; null !== d2; ) {
        c2 = d2.alternate;
        d2.childExpirationTime < b2 && (d2.childExpirationTime = b2);
        null !== c2 && c2.childExpirationTime < b2 && (c2.childExpirationTime = b2);
        if (null === d2.return && 3 === d2.tag) {
          e2 = d2.stateNode;
          break;
        }
        d2 = d2.return;
      }
      null !== e2 && (T === e2 && (Bg(b2), S === vi && xi(e2, U)), yi(e2, b2));
      return e2;
    }
    function zj(a) {
      var b2 = a.lastExpiredTime;
      if (0 !== b2) return b2;
      b2 = a.firstPendingTime;
      if (!Aj(a, b2)) return b2;
      var c2 = a.lastPingedTime;
      a = a.nextKnownPendingLevel;
      a = c2 > a ? c2 : a;
      return 2 >= a && b2 !== a ? 0 : a;
    }
    function Z(a) {
      if (0 !== a.lastExpiredTime) a.callbackExpirationTime = 1073741823, a.callbackPriority = 99, a.callbackNode = eg(yj.bind(null, a));
      else {
        var b2 = zj(a), c2 = a.callbackNode;
        if (0 === b2) null !== c2 && (a.callbackNode = null, a.callbackExpirationTime = 0, a.callbackPriority = 90);
        else {
          var d2 = Gg();
          1073741823 === b2 ? d2 = 99 : 1 === b2 || 2 === b2 ? d2 = 95 : (d2 = 10 * (1073741821 - b2) - 10 * (1073741821 - d2), d2 = 0 >= d2 ? 99 : 250 >= d2 ? 98 : 5250 >= d2 ? 97 : 95);
          if (null !== c2) {
            var e2 = a.callbackPriority;
            if (a.callbackExpirationTime === b2 && e2 >= d2) return;
            c2 !== Tf && Kf(c2);
          }
          a.callbackExpirationTime = b2;
          a.callbackPriority = d2;
          b2 = 1073741823 === b2 ? eg(yj.bind(null, a)) : dg(d2, Bj.bind(null, a), { timeout: 10 * (1073741821 - b2) - $f() });
          a.callbackNode = b2;
        }
      }
    }
    function Bj(a, b2) {
      wj = 0;
      if (b2) return b2 = Gg(), Cj(a, b2), Z(a), null;
      var c2 = zj(a);
      if (0 !== c2) {
        b2 = a.callbackNode;
        if ((W & (fj | gj)) !== V) throw Error(u$3(327));
        Dj();
        a === T && c2 === U || Ej(a, c2);
        if (null !== X) {
          var d2 = W;
          W |= fj;
          var e2 = Fj();
          do
            try {
              Gj();
              break;
            } catch (h2) {
              Hj(a, h2);
            }
          while (1);
          ng();
          W = d2;
          cj.current = e2;
          if (S === hj) throw b2 = kj, Ej(a, c2), xi(a, c2), Z(a), b2;
          if (null === X) switch (e2 = a.finishedWork = a.current.alternate, a.finishedExpirationTime = c2, d2 = S, T = null, d2) {
            case ti:
            case hj:
              throw Error(u$3(345));
            case ij:
              Cj(a, 2 < c2 ? 2 : c2);
              break;
            case ui:
              xi(a, c2);
              d2 = a.lastSuspendedTime;
              c2 === d2 && (a.nextKnownPendingLevel = Ij(e2));
              if (1073741823 === lj && (e2 = Ti + pj - $f(), 10 < e2)) {
                if (oj) {
                  var f2 = a.lastPingedTime;
                  if (0 === f2 || f2 >= c2) {
                    a.lastPingedTime = c2;
                    Ej(a, c2);
                    break;
                  }
                }
                f2 = zj(a);
                if (0 !== f2 && f2 !== c2) break;
                if (0 !== d2 && d2 !== c2) {
                  a.lastPingedTime = d2;
                  break;
                }
                a.timeoutHandle = Hd(Jj.bind(null, a), e2);
                break;
              }
              Jj(a);
              break;
            case vi:
              xi(a, c2);
              d2 = a.lastSuspendedTime;
              c2 === d2 && (a.nextKnownPendingLevel = Ij(e2));
              if (oj && (e2 = a.lastPingedTime, 0 === e2 || e2 >= c2)) {
                a.lastPingedTime = c2;
                Ej(a, c2);
                break;
              }
              e2 = zj(a);
              if (0 !== e2 && e2 !== c2) break;
              if (0 !== d2 && d2 !== c2) {
                a.lastPingedTime = d2;
                break;
              }
              1073741823 !== mj ? d2 = 10 * (1073741821 - mj) - $f() : 1073741823 === lj ? d2 = 0 : (d2 = 10 * (1073741821 - lj) - 5e3, e2 = $f(), c2 = 10 * (1073741821 - c2) - e2, d2 = e2 - d2, 0 > d2 && (d2 = 0), d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * bj(d2 / 1960)) - d2, c2 < d2 && (d2 = c2));
              if (10 < d2) {
                a.timeoutHandle = Hd(Jj.bind(null, a), d2);
                break;
              }
              Jj(a);
              break;
            case jj:
              if (1073741823 !== lj && null !== nj) {
                f2 = lj;
                var g2 = nj;
                d2 = g2.busyMinDurationMs | 0;
                0 >= d2 ? d2 = 0 : (e2 = g2.busyDelayMs | 0, f2 = $f() - (10 * (1073741821 - f2) - (g2.timeoutMs | 0 || 5e3)), d2 = f2 <= e2 ? 0 : e2 + d2 - f2);
                if (10 < d2) {
                  xi(a, c2);
                  a.timeoutHandle = Hd(Jj.bind(null, a), d2);
                  break;
                }
              }
              Jj(a);
              break;
            default:
              throw Error(u$3(329));
          }
          Z(a);
          if (a.callbackNode === b2) return Bj.bind(null, a);
        }
      }
      return null;
    }
    function yj(a) {
      var b2 = a.lastExpiredTime;
      b2 = 0 !== b2 ? b2 : 1073741823;
      if ((W & (fj | gj)) !== V) throw Error(u$3(327));
      Dj();
      a === T && b2 === U || Ej(a, b2);
      if (null !== X) {
        var c2 = W;
        W |= fj;
        var d2 = Fj();
        do
          try {
            Kj();
            break;
          } catch (e2) {
            Hj(a, e2);
          }
        while (1);
        ng();
        W = c2;
        cj.current = d2;
        if (S === hj) throw c2 = kj, Ej(a, b2), xi(a, b2), Z(a), c2;
        if (null !== X) throw Error(u$3(261));
        a.finishedWork = a.current.alternate;
        a.finishedExpirationTime = b2;
        T = null;
        Jj(a);
        Z(a);
      }
      return null;
    }
    function Lj() {
      if (null !== tj) {
        var a = tj;
        tj = null;
        a.forEach(function(a2, c2) {
          Cj(c2, a2);
          Z(c2);
        });
        gg();
      }
    }
    function Mj(a, b2) {
      var c2 = W;
      W |= 1;
      try {
        return a(b2);
      } finally {
        W = c2, W === V && gg();
      }
    }
    function Nj(a, b2) {
      var c2 = W;
      W &= -2;
      W |= ej;
      try {
        return a(b2);
      } finally {
        W = c2, W === V && gg();
      }
    }
    function Ej(a, b2) {
      a.finishedWork = null;
      a.finishedExpirationTime = 0;
      var c2 = a.timeoutHandle;
      -1 !== c2 && (a.timeoutHandle = -1, Id(c2));
      if (null !== X) for (c2 = X.return; null !== c2; ) {
        var d2 = c2;
        switch (d2.tag) {
          case 1:
            d2 = d2.type.childContextTypes;
            null !== d2 && void 0 !== d2 && Df();
            break;
          case 3:
            eh();
            H(K);
            H(J);
            break;
          case 5:
            gh(d2);
            break;
          case 4:
            eh();
            break;
          case 13:
            H(M);
            break;
          case 19:
            H(M);
            break;
          case 10:
            og(d2);
        }
        c2 = c2.return;
      }
      T = a;
      X = Sg(a.current, null);
      U = b2;
      S = ti;
      kj = null;
      mj = lj = 1073741823;
      nj = null;
      wi = 0;
      oj = false;
    }
    function Hj(a, b2) {
      do {
        try {
          ng();
          jh.current = sh;
          if (mh) for (var c2 = N.memoizedState; null !== c2; ) {
            var d2 = c2.queue;
            null !== d2 && (d2.pending = null);
            c2 = c2.next;
          }
          lh = 0;
          P = O = N = null;
          mh = false;
          if (null === X || null === X.return) return S = hj, kj = b2, X = null;
          a: {
            var e2 = a, f2 = X.return, g2 = X, h2 = b2;
            b2 = U;
            g2.effectTag |= 2048;
            g2.firstEffect = g2.lastEffect = null;
            if (null !== h2 && "object" === typeof h2 && "function" === typeof h2.then) {
              var k2 = h2;
              if (0 === (g2.mode & 2)) {
                var l2 = g2.alternate;
                l2 ? (g2.updateQueue = l2.updateQueue, g2.memoizedState = l2.memoizedState, g2.expirationTime = l2.expirationTime) : (g2.updateQueue = null, g2.memoizedState = null);
              }
              var m2 = 0 !== (M.current & 1), p2 = f2;
              do {
                var x2;
                if (x2 = 13 === p2.tag) {
                  var z2 = p2.memoizedState;
                  if (null !== z2) x2 = null !== z2.dehydrated ? true : false;
                  else {
                    var ca = p2.memoizedProps;
                    x2 = void 0 === ca.fallback ? false : true !== ca.unstable_avoidThisFallback ? true : m2 ? false : true;
                  }
                }
                if (x2) {
                  var D2 = p2.updateQueue;
                  if (null === D2) {
                    var t2 = /* @__PURE__ */ new Set();
                    t2.add(k2);
                    p2.updateQueue = t2;
                  } else D2.add(k2);
                  if (0 === (p2.mode & 2)) {
                    p2.effectTag |= 64;
                    g2.effectTag &= -2981;
                    if (1 === g2.tag) if (null === g2.alternate) g2.tag = 17;
                    else {
                      var y2 = wg(1073741823, null);
                      y2.tag = 2;
                      xg(g2, y2);
                    }
                    g2.expirationTime = 1073741823;
                    break a;
                  }
                  h2 = void 0;
                  g2 = b2;
                  var A2 = e2.pingCache;
                  null === A2 ? (A2 = e2.pingCache = new Wi(), h2 = /* @__PURE__ */ new Set(), A2.set(k2, h2)) : (h2 = A2.get(k2), void 0 === h2 && (h2 = /* @__PURE__ */ new Set(), A2.set(k2, h2)));
                  if (!h2.has(g2)) {
                    h2.add(g2);
                    var q2 = Oj.bind(null, e2, k2, g2);
                    k2.then(q2, q2);
                  }
                  p2.effectTag |= 4096;
                  p2.expirationTime = b2;
                  break a;
                }
                p2 = p2.return;
              } while (null !== p2);
              h2 = Error((pb(g2.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + qb(g2));
            }
            S !== jj && (S = ij);
            h2 = Ai(h2, g2);
            p2 = f2;
            do {
              switch (p2.tag) {
                case 3:
                  k2 = h2;
                  p2.effectTag |= 4096;
                  p2.expirationTime = b2;
                  var B2 = Xi(p2, k2, b2);
                  yg(p2, B2);
                  break a;
                case 1:
                  k2 = h2;
                  var w2 = p2.type, ub = p2.stateNode;
                  if (0 === (p2.effectTag & 64) && ("function" === typeof w2.getDerivedStateFromError || null !== ub && "function" === typeof ub.componentDidCatch && (null === aj || !aj.has(ub)))) {
                    p2.effectTag |= 4096;
                    p2.expirationTime = b2;
                    var vb = $i(p2, k2, b2);
                    yg(p2, vb);
                    break a;
                  }
              }
              p2 = p2.return;
            } while (null !== p2);
          }
          X = Pj(X);
        } catch (Xc) {
          b2 = Xc;
          continue;
        }
        break;
      } while (1);
    }
    function Fj() {
      var a = cj.current;
      cj.current = sh;
      return null === a ? sh : a;
    }
    function Ag(a, b2) {
      a < lj && 2 < a && (lj = a);
      null !== b2 && a < mj && 2 < a && (mj = a, nj = b2);
    }
    function Bg(a) {
      a > wi && (wi = a);
    }
    function Kj() {
      for (; null !== X; ) X = Qj(X);
    }
    function Gj() {
      for (; null !== X && !Uf(); ) X = Qj(X);
    }
    function Qj(a) {
      var b2 = Rj(a.alternate, a, U);
      a.memoizedProps = a.pendingProps;
      null === b2 && (b2 = Pj(a));
      dj.current = null;
      return b2;
    }
    function Pj(a) {
      X = a;
      do {
        var b2 = X.alternate;
        a = X.return;
        if (0 === (X.effectTag & 2048)) {
          b2 = si(b2, X, U);
          if (1 === U || 1 !== X.childExpirationTime) {
            for (var c2 = 0, d2 = X.child; null !== d2; ) {
              var e2 = d2.expirationTime, f2 = d2.childExpirationTime;
              e2 > c2 && (c2 = e2);
              f2 > c2 && (c2 = f2);
              d2 = d2.sibling;
            }
            X.childExpirationTime = c2;
          }
          if (null !== b2) return b2;
          null !== a && 0 === (a.effectTag & 2048) && (null === a.firstEffect && (a.firstEffect = X.firstEffect), null !== X.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = X.firstEffect), a.lastEffect = X.lastEffect), 1 < X.effectTag && (null !== a.lastEffect ? a.lastEffect.nextEffect = X : a.firstEffect = X, a.lastEffect = X));
        } else {
          b2 = zi(X);
          if (null !== b2) return b2.effectTag &= 2047, b2;
          null !== a && (a.firstEffect = a.lastEffect = null, a.effectTag |= 2048);
        }
        b2 = X.sibling;
        if (null !== b2) return b2;
        X = a;
      } while (null !== X);
      S === ti && (S = jj);
      return null;
    }
    function Ij(a) {
      var b2 = a.expirationTime;
      a = a.childExpirationTime;
      return b2 > a ? b2 : a;
    }
    function Jj(a) {
      var b2 = ag();
      cg(99, Sj.bind(null, a, b2));
      return null;
    }
    function Sj(a, b2) {
      do
        Dj();
      while (null !== rj);
      if ((W & (fj | gj)) !== V) throw Error(u$3(327));
      var c2 = a.finishedWork, d2 = a.finishedExpirationTime;
      if (null === c2) return null;
      a.finishedWork = null;
      a.finishedExpirationTime = 0;
      if (c2 === a.current) throw Error(u$3(177));
      a.callbackNode = null;
      a.callbackExpirationTime = 0;
      a.callbackPriority = 90;
      a.nextKnownPendingLevel = 0;
      var e2 = Ij(c2);
      a.firstPendingTime = e2;
      d2 <= a.lastSuspendedTime ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : d2 <= a.firstSuspendedTime && (a.firstSuspendedTime = d2 - 1);
      d2 <= a.lastPingedTime && (a.lastPingedTime = 0);
      d2 <= a.lastExpiredTime && (a.lastExpiredTime = 0);
      a === T && (X = T = null, U = 0);
      1 < c2.effectTag ? null !== c2.lastEffect ? (c2.lastEffect.nextEffect = c2, e2 = c2.firstEffect) : e2 = c2 : e2 = c2.firstEffect;
      if (null !== e2) {
        var f2 = W;
        W |= gj;
        dj.current = null;
        Dd = fd;
        var g2 = xd();
        if (yd(g2)) {
          if ("selectionStart" in g2) var h2 = { start: g2.selectionStart, end: g2.selectionEnd };
          else a: {
            h2 = (h2 = g2.ownerDocument) && h2.defaultView || window;
            var k2 = h2.getSelection && h2.getSelection();
            if (k2 && 0 !== k2.rangeCount) {
              h2 = k2.anchorNode;
              var l2 = k2.anchorOffset, m2 = k2.focusNode;
              k2 = k2.focusOffset;
              try {
                h2.nodeType, m2.nodeType;
              } catch (wb) {
                h2 = null;
                break a;
              }
              var p2 = 0, x2 = -1, z2 = -1, ca = 0, D2 = 0, t2 = g2, y2 = null;
              b: for (; ; ) {
                for (var A2; ; ) {
                  t2 !== h2 || 0 !== l2 && 3 !== t2.nodeType || (x2 = p2 + l2);
                  t2 !== m2 || 0 !== k2 && 3 !== t2.nodeType || (z2 = p2 + k2);
                  3 === t2.nodeType && (p2 += t2.nodeValue.length);
                  if (null === (A2 = t2.firstChild)) break;
                  y2 = t2;
                  t2 = A2;
                }
                for (; ; ) {
                  if (t2 === g2) break b;
                  y2 === h2 && ++ca === l2 && (x2 = p2);
                  y2 === m2 && ++D2 === k2 && (z2 = p2);
                  if (null !== (A2 = t2.nextSibling)) break;
                  t2 = y2;
                  y2 = t2.parentNode;
                }
                t2 = A2;
              }
              h2 = -1 === x2 || -1 === z2 ? null : { start: x2, end: z2 };
            } else h2 = null;
          }
          h2 = h2 || { start: 0, end: 0 };
        } else h2 = null;
        Ed = { activeElementDetached: null, focusedElem: g2, selectionRange: h2 };
        fd = false;
        Y = e2;
        do
          try {
            Tj();
          } catch (wb) {
            if (null === Y) throw Error(u$3(330));
            Ei(Y, wb);
            Y = Y.nextEffect;
          }
        while (null !== Y);
        Y = e2;
        do
          try {
            for (g2 = a, h2 = b2; null !== Y; ) {
              var q2 = Y.effectTag;
              q2 & 16 && Rb(Y.stateNode, "");
              if (q2 & 128) {
                var B2 = Y.alternate;
                if (null !== B2) {
                  var w2 = B2.ref;
                  null !== w2 && ("function" === typeof w2 ? w2(null) : w2.current = null);
                }
              }
              switch (q2 & 1038) {
                case 2:
                  Pi(Y);
                  Y.effectTag &= -3;
                  break;
                case 6:
                  Pi(Y);
                  Y.effectTag &= -3;
                  Si(Y.alternate, Y);
                  break;
                case 1024:
                  Y.effectTag &= -1025;
                  break;
                case 1028:
                  Y.effectTag &= -1025;
                  Si(Y.alternate, Y);
                  break;
                case 4:
                  Si(Y.alternate, Y);
                  break;
                case 8:
                  l2 = Y, Mi(g2, l2, h2), Ni(l2);
              }
              Y = Y.nextEffect;
            }
          } catch (wb) {
            if (null === Y) throw Error(u$3(330));
            Ei(Y, wb);
            Y = Y.nextEffect;
          }
        while (null !== Y);
        w2 = Ed;
        B2 = xd();
        q2 = w2.focusedElem;
        h2 = w2.selectionRange;
        if (B2 !== q2 && q2 && q2.ownerDocument && wd(q2.ownerDocument.documentElement, q2)) {
          null !== h2 && yd(q2) && (B2 = h2.start, w2 = h2.end, void 0 === w2 && (w2 = B2), "selectionStart" in q2 ? (q2.selectionStart = B2, q2.selectionEnd = Math.min(w2, q2.value.length)) : (w2 = (B2 = q2.ownerDocument || document) && B2.defaultView || window, w2.getSelection && (w2 = w2.getSelection(), l2 = q2.textContent.length, g2 = Math.min(h2.start, l2), h2 = void 0 === h2.end ? g2 : Math.min(h2.end, l2), !w2.extend && g2 > h2 && (l2 = h2, h2 = g2, g2 = l2), l2 = vd(q2, g2), m2 = vd(q2, h2), l2 && m2 && (1 !== w2.rangeCount || w2.anchorNode !== l2.node || w2.anchorOffset !== l2.offset || w2.focusNode !== m2.node || w2.focusOffset !== m2.offset) && (B2 = B2.createRange(), B2.setStart(l2.node, l2.offset), w2.removeAllRanges(), g2 > h2 ? (w2.addRange(B2), w2.extend(m2.node, m2.offset)) : (B2.setEnd(m2.node, m2.offset), w2.addRange(B2))))));
          B2 = [];
          for (w2 = q2; w2 = w2.parentNode; ) 1 === w2.nodeType && B2.push({
            element: w2,
            left: w2.scrollLeft,
            top: w2.scrollTop
          });
          "function" === typeof q2.focus && q2.focus();
          for (q2 = 0; q2 < B2.length; q2++) w2 = B2[q2], w2.element.scrollLeft = w2.left, w2.element.scrollTop = w2.top;
        }
        fd = !!Dd;
        Ed = Dd = null;
        a.current = c2;
        Y = e2;
        do
          try {
            for (q2 = a; null !== Y; ) {
              var ub = Y.effectTag;
              ub & 36 && Ji(q2, Y.alternate, Y);
              if (ub & 128) {
                B2 = void 0;
                var vb = Y.ref;
                if (null !== vb) {
                  var Xc = Y.stateNode;
                  switch (Y.tag) {
                    case 5:
                      B2 = Xc;
                      break;
                    default:
                      B2 = Xc;
                  }
                  "function" === typeof vb ? vb(B2) : vb.current = B2;
                }
              }
              Y = Y.nextEffect;
            }
          } catch (wb) {
            if (null === Y) throw Error(u$3(330));
            Ei(Y, wb);
            Y = Y.nextEffect;
          }
        while (null !== Y);
        Y = null;
        Vf();
        W = f2;
      } else a.current = c2;
      if (qj) qj = false, rj = a, sj = b2;
      else for (Y = e2; null !== Y; ) b2 = Y.nextEffect, Y.nextEffect = null, Y = b2;
      b2 = a.firstPendingTime;
      0 === b2 && (aj = null);
      1073741823 === b2 ? a === vj ? uj++ : (uj = 0, vj = a) : uj = 0;
      "function" === typeof Uj && Uj(c2.stateNode, d2);
      Z(a);
      if (Yi) throw Yi = false, a = Zi, Zi = null, a;
      if ((W & ej) !== V) return null;
      gg();
      return null;
    }
    function Tj() {
      for (; null !== Y; ) {
        var a = Y.effectTag;
        0 !== (a & 256) && Gi(Y.alternate, Y);
        0 === (a & 512) || qj || (qj = true, dg(97, function() {
          Dj();
          return null;
        }));
        Y = Y.nextEffect;
      }
    }
    function Dj() {
      if (90 !== sj) {
        var a = 97 < sj ? 97 : sj;
        sj = 90;
        return cg(a, Vj);
      }
    }
    function Vj() {
      if (null === rj) return false;
      var a = rj;
      rj = null;
      if ((W & (fj | gj)) !== V) throw Error(u$3(331));
      var b2 = W;
      W |= gj;
      for (a = a.current.firstEffect; null !== a; ) {
        try {
          var c2 = a;
          if (0 !== (c2.effectTag & 512)) switch (c2.tag) {
            case 0:
            case 11:
            case 15:
            case 22:
              Hi(5, c2), Ii(5, c2);
          }
        } catch (d2) {
          if (null === a) throw Error(u$3(330));
          Ei(a, d2);
        }
        c2 = a.nextEffect;
        a.nextEffect = null;
        a = c2;
      }
      W = b2;
      gg();
      return true;
    }
    function Wj(a, b2, c2) {
      b2 = Ai(c2, b2);
      b2 = Xi(a, b2, 1073741823);
      xg(a, b2);
      a = xj(a, 1073741823);
      null !== a && Z(a);
    }
    function Ei(a, b2) {
      if (3 === a.tag) Wj(a, a, b2);
      else for (var c2 = a.return; null !== c2; ) {
        if (3 === c2.tag) {
          Wj(c2, a, b2);
          break;
        } else if (1 === c2.tag) {
          var d2 = c2.stateNode;
          if ("function" === typeof c2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === aj || !aj.has(d2))) {
            a = Ai(b2, a);
            a = $i(c2, a, 1073741823);
            xg(c2, a);
            c2 = xj(c2, 1073741823);
            null !== c2 && Z(c2);
            break;
          }
        }
        c2 = c2.return;
      }
    }
    function Oj(a, b2, c2) {
      var d2 = a.pingCache;
      null !== d2 && d2.delete(b2);
      T === a && U === c2 ? S === vi || S === ui && 1073741823 === lj && $f() - Ti < pj ? Ej(a, U) : oj = true : Aj(a, c2) && (b2 = a.lastPingedTime, 0 !== b2 && b2 < c2 || (a.lastPingedTime = c2, Z(a)));
    }
    function Vi(a, b2) {
      var c2 = a.stateNode;
      null !== c2 && c2.delete(b2);
      b2 = 0;
      0 === b2 && (b2 = Gg(), b2 = Hg(b2, a, null));
      a = xj(a, b2);
      null !== a && Z(a);
    }
    var Rj;
    Rj = function(a, b2, c2) {
      var d2 = b2.expirationTime;
      if (null !== a) {
        var e2 = b2.pendingProps;
        if (a.memoizedProps !== e2 || K.current) rg = true;
        else {
          if (d2 < c2) {
            rg = false;
            switch (b2.tag) {
              case 3:
                hi(b2);
                Xh();
                break;
              case 5:
                fh(b2);
                if (b2.mode & 4 && 1 !== c2 && e2.hidden) return b2.expirationTime = b2.childExpirationTime = 1, null;
                break;
              case 1:
                L(b2.type) && Gf(b2);
                break;
              case 4:
                dh(b2, b2.stateNode.containerInfo);
                break;
              case 10:
                d2 = b2.memoizedProps.value;
                e2 = b2.type._context;
                I(jg, e2._currentValue);
                e2._currentValue = d2;
                break;
              case 13:
                if (null !== b2.memoizedState) {
                  d2 = b2.child.childExpirationTime;
                  if (0 !== d2 && d2 >= c2) return ji(a, b2, c2);
                  I(M, M.current & 1);
                  b2 = $h(a, b2, c2);
                  return null !== b2 ? b2.sibling : null;
                }
                I(M, M.current & 1);
                break;
              case 19:
                d2 = b2.childExpirationTime >= c2;
                if (0 !== (a.effectTag & 64)) {
                  if (d2) return mi(a, b2, c2);
                  b2.effectTag |= 64;
                }
                e2 = b2.memoizedState;
                null !== e2 && (e2.rendering = null, e2.tail = null);
                I(M, M.current);
                if (!d2) return null;
            }
            return $h(a, b2, c2);
          }
          rg = false;
        }
      } else rg = false;
      b2.expirationTime = 0;
      switch (b2.tag) {
        case 2:
          d2 = b2.type;
          null !== a && (a.alternate = null, b2.alternate = null, b2.effectTag |= 2);
          a = b2.pendingProps;
          e2 = Cf(b2, J.current);
          qg(b2, c2);
          e2 = oh(
            null,
            b2,
            d2,
            a,
            e2,
            c2
          );
          b2.effectTag |= 1;
          if ("object" === typeof e2 && null !== e2 && "function" === typeof e2.render && void 0 === e2.$$typeof) {
            b2.tag = 1;
            b2.memoizedState = null;
            b2.updateQueue = null;
            if (L(d2)) {
              var f2 = true;
              Gf(b2);
            } else f2 = false;
            b2.memoizedState = null !== e2.state && void 0 !== e2.state ? e2.state : null;
            ug(b2);
            var g2 = d2.getDerivedStateFromProps;
            "function" === typeof g2 && Fg(b2, d2, g2, a);
            e2.updater = Jg;
            b2.stateNode = e2;
            e2._reactInternalFiber = b2;
            Ng(b2, d2, a, c2);
            b2 = gi(null, b2, d2, true, f2, c2);
          } else b2.tag = 0, R(null, b2, e2, c2), b2 = b2.child;
          return b2;
        case 16:
          a: {
            e2 = b2.elementType;
            null !== a && (a.alternate = null, b2.alternate = null, b2.effectTag |= 2);
            a = b2.pendingProps;
            ob(e2);
            if (1 !== e2._status) throw e2._result;
            e2 = e2._result;
            b2.type = e2;
            f2 = b2.tag = Xj(e2);
            a = ig(e2, a);
            switch (f2) {
              case 0:
                b2 = di(null, b2, e2, a, c2);
                break a;
              case 1:
                b2 = fi(null, b2, e2, a, c2);
                break a;
              case 11:
                b2 = Zh(null, b2, e2, a, c2);
                break a;
              case 14:
                b2 = ai(null, b2, e2, ig(e2.type, a), d2, c2);
                break a;
            }
            throw Error(u$3(306, e2, ""));
          }
          return b2;
        case 0:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : ig(d2, e2), di(a, b2, d2, e2, c2);
        case 1:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : ig(d2, e2), fi(a, b2, d2, e2, c2);
        case 3:
          hi(b2);
          d2 = b2.updateQueue;
          if (null === a || null === d2) throw Error(u$3(282));
          d2 = b2.pendingProps;
          e2 = b2.memoizedState;
          e2 = null !== e2 ? e2.element : null;
          vg(a, b2);
          zg(b2, d2, null, c2);
          d2 = b2.memoizedState.element;
          if (d2 === e2) Xh(), b2 = $h(a, b2, c2);
          else {
            if (e2 = b2.stateNode.hydrate) Ph = Jd(b2.stateNode.containerInfo.firstChild), Oh = b2, e2 = Qh = true;
            if (e2) for (c2 = Yg(b2, null, d2, c2), b2.child = c2; c2; ) c2.effectTag = c2.effectTag & -3 | 1024, c2 = c2.sibling;
            else R(a, b2, d2, c2), Xh();
            b2 = b2.child;
          }
          return b2;
        case 5:
          return fh(b2), null === a && Uh(b2), d2 = b2.type, e2 = b2.pendingProps, f2 = null !== a ? a.memoizedProps : null, g2 = e2.children, Gd(d2, e2) ? g2 = null : null !== f2 && Gd(d2, f2) && (b2.effectTag |= 16), ei(a, b2), b2.mode & 4 && 1 !== c2 && e2.hidden ? (b2.expirationTime = b2.childExpirationTime = 1, b2 = null) : (R(a, b2, g2, c2), b2 = b2.child), b2;
        case 6:
          return null === a && Uh(b2), null;
        case 13:
          return ji(a, b2, c2);
        case 4:
          return dh(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a ? b2.child = Xg(b2, null, d2, c2) : R(a, b2, d2, c2), b2.child;
        case 11:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : ig(d2, e2), Zh(a, b2, d2, e2, c2);
        case 7:
          return R(a, b2, b2.pendingProps, c2), b2.child;
        case 8:
          return R(
            a,
            b2,
            b2.pendingProps.children,
            c2
          ), b2.child;
        case 12:
          return R(a, b2, b2.pendingProps.children, c2), b2.child;
        case 10:
          a: {
            d2 = b2.type._context;
            e2 = b2.pendingProps;
            g2 = b2.memoizedProps;
            f2 = e2.value;
            var h2 = b2.type._context;
            I(jg, h2._currentValue);
            h2._currentValue = f2;
            if (null !== g2) if (h2 = g2.value, f2 = $e(h2, f2) ? 0 : ("function" === typeof d2._calculateChangedBits ? d2._calculateChangedBits(h2, f2) : 1073741823) | 0, 0 === f2) {
              if (g2.children === e2.children && !K.current) {
                b2 = $h(a, b2, c2);
                break a;
              }
            } else for (h2 = b2.child, null !== h2 && (h2.return = b2); null !== h2; ) {
              var k2 = h2.dependencies;
              if (null !== k2) {
                g2 = h2.child;
                for (var l2 = k2.firstContext; null !== l2; ) {
                  if (l2.context === d2 && 0 !== (l2.observedBits & f2)) {
                    1 === h2.tag && (l2 = wg(c2, null), l2.tag = 2, xg(h2, l2));
                    h2.expirationTime < c2 && (h2.expirationTime = c2);
                    l2 = h2.alternate;
                    null !== l2 && l2.expirationTime < c2 && (l2.expirationTime = c2);
                    pg(h2.return, c2);
                    k2.expirationTime < c2 && (k2.expirationTime = c2);
                    break;
                  }
                  l2 = l2.next;
                }
              } else g2 = 10 === h2.tag ? h2.type === b2.type ? null : h2.child : h2.child;
              if (null !== g2) g2.return = h2;
              else for (g2 = h2; null !== g2; ) {
                if (g2 === b2) {
                  g2 = null;
                  break;
                }
                h2 = g2.sibling;
                if (null !== h2) {
                  h2.return = g2.return;
                  g2 = h2;
                  break;
                }
                g2 = g2.return;
              }
              h2 = g2;
            }
            R(a, b2, e2.children, c2);
            b2 = b2.child;
          }
          return b2;
        case 9:
          return e2 = b2.type, f2 = b2.pendingProps, d2 = f2.children, qg(b2, c2), e2 = sg(e2, f2.unstable_observedBits), d2 = d2(e2), b2.effectTag |= 1, R(a, b2, d2, c2), b2.child;
        case 14:
          return e2 = b2.type, f2 = ig(e2, b2.pendingProps), f2 = ig(e2.type, f2), ai(a, b2, e2, f2, d2, c2);
        case 15:
          return ci(a, b2, b2.type, b2.pendingProps, d2, c2);
        case 17:
          return d2 = b2.type, e2 = b2.pendingProps, e2 = b2.elementType === d2 ? e2 : ig(d2, e2), null !== a && (a.alternate = null, b2.alternate = null, b2.effectTag |= 2), b2.tag = 1, L(d2) ? (a = true, Gf(b2)) : a = false, qg(b2, c2), Lg(b2, d2, e2), Ng(b2, d2, e2, c2), gi(
            null,
            b2,
            d2,
            true,
            a,
            c2
          );
        case 19:
          return mi(a, b2, c2);
      }
      throw Error(u$3(156, b2.tag));
    };
    var Uj = null, Li = null;
    function Yj(a) {
      if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return false;
      var b2 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (b2.isDisabled || !b2.supportsFiber) return true;
      try {
        var c2 = b2.inject(a);
        Uj = function(a2) {
          try {
            b2.onCommitFiberRoot(c2, a2, void 0, 64 === (a2.current.effectTag & 64));
          } catch (e2) {
          }
        };
        Li = function(a2) {
          try {
            b2.onCommitFiberUnmount(c2, a2);
          } catch (e2) {
          }
        };
      } catch (d2) {
      }
      return true;
    }
    function Zj(a, b2, c2, d2) {
      this.tag = a;
      this.key = c2;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b2;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d2;
      this.effectTag = 0;
      this.lastEffect = this.firstEffect = this.nextEffect = null;
      this.childExpirationTime = this.expirationTime = 0;
      this.alternate = null;
    }
    function Sh(a, b2, c2, d2) {
      return new Zj(a, b2, c2, d2);
    }
    function bi(a) {
      a = a.prototype;
      return !(!a || !a.isReactComponent);
    }
    function Xj(a) {
      if ("function" === typeof a) return bi(a) ? 1 : 0;
      if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === gb) return 11;
        if (a === jb) return 14;
      }
      return 2;
    }
    function Sg(a, b2) {
      var c2 = a.alternate;
      null === c2 ? (c2 = Sh(a.tag, b2, a.key, a.mode), c2.elementType = a.elementType, c2.type = a.type, c2.stateNode = a.stateNode, c2.alternate = a, a.alternate = c2) : (c2.pendingProps = b2, c2.effectTag = 0, c2.nextEffect = null, c2.firstEffect = null, c2.lastEffect = null);
      c2.childExpirationTime = a.childExpirationTime;
      c2.expirationTime = a.expirationTime;
      c2.child = a.child;
      c2.memoizedProps = a.memoizedProps;
      c2.memoizedState = a.memoizedState;
      c2.updateQueue = a.updateQueue;
      b2 = a.dependencies;
      c2.dependencies = null === b2 ? null : {
        expirationTime: b2.expirationTime,
        firstContext: b2.firstContext,
        responders: b2.responders
      };
      c2.sibling = a.sibling;
      c2.index = a.index;
      c2.ref = a.ref;
      return c2;
    }
    function Ug(a, b2, c2, d2, e2, f2) {
      var g2 = 2;
      d2 = a;
      if ("function" === typeof a) bi(a) && (g2 = 1);
      else if ("string" === typeof a) g2 = 5;
      else a: switch (a) {
        case ab:
          return Wg(c2.children, e2, f2, b2);
        case fb:
          g2 = 8;
          e2 |= 7;
          break;
        case bb:
          g2 = 8;
          e2 |= 1;
          break;
        case cb:
          return a = Sh(12, c2, b2, e2 | 8), a.elementType = cb, a.type = cb, a.expirationTime = f2, a;
        case hb:
          return a = Sh(13, c2, b2, e2), a.type = hb, a.elementType = hb, a.expirationTime = f2, a;
        case ib:
          return a = Sh(19, c2, b2, e2), a.elementType = ib, a.expirationTime = f2, a;
        default:
          if ("object" === typeof a && null !== a) switch (a.$$typeof) {
            case db:
              g2 = 10;
              break a;
            case eb:
              g2 = 9;
              break a;
            case gb:
              g2 = 11;
              break a;
            case jb:
              g2 = 14;
              break a;
            case kb:
              g2 = 16;
              d2 = null;
              break a;
            case lb:
              g2 = 22;
              break a;
          }
          throw Error(u$3(130, null == a ? a : typeof a, ""));
      }
      b2 = Sh(g2, c2, b2, e2);
      b2.elementType = a;
      b2.type = d2;
      b2.expirationTime = f2;
      return b2;
    }
    function Wg(a, b2, c2, d2) {
      a = Sh(7, a, d2, b2);
      a.expirationTime = c2;
      return a;
    }
    function Tg(a, b2, c2) {
      a = Sh(6, a, null, b2);
      a.expirationTime = c2;
      return a;
    }
    function Vg(a, b2, c2) {
      b2 = Sh(4, null !== a.children ? a.children : [], a.key, b2);
      b2.expirationTime = c2;
      b2.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
      return b2;
    }
    function ak(a, b2, c2) {
      this.tag = b2;
      this.current = null;
      this.containerInfo = a;
      this.pingCache = this.pendingChildren = null;
      this.finishedExpirationTime = 0;
      this.finishedWork = null;
      this.timeoutHandle = -1;
      this.pendingContext = this.context = null;
      this.hydrate = c2;
      this.callbackNode = null;
      this.callbackPriority = 90;
      this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;
    }
    function Aj(a, b2) {
      var c2 = a.firstSuspendedTime;
      a = a.lastSuspendedTime;
      return 0 !== c2 && c2 >= b2 && a <= b2;
    }
    function xi(a, b2) {
      var c2 = a.firstSuspendedTime, d2 = a.lastSuspendedTime;
      c2 < b2 && (a.firstSuspendedTime = b2);
      if (d2 > b2 || 0 === c2) a.lastSuspendedTime = b2;
      b2 <= a.lastPingedTime && (a.lastPingedTime = 0);
      b2 <= a.lastExpiredTime && (a.lastExpiredTime = 0);
    }
    function yi(a, b2) {
      b2 > a.firstPendingTime && (a.firstPendingTime = b2);
      var c2 = a.firstSuspendedTime;
      0 !== c2 && (b2 >= c2 ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : b2 >= a.lastSuspendedTime && (a.lastSuspendedTime = b2 + 1), b2 > a.nextKnownPendingLevel && (a.nextKnownPendingLevel = b2));
    }
    function Cj(a, b2) {
      var c2 = a.lastExpiredTime;
      if (0 === c2 || c2 > b2) a.lastExpiredTime = b2;
    }
    function bk(a, b2, c2, d2) {
      var e2 = b2.current, f2 = Gg(), g2 = Dg.suspense;
      f2 = Hg(f2, e2, g2);
      a: if (c2) {
        c2 = c2._reactInternalFiber;
        b: {
          if (dc(c2) !== c2 || 1 !== c2.tag) throw Error(u$3(170));
          var h2 = c2;
          do {
            switch (h2.tag) {
              case 3:
                h2 = h2.stateNode.context;
                break b;
              case 1:
                if (L(h2.type)) {
                  h2 = h2.stateNode.__reactInternalMemoizedMergedChildContext;
                  break b;
                }
            }
            h2 = h2.return;
          } while (null !== h2);
          throw Error(u$3(171));
        }
        if (1 === c2.tag) {
          var k2 = c2.type;
          if (L(k2)) {
            c2 = Ff(c2, k2, h2);
            break a;
          }
        }
        c2 = h2;
      } else c2 = Af;
      null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
      b2 = wg(f2, g2);
      b2.payload = { element: a };
      d2 = void 0 === d2 ? null : d2;
      null !== d2 && (b2.callback = d2);
      xg(e2, b2);
      Ig(e2, f2);
      return f2;
    }
    function ck(a) {
      a = a.current;
      if (!a.child) return null;
      switch (a.child.tag) {
        case 5:
          return a.child.stateNode;
        default:
          return a.child.stateNode;
      }
    }
    function dk(a, b2) {
      a = a.memoizedState;
      null !== a && null !== a.dehydrated && a.retryTime < b2 && (a.retryTime = b2);
    }
    function ek(a, b2) {
      dk(a, b2);
      (a = a.alternate) && dk(a, b2);
    }
    function fk(a, b2, c2) {
      c2 = null != c2 && true === c2.hydrate;
      var d2 = new ak(a, b2, c2), e2 = Sh(3, null, null, 2 === b2 ? 7 : 1 === b2 ? 3 : 0);
      d2.current = e2;
      e2.stateNode = d2;
      ug(e2);
      a[Od] = d2.current;
      c2 && 0 !== b2 && Jc(a, 9 === a.nodeType ? a : a.ownerDocument);
      this._internalRoot = d2;
    }
    fk.prototype.render = function(a) {
      bk(a, this._internalRoot, null, null);
    };
    fk.prototype.unmount = function() {
      var a = this._internalRoot, b2 = a.containerInfo;
      bk(null, a, null, function() {
        b2[Od] = null;
      });
    };
    function gk(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
    }
    function hk(a, b2) {
      b2 || (b2 = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b2 = !(!b2 || 1 !== b2.nodeType || !b2.hasAttribute("data-reactroot")));
      if (!b2) for (var c2; c2 = a.lastChild; ) a.removeChild(c2);
      return new fk(a, 0, b2 ? { hydrate: true } : void 0);
    }
    function ik(a, b2, c2, d2, e2) {
      var f2 = c2._reactRootContainer;
      if (f2) {
        var g2 = f2._internalRoot;
        if ("function" === typeof e2) {
          var h2 = e2;
          e2 = function() {
            var a2 = ck(g2);
            h2.call(a2);
          };
        }
        bk(b2, g2, a, e2);
      } else {
        f2 = c2._reactRootContainer = hk(c2, d2);
        g2 = f2._internalRoot;
        if ("function" === typeof e2) {
          var k2 = e2;
          e2 = function() {
            var a2 = ck(g2);
            k2.call(a2);
          };
        }
        Nj(function() {
          bk(b2, g2, a, e2);
        });
      }
      return ck(g2);
    }
    function jk(a, b2, c2) {
      var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return { $$typeof: $a, key: null == d2 ? null : "" + d2, children: a, containerInfo: b2, implementation: c2 };
    }
    wc = function(a) {
      if (13 === a.tag) {
        var b2 = hg(Gg(), 150, 100);
        Ig(a, b2);
        ek(a, b2);
      }
    };
    xc = function(a) {
      13 === a.tag && (Ig(a, 3), ek(a, 3));
    };
    yc = function(a) {
      if (13 === a.tag) {
        var b2 = Gg();
        b2 = Hg(b2, a, null);
        Ig(a, b2);
        ek(a, b2);
      }
    };
    za = function(a, b2, c2) {
      switch (b2) {
        case "input":
          Cb(a, c2);
          b2 = c2.name;
          if ("radio" === c2.type && null != b2) {
            for (c2 = a; c2.parentNode; ) c2 = c2.parentNode;
            c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
            for (b2 = 0; b2 < c2.length; b2++) {
              var d2 = c2[b2];
              if (d2 !== a && d2.form === a.form) {
                var e2 = Qd(d2);
                if (!e2) throw Error(u$3(90));
                yb(d2);
                Cb(d2, e2);
              }
            }
          }
          break;
        case "textarea":
          Kb(a, c2);
          break;
        case "select":
          b2 = c2.value, null != b2 && Hb(a, !!c2.multiple, b2, false);
      }
    };
    Fa = Mj;
    Ga = function(a, b2, c2, d2, e2) {
      var f2 = W;
      W |= 4;
      try {
        return cg(98, a.bind(null, b2, c2, d2, e2));
      } finally {
        W = f2, W === V && gg();
      }
    };
    Ha = function() {
      (W & (1 | fj | gj)) === V && (Lj(), Dj());
    };
    Ia = function(a, b2) {
      var c2 = W;
      W |= 2;
      try {
        return a(b2);
      } finally {
        W = c2, W === V && gg();
      }
    };
    function kk(a, b2) {
      var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!gk(b2)) throw Error(u$3(200));
      return jk(a, b2, null, c2);
    }
    var lk = { Events: [Nc, Pd, Qd, xa, ta, Xd, function(a) {
      jc(a, Wd);
    }, Da, Ea, id, mc, Dj, { current: false }] };
    (function(a) {
      var b2 = a.findFiberByHostInstance;
      return Yj(n$4({}, a, { overrideHookState: null, overrideProps: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: Wa.ReactCurrentDispatcher, findHostInstanceByFiber: function(a2) {
        a2 = hc(a2);
        return null === a2 ? null : a2.stateNode;
      }, findFiberByHostInstance: function(a2) {
        return b2 ? b2(a2) : null;
      }, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null }));
    })({
      findFiberByHostInstance: tc,
      bundleType: 0,
      version: "16.14.0",
      rendererPackageName: "react-dom"
    });
    reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = lk;
    reactDom_production_min.createPortal = kk;
    reactDom_production_min.findDOMNode = function(a) {
      if (null == a) return null;
      if (1 === a.nodeType) return a;
      var b2 = a._reactInternalFiber;
      if (void 0 === b2) {
        if ("function" === typeof a.render) throw Error(u$3(188));
        throw Error(u$3(268, Object.keys(a)));
      }
      a = hc(b2);
      a = null === a ? null : a.stateNode;
      return a;
    };
    reactDom_production_min.flushSync = function(a, b2) {
      if ((W & (fj | gj)) !== V) throw Error(u$3(187));
      var c2 = W;
      W |= 1;
      try {
        return cg(99, a.bind(null, b2));
      } finally {
        W = c2, gg();
      }
    };
    reactDom_production_min.hydrate = function(a, b2, c2) {
      if (!gk(b2)) throw Error(u$3(200));
      return ik(null, a, b2, true, c2);
    };
    reactDom_production_min.render = function(a, b2, c2) {
      if (!gk(b2)) throw Error(u$3(200));
      return ik(null, a, b2, false, c2);
    };
    reactDom_production_min.unmountComponentAtNode = function(a) {
      if (!gk(a)) throw Error(u$3(40));
      return a._reactRootContainer ? (Nj(function() {
        ik(null, null, a, false, function() {
          a._reactRootContainer = null;
          a[Od] = null;
        });
      }), true) : false;
    };
    reactDom_production_min.unstable_batchedUpdates = Mj;
    reactDom_production_min.unstable_createPortal = function(a, b2) {
      return kk(a, b2, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
    };
    reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b2, c2, d2) {
      if (!gk(c2)) throw Error(u$3(200));
      if (null == a || void 0 === a._reactInternalFiber) throw Error(u$3(38));
      return ik(a, b2, c2, false, d2);
    };
    reactDom_production_min.version = "16.14.0";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    {
      checkDCE();
      reactDom.exports = reactDom_production_min;
    }
    var reactDomExports = reactDom.exports;
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _typeof$1(o) {
      "@babel/helpers - typeof";
      return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof$1(o);
    }
    function toPrimitive(t2, r2) {
      if ("object" != _typeof$1(t2) || !t2) return t2;
      var e2 = t2[Symbol.toPrimitive];
      if (void 0 !== e2) {
        var i = e2.call(t2, r2 || "default");
        if ("object" != _typeof$1(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function toPropertyKey(t2) {
      var i = toPrimitive(t2, "string");
      return "symbol" == _typeof$1(i) ? i : i + "";
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _setPrototypeOf(o, p2) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p3) {
        o2.__proto__ = p3;
        return o2;
      };
      return _setPrototypeOf(o, p2);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _defineProperty$1(obj, key, value2) {
      key = toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value2,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _iterableToArrayLimit(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e2, n2, i, u2, a = [], f2 = true, o = false;
        try {
          if (i = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2) return;
            f2 = false;
          } else for (; !(f2 = (e2 = i.call(t2)).done) && (a.push(e2.value), a.length !== l2); f2 = true) ;
        } catch (r3) {
          o = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2)) return;
          } finally {
            if (o) throw n2;
          }
        }
        return a;
      }
    }
    function _arrayLikeToArray$f(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _unsupportedIterableToArray$f(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$f(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$f(o, minLen);
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$f(arr, i) || _nonIterableRest();
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray$f(arr);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$f(arr) || _nonIterableSpread();
    }
    var DELETE = "delete";
    var SHIFT = 5;
    var SIZE = 1 << SHIFT;
    var MASK = SIZE - 1;
    var NOT_SET = {};
    function MakeRef() {
      return { value: false };
    }
    function SetRef(ref) {
      if (ref) {
        ref.value = true;
      }
    }
    function OwnerID() {
    }
    function ensureSize(iter) {
      if (iter.size === void 0) {
        iter.size = iter.__iterate(returnTrue);
      }
      return iter.size;
    }
    function wrapIndex(iter, index) {
      if (typeof index !== "number") {
        var uint32Index = index >>> 0;
        if ("" + uint32Index !== index || uint32Index === 4294967295) {
          return NaN;
        }
        index = uint32Index;
      }
      return index < 0 ? ensureSize(iter) + index : index;
    }
    function returnTrue() {
      return true;
    }
    function wholeSlice(begin, end, size) {
      return (begin === 0 && !isNeg(begin) || size !== void 0 && begin <= -size) && (end === void 0 || size !== void 0 && end >= size);
    }
    function resolveBegin(begin, size) {
      return resolveIndex(begin, size, 0);
    }
    function resolveEnd(end, size) {
      return resolveIndex(end, size, size);
    }
    function resolveIndex(index, size, defaultIndex) {
      return index === void 0 ? defaultIndex : isNeg(index) ? size === Infinity ? size : Math.max(0, size + index) | 0 : size === void 0 || size === index ? index : Math.min(size, index) | 0;
    }
    function isNeg(value2) {
      return value2 < 0 || value2 === 0 && 1 / value2 === -Infinity;
    }
    var IS_COLLECTION_SYMBOL = "@@__IMMUTABLE_ITERABLE__@@";
    function isCollection(maybeCollection) {
      return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);
    }
    var IS_KEYED_SYMBOL = "@@__IMMUTABLE_KEYED__@@";
    function isKeyed(maybeKeyed) {
      return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);
    }
    var IS_INDEXED_SYMBOL = "@@__IMMUTABLE_INDEXED__@@";
    function isIndexed(maybeIndexed) {
      return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);
    }
    function isAssociative(maybeAssociative) {
      return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
    }
    var Collection = function Collection2(value2) {
      return isCollection(value2) ? value2 : Seq(value2);
    };
    var KeyedCollection = /* @__PURE__ */ function(Collection2) {
      function KeyedCollection2(value2) {
        return isKeyed(value2) ? value2 : KeyedSeq(value2);
      }
      if (Collection2) KeyedCollection2.__proto__ = Collection2;
      KeyedCollection2.prototype = Object.create(Collection2 && Collection2.prototype);
      KeyedCollection2.prototype.constructor = KeyedCollection2;
      return KeyedCollection2;
    }(Collection);
    var IndexedCollection = /* @__PURE__ */ function(Collection2) {
      function IndexedCollection2(value2) {
        return isIndexed(value2) ? value2 : IndexedSeq(value2);
      }
      if (Collection2) IndexedCollection2.__proto__ = Collection2;
      IndexedCollection2.prototype = Object.create(Collection2 && Collection2.prototype);
      IndexedCollection2.prototype.constructor = IndexedCollection2;
      return IndexedCollection2;
    }(Collection);
    var SetCollection = /* @__PURE__ */ function(Collection2) {
      function SetCollection2(value2) {
        return isCollection(value2) && !isAssociative(value2) ? value2 : SetSeq(value2);
      }
      if (Collection2) SetCollection2.__proto__ = Collection2;
      SetCollection2.prototype = Object.create(Collection2 && Collection2.prototype);
      SetCollection2.prototype.constructor = SetCollection2;
      return SetCollection2;
    }(Collection);
    Collection.Keyed = KeyedCollection;
    Collection.Indexed = IndexedCollection;
    Collection.Set = SetCollection;
    var IS_SEQ_SYMBOL = "@@__IMMUTABLE_SEQ__@@";
    function isSeq(maybeSeq) {
      return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);
    }
    var IS_RECORD_SYMBOL = "@@__IMMUTABLE_RECORD__@@";
    function isRecord(maybeRecord) {
      return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);
    }
    function isImmutable$2(maybeImmutable) {
      return isCollection(maybeImmutable) || isRecord(maybeImmutable);
    }
    var IS_ORDERED_SYMBOL = "@@__IMMUTABLE_ORDERED__@@";
    function isOrdered(maybeOrdered) {
      return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);
    }
    var ITERATE_KEYS = 0;
    var ITERATE_VALUES = 1;
    var ITERATE_ENTRIES = 2;
    var REAL_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
    var Iterator = function Iterator2(next) {
      this.next = next;
    };
    Iterator.prototype.toString = function toString2() {
      return "[Iterator]";
    };
    Iterator.KEYS = ITERATE_KEYS;
    Iterator.VALUES = ITERATE_VALUES;
    Iterator.ENTRIES = ITERATE_ENTRIES;
    Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
      return this.toString();
    };
    Iterator.prototype[ITERATOR_SYMBOL] = function() {
      return this;
    };
    function iteratorValue(type, k2, v2, iteratorResult) {
      var value2 = type === 0 ? k2 : type === 1 ? v2 : [k2, v2];
      iteratorResult ? iteratorResult.value = value2 : iteratorResult = {
        value: value2,
        done: false
      };
      return iteratorResult;
    }
    function iteratorDone() {
      return { value: void 0, done: true };
    }
    function hasIterator(maybeIterable) {
      if (Array.isArray(maybeIterable)) {
        return true;
      }
      return !!getIteratorFn(maybeIterable);
    }
    function isIterator(maybeIterator) {
      return maybeIterator && typeof maybeIterator.next === "function";
    }
    function getIterator(iterable) {
      var iteratorFn = getIteratorFn(iterable);
      return iteratorFn && iteratorFn.call(iterable);
    }
    function getIteratorFn(iterable) {
      var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === "function") {
        return iteratorFn;
      }
    }
    function isEntriesIterable(maybeIterable) {
      var iteratorFn = getIteratorFn(maybeIterable);
      return iteratorFn && iteratorFn === maybeIterable.entries;
    }
    function isKeysIterable(maybeIterable) {
      var iteratorFn = getIteratorFn(maybeIterable);
      return iteratorFn && iteratorFn === maybeIterable.keys;
    }
    var hasOwnProperty$d = Object.prototype.hasOwnProperty;
    function isArrayLike$5(value2) {
      if (Array.isArray(value2) || typeof value2 === "string") {
        return true;
      }
      return value2 && typeof value2 === "object" && Number.isInteger(value2.length) && value2.length >= 0 && (value2.length === 0 ? (
        // Only {length: 0} is considered Array-like.
        Object.keys(value2).length === 1
      ) : (
        // An object is only Array-like if it has a property where the last value
        // in the array-like may be found (which could be undefined).
        value2.hasOwnProperty(value2.length - 1)
      ));
    }
    var Seq = /* @__PURE__ */ function(Collection2) {
      function Seq2(value2) {
        return value2 === void 0 || value2 === null ? emptySequence() : isImmutable$2(value2) ? value2.toSeq() : seqFromValue(value2);
      }
      if (Collection2) Seq2.__proto__ = Collection2;
      Seq2.prototype = Object.create(Collection2 && Collection2.prototype);
      Seq2.prototype.constructor = Seq2;
      Seq2.prototype.toSeq = function toSeq() {
        return this;
      };
      Seq2.prototype.toString = function toString2() {
        return this.__toString("Seq {", "}");
      };
      Seq2.prototype.cacheResult = function cacheResult() {
        if (!this._cache && this.__iterateUncached) {
          this._cache = this.entrySeq().toArray();
          this.size = this._cache.length;
        }
        return this;
      };
      Seq2.prototype.__iterate = function __iterate(fn, reverse) {
        var cache = this._cache;
        if (cache) {
          var size = cache.length;
          var i = 0;
          while (i !== size) {
            var entry = cache[reverse ? size - ++i : i++];
            if (fn(entry[1], entry[0], this) === false) {
              break;
            }
          }
          return i;
        }
        return this.__iterateUncached(fn, reverse);
      };
      Seq2.prototype.__iterator = function __iterator(type, reverse) {
        var cache = this._cache;
        if (cache) {
          var size = cache.length;
          var i = 0;
          return new Iterator(function() {
            if (i === size) {
              return iteratorDone();
            }
            var entry = cache[reverse ? size - ++i : i++];
            return iteratorValue(type, entry[0], entry[1]);
          });
        }
        return this.__iteratorUncached(type, reverse);
      };
      return Seq2;
    }(Collection);
    var KeyedSeq = /* @__PURE__ */ function(Seq2) {
      function KeyedSeq2(value2) {
        return value2 === void 0 || value2 === null ? emptySequence().toKeyedSeq() : isCollection(value2) ? isKeyed(value2) ? value2.toSeq() : value2.fromEntrySeq() : isRecord(value2) ? value2.toSeq() : keyedSeqFromValue(value2);
      }
      if (Seq2) KeyedSeq2.__proto__ = Seq2;
      KeyedSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
      KeyedSeq2.prototype.constructor = KeyedSeq2;
      KeyedSeq2.prototype.toKeyedSeq = function toKeyedSeq() {
        return this;
      };
      return KeyedSeq2;
    }(Seq);
    var IndexedSeq = /* @__PURE__ */ function(Seq2) {
      function IndexedSeq2(value2) {
        return value2 === void 0 || value2 === null ? emptySequence() : isCollection(value2) ? isKeyed(value2) ? value2.entrySeq() : value2.toIndexedSeq() : isRecord(value2) ? value2.toSeq().entrySeq() : indexedSeqFromValue(value2);
      }
      if (Seq2) IndexedSeq2.__proto__ = Seq2;
      IndexedSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
      IndexedSeq2.prototype.constructor = IndexedSeq2;
      IndexedSeq2.of = function of2() {
        return IndexedSeq2(arguments);
      };
      IndexedSeq2.prototype.toIndexedSeq = function toIndexedSeq() {
        return this;
      };
      IndexedSeq2.prototype.toString = function toString2() {
        return this.__toString("Seq [", "]");
      };
      return IndexedSeq2;
    }(Seq);
    var SetSeq = /* @__PURE__ */ function(Seq2) {
      function SetSeq2(value2) {
        return (isCollection(value2) && !isAssociative(value2) ? value2 : IndexedSeq(value2)).toSetSeq();
      }
      if (Seq2) SetSeq2.__proto__ = Seq2;
      SetSeq2.prototype = Object.create(Seq2 && Seq2.prototype);
      SetSeq2.prototype.constructor = SetSeq2;
      SetSeq2.of = function of2() {
        return SetSeq2(arguments);
      };
      SetSeq2.prototype.toSetSeq = function toSetSeq() {
        return this;
      };
      return SetSeq2;
    }(Seq);
    Seq.isSeq = isSeq;
    Seq.Keyed = KeyedSeq;
    Seq.Set = SetSeq;
    Seq.Indexed = IndexedSeq;
    Seq.prototype[IS_SEQ_SYMBOL] = true;
    var ArraySeq = /* @__PURE__ */ function(IndexedSeq2) {
      function ArraySeq2(array) {
        this._array = array;
        this.size = array.length;
      }
      if (IndexedSeq2) ArraySeq2.__proto__ = IndexedSeq2;
      ArraySeq2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
      ArraySeq2.prototype.constructor = ArraySeq2;
      ArraySeq2.prototype.get = function get2(index, notSetValue) {
        return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
      };
      ArraySeq2.prototype.__iterate = function __iterate(fn, reverse) {
        var array = this._array;
        var size = array.length;
        var i = 0;
        while (i !== size) {
          var ii2 = reverse ? size - ++i : i++;
          if (fn(array[ii2], ii2, this) === false) {
            break;
          }
        }
        return i;
      };
      ArraySeq2.prototype.__iterator = function __iterator(type, reverse) {
        var array = this._array;
        var size = array.length;
        var i = 0;
        return new Iterator(function() {
          if (i === size) {
            return iteratorDone();
          }
          var ii2 = reverse ? size - ++i : i++;
          return iteratorValue(type, ii2, array[ii2]);
        });
      };
      return ArraySeq2;
    }(IndexedSeq);
    var ObjectSeq = /* @__PURE__ */ function(KeyedSeq2) {
      function ObjectSeq2(object) {
        var keys2 = Object.keys(object).concat(
          Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : []
        );
        this._object = object;
        this._keys = keys2;
        this.size = keys2.length;
      }
      if (KeyedSeq2) ObjectSeq2.__proto__ = KeyedSeq2;
      ObjectSeq2.prototype = Object.create(KeyedSeq2 && KeyedSeq2.prototype);
      ObjectSeq2.prototype.constructor = ObjectSeq2;
      ObjectSeq2.prototype.get = function get2(key, notSetValue) {
        if (notSetValue !== void 0 && !this.has(key)) {
          return notSetValue;
        }
        return this._object[key];
      };
      ObjectSeq2.prototype.has = function has2(key) {
        return hasOwnProperty$d.call(this._object, key);
      };
      ObjectSeq2.prototype.__iterate = function __iterate(fn, reverse) {
        var object = this._object;
        var keys2 = this._keys;
        var size = keys2.length;
        var i = 0;
        while (i !== size) {
          var key = keys2[reverse ? size - ++i : i++];
          if (fn(object[key], key, this) === false) {
            break;
          }
        }
        return i;
      };
      ObjectSeq2.prototype.__iterator = function __iterator(type, reverse) {
        var object = this._object;
        var keys2 = this._keys;
        var size = keys2.length;
        var i = 0;
        return new Iterator(function() {
          if (i === size) {
            return iteratorDone();
          }
          var key = keys2[reverse ? size - ++i : i++];
          return iteratorValue(type, key, object[key]);
        });
      };
      return ObjectSeq2;
    }(KeyedSeq);
    ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;
    var CollectionSeq = /* @__PURE__ */ function(IndexedSeq2) {
      function CollectionSeq2(collection) {
        this._collection = collection;
        this.size = collection.length || collection.size;
      }
      if (IndexedSeq2) CollectionSeq2.__proto__ = IndexedSeq2;
      CollectionSeq2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
      CollectionSeq2.prototype.constructor = CollectionSeq2;
      CollectionSeq2.prototype.__iterateUncached = function __iterateUncached(fn, reverse) {
        if (reverse) {
          return this.cacheResult().__iterate(fn, reverse);
        }
        var collection = this._collection;
        var iterator = getIterator(collection);
        var iterations = 0;
        if (isIterator(iterator)) {
          var step;
          while (!(step = iterator.next()).done) {
            if (fn(step.value, iterations++, this) === false) {
              break;
            }
          }
        }
        return iterations;
      };
      CollectionSeq2.prototype.__iteratorUncached = function __iteratorUncached(type, reverse) {
        if (reverse) {
          return this.cacheResult().__iterator(type, reverse);
        }
        var collection = this._collection;
        var iterator = getIterator(collection);
        if (!isIterator(iterator)) {
          return new Iterator(iteratorDone);
        }
        var iterations = 0;
        return new Iterator(function() {
          var step = iterator.next();
          return step.done ? step : iteratorValue(type, iterations++, step.value);
        });
      };
      return CollectionSeq2;
    }(IndexedSeq);
    var EMPTY_SEQ;
    function emptySequence() {
      return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
    }
    function keyedSeqFromValue(value2) {
      var seq = maybeIndexedSeqFromValue(value2);
      if (seq) {
        return seq.fromEntrySeq();
      }
      if (typeof value2 === "object") {
        return new ObjectSeq(value2);
      }
      throw new TypeError(
        "Expected Array or collection object of [k, v] entries, or keyed object: " + value2
      );
    }
    function indexedSeqFromValue(value2) {
      var seq = maybeIndexedSeqFromValue(value2);
      if (seq) {
        return seq;
      }
      throw new TypeError(
        "Expected Array or collection object of values: " + value2
      );
    }
    function seqFromValue(value2) {
      var seq = maybeIndexedSeqFromValue(value2);
      if (seq) {
        return isEntriesIterable(value2) ? seq.fromEntrySeq() : isKeysIterable(value2) ? seq.toSetSeq() : seq;
      }
      if (typeof value2 === "object") {
        return new ObjectSeq(value2);
      }
      throw new TypeError(
        "Expected Array or collection object of values, or keyed object: " + value2
      );
    }
    function maybeIndexedSeqFromValue(value2) {
      return isArrayLike$5(value2) ? new ArraySeq(value2) : hasIterator(value2) ? new CollectionSeq(value2) : void 0;
    }
    var IS_MAP_SYMBOL = "@@__IMMUTABLE_MAP__@@";
    function isMap$2(maybeMap) {
      return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);
    }
    function isOrderedMap(maybeOrderedMap) {
      return isMap$2(maybeOrderedMap) && isOrdered(maybeOrderedMap);
    }
    function isValueObject(maybeValue) {
      return Boolean(
        maybeValue && typeof maybeValue.equals === "function" && typeof maybeValue.hashCode === "function"
      );
    }
    function is$1(valueA, valueB) {
      if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
      if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
        valueA = valueA.valueOf();
        valueB = valueB.valueOf();
        if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
          return true;
        }
        if (!valueA || !valueB) {
          return false;
        }
      }
      return !!(isValueObject(valueA) && isValueObject(valueB) && valueA.equals(valueB));
    }
    var imul = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul2(a, b2) {
      a |= 0;
      b2 |= 0;
      var c2 = a & 65535;
      var d2 = b2 & 65535;
      return c2 * d2 + ((a >>> 16) * d2 + c2 * (b2 >>> 16) << 16 >>> 0) | 0;
    };
    function smi(i32) {
      return i32 >>> 1 & 1073741824 | i32 & 3221225471;
    }
    var defaultValueOf = Object.prototype.valueOf;
    function hash(o) {
      if (o == null) {
        return hashNullish(o);
      }
      if (typeof o.hashCode === "function") {
        return smi(o.hashCode(o));
      }
      var v2 = valueOf$2(o);
      if (v2 == null) {
        return hashNullish(v2);
      }
      switch (typeof v2) {
        case "boolean":
          return v2 ? 1108378657 : 1108378656;
        case "number":
          return hashNumber(v2);
        case "string":
          return v2.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(v2) : hashString(v2);
        case "object":
        case "function":
          return hashJSObj(v2);
        case "symbol":
          return hashSymbol(v2);
        default:
          if (typeof v2.toString === "function") {
            return hashString(v2.toString());
          }
          throw new Error("Value type " + typeof v2 + " cannot be hashed.");
      }
    }
    function hashNullish(nullish) {
      return nullish === null ? 1108378658 : (
        /* undefined */
        1108378659
      );
    }
    function hashNumber(n2) {
      if (n2 !== n2 || n2 === Infinity) {
        return 0;
      }
      var hash2 = n2 | 0;
      if (hash2 !== n2) {
        hash2 ^= n2 * 4294967295;
      }
      while (n2 > 4294967295) {
        n2 /= 4294967295;
        hash2 ^= n2;
      }
      return smi(hash2);
    }
    function cachedHashString(string) {
      var hashed = stringHashCache[string];
      if (hashed === void 0) {
        hashed = hashString(string);
        if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
          STRING_HASH_CACHE_SIZE = 0;
          stringHashCache = {};
        }
        STRING_HASH_CACHE_SIZE++;
        stringHashCache[string] = hashed;
      }
      return hashed;
    }
    function hashString(string) {
      var hashed = 0;
      for (var ii2 = 0; ii2 < string.length; ii2++) {
        hashed = 31 * hashed + string.charCodeAt(ii2) | 0;
      }
      return smi(hashed);
    }
    function hashSymbol(sym) {
      var hashed = symbolMap[sym];
      if (hashed !== void 0) {
        return hashed;
      }
      hashed = nextHash();
      symbolMap[sym] = hashed;
      return hashed;
    }
    function hashJSObj(obj) {
      var hashed;
      if (usingWeakMap) {
        hashed = weakMap.get(obj);
        if (hashed !== void 0) {
          return hashed;
        }
      }
      hashed = obj[UID_HASH_KEY];
      if (hashed !== void 0) {
        return hashed;
      }
      if (!canDefineProperty) {
        hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
        if (hashed !== void 0) {
          return hashed;
        }
        hashed = getIENodeHash(obj);
        if (hashed !== void 0) {
          return hashed;
        }
      }
      hashed = nextHash();
      if (usingWeakMap) {
        weakMap.set(obj, hashed);
      } else if (isExtensible !== void 0 && isExtensible(obj) === false) {
        throw new Error("Non-extensible objects are not allowed as keys.");
      } else if (canDefineProperty) {
        Object.defineProperty(obj, UID_HASH_KEY, {
          enumerable: false,
          configurable: false,
          writable: false,
          value: hashed
        });
      } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
        obj.propertyIsEnumerable = function() {
          return this.constructor.prototype.propertyIsEnumerable.apply(
            this,
            arguments
          );
        };
        obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;
      } else if (obj.nodeType !== void 0) {
        obj[UID_HASH_KEY] = hashed;
      } else {
        throw new Error("Unable to set a non-enumerable property on object.");
      }
      return hashed;
    }
    var isExtensible = Object.isExtensible;
    var canDefineProperty = function() {
      try {
        Object.defineProperty({}, "@", {});
        return true;
      } catch (e2) {
        return false;
      }
    }();
    function getIENodeHash(node) {
      if (node && node.nodeType > 0) {
        switch (node.nodeType) {
          case 1:
            return node.uniqueID;
          case 9:
            return node.documentElement && node.documentElement.uniqueID;
        }
      }
    }
    function valueOf$2(obj) {
      return obj.valueOf !== defaultValueOf && typeof obj.valueOf === "function" ? obj.valueOf(obj) : obj;
    }
    function nextHash() {
      var nextHash2 = ++_objHashUID;
      if (_objHashUID & 1073741824) {
        _objHashUID = 0;
      }
      return nextHash2;
    }
    var usingWeakMap = typeof WeakMap === "function";
    var weakMap;
    if (usingWeakMap) {
      weakMap = /* @__PURE__ */ new WeakMap();
    }
    var symbolMap = /* @__PURE__ */ Object.create(null);
    var _objHashUID = 0;
    var UID_HASH_KEY = "__immutablehash__";
    if (typeof Symbol === "function") {
      UID_HASH_KEY = Symbol(UID_HASH_KEY);
    }
    var STRING_HASH_CACHE_MIN_STRLEN = 16;
    var STRING_HASH_CACHE_MAX_SIZE = 255;
    var STRING_HASH_CACHE_SIZE = 0;
    var stringHashCache = {};
    var ToKeyedSequence = /* @__PURE__ */ function(KeyedSeq2) {
      function ToKeyedSequence2(indexed, useKeys) {
        this._iter = indexed;
        this._useKeys = useKeys;
        this.size = indexed.size;
      }
      if (KeyedSeq2) ToKeyedSequence2.__proto__ = KeyedSeq2;
      ToKeyedSequence2.prototype = Object.create(KeyedSeq2 && KeyedSeq2.prototype);
      ToKeyedSequence2.prototype.constructor = ToKeyedSequence2;
      ToKeyedSequence2.prototype.get = function get2(key, notSetValue) {
        return this._iter.get(key, notSetValue);
      };
      ToKeyedSequence2.prototype.has = function has2(key) {
        return this._iter.has(key);
      };
      ToKeyedSequence2.prototype.valueSeq = function valueSeq() {
        return this._iter.valueSeq();
      };
      ToKeyedSequence2.prototype.reverse = function reverse() {
        var this$1$1 = this;
        var reversedSequence = reverseFactory(this, true);
        if (!this._useKeys) {
          reversedSequence.valueSeq = function() {
            return this$1$1._iter.toSeq().reverse();
          };
        }
        return reversedSequence;
      };
      ToKeyedSequence2.prototype.map = function map2(mapper, context2) {
        var this$1$1 = this;
        var mappedSequence = mapFactory(this, mapper, context2);
        if (!this._useKeys) {
          mappedSequence.valueSeq = function() {
            return this$1$1._iter.toSeq().map(mapper, context2);
          };
        }
        return mappedSequence;
      };
      ToKeyedSequence2.prototype.__iterate = function __iterate(fn, reverse) {
        var this$1$1 = this;
        return this._iter.__iterate(function(v2, k2) {
          return fn(v2, k2, this$1$1);
        }, reverse);
      };
      ToKeyedSequence2.prototype.__iterator = function __iterator(type, reverse) {
        return this._iter.__iterator(type, reverse);
      };
      return ToKeyedSequence2;
    }(KeyedSeq);
    ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;
    var ToIndexedSequence = /* @__PURE__ */ function(IndexedSeq2) {
      function ToIndexedSequence2(iter) {
        this._iter = iter;
        this.size = iter.size;
      }
      if (IndexedSeq2) ToIndexedSequence2.__proto__ = IndexedSeq2;
      ToIndexedSequence2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
      ToIndexedSequence2.prototype.constructor = ToIndexedSequence2;
      ToIndexedSequence2.prototype.includes = function includes(value2) {
        return this._iter.includes(value2);
      };
      ToIndexedSequence2.prototype.__iterate = function __iterate(fn, reverse) {
        var this$1$1 = this;
        var i = 0;
        reverse && ensureSize(this);
        return this._iter.__iterate(
          function(v2) {
            return fn(v2, reverse ? this$1$1.size - ++i : i++, this$1$1);
          },
          reverse
        );
      };
      ToIndexedSequence2.prototype.__iterator = function __iterator(type, reverse) {
        var this$1$1 = this;
        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
        var i = 0;
        reverse && ensureSize(this);
        return new Iterator(function() {
          var step = iterator.next();
          return step.done ? step : iteratorValue(
            type,
            reverse ? this$1$1.size - ++i : i++,
            step.value,
            step
          );
        });
      };
      return ToIndexedSequence2;
    }(IndexedSeq);
    var ToSetSequence = /* @__PURE__ */ function(SetSeq2) {
      function ToSetSequence2(iter) {
        this._iter = iter;
        this.size = iter.size;
      }
      if (SetSeq2) ToSetSequence2.__proto__ = SetSeq2;
      ToSetSequence2.prototype = Object.create(SetSeq2 && SetSeq2.prototype);
      ToSetSequence2.prototype.constructor = ToSetSequence2;
      ToSetSequence2.prototype.has = function has2(key) {
        return this._iter.includes(key);
      };
      ToSetSequence2.prototype.__iterate = function __iterate(fn, reverse) {
        var this$1$1 = this;
        return this._iter.__iterate(function(v2) {
          return fn(v2, v2, this$1$1);
        }, reverse);
      };
      ToSetSequence2.prototype.__iterator = function __iterator(type, reverse) {
        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
        return new Iterator(function() {
          var step = iterator.next();
          return step.done ? step : iteratorValue(type, step.value, step.value, step);
        });
      };
      return ToSetSequence2;
    }(SetSeq);
    var FromEntriesSequence = /* @__PURE__ */ function(KeyedSeq2) {
      function FromEntriesSequence2(entries) {
        this._iter = entries;
        this.size = entries.size;
      }
      if (KeyedSeq2) FromEntriesSequence2.__proto__ = KeyedSeq2;
      FromEntriesSequence2.prototype = Object.create(KeyedSeq2 && KeyedSeq2.prototype);
      FromEntriesSequence2.prototype.constructor = FromEntriesSequence2;
      FromEntriesSequence2.prototype.entrySeq = function entrySeq() {
        return this._iter.toSeq();
      };
      FromEntriesSequence2.prototype.__iterate = function __iterate(fn, reverse) {
        var this$1$1 = this;
        return this._iter.__iterate(function(entry) {
          if (entry) {
            validateEntry(entry);
            var indexedCollection = isCollection(entry);
            return fn(
              indexedCollection ? entry.get(1) : entry[1],
              indexedCollection ? entry.get(0) : entry[0],
              this$1$1
            );
          }
        }, reverse);
      };
      FromEntriesSequence2.prototype.__iterator = function __iterator(type, reverse) {
        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
        return new Iterator(function() {
          while (true) {
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            if (entry) {
              validateEntry(entry);
              var indexedCollection = isCollection(entry);
              return iteratorValue(
                type,
                indexedCollection ? entry.get(0) : entry[0],
                indexedCollection ? entry.get(1) : entry[1],
                step
              );
            }
          }
        });
      };
      return FromEntriesSequence2;
    }(KeyedSeq);
    ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;
    function flipFactory(collection) {
      var flipSequence = makeSequence(collection);
      flipSequence._iter = collection;
      flipSequence.size = collection.size;
      flipSequence.flip = function() {
        return collection;
      };
      flipSequence.reverse = function() {
        var reversedSequence = collection.reverse.apply(this);
        reversedSequence.flip = function() {
          return collection.reverse();
        };
        return reversedSequence;
      };
      flipSequence.has = function(key) {
        return collection.includes(key);
      };
      flipSequence.includes = function(key) {
        return collection.has(key);
      };
      flipSequence.cacheResult = cacheResultThrough;
      flipSequence.__iterateUncached = function(fn, reverse) {
        var this$1$1 = this;
        return collection.__iterate(function(v2, k2) {
          return fn(k2, v2, this$1$1) !== false;
        }, reverse);
      };
      flipSequence.__iteratorUncached = function(type, reverse) {
        if (type === ITERATE_ENTRIES) {
          var iterator = collection.__iterator(type, reverse);
          return new Iterator(function() {
            var step = iterator.next();
            if (!step.done) {
              var k2 = step.value[0];
              step.value[0] = step.value[1];
              step.value[1] = k2;
            }
            return step;
          });
        }
        return collection.__iterator(
          type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
          reverse
        );
      };
      return flipSequence;
    }
    function mapFactory(collection, mapper, context2) {
      var mappedSequence = makeSequence(collection);
      mappedSequence.size = collection.size;
      mappedSequence.has = function(key) {
        return collection.has(key);
      };
      mappedSequence.get = function(key, notSetValue) {
        var v2 = collection.get(key, NOT_SET);
        return v2 === NOT_SET ? notSetValue : mapper.call(context2, v2, key, collection);
      };
      mappedSequence.__iterateUncached = function(fn, reverse) {
        var this$1$1 = this;
        return collection.__iterate(
          function(v2, k2, c2) {
            return fn(mapper.call(context2, v2, k2, c2), k2, this$1$1) !== false;
          },
          reverse
        );
      };
      mappedSequence.__iteratorUncached = function(type, reverse) {
        var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
        return new Iterator(function() {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          return iteratorValue(
            type,
            key,
            mapper.call(context2, entry[1], key, collection),
            step
          );
        });
      };
      return mappedSequence;
    }
    function reverseFactory(collection, useKeys) {
      var this$1$1 = this;
      var reversedSequence = makeSequence(collection);
      reversedSequence._iter = collection;
      reversedSequence.size = collection.size;
      reversedSequence.reverse = function() {
        return collection;
      };
      if (collection.flip) {
        reversedSequence.flip = function() {
          var flipSequence = flipFactory(collection);
          flipSequence.reverse = function() {
            return collection.flip();
          };
          return flipSequence;
        };
      }
      reversedSequence.get = function(key, notSetValue) {
        return collection.get(useKeys ? key : -1 - key, notSetValue);
      };
      reversedSequence.has = function(key) {
        return collection.has(useKeys ? key : -1 - key);
      };
      reversedSequence.includes = function(value2) {
        return collection.includes(value2);
      };
      reversedSequence.cacheResult = cacheResultThrough;
      reversedSequence.__iterate = function(fn, reverse) {
        var this$1$12 = this;
        var i = 0;
        reverse && ensureSize(collection);
        return collection.__iterate(
          function(v2, k2) {
            return fn(v2, useKeys ? k2 : reverse ? this$1$12.size - ++i : i++, this$1$12);
          },
          !reverse
        );
      };
      reversedSequence.__iterator = function(type, reverse) {
        var i = 0;
        reverse && ensureSize(collection);
        var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);
        return new Iterator(function() {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          return iteratorValue(
            type,
            useKeys ? entry[0] : reverse ? this$1$1.size - ++i : i++,
            entry[1],
            step
          );
        });
      };
      return reversedSequence;
    }
    function filterFactory(collection, predicate, context2, useKeys) {
      var filterSequence = makeSequence(collection);
      if (useKeys) {
        filterSequence.has = function(key) {
          var v2 = collection.get(key, NOT_SET);
          return v2 !== NOT_SET && !!predicate.call(context2, v2, key, collection);
        };
        filterSequence.get = function(key, notSetValue) {
          var v2 = collection.get(key, NOT_SET);
          return v2 !== NOT_SET && predicate.call(context2, v2, key, collection) ? v2 : notSetValue;
        };
      }
      filterSequence.__iterateUncached = function(fn, reverse) {
        var this$1$1 = this;
        var iterations = 0;
        collection.__iterate(function(v2, k2, c2) {
          if (predicate.call(context2, v2, k2, c2)) {
            iterations++;
            return fn(v2, useKeys ? k2 : iterations - 1, this$1$1);
          }
        }, reverse);
        return iterations;
      };
      filterSequence.__iteratorUncached = function(type, reverse) {
        var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
        var iterations = 0;
        return new Iterator(function() {
          while (true) {
            var step = iterator.next();
            if (step.done) {
              return step;
            }
            var entry = step.value;
            var key = entry[0];
            var value2 = entry[1];
            if (predicate.call(context2, value2, key, collection)) {
              return iteratorValue(type, useKeys ? key : iterations++, value2, step);
            }
          }
        });
      };
      return filterSequence;
    }
    function countByFactory(collection, grouper, context2) {
      var groups = Map$5().asMutable();
      collection.__iterate(function(v2, k2) {
        groups.update(grouper.call(context2, v2, k2, collection), 0, function(a) {
          return a + 1;
        });
      });
      return groups.asImmutable();
    }
    function groupByFactory(collection, grouper, context2) {
      var isKeyedIter = isKeyed(collection);
      var groups = (isOrdered(collection) ? OrderedMap() : Map$5()).asMutable();
      collection.__iterate(function(v2, k2) {
        groups.update(
          grouper.call(context2, v2, k2, collection),
          function(a) {
            return a = a || [], a.push(isKeyedIter ? [k2, v2] : v2), a;
          }
        );
      });
      var coerce = collectionClass(collection);
      return groups.map(function(arr) {
        return reify(collection, coerce(arr));
      }).asImmutable();
    }
    function partitionFactory(collection, predicate, context2) {
      var isKeyedIter = isKeyed(collection);
      var groups = [[], []];
      collection.__iterate(function(v2, k2) {
        groups[predicate.call(context2, v2, k2, collection) ? 1 : 0].push(
          isKeyedIter ? [k2, v2] : v2
        );
      });
      var coerce = collectionClass(collection);
      return groups.map(function(arr) {
        return reify(collection, coerce(arr));
      });
    }
    function sliceFactory(collection, begin, end, useKeys) {
      var originalSize = collection.size;
      if (wholeSlice(begin, end, originalSize)) {
        return collection;
      }
      var resolvedBegin = resolveBegin(begin, originalSize);
      var resolvedEnd = resolveEnd(end, originalSize);
      if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
        return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);
      }
      var resolvedSize = resolvedEnd - resolvedBegin;
      var sliceSize;
      if (resolvedSize === resolvedSize) {
        sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
      }
      var sliceSeq = makeSequence(collection);
      sliceSeq.size = sliceSize === 0 ? sliceSize : collection.size && sliceSize || void 0;
      if (!useKeys && isSeq(collection) && sliceSize >= 0) {
        sliceSeq.get = function(index, notSetValue) {
          index = wrapIndex(this, index);
          return index >= 0 && index < sliceSize ? collection.get(index + resolvedBegin, notSetValue) : notSetValue;
        };
      }
      sliceSeq.__iterateUncached = function(fn, reverse) {
        var this$1$1 = this;
        if (sliceSize === 0) {
          return 0;
        }
        if (reverse) {
          return this.cacheResult().__iterate(fn, reverse);
        }
        var skipped = 0;
        var isSkipping = true;
        var iterations = 0;
        collection.__iterate(function(v2, k2) {
          if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
            iterations++;
            return fn(v2, useKeys ? k2 : iterations - 1, this$1$1) !== false && iterations !== sliceSize;
          }
        });
        return iterations;
      };
      sliceSeq.__iteratorUncached = function(type, reverse) {
        if (sliceSize !== 0 && reverse) {
          return this.cacheResult().__iterator(type, reverse);
        }
        if (sliceSize === 0) {
          return new Iterator(iteratorDone);
        }
        var iterator = collection.__iterator(type, reverse);
        var skipped = 0;
        var iterations = 0;
        return new Iterator(function() {
          while (skipped++ < resolvedBegin) {
            iterator.next();
          }
          if (++iterations > sliceSize) {
            return iteratorDone();
          }
          var step = iterator.next();
          if (useKeys || type === ITERATE_VALUES || step.done) {
            return step;
          }
          if (type === ITERATE_KEYS) {
            return iteratorValue(type, iterations - 1, void 0, step);
          }
          return iteratorValue(type, iterations - 1, step.value[1], step);
        });
      };
      return sliceSeq;
    }
    function takeWhileFactory(collection, predicate, context2) {
      var takeSequence = makeSequence(collection);
      takeSequence.__iterateUncached = function(fn, reverse) {
        var this$1$1 = this;
        if (reverse) {
          return this.cacheResult().__iterate(fn, reverse);
        }
        var iterations = 0;
        collection.__iterate(
          function(v2, k2, c2) {
            return predicate.call(context2, v2, k2, c2) && ++iterations && fn(v2, k2, this$1$1);
          }
        );
        return iterations;
      };
      takeSequence.__iteratorUncached = function(type, reverse) {
        var this$1$1 = this;
        if (reverse) {
          return this.cacheResult().__iterator(type, reverse);
        }
        var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
        var iterating = true;
        return new Iterator(function() {
          if (!iterating) {
            return iteratorDone();
          }
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var k2 = entry[0];
          var v2 = entry[1];
          if (!predicate.call(context2, v2, k2, this$1$1)) {
            iterating = false;
            return iteratorDone();
          }
          return type === ITERATE_ENTRIES ? step : iteratorValue(type, k2, v2, step);
        });
      };
      return takeSequence;
    }
    function skipWhileFactory(collection, predicate, context2, useKeys) {
      var skipSequence = makeSequence(collection);
      skipSequence.__iterateUncached = function(fn, reverse) {
        var this$1$1 = this;
        if (reverse) {
          return this.cacheResult().__iterate(fn, reverse);
        }
        var isSkipping = true;
        var iterations = 0;
        collection.__iterate(function(v2, k2, c2) {
          if (!(isSkipping && (isSkipping = predicate.call(context2, v2, k2, c2)))) {
            iterations++;
            return fn(v2, useKeys ? k2 : iterations - 1, this$1$1);
          }
        });
        return iterations;
      };
      skipSequence.__iteratorUncached = function(type, reverse) {
        var this$1$1 = this;
        if (reverse) {
          return this.cacheResult().__iterator(type, reverse);
        }
        var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
        var skipping = true;
        var iterations = 0;
        return new Iterator(function() {
          var step;
          var k2;
          var v2;
          do {
            step = iterator.next();
            if (step.done) {
              if (useKeys || type === ITERATE_VALUES) {
                return step;
              }
              if (type === ITERATE_KEYS) {
                return iteratorValue(type, iterations++, void 0, step);
              }
              return iteratorValue(type, iterations++, step.value[1], step);
            }
            var entry = step.value;
            k2 = entry[0];
            v2 = entry[1];
            skipping && (skipping = predicate.call(context2, v2, k2, this$1$1));
          } while (skipping);
          return type === ITERATE_ENTRIES ? step : iteratorValue(type, k2, v2, step);
        });
      };
      return skipSequence;
    }
    function concatFactory(collection, values) {
      var isKeyedCollection = isKeyed(collection);
      var iters = [collection].concat(values).map(function(v2) {
        if (!isCollection(v2)) {
          v2 = isKeyedCollection ? keyedSeqFromValue(v2) : indexedSeqFromValue(Array.isArray(v2) ? v2 : [v2]);
        } else if (isKeyedCollection) {
          v2 = KeyedCollection(v2);
        }
        return v2;
      }).filter(function(v2) {
        return v2.size !== 0;
      });
      if (iters.length === 0) {
        return collection;
      }
      if (iters.length === 1) {
        var singleton = iters[0];
        if (singleton === collection || isKeyedCollection && isKeyed(singleton) || isIndexed(collection) && isIndexed(singleton)) {
          return singleton;
        }
      }
      var concatSeq = new ArraySeq(iters);
      if (isKeyedCollection) {
        concatSeq = concatSeq.toKeyedSeq();
      } else if (!isIndexed(collection)) {
        concatSeq = concatSeq.toSetSeq();
      }
      concatSeq = concatSeq.flatten(true);
      concatSeq.size = iters.reduce(function(sum, seq) {
        if (sum !== void 0) {
          var size = seq.size;
          if (size !== void 0) {
            return sum + size;
          }
        }
      }, 0);
      return concatSeq;
    }
    function flattenFactory(collection, depth, useKeys) {
      var flatSequence = makeSequence(collection);
      flatSequence.__iterateUncached = function(fn, reverse) {
        if (reverse) {
          return this.cacheResult().__iterate(fn, reverse);
        }
        var iterations = 0;
        var stopped = false;
        function flatDeep(iter, currentDepth) {
          iter.__iterate(function(v2, k2) {
            if ((!depth || currentDepth < depth) && isCollection(v2)) {
              flatDeep(v2, currentDepth + 1);
            } else {
              iterations++;
              if (fn(v2, useKeys ? k2 : iterations - 1, flatSequence) === false) {
                stopped = true;
              }
            }
            return !stopped;
          }, reverse);
        }
        flatDeep(collection, 0);
        return iterations;
      };
      flatSequence.__iteratorUncached = function(type, reverse) {
        if (reverse) {
          return this.cacheResult().__iterator(type, reverse);
        }
        var iterator = collection.__iterator(type, reverse);
        var stack = [];
        var iterations = 0;
        return new Iterator(function() {
          while (iterator) {
            var step = iterator.next();
            if (step.done !== false) {
              iterator = stack.pop();
              continue;
            }
            var v2 = step.value;
            if (type === ITERATE_ENTRIES) {
              v2 = v2[1];
            }
            if ((!depth || stack.length < depth) && isCollection(v2)) {
              stack.push(iterator);
              iterator = v2.__iterator(type, reverse);
            } else {
              return useKeys ? step : iteratorValue(type, iterations++, v2, step);
            }
          }
          return iteratorDone();
        });
      };
      return flatSequence;
    }
    function flatMapFactory(collection, mapper, context2) {
      var coerce = collectionClass(collection);
      return collection.toSeq().map(function(v2, k2) {
        return coerce(mapper.call(context2, v2, k2, collection));
      }).flatten(true);
    }
    function interposeFactory(collection, separator) {
      var interposedSequence = makeSequence(collection);
      interposedSequence.size = collection.size && collection.size * 2 - 1;
      interposedSequence.__iterateUncached = function(fn, reverse) {
        var this$1$1 = this;
        var iterations = 0;
        collection.__iterate(
          function(v2) {
            return (!iterations || fn(separator, iterations++, this$1$1) !== false) && fn(v2, iterations++, this$1$1) !== false;
          },
          reverse
        );
        return iterations;
      };
      interposedSequence.__iteratorUncached = function(type, reverse) {
        var iterator = collection.__iterator(ITERATE_VALUES, reverse);
        var iterations = 0;
        var step;
        return new Iterator(function() {
          if (!step || iterations % 2) {
            step = iterator.next();
            if (step.done) {
              return step;
            }
          }
          return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
        });
      };
      return interposedSequence;
    }
    function sortFactory(collection, comparator, mapper) {
      if (!comparator) {
        comparator = defaultComparator;
      }
      var isKeyedCollection = isKeyed(collection);
      var index = 0;
      var entries = collection.toSeq().map(function(v2, k2) {
        return [k2, v2, index++, mapper ? mapper(v2, k2, collection) : v2];
      }).valueSeq().toArray();
      entries.sort(function(a, b2) {
        return comparator(a[3], b2[3]) || a[2] - b2[2];
      }).forEach(
        isKeyedCollection ? function(v2, i) {
          entries[i].length = 2;
        } : function(v2, i) {
          entries[i] = v2[1];
        }
      );
      return isKeyedCollection ? KeyedSeq(entries) : isIndexed(collection) ? IndexedSeq(entries) : SetSeq(entries);
    }
    function maxFactory(collection, comparator, mapper) {
      if (!comparator) {
        comparator = defaultComparator;
      }
      if (mapper) {
        var entry = collection.toSeq().map(function(v2, k2) {
          return [v2, mapper(v2, k2, collection)];
        }).reduce(function(a, b2) {
          return maxCompare(comparator, a[1], b2[1]) ? b2 : a;
        });
        return entry && entry[0];
      }
      return collection.reduce(function(a, b2) {
        return maxCompare(comparator, a, b2) ? b2 : a;
      });
    }
    function maxCompare(comparator, a, b2) {
      var comp = comparator(b2, a);
      return comp === 0 && b2 !== a && (b2 === void 0 || b2 === null || b2 !== b2) || comp > 0;
    }
    function zipWithFactory(keyIter, zipper, iters, zipAll) {
      var zipSequence = makeSequence(keyIter);
      var sizes = new ArraySeq(iters).map(function(i) {
        return i.size;
      });
      zipSequence.size = zipAll ? sizes.max() : sizes.min();
      zipSequence.__iterate = function(fn, reverse) {
        var iterator = this.__iterator(ITERATE_VALUES, reverse);
        var step;
        var iterations = 0;
        while (!(step = iterator.next()).done) {
          if (fn(step.value, iterations++, this) === false) {
            break;
          }
        }
        return iterations;
      };
      zipSequence.__iteratorUncached = function(type, reverse) {
        var iterators = iters.map(
          function(i) {
            return i = Collection(i), getIterator(reverse ? i.reverse() : i);
          }
        );
        var iterations = 0;
        var isDone = false;
        return new Iterator(function() {
          var steps;
          if (!isDone) {
            steps = iterators.map(function(i) {
              return i.next();
            });
            isDone = zipAll ? steps.every(function(s) {
              return s.done;
            }) : steps.some(function(s) {
              return s.done;
            });
          }
          if (isDone) {
            return iteratorDone();
          }
          return iteratorValue(
            type,
            iterations++,
            zipper.apply(
              null,
              steps.map(function(s) {
                return s.value;
              })
            )
          );
        });
      };
      return zipSequence;
    }
    function reify(iter, seq) {
      return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);
    }
    function validateEntry(entry) {
      if (entry !== Object(entry)) {
        throw new TypeError("Expected [K, V] tuple: " + entry);
      }
    }
    function collectionClass(collection) {
      return isKeyed(collection) ? KeyedCollection : isIndexed(collection) ? IndexedCollection : SetCollection;
    }
    function makeSequence(collection) {
      return Object.create(
        (isKeyed(collection) ? KeyedSeq : isIndexed(collection) ? IndexedSeq : SetSeq).prototype
      );
    }
    function cacheResultThrough() {
      if (this._iter.cacheResult) {
        this._iter.cacheResult();
        this.size = this._iter.size;
        return this;
      }
      return Seq.prototype.cacheResult.call(this);
    }
    function defaultComparator(a, b2) {
      if (a === void 0 && b2 === void 0) {
        return 0;
      }
      if (a === void 0) {
        return 1;
      }
      if (b2 === void 0) {
        return -1;
      }
      return a > b2 ? 1 : a < b2 ? -1 : 0;
    }
    function arrCopy(arr, offset2) {
      offset2 = offset2 || 0;
      var len = Math.max(0, arr.length - offset2);
      var newArr = new Array(len);
      for (var ii2 = 0; ii2 < len; ii2++) {
        newArr[ii2] = arr[ii2 + offset2];
      }
      return newArr;
    }
    function invariant(condition, error) {
      if (!condition) {
        throw new Error(error);
      }
    }
    function assertNotInfinite(size) {
      invariant(
        size !== Infinity,
        "Cannot perform this action with an infinite size."
      );
    }
    function coerceKeyPath(keyPath) {
      if (isArrayLike$5(keyPath) && typeof keyPath !== "string") {
        return keyPath;
      }
      if (isOrdered(keyPath)) {
        return keyPath.toArray();
      }
      throw new TypeError(
        "Invalid keyPath: expected Ordered Collection or Array: " + keyPath
      );
    }
    var toString$4 = Object.prototype.toString;
    function isPlainObject$4(value2) {
      if (!value2 || typeof value2 !== "object" || toString$4.call(value2) !== "[object Object]") {
        return false;
      }
      var proto2 = Object.getPrototypeOf(value2);
      if (proto2 === null) {
        return true;
      }
      var parentProto = proto2;
      var nextProto = Object.getPrototypeOf(proto2);
      while (nextProto !== null) {
        parentProto = nextProto;
        nextProto = Object.getPrototypeOf(parentProto);
      }
      return parentProto === proto2;
    }
    function isDataStructure(value2) {
      return typeof value2 === "object" && (isImmutable$2(value2) || Array.isArray(value2) || isPlainObject$4(value2));
    }
    function quoteString(value2) {
      try {
        return typeof value2 === "string" ? JSON.stringify(value2) : String(value2);
      } catch (_ignoreError) {
        return JSON.stringify(value2);
      }
    }
    function has(collection, key) {
      return isImmutable$2(collection) ? collection.has(key) : isDataStructure(collection) && hasOwnProperty$d.call(collection, key);
    }
    function get$4(collection, key, notSetValue) {
      return isImmutable$2(collection) ? collection.get(key, notSetValue) : !has(collection, key) ? notSetValue : typeof collection.get === "function" ? collection.get(key) : collection[key];
    }
    function shallowCopy$1(from2) {
      if (Array.isArray(from2)) {
        return arrCopy(from2);
      }
      var to2 = {};
      for (var key in from2) {
        if (hasOwnProperty$d.call(from2, key)) {
          to2[key] = from2[key];
        }
      }
      return to2;
    }
    function remove(collection, key) {
      if (!isDataStructure(collection)) {
        throw new TypeError(
          "Cannot update non-data-structure value: " + collection
        );
      }
      if (isImmutable$2(collection)) {
        if (!collection.remove) {
          throw new TypeError(
            "Cannot update immutable value without .remove() method: " + collection
          );
        }
        return collection.remove(key);
      }
      if (!hasOwnProperty$d.call(collection, key)) {
        return collection;
      }
      var collectionCopy = shallowCopy$1(collection);
      if (Array.isArray(collectionCopy)) {
        collectionCopy.splice(key, 1);
      } else {
        delete collectionCopy[key];
      }
      return collectionCopy;
    }
    function set$2(collection, key, value2) {
      if (!isDataStructure(collection)) {
        throw new TypeError(
          "Cannot update non-data-structure value: " + collection
        );
      }
      if (isImmutable$2(collection)) {
        if (!collection.set) {
          throw new TypeError(
            "Cannot update immutable value without .set() method: " + collection
          );
        }
        return collection.set(key, value2);
      }
      if (hasOwnProperty$d.call(collection, key) && value2 === collection[key]) {
        return collection;
      }
      var collectionCopy = shallowCopy$1(collection);
      collectionCopy[key] = value2;
      return collectionCopy;
    }
    function updateIn$1(collection, keyPath, notSetValue, updater) {
      if (!updater) {
        updater = notSetValue;
        notSetValue = void 0;
      }
      var updatedValue = updateInDeeply(
        isImmutable$2(collection),
        collection,
        coerceKeyPath(keyPath),
        0,
        notSetValue,
        updater
      );
      return updatedValue === NOT_SET ? notSetValue : updatedValue;
    }
    function updateInDeeply(inImmutable, existing, keyPath, i, notSetValue, updater) {
      var wasNotSet = existing === NOT_SET;
      if (i === keyPath.length) {
        var existingValue = wasNotSet ? notSetValue : existing;
        var newValue = updater(existingValue);
        return newValue === existingValue ? existing : newValue;
      }
      if (!wasNotSet && !isDataStructure(existing)) {
        throw new TypeError(
          "Cannot update within non-data-structure value in path [" + keyPath.slice(0, i).map(quoteString) + "]: " + existing
        );
      }
      var key = keyPath[i];
      var nextExisting = wasNotSet ? NOT_SET : get$4(existing, key, NOT_SET);
      var nextUpdated = updateInDeeply(
        nextExisting === NOT_SET ? inImmutable : isImmutable$2(nextExisting),
        nextExisting,
        keyPath,
        i + 1,
        notSetValue,
        updater
      );
      return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? remove(existing, key) : set$2(
        wasNotSet ? inImmutable ? emptyMap() : {} : existing,
        key,
        nextUpdated
      );
    }
    function setIn$1(collection, keyPath, value2) {
      return updateIn$1(collection, keyPath, NOT_SET, function() {
        return value2;
      });
    }
    function setIn(keyPath, v2) {
      return setIn$1(this, keyPath, v2);
    }
    function removeIn(collection, keyPath) {
      return updateIn$1(collection, keyPath, function() {
        return NOT_SET;
      });
    }
    function deleteIn(keyPath) {
      return removeIn(this, keyPath);
    }
    function update$1(collection, key, notSetValue, updater) {
      return updateIn$1(collection, [key], notSetValue, updater);
    }
    function update(key, notSetValue, updater) {
      return arguments.length === 1 ? key(this) : update$1(this, key, notSetValue, updater);
    }
    function updateIn(keyPath, notSetValue, updater) {
      return updateIn$1(this, keyPath, notSetValue, updater);
    }
    function merge$1$1() {
      var iters = [], len = arguments.length;
      while (len--) iters[len] = arguments[len];
      return mergeIntoKeyedWith(this, iters);
    }
    function mergeWith$1$1(merger) {
      var iters = [], len = arguments.length - 1;
      while (len-- > 0) iters[len] = arguments[len + 1];
      if (typeof merger !== "function") {
        throw new TypeError("Invalid merger function: " + merger);
      }
      return mergeIntoKeyedWith(this, iters, merger);
    }
    function mergeIntoKeyedWith(collection, collections, merger) {
      var iters = [];
      for (var ii2 = 0; ii2 < collections.length; ii2++) {
        var collection$1 = KeyedCollection(collections[ii2]);
        if (collection$1.size !== 0) {
          iters.push(collection$1);
        }
      }
      if (iters.length === 0) {
        return collection;
      }
      if (collection.toSeq().size === 0 && !collection.__ownerID && iters.length === 1) {
        return collection.constructor(iters[0]);
      }
      return collection.withMutations(function(collection2) {
        var mergeIntoCollection = merger ? function(value2, key) {
          update$1(
            collection2,
            key,
            NOT_SET,
            function(oldVal) {
              return oldVal === NOT_SET ? value2 : merger(oldVal, value2, key);
            }
          );
        } : function(value2, key) {
          collection2.set(key, value2);
        };
        for (var ii3 = 0; ii3 < iters.length; ii3++) {
          iters[ii3].forEach(mergeIntoCollection);
        }
      });
    }
    function merge$2(collection) {
      var sources = [], len = arguments.length - 1;
      while (len-- > 0) sources[len] = arguments[len + 1];
      return mergeWithSources(collection, sources);
    }
    function mergeWith$2(merger, collection) {
      var sources = [], len = arguments.length - 2;
      while (len-- > 0) sources[len] = arguments[len + 2];
      return mergeWithSources(collection, sources, merger);
    }
    function mergeDeep$1(collection) {
      var sources = [], len = arguments.length - 1;
      while (len-- > 0) sources[len] = arguments[len + 1];
      return mergeDeepWithSources(collection, sources);
    }
    function mergeDeepWith$1(merger, collection) {
      var sources = [], len = arguments.length - 2;
      while (len-- > 0) sources[len] = arguments[len + 2];
      return mergeDeepWithSources(collection, sources, merger);
    }
    function mergeDeepWithSources(collection, sources, merger) {
      return mergeWithSources(collection, sources, deepMergerWith(merger));
    }
    function mergeWithSources(collection, sources, merger) {
      if (!isDataStructure(collection)) {
        throw new TypeError(
          "Cannot merge into non-data-structure value: " + collection
        );
      }
      if (isImmutable$2(collection)) {
        return typeof merger === "function" && collection.mergeWith ? collection.mergeWith.apply(collection, [merger].concat(sources)) : collection.merge ? collection.merge.apply(collection, sources) : collection.concat.apply(collection, sources);
      }
      var isArray2 = Array.isArray(collection);
      var merged = collection;
      var Collection2 = isArray2 ? IndexedCollection : KeyedCollection;
      var mergeItem = isArray2 ? function(value2) {
        if (merged === collection) {
          merged = shallowCopy$1(merged);
        }
        merged.push(value2);
      } : function(value2, key) {
        var hasVal = hasOwnProperty$d.call(merged, key);
        var nextVal = hasVal && merger ? merger(merged[key], value2, key) : value2;
        if (!hasVal || nextVal !== merged[key]) {
          if (merged === collection) {
            merged = shallowCopy$1(merged);
          }
          merged[key] = nextVal;
        }
      };
      for (var i = 0; i < sources.length; i++) {
        Collection2(sources[i]).forEach(mergeItem);
      }
      return merged;
    }
    function deepMergerWith(merger) {
      function deepMerger(oldValue, newValue, key) {
        return isDataStructure(oldValue) && isDataStructure(newValue) && areMergeable(oldValue, newValue) ? mergeWithSources(oldValue, [newValue], deepMerger) : merger ? merger(oldValue, newValue, key) : newValue;
      }
      return deepMerger;
    }
    function areMergeable(oldDataStructure, newDataStructure) {
      var oldSeq = Seq(oldDataStructure);
      var newSeq = Seq(newDataStructure);
      return isIndexed(oldSeq) === isIndexed(newSeq) && isKeyed(oldSeq) === isKeyed(newSeq);
    }
    function mergeDeep() {
      var iters = [], len = arguments.length;
      while (len--) iters[len] = arguments[len];
      return mergeDeepWithSources(this, iters);
    }
    function mergeDeepWith(merger) {
      var iters = [], len = arguments.length - 1;
      while (len-- > 0) iters[len] = arguments[len + 1];
      return mergeDeepWithSources(this, iters, merger);
    }
    function mergeIn(keyPath) {
      var iters = [], len = arguments.length - 1;
      while (len-- > 0) iters[len] = arguments[len + 1];
      return updateIn$1(this, keyPath, emptyMap(), function(m2) {
        return mergeWithSources(m2, iters);
      });
    }
    function mergeDeepIn(keyPath) {
      var iters = [], len = arguments.length - 1;
      while (len-- > 0) iters[len] = arguments[len + 1];
      return updateIn$1(
        this,
        keyPath,
        emptyMap(),
        function(m2) {
          return mergeDeepWithSources(m2, iters);
        }
      );
    }
    function withMutations(fn) {
      var mutable = this.asMutable();
      fn(mutable);
      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
    }
    function asMutable() {
      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
    }
    function asImmutable() {
      return this.__ensureOwner();
    }
    function wasAltered() {
      return this.__altered;
    }
    var Map$5 = /* @__PURE__ */ function(KeyedCollection2) {
      function Map2(value2) {
        return value2 === void 0 || value2 === null ? emptyMap() : isMap$2(value2) && !isOrdered(value2) ? value2 : emptyMap().withMutations(function(map2) {
          var iter = KeyedCollection2(value2);
          assertNotInfinite(iter.size);
          iter.forEach(function(v2, k2) {
            return map2.set(k2, v2);
          });
        });
      }
      if (KeyedCollection2) Map2.__proto__ = KeyedCollection2;
      Map2.prototype = Object.create(KeyedCollection2 && KeyedCollection2.prototype);
      Map2.prototype.constructor = Map2;
      Map2.of = function of2() {
        var keyValues = [], len = arguments.length;
        while (len--) keyValues[len] = arguments[len];
        return emptyMap().withMutations(function(map2) {
          for (var i = 0; i < keyValues.length; i += 2) {
            if (i + 1 >= keyValues.length) {
              throw new Error("Missing value for key: " + keyValues[i]);
            }
            map2.set(keyValues[i], keyValues[i + 1]);
          }
        });
      };
      Map2.prototype.toString = function toString2() {
        return this.__toString("Map {", "}");
      };
      Map2.prototype.get = function get2(k2, notSetValue) {
        return this._root ? this._root.get(0, void 0, k2, notSetValue) : notSetValue;
      };
      Map2.prototype.set = function set2(k2, v2) {
        return updateMap(this, k2, v2);
      };
      Map2.prototype.remove = function remove2(k2) {
        return updateMap(this, k2, NOT_SET);
      };
      Map2.prototype.deleteAll = function deleteAll(keys2) {
        var collection = Collection(keys2);
        if (collection.size === 0) {
          return this;
        }
        return this.withMutations(function(map2) {
          collection.forEach(function(key) {
            return map2.remove(key);
          });
        });
      };
      Map2.prototype.clear = function clear() {
        if (this.size === 0) {
          return this;
        }
        if (this.__ownerID) {
          this.size = 0;
          this._root = null;
          this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return emptyMap();
      };
      Map2.prototype.sort = function sort(comparator) {
        return OrderedMap(sortFactory(this, comparator));
      };
      Map2.prototype.sortBy = function sortBy(mapper, comparator) {
        return OrderedMap(sortFactory(this, comparator, mapper));
      };
      Map2.prototype.map = function map2(mapper, context2) {
        var this$1$1 = this;
        return this.withMutations(function(map3) {
          map3.forEach(function(value2, key) {
            map3.set(key, mapper.call(context2, value2, key, this$1$1));
          });
        });
      };
      Map2.prototype.__iterator = function __iterator(type, reverse) {
        return new MapIterator(this, type, reverse);
      };
      Map2.prototype.__iterate = function __iterate(fn, reverse) {
        var this$1$1 = this;
        var iterations = 0;
        this._root && this._root.iterate(function(entry) {
          iterations++;
          return fn(entry[1], entry[0], this$1$1);
        }, reverse);
        return iterations;
      };
      Map2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        if (!ownerID) {
          if (this.size === 0) {
            return emptyMap();
          }
          this.__ownerID = ownerID;
          this.__altered = false;
          return this;
        }
        return makeMap(this.size, this._root, ownerID, this.__hash);
      };
      return Map2;
    }(KeyedCollection);
    Map$5.isMap = isMap$2;
    var MapPrototype = Map$5.prototype;
    MapPrototype[IS_MAP_SYMBOL] = true;
    MapPrototype[DELETE] = MapPrototype.remove;
    MapPrototype.removeAll = MapPrototype.deleteAll;
    MapPrototype.setIn = setIn;
    MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;
    MapPrototype.update = update;
    MapPrototype.updateIn = updateIn;
    MapPrototype.merge = MapPrototype.concat = merge$1$1;
    MapPrototype.mergeWith = mergeWith$1$1;
    MapPrototype.mergeDeep = mergeDeep;
    MapPrototype.mergeDeepWith = mergeDeepWith;
    MapPrototype.mergeIn = mergeIn;
    MapPrototype.mergeDeepIn = mergeDeepIn;
    MapPrototype.withMutations = withMutations;
    MapPrototype.wasAltered = wasAltered;
    MapPrototype.asImmutable = asImmutable;
    MapPrototype["@@transducer/init"] = MapPrototype.asMutable = asMutable;
    MapPrototype["@@transducer/step"] = function(result, arr) {
      return result.set(arr[0], arr[1]);
    };
    MapPrototype["@@transducer/result"] = function(obj) {
      return obj.asImmutable();
    };
    var ArrayMapNode = function ArrayMapNode2(ownerID, entries) {
      this.ownerID = ownerID;
      this.entries = entries;
    };
    ArrayMapNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
      var entries = this.entries;
      for (var ii2 = 0, len = entries.length; ii2 < len; ii2++) {
        if (is$1(key, entries[ii2][0])) {
          return entries[ii2][1];
        }
      }
      return notSetValue;
    };
    ArrayMapNode.prototype.update = function update2(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
      var removed = value2 === NOT_SET;
      var entries = this.entries;
      var idx = 0;
      var len = entries.length;
      for (; idx < len; idx++) {
        if (is$1(key, entries[idx][0])) {
          break;
        }
      }
      var exists = idx < len;
      if (exists ? entries[idx][1] === value2 : removed) {
        return this;
      }
      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);
      if (removed && entries.length === 1) {
        return;
      }
      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
        return createNodes(ownerID, entries, key, value2);
      }
      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries : arrCopy(entries);
      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
        } else {
          newEntries[idx] = [key, value2];
        }
      } else {
        newEntries.push([key, value2]);
      }
      if (isEditable) {
        this.entries = newEntries;
        return this;
      }
      return new ArrayMapNode(ownerID, newEntries);
    };
    var BitmapIndexedNode = function BitmapIndexedNode2(ownerID, bitmap, nodes) {
      this.ownerID = ownerID;
      this.bitmap = bitmap;
      this.nodes = nodes;
    };
    BitmapIndexedNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
      if (keyHash === void 0) {
        keyHash = hash(key);
      }
      var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
      var bitmap = this.bitmap;
      return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(
        shift + SHIFT,
        keyHash,
        key,
        notSetValue
      );
    };
    BitmapIndexedNode.prototype.update = function update2(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
      if (keyHash === void 0) {
        keyHash = hash(key);
      }
      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var bit = 1 << keyHashFrag;
      var bitmap = this.bitmap;
      var exists = (bitmap & bit) !== 0;
      if (!exists && value2 === NOT_SET) {
        return this;
      }
      var idx = popCount(bitmap & bit - 1);
      var nodes = this.nodes;
      var node = exists ? nodes[idx] : void 0;
      var newNode = updateNode(
        node,
        ownerID,
        shift + SHIFT,
        keyHash,
        key,
        value2,
        didChangeSize,
        didAlter
      );
      if (newNode === node) {
        return this;
      }
      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
      }
      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
        return nodes[idx ^ 1];
      }
      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
        return newNode;
      }
      var isEditable = ownerID && ownerID === this.ownerID;
      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
      var newNodes = exists ? newNode ? setAt(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);
      if (isEditable) {
        this.bitmap = newBitmap;
        this.nodes = newNodes;
        return this;
      }
      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
    };
    var HashArrayMapNode = function HashArrayMapNode2(ownerID, count, nodes) {
      this.ownerID = ownerID;
      this.count = count;
      this.nodes = nodes;
    };
    HashArrayMapNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
      if (keyHash === void 0) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var node = this.nodes[idx];
      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
    };
    HashArrayMapNode.prototype.update = function update2(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
      if (keyHash === void 0) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var removed = value2 === NOT_SET;
      var nodes = this.nodes;
      var node = nodes[idx];
      if (removed && !node) {
        return this;
      }
      var newNode = updateNode(
        node,
        ownerID,
        shift + SHIFT,
        keyHash,
        key,
        value2,
        didChangeSize,
        didAlter
      );
      if (newNode === node) {
        return this;
      }
      var newCount = this.count;
      if (!node) {
        newCount++;
      } else if (!newNode) {
        newCount--;
        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
          return packNodes(ownerID, nodes, newCount, idx);
        }
      }
      var isEditable = ownerID && ownerID === this.ownerID;
      var newNodes = setAt(nodes, idx, newNode, isEditable);
      if (isEditable) {
        this.count = newCount;
        this.nodes = newNodes;
        return this;
      }
      return new HashArrayMapNode(ownerID, newCount, newNodes);
    };
    var HashCollisionNode = function HashCollisionNode2(ownerID, keyHash, entries) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entries = entries;
    };
    HashCollisionNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
      var entries = this.entries;
      for (var ii2 = 0, len = entries.length; ii2 < len; ii2++) {
        if (is$1(key, entries[ii2][0])) {
          return entries[ii2][1];
        }
      }
      return notSetValue;
    };
    HashCollisionNode.prototype.update = function update2(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
      if (keyHash === void 0) {
        keyHash = hash(key);
      }
      var removed = value2 === NOT_SET;
      if (keyHash !== this.keyHash) {
        if (removed) {
          return this;
        }
        SetRef(didAlter);
        SetRef(didChangeSize);
        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value2]);
      }
      var entries = this.entries;
      var idx = 0;
      var len = entries.length;
      for (; idx < len; idx++) {
        if (is$1(key, entries[idx][0])) {
          break;
        }
      }
      var exists = idx < len;
      if (exists ? entries[idx][1] === value2 : removed) {
        return this;
      }
      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);
      if (removed && len === 2) {
        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
      }
      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries : arrCopy(entries);
      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
        } else {
          newEntries[idx] = [key, value2];
        }
      } else {
        newEntries.push([key, value2]);
      }
      if (isEditable) {
        this.entries = newEntries;
        return this;
      }
      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
    };
    var ValueNode = function ValueNode2(ownerID, keyHash, entry) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entry = entry;
    };
    ValueNode.prototype.get = function get2(shift, keyHash, key, notSetValue) {
      return is$1(key, this.entry[0]) ? this.entry[1] : notSetValue;
    };
    ValueNode.prototype.update = function update2(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
      var removed = value2 === NOT_SET;
      var keyMatch = is$1(key, this.entry[0]);
      if (keyMatch ? value2 === this.entry[1] : removed) {
        return this;
      }
      SetRef(didAlter);
      if (removed) {
        SetRef(didChangeSize);
        return;
      }
      if (keyMatch) {
        if (ownerID && ownerID === this.ownerID) {
          this.entry[1] = value2;
          return this;
        }
        return new ValueNode(ownerID, this.keyHash, [key, value2]);
      }
      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value2]);
    };
    ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse) {
      var entries = this.entries;
      for (var ii2 = 0, maxIndex = entries.length - 1; ii2 <= maxIndex; ii2++) {
        if (fn(entries[reverse ? maxIndex - ii2 : ii2]) === false) {
          return false;
        }
      }
    };
    BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse) {
      var nodes = this.nodes;
      for (var ii2 = 0, maxIndex = nodes.length - 1; ii2 <= maxIndex; ii2++) {
        var node = nodes[reverse ? maxIndex - ii2 : ii2];
        if (node && node.iterate(fn, reverse) === false) {
          return false;
        }
      }
    };
    ValueNode.prototype.iterate = function(fn, reverse) {
      return fn(this.entry);
    };
    var MapIterator = /* @__PURE__ */ function(Iterator2) {
      function MapIterator2(map2, type, reverse) {
        this._type = type;
        this._reverse = reverse;
        this._stack = map2._root && mapIteratorFrame(map2._root);
      }
      if (Iterator2) MapIterator2.__proto__ = Iterator2;
      MapIterator2.prototype = Object.create(Iterator2 && Iterator2.prototype);
      MapIterator2.prototype.constructor = MapIterator2;
      MapIterator2.prototype.next = function next() {
        var type = this._type;
        var stack = this._stack;
        while (stack) {
          var node = stack.node;
          var index = stack.index++;
          var maxIndex = void 0;
          if (node.entry) {
            if (index === 0) {
              return mapIteratorValue(type, node.entry);
            }
          } else if (node.entries) {
            maxIndex = node.entries.length - 1;
            if (index <= maxIndex) {
              return mapIteratorValue(
                type,
                node.entries[this._reverse ? maxIndex - index : index]
              );
            }
          } else {
            maxIndex = node.nodes.length - 1;
            if (index <= maxIndex) {
              var subNode = node.nodes[this._reverse ? maxIndex - index : index];
              if (subNode) {
                if (subNode.entry) {
                  return mapIteratorValue(type, subNode.entry);
                }
                stack = this._stack = mapIteratorFrame(subNode, stack);
              }
              continue;
            }
          }
          stack = this._stack = this._stack.__prev;
        }
        return iteratorDone();
      };
      return MapIterator2;
    }(Iterator);
    function mapIteratorValue(type, entry) {
      return iteratorValue(type, entry[0], entry[1]);
    }
    function mapIteratorFrame(node, prev) {
      return {
        node,
        index: 0,
        __prev: prev
      };
    }
    function makeMap(size, root2, ownerID, hash2) {
      var map2 = Object.create(MapPrototype);
      map2.size = size;
      map2._root = root2;
      map2.__ownerID = ownerID;
      map2.__hash = hash2;
      map2.__altered = false;
      return map2;
    }
    var EMPTY_MAP;
    function emptyMap() {
      return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
    }
    function updateMap(map2, k2, v2) {
      var newRoot;
      var newSize;
      if (!map2._root) {
        if (v2 === NOT_SET) {
          return map2;
        }
        newSize = 1;
        newRoot = new ArrayMapNode(map2.__ownerID, [[k2, v2]]);
      } else {
        var didChangeSize = MakeRef();
        var didAlter = MakeRef();
        newRoot = updateNode(
          map2._root,
          map2.__ownerID,
          0,
          void 0,
          k2,
          v2,
          didChangeSize,
          didAlter
        );
        if (!didAlter.value) {
          return map2;
        }
        newSize = map2.size + (didChangeSize.value ? v2 === NOT_SET ? -1 : 1 : 0);
      }
      if (map2.__ownerID) {
        map2.size = newSize;
        map2._root = newRoot;
        map2.__hash = void 0;
        map2.__altered = true;
        return map2;
      }
      return newRoot ? makeMap(newSize, newRoot) : emptyMap();
    }
    function updateNode(node, ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
      if (!node) {
        if (value2 === NOT_SET) {
          return node;
        }
        SetRef(didAlter);
        SetRef(didChangeSize);
        return new ValueNode(ownerID, keyHash, [key, value2]);
      }
      return node.update(
        ownerID,
        shift,
        keyHash,
        key,
        value2,
        didChangeSize,
        didAlter
      );
    }
    function isLeafNode(node) {
      return node.constructor === ValueNode || node.constructor === HashCollisionNode;
    }
    function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
      if (node.keyHash === keyHash) {
        return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
      }
      var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
      var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var newNode;
      var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);
      return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
    }
    function createNodes(ownerID, entries, key, value2) {
      if (!ownerID) {
        ownerID = new OwnerID();
      }
      var node = new ValueNode(ownerID, hash(key), [key, value2]);
      for (var ii2 = 0; ii2 < entries.length; ii2++) {
        var entry = entries[ii2];
        node = node.update(ownerID, 0, void 0, entry[0], entry[1]);
      }
      return node;
    }
    function packNodes(ownerID, nodes, count, excluding) {
      var bitmap = 0;
      var packedII = 0;
      var packedNodes = new Array(count);
      for (var ii2 = 0, bit = 1, len = nodes.length; ii2 < len; ii2++, bit <<= 1) {
        var node = nodes[ii2];
        if (node !== void 0 && ii2 !== excluding) {
          bitmap |= bit;
          packedNodes[packedII++] = node;
        }
      }
      return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
    }
    function expandNodes(ownerID, nodes, bitmap, including, node) {
      var count = 0;
      var expandedNodes = new Array(SIZE);
      for (var ii2 = 0; bitmap !== 0; ii2++, bitmap >>>= 1) {
        expandedNodes[ii2] = bitmap & 1 ? nodes[count++] : void 0;
      }
      expandedNodes[including] = node;
      return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
    }
    function popCount(x2) {
      x2 -= x2 >> 1 & 1431655765;
      x2 = (x2 & 858993459) + (x2 >> 2 & 858993459);
      x2 = x2 + (x2 >> 4) & 252645135;
      x2 += x2 >> 8;
      x2 += x2 >> 16;
      return x2 & 127;
    }
    function setAt(array, idx, val, canEdit) {
      var newArray = canEdit ? array : arrCopy(array);
      newArray[idx] = val;
      return newArray;
    }
    function spliceIn(array, idx, val, canEdit) {
      var newLen = array.length + 1;
      if (canEdit && idx + 1 === newLen) {
        array[idx] = val;
        return array;
      }
      var newArray = new Array(newLen);
      var after = 0;
      for (var ii2 = 0; ii2 < newLen; ii2++) {
        if (ii2 === idx) {
          newArray[ii2] = val;
          after = -1;
        } else {
          newArray[ii2] = array[ii2 + after];
        }
      }
      return newArray;
    }
    function spliceOut(array, idx, canEdit) {
      var newLen = array.length - 1;
      if (canEdit && idx === newLen) {
        array.pop();
        return array;
      }
      var newArray = new Array(newLen);
      var after = 0;
      for (var ii2 = 0; ii2 < newLen; ii2++) {
        if (ii2 === idx) {
          after = 1;
        }
        newArray[ii2] = array[ii2 + after];
      }
      return newArray;
    }
    var MAX_ARRAY_MAP_SIZE = SIZE / 4;
    var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
    var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;
    var IS_LIST_SYMBOL = "@@__IMMUTABLE_LIST__@@";
    function isList(maybeList) {
      return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);
    }
    var List = /* @__PURE__ */ function(IndexedCollection2) {
      function List2(value2) {
        var empty = emptyList();
        if (value2 === void 0 || value2 === null) {
          return empty;
        }
        if (isList(value2)) {
          return value2;
        }
        var iter = IndexedCollection2(value2);
        var size = iter.size;
        if (size === 0) {
          return empty;
        }
        assertNotInfinite(size);
        if (size > 0 && size < SIZE) {
          return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
        }
        return empty.withMutations(function(list) {
          list.setSize(size);
          iter.forEach(function(v2, i) {
            return list.set(i, v2);
          });
        });
      }
      if (IndexedCollection2) List2.__proto__ = IndexedCollection2;
      List2.prototype = Object.create(IndexedCollection2 && IndexedCollection2.prototype);
      List2.prototype.constructor = List2;
      List2.of = function of2() {
        return this(arguments);
      };
      List2.prototype.toString = function toString2() {
        return this.__toString("List [", "]");
      };
      List2.prototype.get = function get2(index, notSetValue) {
        index = wrapIndex(this, index);
        if (index >= 0 && index < this.size) {
          index += this._origin;
          var node = listNodeFor(this, index);
          return node && node.array[index & MASK];
        }
        return notSetValue;
      };
      List2.prototype.set = function set2(index, value2) {
        return updateList(this, index, value2);
      };
      List2.prototype.remove = function remove2(index) {
        return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
      };
      List2.prototype.insert = function insert(index, value2) {
        return this.splice(index, 0, value2);
      };
      List2.prototype.clear = function clear() {
        if (this.size === 0) {
          return this;
        }
        if (this.__ownerID) {
          this.size = this._origin = this._capacity = 0;
          this._level = SHIFT;
          this._root = this._tail = this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return emptyList();
      };
      List2.prototype.push = function push() {
        var values = arguments;
        var oldSize = this.size;
        return this.withMutations(function(list) {
          setListBounds(list, 0, oldSize + values.length);
          for (var ii2 = 0; ii2 < values.length; ii2++) {
            list.set(oldSize + ii2, values[ii2]);
          }
        });
      };
      List2.prototype.pop = function pop() {
        return setListBounds(this, 0, -1);
      };
      List2.prototype.unshift = function unshift() {
        var values = arguments;
        return this.withMutations(function(list) {
          setListBounds(list, -values.length);
          for (var ii2 = 0; ii2 < values.length; ii2++) {
            list.set(ii2, values[ii2]);
          }
        });
      };
      List2.prototype.shift = function shift() {
        return setListBounds(this, 1);
      };
      List2.prototype.concat = function concat() {
        var arguments$1 = arguments;
        var seqs = [];
        for (var i = 0; i < arguments.length; i++) {
          var argument = arguments$1[i];
          var seq = IndexedCollection2(
            typeof argument !== "string" && hasIterator(argument) ? argument : [argument]
          );
          if (seq.size !== 0) {
            seqs.push(seq);
          }
        }
        if (seqs.length === 0) {
          return this;
        }
        if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
          return this.constructor(seqs[0]);
        }
        return this.withMutations(function(list) {
          seqs.forEach(function(seq2) {
            return seq2.forEach(function(value2) {
              return list.push(value2);
            });
          });
        });
      };
      List2.prototype.setSize = function setSize(size) {
        return setListBounds(this, 0, size);
      };
      List2.prototype.map = function map2(mapper, context2) {
        var this$1$1 = this;
        return this.withMutations(function(list) {
          for (var i = 0; i < this$1$1.size; i++) {
            list.set(i, mapper.call(context2, list.get(i), i, this$1$1));
          }
        });
      };
      List2.prototype.slice = function slice(begin, end) {
        var size = this.size;
        if (wholeSlice(begin, end, size)) {
          return this;
        }
        return setListBounds(
          this,
          resolveBegin(begin, size),
          resolveEnd(end, size)
        );
      };
      List2.prototype.__iterator = function __iterator(type, reverse) {
        var index = reverse ? this.size : 0;
        var values = iterateList(this, reverse);
        return new Iterator(function() {
          var value2 = values();
          return value2 === DONE ? iteratorDone() : iteratorValue(type, reverse ? --index : index++, value2);
        });
      };
      List2.prototype.__iterate = function __iterate(fn, reverse) {
        var index = reverse ? this.size : 0;
        var values = iterateList(this, reverse);
        var value2;
        while ((value2 = values()) !== DONE) {
          if (fn(value2, reverse ? --index : index++, this) === false) {
            break;
          }
        }
        return index;
      };
      List2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        if (!ownerID) {
          if (this.size === 0) {
            return emptyList();
          }
          this.__ownerID = ownerID;
          this.__altered = false;
          return this;
        }
        return makeList(
          this._origin,
          this._capacity,
          this._level,
          this._root,
          this._tail,
          ownerID,
          this.__hash
        );
      };
      return List2;
    }(IndexedCollection);
    List.isList = isList;
    var ListPrototype = List.prototype;
    ListPrototype[IS_LIST_SYMBOL] = true;
    ListPrototype[DELETE] = ListPrototype.remove;
    ListPrototype.merge = ListPrototype.concat;
    ListPrototype.setIn = setIn;
    ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;
    ListPrototype.update = update;
    ListPrototype.updateIn = updateIn;
    ListPrototype.mergeIn = mergeIn;
    ListPrototype.mergeDeepIn = mergeDeepIn;
    ListPrototype.withMutations = withMutations;
    ListPrototype.wasAltered = wasAltered;
    ListPrototype.asImmutable = asImmutable;
    ListPrototype["@@transducer/init"] = ListPrototype.asMutable = asMutable;
    ListPrototype["@@transducer/step"] = function(result, arr) {
      return result.push(arr);
    };
    ListPrototype["@@transducer/result"] = function(obj) {
      return obj.asImmutable();
    };
    var VNode = function VNode2(array, ownerID) {
      this.array = array;
      this.ownerID = ownerID;
    };
    VNode.prototype.removeBefore = function removeBefore(ownerID, level, index) {
      if (index === level ? 1 << level : this.array.length === 0) {
        return this;
      }
      var originIndex = index >>> level & MASK;
      if (originIndex >= this.array.length) {
        return new VNode([], ownerID);
      }
      var removingFirst = originIndex === 0;
      var newChild;
      if (level > 0) {
        var oldChild = this.array[originIndex];
        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
        if (newChild === oldChild && removingFirst) {
          return this;
        }
      }
      if (removingFirst && !newChild) {
        return this;
      }
      var editable = editableVNode(this, ownerID);
      if (!removingFirst) {
        for (var ii2 = 0; ii2 < originIndex; ii2++) {
          editable.array[ii2] = void 0;
        }
      }
      if (newChild) {
        editable.array[originIndex] = newChild;
      }
      return editable;
    };
    VNode.prototype.removeAfter = function removeAfter(ownerID, level, index) {
      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
        return this;
      }
      var sizeIndex = index - 1 >>> level & MASK;
      if (sizeIndex >= this.array.length) {
        return this;
      }
      var newChild;
      if (level > 0) {
        var oldChild = this.array[sizeIndex];
        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
          return this;
        }
      }
      var editable = editableVNode(this, ownerID);
      editable.array.splice(sizeIndex + 1);
      if (newChild) {
        editable.array[sizeIndex] = newChild;
      }
      return editable;
    };
    var DONE = {};
    function iterateList(list, reverse) {
      var left = list._origin;
      var right = list._capacity;
      var tailPos = getTailOffset(right);
      var tail = list._tail;
      return iterateNodeOrLeaf(list._root, list._level, 0);
      function iterateNodeOrLeaf(node, level, offset2) {
        return level === 0 ? iterateLeaf(node, offset2) : iterateNode(node, level, offset2);
      }
      function iterateLeaf(node, offset2) {
        var array = offset2 === tailPos ? tail && tail.array : node && node.array;
        var from2 = offset2 > left ? 0 : left - offset2;
        var to2 = right - offset2;
        if (to2 > SIZE) {
          to2 = SIZE;
        }
        return function() {
          if (from2 === to2) {
            return DONE;
          }
          var idx = reverse ? --to2 : from2++;
          return array && array[idx];
        };
      }
      function iterateNode(node, level, offset2) {
        var values;
        var array = node && node.array;
        var from2 = offset2 > left ? 0 : left - offset2 >> level;
        var to2 = (right - offset2 >> level) + 1;
        if (to2 > SIZE) {
          to2 = SIZE;
        }
        return function() {
          while (true) {
            if (values) {
              var value2 = values();
              if (value2 !== DONE) {
                return value2;
              }
              values = null;
            }
            if (from2 === to2) {
              return DONE;
            }
            var idx = reverse ? --to2 : from2++;
            values = iterateNodeOrLeaf(
              array && array[idx],
              level - SHIFT,
              offset2 + (idx << level)
            );
          }
        };
      }
    }
    function makeList(origin, capacity, level, root2, tail, ownerID, hash2) {
      var list = Object.create(ListPrototype);
      list.size = capacity - origin;
      list._origin = origin;
      list._capacity = capacity;
      list._level = level;
      list._root = root2;
      list._tail = tail;
      list.__ownerID = ownerID;
      list.__hash = hash2;
      list.__altered = false;
      return list;
    }
    var EMPTY_LIST;
    function emptyList() {
      return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
    }
    function updateList(list, index, value2) {
      index = wrapIndex(list, index);
      if (index !== index) {
        return list;
      }
      if (index >= list.size || index < 0) {
        return list.withMutations(function(list2) {
          index < 0 ? setListBounds(list2, index).set(0, value2) : setListBounds(list2, 0, index + 1).set(index, value2);
        });
      }
      index += list._origin;
      var newTail = list._tail;
      var newRoot = list._root;
      var didAlter = MakeRef();
      if (index >= getTailOffset(list._capacity)) {
        newTail = updateVNode(newTail, list.__ownerID, 0, index, value2, didAlter);
      } else {
        newRoot = updateVNode(
          newRoot,
          list.__ownerID,
          list._level,
          index,
          value2,
          didAlter
        );
      }
      if (!didAlter.value) {
        return list;
      }
      if (list.__ownerID) {
        list._root = newRoot;
        list._tail = newTail;
        list.__hash = void 0;
        list.__altered = true;
        return list;
      }
      return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
    }
    function updateVNode(node, ownerID, level, index, value2, didAlter) {
      var idx = index >>> level & MASK;
      var nodeHas = node && idx < node.array.length;
      if (!nodeHas && value2 === void 0) {
        return node;
      }
      var newNode;
      if (level > 0) {
        var lowerNode = node && node.array[idx];
        var newLowerNode = updateVNode(
          lowerNode,
          ownerID,
          level - SHIFT,
          index,
          value2,
          didAlter
        );
        if (newLowerNode === lowerNode) {
          return node;
        }
        newNode = editableVNode(node, ownerID);
        newNode.array[idx] = newLowerNode;
        return newNode;
      }
      if (nodeHas && node.array[idx] === value2) {
        return node;
      }
      if (didAlter) {
        SetRef(didAlter);
      }
      newNode = editableVNode(node, ownerID);
      if (value2 === void 0 && idx === newNode.array.length - 1) {
        newNode.array.pop();
      } else {
        newNode.array[idx] = value2;
      }
      return newNode;
    }
    function editableVNode(node, ownerID) {
      if (ownerID && node && ownerID === node.ownerID) {
        return node;
      }
      return new VNode(node ? node.array.slice() : [], ownerID);
    }
    function listNodeFor(list, rawIndex) {
      if (rawIndex >= getTailOffset(list._capacity)) {
        return list._tail;
      }
      if (rawIndex < 1 << list._level + SHIFT) {
        var node = list._root;
        var level = list._level;
        while (node && level > 0) {
          node = node.array[rawIndex >>> level & MASK];
          level -= SHIFT;
        }
        return node;
      }
    }
    function setListBounds(list, begin, end) {
      if (begin !== void 0) {
        begin |= 0;
      }
      if (end !== void 0) {
        end |= 0;
      }
      var owner = list.__ownerID || new OwnerID();
      var oldOrigin = list._origin;
      var oldCapacity = list._capacity;
      var newOrigin = oldOrigin + begin;
      var newCapacity = end === void 0 ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
      if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
        return list;
      }
      if (newOrigin >= newCapacity) {
        return list.clear();
      }
      var newLevel = list._level;
      var newRoot = list._root;
      var offsetShift = 0;
      while (newOrigin + offsetShift < 0) {
        newRoot = new VNode(
          newRoot && newRoot.array.length ? [void 0, newRoot] : [],
          owner
        );
        newLevel += SHIFT;
        offsetShift += 1 << newLevel;
      }
      if (offsetShift) {
        newOrigin += offsetShift;
        oldOrigin += offsetShift;
        newCapacity += offsetShift;
        oldCapacity += offsetShift;
      }
      var oldTailOffset = getTailOffset(oldCapacity);
      var newTailOffset = getTailOffset(newCapacity);
      while (newTailOffset >= 1 << newLevel + SHIFT) {
        newRoot = new VNode(
          newRoot && newRoot.array.length ? [newRoot] : [],
          owner
        );
        newLevel += SHIFT;
      }
      var oldTail = list._tail;
      var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
      if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
        newRoot = editableVNode(newRoot, owner);
        var node = newRoot;
        for (var level = newLevel; level > SHIFT; level -= SHIFT) {
          var idx = oldTailOffset >>> level & MASK;
          node = node.array[idx] = editableVNode(node.array[idx], owner);
        }
        node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
      }
      if (newCapacity < oldCapacity) {
        newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
      }
      if (newOrigin >= newTailOffset) {
        newOrigin -= newTailOffset;
        newCapacity -= newTailOffset;
        newLevel = SHIFT;
        newRoot = null;
        newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
      } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
        offsetShift = 0;
        while (newRoot) {
          var beginIndex = newOrigin >>> newLevel & MASK;
          if (beginIndex !== newTailOffset >>> newLevel & MASK) {
            break;
          }
          if (beginIndex) {
            offsetShift += (1 << newLevel) * beginIndex;
          }
          newLevel -= SHIFT;
          newRoot = newRoot.array[beginIndex];
        }
        if (newRoot && newOrigin > oldOrigin) {
          newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
        }
        if (newRoot && newTailOffset < oldTailOffset) {
          newRoot = newRoot.removeAfter(
            owner,
            newLevel,
            newTailOffset - offsetShift
          );
        }
        if (offsetShift) {
          newOrigin -= offsetShift;
          newCapacity -= offsetShift;
        }
      }
      if (list.__ownerID) {
        list.size = newCapacity - newOrigin;
        list._origin = newOrigin;
        list._capacity = newCapacity;
        list._level = newLevel;
        list._root = newRoot;
        list._tail = newTail;
        list.__hash = void 0;
        list.__altered = true;
        return list;
      }
      return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
    }
    function getTailOffset(size) {
      return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;
    }
    var OrderedMap = /* @__PURE__ */ function(Map2) {
      function OrderedMap2(value2) {
        return value2 === void 0 || value2 === null ? emptyOrderedMap() : isOrderedMap(value2) ? value2 : emptyOrderedMap().withMutations(function(map2) {
          var iter = KeyedCollection(value2);
          assertNotInfinite(iter.size);
          iter.forEach(function(v2, k2) {
            return map2.set(k2, v2);
          });
        });
      }
      if (Map2) OrderedMap2.__proto__ = Map2;
      OrderedMap2.prototype = Object.create(Map2 && Map2.prototype);
      OrderedMap2.prototype.constructor = OrderedMap2;
      OrderedMap2.of = function of2() {
        return this(arguments);
      };
      OrderedMap2.prototype.toString = function toString2() {
        return this.__toString("OrderedMap {", "}");
      };
      OrderedMap2.prototype.get = function get2(k2, notSetValue) {
        var index = this._map.get(k2);
        return index !== void 0 ? this._list.get(index)[1] : notSetValue;
      };
      OrderedMap2.prototype.clear = function clear() {
        if (this.size === 0) {
          return this;
        }
        if (this.__ownerID) {
          this.size = 0;
          this._map.clear();
          this._list.clear();
          this.__altered = true;
          return this;
        }
        return emptyOrderedMap();
      };
      OrderedMap2.prototype.set = function set2(k2, v2) {
        return updateOrderedMap(this, k2, v2);
      };
      OrderedMap2.prototype.remove = function remove2(k2) {
        return updateOrderedMap(this, k2, NOT_SET);
      };
      OrderedMap2.prototype.__iterate = function __iterate(fn, reverse) {
        var this$1$1 = this;
        return this._list.__iterate(
          function(entry) {
            return entry && fn(entry[1], entry[0], this$1$1);
          },
          reverse
        );
      };
      OrderedMap2.prototype.__iterator = function __iterator(type, reverse) {
        return this._list.fromEntrySeq().__iterator(type, reverse);
      };
      OrderedMap2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        var newMap = this._map.__ensureOwner(ownerID);
        var newList = this._list.__ensureOwner(ownerID);
        if (!ownerID) {
          if (this.size === 0) {
            return emptyOrderedMap();
          }
          this.__ownerID = ownerID;
          this.__altered = false;
          this._map = newMap;
          this._list = newList;
          return this;
        }
        return makeOrderedMap(newMap, newList, ownerID, this.__hash);
      };
      return OrderedMap2;
    }(Map$5);
    OrderedMap.isOrderedMap = isOrderedMap;
    OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;
    OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
    function makeOrderedMap(map2, list, ownerID, hash2) {
      var omap = Object.create(OrderedMap.prototype);
      omap.size = map2 ? map2.size : 0;
      omap._map = map2;
      omap._list = list;
      omap.__ownerID = ownerID;
      omap.__hash = hash2;
      omap.__altered = false;
      return omap;
    }
    var EMPTY_ORDERED_MAP;
    function emptyOrderedMap() {
      return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
    }
    function updateOrderedMap(omap, k2, v2) {
      var map2 = omap._map;
      var list = omap._list;
      var i = map2.get(k2);
      var has2 = i !== void 0;
      var newMap;
      var newList;
      if (v2 === NOT_SET) {
        if (!has2) {
          return omap;
        }
        if (list.size >= SIZE && list.size >= map2.size * 2) {
          newList = list.filter(function(entry, idx) {
            return entry !== void 0 && i !== idx;
          });
          newMap = newList.toKeyedSeq().map(function(entry) {
            return entry[0];
          }).flip().toMap();
          if (omap.__ownerID) {
            newMap.__ownerID = newList.__ownerID = omap.__ownerID;
          }
        } else {
          newMap = map2.remove(k2);
          newList = i === list.size - 1 ? list.pop() : list.set(i, void 0);
        }
      } else if (has2) {
        if (v2 === list.get(i)[1]) {
          return omap;
        }
        newMap = map2;
        newList = list.set(i, [k2, v2]);
      } else {
        newMap = map2.set(k2, list.size);
        newList = list.set(list.size, [k2, v2]);
      }
      if (omap.__ownerID) {
        omap.size = newMap.size;
        omap._map = newMap;
        omap._list = newList;
        omap.__hash = void 0;
        omap.__altered = true;
        return omap;
      }
      return makeOrderedMap(newMap, newList);
    }
    var IS_STACK_SYMBOL = "@@__IMMUTABLE_STACK__@@";
    function isStack(maybeStack) {
      return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);
    }
    var Stack$5 = /* @__PURE__ */ function(IndexedCollection2) {
      function Stack2(value2) {
        return value2 === void 0 || value2 === null ? emptyStack() : isStack(value2) ? value2 : emptyStack().pushAll(value2);
      }
      if (IndexedCollection2) Stack2.__proto__ = IndexedCollection2;
      Stack2.prototype = Object.create(IndexedCollection2 && IndexedCollection2.prototype);
      Stack2.prototype.constructor = Stack2;
      Stack2.of = function of2() {
        return this(arguments);
      };
      Stack2.prototype.toString = function toString2() {
        return this.__toString("Stack [", "]");
      };
      Stack2.prototype.get = function get2(index, notSetValue) {
        var head = this._head;
        index = wrapIndex(this, index);
        while (head && index--) {
          head = head.next;
        }
        return head ? head.value : notSetValue;
      };
      Stack2.prototype.peek = function peek() {
        return this._head && this._head.value;
      };
      Stack2.prototype.push = function push() {
        var arguments$1 = arguments;
        if (arguments.length === 0) {
          return this;
        }
        var newSize = this.size + arguments.length;
        var head = this._head;
        for (var ii2 = arguments.length - 1; ii2 >= 0; ii2--) {
          head = {
            value: arguments$1[ii2],
            next: head
          };
        }
        if (this.__ownerID) {
          this.size = newSize;
          this._head = head;
          this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return makeStack(newSize, head);
      };
      Stack2.prototype.pushAll = function pushAll(iter) {
        iter = IndexedCollection2(iter);
        if (iter.size === 0) {
          return this;
        }
        if (this.size === 0 && isStack(iter)) {
          return iter;
        }
        assertNotInfinite(iter.size);
        var newSize = this.size;
        var head = this._head;
        iter.__iterate(
          function(value2) {
            newSize++;
            head = {
              value: value2,
              next: head
            };
          },
          /* reverse */
          true
        );
        if (this.__ownerID) {
          this.size = newSize;
          this._head = head;
          this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return makeStack(newSize, head);
      };
      Stack2.prototype.pop = function pop() {
        return this.slice(1);
      };
      Stack2.prototype.clear = function clear() {
        if (this.size === 0) {
          return this;
        }
        if (this.__ownerID) {
          this.size = 0;
          this._head = void 0;
          this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return emptyStack();
      };
      Stack2.prototype.slice = function slice(begin, end) {
        if (wholeSlice(begin, end, this.size)) {
          return this;
        }
        var resolvedBegin = resolveBegin(begin, this.size);
        var resolvedEnd = resolveEnd(end, this.size);
        if (resolvedEnd !== this.size) {
          return IndexedCollection2.prototype.slice.call(this, begin, end);
        }
        var newSize = this.size - resolvedBegin;
        var head = this._head;
        while (resolvedBegin--) {
          head = head.next;
        }
        if (this.__ownerID) {
          this.size = newSize;
          this._head = head;
          this.__hash = void 0;
          this.__altered = true;
          return this;
        }
        return makeStack(newSize, head);
      };
      Stack2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        if (!ownerID) {
          if (this.size === 0) {
            return emptyStack();
          }
          this.__ownerID = ownerID;
          this.__altered = false;
          return this;
        }
        return makeStack(this.size, this._head, ownerID, this.__hash);
      };
      Stack2.prototype.__iterate = function __iterate(fn, reverse) {
        var this$1$1 = this;
        if (reverse) {
          return new ArraySeq(this.toArray()).__iterate(
            function(v2, k2) {
              return fn(v2, k2, this$1$1);
            },
            reverse
          );
        }
        var iterations = 0;
        var node = this._head;
        while (node) {
          if (fn(node.value, iterations++, this) === false) {
            break;
          }
          node = node.next;
        }
        return iterations;
      };
      Stack2.prototype.__iterator = function __iterator(type, reverse) {
        if (reverse) {
          return new ArraySeq(this.toArray()).__iterator(type, reverse);
        }
        var iterations = 0;
        var node = this._head;
        return new Iterator(function() {
          if (node) {
            var value2 = node.value;
            node = node.next;
            return iteratorValue(type, iterations++, value2);
          }
          return iteratorDone();
        });
      };
      return Stack2;
    }(IndexedCollection);
    Stack$5.isStack = isStack;
    var StackPrototype = Stack$5.prototype;
    StackPrototype[IS_STACK_SYMBOL] = true;
    StackPrototype.shift = StackPrototype.pop;
    StackPrototype.unshift = StackPrototype.push;
    StackPrototype.unshiftAll = StackPrototype.pushAll;
    StackPrototype.withMutations = withMutations;
    StackPrototype.wasAltered = wasAltered;
    StackPrototype.asImmutable = asImmutable;
    StackPrototype["@@transducer/init"] = StackPrototype.asMutable = asMutable;
    StackPrototype["@@transducer/step"] = function(result, arr) {
      return result.unshift(arr);
    };
    StackPrototype["@@transducer/result"] = function(obj) {
      return obj.asImmutable();
    };
    function makeStack(size, head, ownerID, hash2) {
      var map2 = Object.create(StackPrototype);
      map2.size = size;
      map2._head = head;
      map2.__ownerID = ownerID;
      map2.__hash = hash2;
      map2.__altered = false;
      return map2;
    }
    var EMPTY_STACK;
    function emptyStack() {
      return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
    }
    var IS_SET_SYMBOL = "@@__IMMUTABLE_SET__@@";
    function isSet$2(maybeSet) {
      return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);
    }
    function isOrderedSet(maybeOrderedSet) {
      return isSet$2(maybeOrderedSet) && isOrdered(maybeOrderedSet);
    }
    function deepEqual$1(a, b2) {
      if (a === b2) {
        return true;
      }
      if (!isCollection(b2) || a.size !== void 0 && b2.size !== void 0 && a.size !== b2.size || a.__hash !== void 0 && b2.__hash !== void 0 && a.__hash !== b2.__hash || isKeyed(a) !== isKeyed(b2) || isIndexed(a) !== isIndexed(b2) || isOrdered(a) !== isOrdered(b2)) {
        return false;
      }
      if (a.size === 0 && b2.size === 0) {
        return true;
      }
      var notAssociative = !isAssociative(a);
      if (isOrdered(a)) {
        var entries = a.entries();
        return b2.every(function(v2, k2) {
          var entry = entries.next().value;
          return entry && is$1(entry[1], v2) && (notAssociative || is$1(entry[0], k2));
        }) && entries.next().done;
      }
      var flipped = false;
      if (a.size === void 0) {
        if (b2.size === void 0) {
          if (typeof a.cacheResult === "function") {
            a.cacheResult();
          }
        } else {
          flipped = true;
          var _ = a;
          a = b2;
          b2 = _;
        }
      }
      var allEqual = true;
      var bSize = b2.__iterate(function(v2, k2) {
        if (notAssociative ? !a.has(v2) : flipped ? !is$1(v2, a.get(k2, NOT_SET)) : !is$1(a.get(k2, NOT_SET), v2)) {
          allEqual = false;
          return false;
        }
      });
      return allEqual && a.size === bSize;
    }
    function mixin(ctor, methods) {
      var keyCopier = function(key) {
        ctor.prototype[key] = methods[key];
      };
      Object.keys(methods).forEach(keyCopier);
      Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
      return ctor;
    }
    function toJS(value2) {
      if (!value2 || typeof value2 !== "object") {
        return value2;
      }
      if (!isCollection(value2)) {
        if (!isDataStructure(value2)) {
          return value2;
        }
        value2 = Seq(value2);
      }
      if (isKeyed(value2)) {
        var result$1 = {};
        value2.__iterate(function(v2, k2) {
          result$1[k2] = toJS(v2);
        });
        return result$1;
      }
      var result = [];
      value2.__iterate(function(v2) {
        result.push(toJS(v2));
      });
      return result;
    }
    var Set$3 = /* @__PURE__ */ function(SetCollection2) {
      function Set2(value2) {
        return value2 === void 0 || value2 === null ? emptySet() : isSet$2(value2) && !isOrdered(value2) ? value2 : emptySet().withMutations(function(set2) {
          var iter = SetCollection2(value2);
          assertNotInfinite(iter.size);
          iter.forEach(function(v2) {
            return set2.add(v2);
          });
        });
      }
      if (SetCollection2) Set2.__proto__ = SetCollection2;
      Set2.prototype = Object.create(SetCollection2 && SetCollection2.prototype);
      Set2.prototype.constructor = Set2;
      Set2.of = function of2() {
        return this(arguments);
      };
      Set2.fromKeys = function fromKeys(value2) {
        return this(KeyedCollection(value2).keySeq());
      };
      Set2.intersect = function intersect(sets2) {
        sets2 = Collection(sets2).toArray();
        return sets2.length ? SetPrototype.intersect.apply(Set2(sets2.pop()), sets2) : emptySet();
      };
      Set2.union = function union(sets2) {
        sets2 = Collection(sets2).toArray();
        return sets2.length ? SetPrototype.union.apply(Set2(sets2.pop()), sets2) : emptySet();
      };
      Set2.prototype.toString = function toString2() {
        return this.__toString("Set {", "}");
      };
      Set2.prototype.has = function has2(value2) {
        return this._map.has(value2);
      };
      Set2.prototype.add = function add2(value2) {
        return updateSet(this, this._map.set(value2, value2));
      };
      Set2.prototype.remove = function remove2(value2) {
        return updateSet(this, this._map.remove(value2));
      };
      Set2.prototype.clear = function clear() {
        return updateSet(this, this._map.clear());
      };
      Set2.prototype.map = function map2(mapper, context2) {
        var this$1$1 = this;
        var didChanges = false;
        var newMap = updateSet(
          this,
          this._map.mapEntries(function(ref) {
            var v2 = ref[1];
            var mapped = mapper.call(context2, v2, v2, this$1$1);
            if (mapped !== v2) {
              didChanges = true;
            }
            return [mapped, mapped];
          }, context2)
        );
        return didChanges ? newMap : this;
      };
      Set2.prototype.union = function union() {
        var iters = [], len = arguments.length;
        while (len--) iters[len] = arguments[len];
        iters = iters.filter(function(x2) {
          return x2.size !== 0;
        });
        if (iters.length === 0) {
          return this;
        }
        if (this.size === 0 && !this.__ownerID && iters.length === 1) {
          return this.constructor(iters[0]);
        }
        return this.withMutations(function(set2) {
          for (var ii2 = 0; ii2 < iters.length; ii2++) {
            if (typeof iters[ii2] === "string") {
              set2.add(iters[ii2]);
            } else {
              SetCollection2(iters[ii2]).forEach(function(value2) {
                return set2.add(value2);
              });
            }
          }
        });
      };
      Set2.prototype.intersect = function intersect() {
        var iters = [], len = arguments.length;
        while (len--) iters[len] = arguments[len];
        if (iters.length === 0) {
          return this;
        }
        iters = iters.map(function(iter) {
          return SetCollection2(iter);
        });
        var toRemove = [];
        this.forEach(function(value2) {
          if (!iters.every(function(iter) {
            return iter.includes(value2);
          })) {
            toRemove.push(value2);
          }
        });
        return this.withMutations(function(set2) {
          toRemove.forEach(function(value2) {
            set2.remove(value2);
          });
        });
      };
      Set2.prototype.subtract = function subtract2() {
        var iters = [], len = arguments.length;
        while (len--) iters[len] = arguments[len];
        if (iters.length === 0) {
          return this;
        }
        iters = iters.map(function(iter) {
          return SetCollection2(iter);
        });
        var toRemove = [];
        this.forEach(function(value2) {
          if (iters.some(function(iter) {
            return iter.includes(value2);
          })) {
            toRemove.push(value2);
          }
        });
        return this.withMutations(function(set2) {
          toRemove.forEach(function(value2) {
            set2.remove(value2);
          });
        });
      };
      Set2.prototype.sort = function sort(comparator) {
        return OrderedSet(sortFactory(this, comparator));
      };
      Set2.prototype.sortBy = function sortBy(mapper, comparator) {
        return OrderedSet(sortFactory(this, comparator, mapper));
      };
      Set2.prototype.wasAltered = function wasAltered2() {
        return this._map.wasAltered();
      };
      Set2.prototype.__iterate = function __iterate(fn, reverse) {
        var this$1$1 = this;
        return this._map.__iterate(function(k2) {
          return fn(k2, k2, this$1$1);
        }, reverse);
      };
      Set2.prototype.__iterator = function __iterator(type, reverse) {
        return this._map.__iterator(type, reverse);
      };
      Set2.prototype.__ensureOwner = function __ensureOwner(ownerID) {
        if (ownerID === this.__ownerID) {
          return this;
        }
        var newMap = this._map.__ensureOwner(ownerID);
        if (!ownerID) {
          if (this.size === 0) {
            return this.__empty();
          }
          this.__ownerID = ownerID;
          this._map = newMap;
          return this;
        }
        return this.__make(newMap, ownerID);
      };
      return Set2;
    }(SetCollection);
    Set$3.isSet = isSet$2;
    var SetPrototype = Set$3.prototype;
    SetPrototype[IS_SET_SYMBOL] = true;
    SetPrototype[DELETE] = SetPrototype.remove;
    SetPrototype.merge = SetPrototype.concat = SetPrototype.union;
    SetPrototype.withMutations = withMutations;
    SetPrototype.asImmutable = asImmutable;
    SetPrototype["@@transducer/init"] = SetPrototype.asMutable = asMutable;
    SetPrototype["@@transducer/step"] = function(result, arr) {
      return result.add(arr);
    };
    SetPrototype["@@transducer/result"] = function(obj) {
      return obj.asImmutable();
    };
    SetPrototype.__empty = emptySet;
    SetPrototype.__make = makeSet;
    function updateSet(set2, newMap) {
      if (set2.__ownerID) {
        set2.size = newMap.size;
        set2._map = newMap;
        return set2;
      }
      return newMap === set2._map ? set2 : newMap.size === 0 ? set2.__empty() : set2.__make(newMap);
    }
    function makeSet(map2, ownerID) {
      var set2 = Object.create(SetPrototype);
      set2.size = map2 ? map2.size : 0;
      set2._map = map2;
      set2.__ownerID = ownerID;
      return set2;
    }
    var EMPTY_SET;
    function emptySet() {
      return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
    }
    var Range = /* @__PURE__ */ function(IndexedSeq2) {
      function Range2(start, end, step) {
        if (!(this instanceof Range2)) {
          return new Range2(start, end, step);
        }
        invariant(step !== 0, "Cannot step a Range by 0");
        start = start || 0;
        if (end === void 0) {
          end = Infinity;
        }
        step = step === void 0 ? 1 : Math.abs(step);
        if (end < start) {
          step = -step;
        }
        this._start = start;
        this._end = end;
        this._step = step;
        this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
        if (this.size === 0) {
          if (EMPTY_RANGE) {
            return EMPTY_RANGE;
          }
          EMPTY_RANGE = this;
        }
      }
      if (IndexedSeq2) Range2.__proto__ = IndexedSeq2;
      Range2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
      Range2.prototype.constructor = Range2;
      Range2.prototype.toString = function toString2() {
        if (this.size === 0) {
          return "Range []";
        }
        return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
      };
      Range2.prototype.get = function get2(index, notSetValue) {
        return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
      };
      Range2.prototype.includes = function includes(searchValue) {
        var possibleIndex = (searchValue - this._start) / this._step;
        return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
      };
      Range2.prototype.slice = function slice(begin, end) {
        if (wholeSlice(begin, end, this.size)) {
          return this;
        }
        begin = resolveBegin(begin, this.size);
        end = resolveEnd(end, this.size);
        if (end <= begin) {
          return new Range2(0, 0);
        }
        return new Range2(
          this.get(begin, this._end),
          this.get(end, this._end),
          this._step
        );
      };
      Range2.prototype.indexOf = function indexOf2(searchValue) {
        var offsetValue = searchValue - this._start;
        if (offsetValue % this._step === 0) {
          var index = offsetValue / this._step;
          if (index >= 0 && index < this.size) {
            return index;
          }
        }
        return -1;
      };
      Range2.prototype.lastIndexOf = function lastIndexOf(searchValue) {
        return this.indexOf(searchValue);
      };
      Range2.prototype.__iterate = function __iterate(fn, reverse) {
        var size = this.size;
        var step = this._step;
        var value2 = reverse ? this._start + (size - 1) * step : this._start;
        var i = 0;
        while (i !== size) {
          if (fn(value2, reverse ? size - ++i : i++, this) === false) {
            break;
          }
          value2 += reverse ? -step : step;
        }
        return i;
      };
      Range2.prototype.__iterator = function __iterator(type, reverse) {
        var size = this.size;
        var step = this._step;
        var value2 = reverse ? this._start + (size - 1) * step : this._start;
        var i = 0;
        return new Iterator(function() {
          if (i === size) {
            return iteratorDone();
          }
          var v2 = value2;
          value2 += reverse ? -step : step;
          return iteratorValue(type, reverse ? size - ++i : i++, v2);
        });
      };
      Range2.prototype.equals = function equals(other) {
        return other instanceof Range2 ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual$1(this, other);
      };
      return Range2;
    }(IndexedSeq);
    var EMPTY_RANGE;
    function getIn$1(collection, searchKeyPath, notSetValue) {
      var keyPath = coerceKeyPath(searchKeyPath);
      var i = 0;
      while (i !== keyPath.length) {
        collection = get$4(collection, keyPath[i++], NOT_SET);
        if (collection === NOT_SET) {
          return notSetValue;
        }
      }
      return collection;
    }
    function getIn(searchKeyPath, notSetValue) {
      return getIn$1(this, searchKeyPath, notSetValue);
    }
    function hasIn$1$1(collection, keyPath) {
      return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;
    }
    function hasIn$3(searchKeyPath) {
      return hasIn$1$1(this, searchKeyPath);
    }
    function toObject$1() {
      assertNotInfinite(this.size);
      var object = {};
      this.__iterate(function(v2, k2) {
        object[k2] = v2;
      });
      return object;
    }
    Collection.isIterable = isCollection;
    Collection.isKeyed = isKeyed;
    Collection.isIndexed = isIndexed;
    Collection.isAssociative = isAssociative;
    Collection.isOrdered = isOrdered;
    Collection.Iterator = Iterator;
    mixin(Collection, {
      // ### Conversion to other types
      toArray: function toArray2() {
        assertNotInfinite(this.size);
        var array = new Array(this.size || 0);
        var useTuples = isKeyed(this);
        var i = 0;
        this.__iterate(function(v2, k2) {
          array[i++] = useTuples ? [k2, v2] : v2;
        });
        return array;
      },
      toIndexedSeq: function toIndexedSeq() {
        return new ToIndexedSequence(this);
      },
      toJS: function toJS$1() {
        return toJS(this);
      },
      toKeyedSeq: function toKeyedSeq() {
        return new ToKeyedSequence(this, true);
      },
      toMap: function toMap() {
        return Map$5(this.toKeyedSeq());
      },
      toObject: toObject$1,
      toOrderedMap: function toOrderedMap() {
        return OrderedMap(this.toKeyedSeq());
      },
      toOrderedSet: function toOrderedSet() {
        return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
      },
      toSet: function toSet() {
        return Set$3(isKeyed(this) ? this.valueSeq() : this);
      },
      toSetSeq: function toSetSeq() {
        return new ToSetSequence(this);
      },
      toSeq: function toSeq() {
        return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
      },
      toStack: function toStack() {
        return Stack$5(isKeyed(this) ? this.valueSeq() : this);
      },
      toList: function toList() {
        return List(isKeyed(this) ? this.valueSeq() : this);
      },
      // ### Common JavaScript methods and properties
      toString: function toString2() {
        return "[Collection]";
      },
      __toString: function __toString(head, tail) {
        if (this.size === 0) {
          return head + tail;
        }
        return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
      },
      // ### ES6 Collection methods (ES6 Array and Map)
      concat: function concat() {
        var values = [], len = arguments.length;
        while (len--) values[len] = arguments[len];
        return reify(this, concatFactory(this, values));
      },
      includes: function includes(searchValue) {
        return this.some(function(value2) {
          return is$1(value2, searchValue);
        });
      },
      entries: function entries() {
        return this.__iterator(ITERATE_ENTRIES);
      },
      every: function every(predicate, context2) {
        assertNotInfinite(this.size);
        var returnValue = true;
        this.__iterate(function(v2, k2, c2) {
          if (!predicate.call(context2, v2, k2, c2)) {
            returnValue = false;
            return false;
          }
        });
        return returnValue;
      },
      filter: function filter(predicate, context2) {
        return reify(this, filterFactory(this, predicate, context2, true));
      },
      partition: function partition(predicate, context2) {
        return partitionFactory(this, predicate, context2);
      },
      find: function find(predicate, context2, notSetValue) {
        var entry = this.findEntry(predicate, context2);
        return entry ? entry[1] : notSetValue;
      },
      forEach: function forEach(sideEffect, context2) {
        assertNotInfinite(this.size);
        return this.__iterate(context2 ? sideEffect.bind(context2) : sideEffect);
      },
      join: function join(separator) {
        assertNotInfinite(this.size);
        separator = separator !== void 0 ? "" + separator : ",";
        var joined = "";
        var isFirst = true;
        this.__iterate(function(v2) {
          isFirst ? isFirst = false : joined += separator;
          joined += v2 !== null && v2 !== void 0 ? v2.toString() : "";
        });
        return joined;
      },
      keys: function keys2() {
        return this.__iterator(ITERATE_KEYS);
      },
      map: function map2(mapper, context2) {
        return reify(this, mapFactory(this, mapper, context2));
      },
      reduce: function reduce$1(reducer, initialReduction, context2) {
        return reduce(
          this,
          reducer,
          initialReduction,
          context2,
          arguments.length < 2,
          false
        );
      },
      reduceRight: function reduceRight(reducer, initialReduction, context2) {
        return reduce(
          this,
          reducer,
          initialReduction,
          context2,
          arguments.length < 2,
          true
        );
      },
      reverse: function reverse() {
        return reify(this, reverseFactory(this, true));
      },
      slice: function slice(begin, end) {
        return reify(this, sliceFactory(this, begin, end, true));
      },
      some: function some2(predicate, context2) {
        assertNotInfinite(this.size);
        var returnValue = false;
        this.__iterate(function(v2, k2, c2) {
          if (predicate.call(context2, v2, k2, c2)) {
            returnValue = true;
            return false;
          }
        });
        return returnValue;
      },
      sort: function sort(comparator) {
        return reify(this, sortFactory(this, comparator));
      },
      values: function values() {
        return this.__iterator(ITERATE_VALUES);
      },
      // ### More sequential methods
      butLast: function butLast() {
        return this.slice(0, -1);
      },
      isEmpty: function isEmpty() {
        return this.size !== void 0 ? this.size === 0 : !this.some(function() {
          return true;
        });
      },
      count: function count(predicate, context2) {
        return ensureSize(
          predicate ? this.toSeq().filter(predicate, context2) : this
        );
      },
      countBy: function countBy(grouper, context2) {
        return countByFactory(this, grouper, context2);
      },
      equals: function equals(other) {
        return deepEqual$1(this, other);
      },
      entrySeq: function entrySeq() {
        var collection = this;
        if (collection._cache) {
          return new ArraySeq(collection._cache);
        }
        var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();
        entriesSequence.fromEntrySeq = function() {
          return collection.toSeq();
        };
        return entriesSequence;
      },
      filterNot: function filterNot(predicate, context2) {
        return this.filter(not(predicate), context2);
      },
      findEntry: function findEntry(predicate, context2, notSetValue) {
        var found = notSetValue;
        this.__iterate(function(v2, k2, c2) {
          if (predicate.call(context2, v2, k2, c2)) {
            found = [k2, v2];
            return false;
          }
        });
        return found;
      },
      findKey: function findKey(predicate, context2) {
        var entry = this.findEntry(predicate, context2);
        return entry && entry[0];
      },
      findLast: function findLast(predicate, context2, notSetValue) {
        return this.toKeyedSeq().reverse().find(predicate, context2, notSetValue);
      },
      findLastEntry: function findLastEntry(predicate, context2, notSetValue) {
        return this.toKeyedSeq().reverse().findEntry(predicate, context2, notSetValue);
      },
      findLastKey: function findLastKey(predicate, context2) {
        return this.toKeyedSeq().reverse().findKey(predicate, context2);
      },
      first: function first(notSetValue) {
        return this.find(returnTrue, null, notSetValue);
      },
      flatMap: function flatMap(mapper, context2) {
        return reify(this, flatMapFactory(this, mapper, context2));
      },
      flatten: function flatten2(depth) {
        return reify(this, flattenFactory(this, depth, true));
      },
      fromEntrySeq: function fromEntrySeq() {
        return new FromEntriesSequence(this);
      },
      get: function get2(searchKey, notSetValue) {
        return this.find(function(_, key) {
          return is$1(key, searchKey);
        }, void 0, notSetValue);
      },
      getIn,
      groupBy: function groupBy(grouper, context2) {
        return groupByFactory(this, grouper, context2);
      },
      has: function has2(searchKey) {
        return this.get(searchKey, NOT_SET) !== NOT_SET;
      },
      hasIn: hasIn$3,
      isSubset: function isSubset(iter) {
        iter = typeof iter.includes === "function" ? iter : Collection(iter);
        return this.every(function(value2) {
          return iter.includes(value2);
        });
      },
      isSuperset: function isSuperset(iter) {
        iter = typeof iter.isSubset === "function" ? iter : Collection(iter);
        return iter.isSubset(this);
      },
      keyOf: function keyOf(searchValue) {
        return this.findKey(function(value2) {
          return is$1(value2, searchValue);
        });
      },
      keySeq: function keySeq() {
        return this.toSeq().map(keyMapper).toIndexedSeq();
      },
      last: function last2(notSetValue) {
        return this.toSeq().reverse().first(notSetValue);
      },
      lastKeyOf: function lastKeyOf(searchValue) {
        return this.toKeyedSeq().reverse().keyOf(searchValue);
      },
      max: function max2(comparator) {
        return maxFactory(this, comparator);
      },
      maxBy: function maxBy(mapper, comparator) {
        return maxFactory(this, comparator, mapper);
      },
      min: function min2(comparator) {
        return maxFactory(
          this,
          comparator ? neg(comparator) : defaultNegComparator
        );
      },
      minBy: function minBy(mapper, comparator) {
        return maxFactory(
          this,
          comparator ? neg(comparator) : defaultNegComparator,
          mapper
        );
      },
      rest: function rest() {
        return this.slice(1);
      },
      skip: function skip(amount) {
        return amount === 0 ? this : this.slice(Math.max(0, amount));
      },
      skipLast: function skipLast(amount) {
        return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
      },
      skipWhile: function skipWhile(predicate, context2) {
        return reify(this, skipWhileFactory(this, predicate, context2, true));
      },
      skipUntil: function skipUntil(predicate, context2) {
        return this.skipWhile(not(predicate), context2);
      },
      sortBy: function sortBy(mapper, comparator) {
        return reify(this, sortFactory(this, comparator, mapper));
      },
      take: function take(amount) {
        return this.slice(0, Math.max(0, amount));
      },
      takeLast: function takeLast(amount) {
        return this.slice(-Math.max(0, amount));
      },
      takeWhile: function takeWhile(predicate, context2) {
        return reify(this, takeWhileFactory(this, predicate, context2));
      },
      takeUntil: function takeUntil(predicate, context2) {
        return this.takeWhile(not(predicate), context2);
      },
      update: function update2(fn) {
        return fn(this);
      },
      valueSeq: function valueSeq() {
        return this.toIndexedSeq();
      },
      // ### Hashable Object
      hashCode: function hashCode() {
        return this.__hash || (this.__hash = hashCollection(this));
      }
      // ### Internal
      // abstract __iterate(fn, reverse)
      // abstract __iterator(type, reverse)
    });
    var CollectionPrototype = Collection.prototype;
    CollectionPrototype[IS_COLLECTION_SYMBOL] = true;
    CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;
    CollectionPrototype.toJSON = CollectionPrototype.toArray;
    CollectionPrototype.__toStringMapper = quoteString;
    CollectionPrototype.inspect = CollectionPrototype.toSource = function() {
      return this.toString();
    };
    CollectionPrototype.chain = CollectionPrototype.flatMap;
    CollectionPrototype.contains = CollectionPrototype.includes;
    mixin(KeyedCollection, {
      // ### More sequential methods
      flip: function flip() {
        return reify(this, flipFactory(this));
      },
      mapEntries: function mapEntries(mapper, context2) {
        var this$1$1 = this;
        var iterations = 0;
        return reify(
          this,
          this.toSeq().map(function(v2, k2) {
            return mapper.call(context2, [k2, v2], iterations++, this$1$1);
          }).fromEntrySeq()
        );
      },
      mapKeys: function mapKeys(mapper, context2) {
        var this$1$1 = this;
        return reify(
          this,
          this.toSeq().flip().map(function(k2, v2) {
            return mapper.call(context2, k2, v2, this$1$1);
          }).flip()
        );
      }
    });
    var KeyedCollectionPrototype = KeyedCollection.prototype;
    KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;
    KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;
    KeyedCollectionPrototype.toJSON = toObject$1;
    KeyedCollectionPrototype.__toStringMapper = function(v2, k2) {
      return quoteString(k2) + ": " + quoteString(v2);
    };
    mixin(IndexedCollection, {
      // ### Conversion to other types
      toKeyedSeq: function toKeyedSeq() {
        return new ToKeyedSequence(this, false);
      },
      // ### ES6 Collection methods (ES6 Array and Map)
      filter: function filter(predicate, context2) {
        return reify(this, filterFactory(this, predicate, context2, false));
      },
      findIndex: function findIndex(predicate, context2) {
        var entry = this.findEntry(predicate, context2);
        return entry ? entry[0] : -1;
      },
      indexOf: function indexOf2(searchValue) {
        var key = this.keyOf(searchValue);
        return key === void 0 ? -1 : key;
      },
      lastIndexOf: function lastIndexOf(searchValue) {
        var key = this.lastKeyOf(searchValue);
        return key === void 0 ? -1 : key;
      },
      reverse: function reverse() {
        return reify(this, reverseFactory(this, false));
      },
      slice: function slice(begin, end) {
        return reify(this, sliceFactory(this, begin, end, false));
      },
      splice: function splice2(index, removeNum) {
        var numArgs = arguments.length;
        removeNum = Math.max(removeNum || 0, 0);
        if (numArgs === 0 || numArgs === 2 && !removeNum) {
          return this;
        }
        index = resolveBegin(index, index < 0 ? this.count() : this.size);
        var spliced = this.slice(0, index);
        return reify(
          this,
          numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
        );
      },
      // ### More collection methods
      findLastIndex: function findLastIndex2(predicate, context2) {
        var entry = this.findLastEntry(predicate, context2);
        return entry ? entry[0] : -1;
      },
      first: function first(notSetValue) {
        return this.get(0, notSetValue);
      },
      flatten: function flatten2(depth) {
        return reify(this, flattenFactory(this, depth, false));
      },
      get: function get2(index, notSetValue) {
        index = wrapIndex(this, index);
        return index < 0 || this.size === Infinity || this.size !== void 0 && index > this.size ? notSetValue : this.find(function(_, key) {
          return key === index;
        }, void 0, notSetValue);
      },
      has: function has2(index) {
        index = wrapIndex(this, index);
        return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
      },
      interpose: function interpose(separator) {
        return reify(this, interposeFactory(this, separator));
      },
      interleave: function interleave() {
        var collections = [this].concat(arrCopy(arguments));
        var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);
        var interleaved = zipped.flatten(true);
        if (zipped.size) {
          interleaved.size = zipped.size * collections.length;
        }
        return reify(this, interleaved);
      },
      keySeq: function keySeq() {
        return Range(0, this.size);
      },
      last: function last2(notSetValue) {
        return this.get(-1, notSetValue);
      },
      skipWhile: function skipWhile(predicate, context2) {
        return reify(this, skipWhileFactory(this, predicate, context2, false));
      },
      zip: function zip() {
        var collections = [this].concat(arrCopy(arguments));
        return reify(this, zipWithFactory(this, defaultZipper, collections));
      },
      zipAll: function zipAll() {
        var collections = [this].concat(arrCopy(arguments));
        return reify(this, zipWithFactory(this, defaultZipper, collections, true));
      },
      zipWith: function zipWith(zipper) {
        var collections = arrCopy(arguments);
        collections[0] = this;
        return reify(this, zipWithFactory(this, zipper, collections));
      }
    });
    var IndexedCollectionPrototype = IndexedCollection.prototype;
    IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;
    IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;
    mixin(SetCollection, {
      // ### ES6 Collection methods (ES6 Array and Map)
      get: function get2(value2, notSetValue) {
        return this.has(value2) ? value2 : notSetValue;
      },
      includes: function includes(value2) {
        return this.has(value2);
      },
      // ### More sequential methods
      keySeq: function keySeq() {
        return this.valueSeq();
      }
    });
    var SetCollectionPrototype = SetCollection.prototype;
    SetCollectionPrototype.has = CollectionPrototype.includes;
    SetCollectionPrototype.contains = SetCollectionPrototype.includes;
    SetCollectionPrototype.keys = SetCollectionPrototype.values;
    mixin(KeyedSeq, KeyedCollectionPrototype);
    mixin(IndexedSeq, IndexedCollectionPrototype);
    mixin(SetSeq, SetCollectionPrototype);
    function reduce(collection, reducer, reduction, context2, useFirst, reverse) {
      assertNotInfinite(collection.size);
      collection.__iterate(function(v2, k2, c2) {
        if (useFirst) {
          useFirst = false;
          reduction = v2;
        } else {
          reduction = reducer.call(context2, reduction, v2, k2, c2);
        }
      }, reverse);
      return reduction;
    }
    function keyMapper(v2, k2) {
      return k2;
    }
    function entryMapper(v2, k2) {
      return [k2, v2];
    }
    function not(predicate) {
      return function() {
        return !predicate.apply(this, arguments);
      };
    }
    function neg(predicate) {
      return function() {
        return -predicate.apply(this, arguments);
      };
    }
    function defaultZipper() {
      return arrCopy(arguments);
    }
    function defaultNegComparator(a, b2) {
      return a < b2 ? 1 : a > b2 ? -1 : 0;
    }
    function hashCollection(collection) {
      if (collection.size === Infinity) {
        return 0;
      }
      var ordered = isOrdered(collection);
      var keyed = isKeyed(collection);
      var h2 = ordered ? 1 : 0;
      var size = collection.__iterate(
        keyed ? ordered ? function(v2, k2) {
          h2 = 31 * h2 + hashMerge(hash(v2), hash(k2)) | 0;
        } : function(v2, k2) {
          h2 = h2 + hashMerge(hash(v2), hash(k2)) | 0;
        } : ordered ? function(v2) {
          h2 = 31 * h2 + hash(v2) | 0;
        } : function(v2) {
          h2 = h2 + hash(v2) | 0;
        }
      );
      return murmurHashOfSize(size, h2);
    }
    function murmurHashOfSize(size, h2) {
      h2 = imul(h2, 3432918353);
      h2 = imul(h2 << 15 | h2 >>> -15, 461845907);
      h2 = imul(h2 << 13 | h2 >>> -13, 5);
      h2 = (h2 + 3864292196 | 0) ^ size;
      h2 = imul(h2 ^ h2 >>> 16, 2246822507);
      h2 = imul(h2 ^ h2 >>> 13, 3266489909);
      h2 = smi(h2 ^ h2 >>> 16);
      return h2;
    }
    function hashMerge(a, b2) {
      return a ^ b2 + 2654435769 + (a << 6) + (a >> 2) | 0;
    }
    var OrderedSet = /* @__PURE__ */ function(Set2) {
      function OrderedSet2(value2) {
        return value2 === void 0 || value2 === null ? emptyOrderedSet() : isOrderedSet(value2) ? value2 : emptyOrderedSet().withMutations(function(set2) {
          var iter = SetCollection(value2);
          assertNotInfinite(iter.size);
          iter.forEach(function(v2) {
            return set2.add(v2);
          });
        });
      }
      if (Set2) OrderedSet2.__proto__ = Set2;
      OrderedSet2.prototype = Object.create(Set2 && Set2.prototype);
      OrderedSet2.prototype.constructor = OrderedSet2;
      OrderedSet2.of = function of2() {
        return this(arguments);
      };
      OrderedSet2.fromKeys = function fromKeys(value2) {
        return this(KeyedCollection(value2).keySeq());
      };
      OrderedSet2.prototype.toString = function toString2() {
        return this.__toString("OrderedSet {", "}");
      };
      return OrderedSet2;
    }(Set$3);
    OrderedSet.isOrderedSet = isOrderedSet;
    var OrderedSetPrototype = OrderedSet.prototype;
    OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;
    OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;
    OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;
    OrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;
    OrderedSetPrototype.__empty = emptyOrderedSet;
    OrderedSetPrototype.__make = makeOrderedSet;
    function makeOrderedSet(map2, ownerID) {
      var set2 = Object.create(OrderedSetPrototype);
      set2.size = map2 ? map2.size : 0;
      set2._map = map2;
      set2.__ownerID = ownerID;
      return set2;
    }
    var EMPTY_ORDERED_SET;
    function emptyOrderedSet() {
      return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
    }
    var PairSorting = {
      LeftThenRight: -1,
      RightThenLeft: 1
    };
    function throwOnInvalidDefaultValues(defaultValues) {
      if (isRecord(defaultValues)) {
        throw new Error(
          "Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead."
        );
      }
      if (isImmutable$2(defaultValues)) {
        throw new Error(
          "Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead."
        );
      }
      if (defaultValues === null || typeof defaultValues !== "object") {
        throw new Error(
          "Can not call `Record` with a non-object as default values. Use a plain javascript object instead."
        );
      }
    }
    var Record = function Record2(defaultValues, name) {
      var hasInitialized;
      throwOnInvalidDefaultValues(defaultValues);
      var RecordType = function Record3(values) {
        var this$1$1 = this;
        if (values instanceof RecordType) {
          return values;
        }
        if (!(this instanceof RecordType)) {
          return new RecordType(values);
        }
        if (!hasInitialized) {
          hasInitialized = true;
          var keys2 = Object.keys(defaultValues);
          var indices = RecordTypePrototype._indices = {};
          RecordTypePrototype._name = name;
          RecordTypePrototype._keys = keys2;
          RecordTypePrototype._defaultValues = defaultValues;
          for (var i = 0; i < keys2.length; i++) {
            var propName = keys2[i];
            indices[propName] = i;
            if (RecordTypePrototype[propName]) {
              typeof console === "object" && console.warn && console.warn(
                "Cannot define " + recordName(this) + ' with property "' + propName + '" since that property name is part of the Record API.'
              );
            } else {
              setProp(RecordTypePrototype, propName);
            }
          }
        }
        this.__ownerID = void 0;
        this._values = List().withMutations(function(l2) {
          l2.setSize(this$1$1._keys.length);
          KeyedCollection(values).forEach(function(v2, k2) {
            l2.set(this$1$1._indices[k2], v2 === this$1$1._defaultValues[k2] ? void 0 : v2);
          });
        });
        return this;
      };
      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
      RecordTypePrototype.constructor = RecordType;
      if (name) {
        RecordType.displayName = name;
      }
      return RecordType;
    };
    Record.prototype.toString = function toString2() {
      var str = recordName(this) + " { ";
      var keys2 = this._keys;
      var k2;
      for (var i = 0, l2 = keys2.length; i !== l2; i++) {
        k2 = keys2[i];
        str += (i ? ", " : "") + k2 + ": " + quoteString(this.get(k2));
      }
      return str + " }";
    };
    Record.prototype.equals = function equals(other) {
      return this === other || isRecord(other) && recordSeq(this).equals(recordSeq(other));
    };
    Record.prototype.hashCode = function hashCode() {
      return recordSeq(this).hashCode();
    };
    Record.prototype.has = function has2(k2) {
      return this._indices.hasOwnProperty(k2);
    };
    Record.prototype.get = function get2(k2, notSetValue) {
      if (!this.has(k2)) {
        return notSetValue;
      }
      var index = this._indices[k2];
      var value2 = this._values.get(index);
      return value2 === void 0 ? this._defaultValues[k2] : value2;
    };
    Record.prototype.set = function set2(k2, v2) {
      if (this.has(k2)) {
        var newValues = this._values.set(
          this._indices[k2],
          v2 === this._defaultValues[k2] ? void 0 : v2
        );
        if (newValues !== this._values && !this.__ownerID) {
          return makeRecord(this, newValues);
        }
      }
      return this;
    };
    Record.prototype.remove = function remove2(k2) {
      return this.set(k2);
    };
    Record.prototype.clear = function clear() {
      var newValues = this._values.clear().setSize(this._keys.length);
      return this.__ownerID ? this : makeRecord(this, newValues);
    };
    Record.prototype.wasAltered = function wasAltered2() {
      return this._values.wasAltered();
    };
    Record.prototype.toSeq = function toSeq() {
      return recordSeq(this);
    };
    Record.prototype.toJS = function toJS$1() {
      return toJS(this);
    };
    Record.prototype.entries = function entries() {
      return this.__iterator(ITERATE_ENTRIES);
    };
    Record.prototype.__iterator = function __iterator(type, reverse) {
      return recordSeq(this).__iterator(type, reverse);
    };
    Record.prototype.__iterate = function __iterate(fn, reverse) {
      return recordSeq(this).__iterate(fn, reverse);
    };
    Record.prototype.__ensureOwner = function __ensureOwner(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newValues = this._values.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._values = newValues;
        return this;
      }
      return makeRecord(this, newValues, ownerID);
    };
    Record.isRecord = isRecord;
    Record.getDescriptiveName = recordName;
    var RecordPrototype = Record.prototype;
    RecordPrototype[IS_RECORD_SYMBOL] = true;
    RecordPrototype[DELETE] = RecordPrototype.remove;
    RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;
    RecordPrototype.getIn = getIn;
    RecordPrototype.hasIn = CollectionPrototype.hasIn;
    RecordPrototype.merge = merge$1$1;
    RecordPrototype.mergeWith = mergeWith$1$1;
    RecordPrototype.mergeIn = mergeIn;
    RecordPrototype.mergeDeep = mergeDeep;
    RecordPrototype.mergeDeepWith = mergeDeepWith;
    RecordPrototype.mergeDeepIn = mergeDeepIn;
    RecordPrototype.setIn = setIn;
    RecordPrototype.update = update;
    RecordPrototype.updateIn = updateIn;
    RecordPrototype.withMutations = withMutations;
    RecordPrototype.asMutable = asMutable;
    RecordPrototype.asImmutable = asImmutable;
    RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;
    RecordPrototype.toJSON = RecordPrototype.toObject = CollectionPrototype.toObject;
    RecordPrototype.inspect = RecordPrototype.toSource = function() {
      return this.toString();
    };
    function makeRecord(likeRecord, values, ownerID) {
      var record = Object.create(Object.getPrototypeOf(likeRecord));
      record._values = values;
      record.__ownerID = ownerID;
      return record;
    }
    function recordName(record) {
      return record.constructor.displayName || record.constructor.name || "Record";
    }
    function recordSeq(record) {
      return keyedSeqFromValue(record._keys.map(function(k2) {
        return [k2, record.get(k2)];
      }));
    }
    function setProp(prototype, name) {
      try {
        Object.defineProperty(prototype, name, {
          get: function() {
            return this.get(name);
          },
          set: function(value2) {
            invariant(this.__ownerID, "Cannot set on an immutable record.");
            this.set(name, value2);
          }
        });
      } catch (error) {
      }
    }
    var Repeat = /* @__PURE__ */ function(IndexedSeq2) {
      function Repeat2(value2, times) {
        if (!(this instanceof Repeat2)) {
          return new Repeat2(value2, times);
        }
        this._value = value2;
        this.size = times === void 0 ? Infinity : Math.max(0, times);
        if (this.size === 0) {
          if (EMPTY_REPEAT) {
            return EMPTY_REPEAT;
          }
          EMPTY_REPEAT = this;
        }
      }
      if (IndexedSeq2) Repeat2.__proto__ = IndexedSeq2;
      Repeat2.prototype = Object.create(IndexedSeq2 && IndexedSeq2.prototype);
      Repeat2.prototype.constructor = Repeat2;
      Repeat2.prototype.toString = function toString2() {
        if (this.size === 0) {
          return "Repeat []";
        }
        return "Repeat [ " + this._value + " " + this.size + " times ]";
      };
      Repeat2.prototype.get = function get2(index, notSetValue) {
        return this.has(index) ? this._value : notSetValue;
      };
      Repeat2.prototype.includes = function includes(searchValue) {
        return is$1(this._value, searchValue);
      };
      Repeat2.prototype.slice = function slice(begin, end) {
        var size = this.size;
        return wholeSlice(begin, end, size) ? this : new Repeat2(
          this._value,
          resolveEnd(end, size) - resolveBegin(begin, size)
        );
      };
      Repeat2.prototype.reverse = function reverse() {
        return this;
      };
      Repeat2.prototype.indexOf = function indexOf2(searchValue) {
        if (is$1(this._value, searchValue)) {
          return 0;
        }
        return -1;
      };
      Repeat2.prototype.lastIndexOf = function lastIndexOf(searchValue) {
        if (is$1(this._value, searchValue)) {
          return this.size;
        }
        return -1;
      };
      Repeat2.prototype.__iterate = function __iterate(fn, reverse) {
        var size = this.size;
        var i = 0;
        while (i !== size) {
          if (fn(this._value, reverse ? size - ++i : i++, this) === false) {
            break;
          }
        }
        return i;
      };
      Repeat2.prototype.__iterator = function __iterator(type, reverse) {
        var this$1$1 = this;
        var size = this.size;
        var i = 0;
        return new Iterator(
          function() {
            return i === size ? iteratorDone() : iteratorValue(type, reverse ? size - ++i : i++, this$1$1._value);
          }
        );
      };
      Repeat2.prototype.equals = function equals(other) {
        return other instanceof Repeat2 ? is$1(this._value, other._value) : deepEqual$1(this, other);
      };
      return Repeat2;
    }(IndexedSeq);
    var EMPTY_REPEAT;
    function fromJS(value2, converter) {
      return fromJSWith(
        [],
        converter || defaultConverter,
        value2,
        "",
        converter && converter.length > 2 ? [] : void 0,
        { "": value2 }
      );
    }
    function fromJSWith(stack, converter, value2, key, keyPath, parentValue) {
      if (typeof value2 !== "string" && !isImmutable$2(value2) && (isArrayLike$5(value2) || hasIterator(value2) || isPlainObject$4(value2))) {
        if (~stack.indexOf(value2)) {
          throw new TypeError("Cannot convert circular structure to Immutable");
        }
        stack.push(value2);
        keyPath && key !== "" && keyPath.push(key);
        var converted = converter.call(
          parentValue,
          key,
          Seq(value2).map(
            function(v2, k2) {
              return fromJSWith(stack, converter, v2, k2, keyPath, value2);
            }
          ),
          keyPath && keyPath.slice()
        );
        stack.pop();
        keyPath && keyPath.pop();
        return converted;
      }
      return value2;
    }
    function defaultConverter(k2, v2) {
      return isIndexed(v2) ? v2.toList() : isKeyed(v2) ? v2.toMap() : v2.toSet();
    }
    var version = "4.3.6";
    var Immutable = {
      version,
      Collection,
      // Note: Iterable is deprecated
      Iterable: Collection,
      Seq,
      Map: Map$5,
      OrderedMap,
      List,
      Stack: Stack$5,
      Set: Set$3,
      OrderedSet,
      PairSorting,
      Record,
      Range,
      Repeat,
      is: is$1,
      fromJS,
      hash,
      isImmutable: isImmutable$2,
      isCollection,
      isKeyed,
      isIndexed,
      isAssociative,
      isOrdered,
      isValueObject,
      isPlainObject: isPlainObject$4,
      isSeq,
      isList,
      isMap: isMap$2,
      isOrderedMap,
      isStack,
      isSet: isSet$2,
      isOrderedSet,
      isRecord,
      get: get$4,
      getIn: getIn$1,
      has,
      hasIn: hasIn$1$1,
      merge: merge$2,
      mergeDeep: mergeDeep$1,
      mergeWith: mergeWith$2,
      mergeDeepWith: mergeDeepWith$1,
      remove,
      removeIn,
      set: set$2,
      setIn: setIn$1,
      update: update$1,
      updateIn: updateIn$1
    };
    var query_builder_seed = 0;
    const uuid$1 = function() {
      var timePart = ((/* @__PURE__ */ new Date()).getTime().toString(16) + "FF").substr(0, 11);
      var s = "ssssssss-xxxx-4xxx-yxxx-x".replace(/[xys]/g, function(c2) {
        var r2 = c2 === "s" ? Math.floor(Math.random() * 16) : query_builder_seed++ & 15;
        var v2 = c2 === "x" ? r2 : r2 & 3 | 8;
        return v2.toString(16);
      });
      return s + timePart;
    };
    var define_process_env_default$1 = {};
    function ownKeys$z(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r22) {
          return Object.getOwnPropertyDescriptor(e2, r22).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$z(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$z(Object(t2), true).forEach(function(r22) {
          _defineProperty$1(e2, r22, t2[r22]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$z(Object(t2)).forEach(function(r22) {
          Object.defineProperty(e2, r22, Object.getOwnPropertyDescriptor(t2, r22));
        });
      }
      return e2;
    }
    var widgetDefKeysToOmit = ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue", "spelImportFuncs", "spelImportValue"];
    var opDefKeysToOmit = ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"];
    var isObject$i = function isObject2(v2) {
      return _typeof$1(v2) === "object" && v2 !== null && Object.prototype.toString.call(v2) === "[object Object]";
    };
    var shallowCopy = function shallowCopy2(v2) {
      if (_typeof$1(v2) === "object" && v2 !== null) {
        if (Array.isArray(v2)) {
          return _toConsumableArray(v2);
        } else if (isObject$i(v2)) {
          return _objectSpread$z({}, v2);
        }
      }
      return v2;
    };
    var omit$2 = function omit2(obj, keys2) {
      return Object.fromEntries(Object.entries(obj).filter(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 1), k2 = _ref2[0];
        return !keys2.includes(k2);
      }));
    };
    var getOpCardinality$1 = function getOpCardinality2(opDef) {
      var _opDef$cardinality;
      return (_opDef$cardinality = opDef === null || opDef === void 0 ? void 0 : opDef.cardinality) !== null && _opDef$cardinality !== void 0 ? _opDef$cardinality : 1;
    };
    var deepEqual = function deepEqual2(v1, v2) {
      if (v1 === v2) {
        return true;
      } else if (Map$5.isMap(v1)) {
        return v1.equals(v2);
      } else {
        return JSON.stringify(v1) == JSON.stringify(v2);
      }
    };
    var shallowEqual$5 = function shallowEqual2(a, b2) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (a === b2) {
        return true;
      } else if (Array.isArray(a)) return shallowEqualArrays$1(a, b2, deep);
      else if (Map$5.isMap(a)) return a.equals(b2);
      else if (_typeof$1(a) == "object") return shallowEqualObjects$1(a, b2, deep);
      else return a === b2;
    };
    function shallowEqualArrays$1(arrA, arrB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (arrA === arrB) {
        return true;
      }
      if (!arrA || !arrB) {
        return false;
      }
      var len = arrA.length;
      if (arrB.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var isEqual = deep ? shallowEqual$5(arrA[i], arrB[i], deep) : arrA[i] === arrB[i];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    function shallowEqualObjects$1(objA, objB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (objA === objB) {
        return true;
      }
      if (!objA || !objB) {
        return false;
      }
      var aKeys = Object.keys(objA);
      var bKeys = Object.keys(objB);
      var len = aKeys.length;
      if (bKeys.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var key = aKeys[i];
        var isEqual = deep ? shallowEqual$5(objA[key], objB[key], deep) : objA[key] === objB[key];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    var isImmutable$1 = function isImmutable2(v2) {
      return _typeof$1(v2) === "object" && v2 !== null && typeof v2.toJS === "function";
    };
    var isImmutableList = function isImmutableList2(v2) {
      return isImmutable$1(v2) && Immutable.isList(v2);
    };
    function toImmutableList(v2) {
      return isImmutableList(v2) ? v2 : new Immutable.List(v2);
    }
    function applyToJS(v2) {
      return isImmutable$1(v2) ? v2.toJS() : v2;
    }
    var escapeRegExp = function escapeRegExp2(string) {
      return string.replace(/[.*+?^${}()|[\]\\/]/g, "\\$&");
    };
    var mergeCustomizerNoArrays = function mergeCustomizerNoArrays2(objValue, srcValue, _key, _object, _source, _stack) {
      if (Array.isArray(objValue)) {
        return srcValue;
      }
    };
    var cleanJSX = function cleanJSX2(jsx) {
      var jsxKeys = ["$$typeof", "_owner", "_store", "ref", "key"];
      var getName = function getName2(val) {
        if (typeof val === "string") {
          return val;
        } else if (typeof val === "function") {
          return val.name;
        }
        return val;
      };
      if (jsx instanceof Array) {
        return jsx.map(function(el, _i) {
          return cleanJSX2(el);
        });
      } else if (_typeof$1(jsx) === "object" && jsx !== null) {
        if (isDirtyJSX(jsx)) {
          var _cleaned$props;
          var cleaned = omit$2(jsx, jsxKeys);
          if (cleaned.type) {
            cleaned.type = getName(cleaned.type);
          }
          if (cleaned !== null && cleaned !== void 0 && (_cleaned$props = cleaned.props) !== null && _cleaned$props !== void 0 && _cleaned$props.children) {
            cleaned.props.children = cleanJSX2(cleaned.props.children);
          }
          return cleaned;
        }
      }
      return jsx;
    };
    var isDirtyJSX = function isDirtyJSX2(jsx) {
      return _typeof$1(jsx) === "object" && jsx !== null && !Array.isArray(jsx) && Object.keys(jsx).includes("type") && Object.keys(jsx).includes("props") && Object.keys(jsx).includes("key") && Object.keys(jsx).includes("ref") && Object.keys(jsx).includes("$$typeof");
    };
    var isJSX = function isJSX2(jsx) {
      return _typeof$1(jsx) === "object" && jsx !== null && !Array.isArray(jsx) && typeof jsx["type"] === "string" && Object.keys(jsx).includes("props");
    };
    var isJsonLogic = function isJsonLogic2(logic2) {
      var isJL = _typeof$1(logic2) === "object" && logic2 !== null && !Array.isArray(logic2) && Object.keys(logic2).length === 1;
      return isJL;
    };
    function sleep(delay) {
      return new Promise(function(resolve) {
        setTimeout(resolve, delay);
      });
    }
    function mergeArraysSmart(arr1, arr2) {
      if (!arr1) arr1 = [];
      if (!arr2) arr2 = [];
      return arr2.map(function(op) {
        return [op, arr1.indexOf(op)];
      }).map(function(_ref3, i, orig) {
        var _ref4 = _slicedToArray(_ref3, 2), op = _ref4[0], ind = _ref4[1];
        if (ind == -1) {
          var next = orig.slice(i + 1);
          var prev = orig.slice(0, i);
          var after = prev.reverse().find(function(_ref5) {
            var _ref6 = _slicedToArray(_ref5, 2);
            _ref6[0];
            var ci2 = _ref6[1];
            return ci2 != -1;
          });
          var before = next.find(function(_ref7) {
            var _ref8 = _slicedToArray(_ref7, 2);
            _ref8[0];
            var ci2 = _ref8[1];
            return ci2 != -1;
          });
          if (before) return [op, "before", before[0]];
          else if (after) return [op, "after", after[0]];
          else return [op, "append", null];
        } else {
          return null;
        }
      }).filter(function(x2) {
        return x2 !== null;
      }).reduce(function(acc, _ref9) {
        var _ref10 = _slicedToArray(_ref9, 3), newOp = _ref10[0], rel = _ref10[1], relOp = _ref10[2];
        var ind = acc.indexOf(relOp);
        if (acc.indexOf(newOp) == -1) {
          if (ind > -1) {
            acc.splice(ind + (rel == "after" ? 1 : 0), 0, newOp);
          } else {
            acc.splice(rel == "append" ? Infinity : 0, 0, newOp);
          }
        }
        return acc;
      }, arr1.slice());
    }
    var deepFreeze = function deepFreeze2(obj) {
      if (_typeof$1(obj) === "object" && obj !== null && !isDirtyJSX(obj)) {
        Object.keys(obj).forEach(function(prop) {
          if (prop !== "__cache") {
            deepFreeze2(obj[prop]);
          }
        });
        Object.freeze(obj);
      }
    };
    var isJsonCompatible = function isJsonCompatible2(tpl, obj) {
      var bag = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
      if (isObject$i(tpl)) {
        if (tpl["var"]) {
          bag[tpl["var"]] = obj;
          return true;
        }
        if (!isObject$i(obj)) return false;
        for (var k2 in tpl) {
          var tv = tpl[k2];
          var ov = obj[k2];
          if (!isJsonCompatible2(tv, ov, bag, [].concat(_toConsumableArray(path), [k2]))) return false;
        }
        return true;
      } else if (Array.isArray(tpl)) {
        if (!Array.isArray(obj)) return false;
        for (var i = 0; i < tpl.length; i++) {
          var _tv = tpl[i];
          var _ov = obj[i];
          if (!isJsonCompatible2(_tv, _ov, bag, [].concat(_toConsumableArray(path), [i]))) return false;
        }
        return true;
      } else {
        return tpl === obj;
      }
    };
    var isDev$1 = function isDev2() {
      return typeof process !== "undefined" && define_process_env_default$1 && false;
    };
    var getLogger$1 = function getLogger2() {
      var devMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var verbose = devMode != void 0 ? devMode : isDev$1();
      return verbose ? console : {
        error: function error() {
        },
        log: function log() {
        },
        warn: function warn2() {
        },
        debug: function debug() {
        },
        info: function info() {
        }
      };
    };
    var getFirstDefined = function getFirstDefined2() {
      var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var ret;
      for (var i = 0; i < arr.length; i++) {
        var v2 = arr[i];
        if (v2 !== void 0) {
          ret = v2;
          break;
        }
      }
      return ret;
    };
    var logger$1 = getLogger$1();
    const stuff = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      applyToJS,
      cleanJSX,
      deepEqual,
      deepFreeze,
      escapeRegExp,
      getFirstDefined,
      getLogger: getLogger$1,
      getOpCardinality: getOpCardinality$1,
      isDirtyJSX,
      isImmutable: isImmutable$1,
      isImmutableList,
      isJSX,
      isJsonCompatible,
      isJsonLogic,
      isObject: isObject$i,
      logger: logger$1,
      mergeArraysSmart,
      mergeCustomizerNoArrays,
      omit: omit$2,
      opDefKeysToOmit,
      shallowCopy,
      shallowEqual: shallowEqual$5,
      sleep,
      toImmutableList,
      uuid: uuid$1,
      widgetDefKeysToOmit
    }, Symbol.toStringTag, { value: "Module" }));
    var regeneratorRuntime$1 = { exports: {} };
    var _typeof = { exports: {} };
    (function(module2) {
      function _typeof2(o) {
        "@babel/helpers - typeof";
        return module2.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof2(o);
      }
      module2.exports = _typeof2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    })(_typeof);
    var _typeofExports = _typeof.exports;
    (function(module2) {
      var _typeof2 = _typeofExports["default"];
      function _regeneratorRuntime2() {
        module2.exports = _regeneratorRuntime2 = function _regeneratorRuntime3() {
          return e2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
        var t2, e2 = {}, r2 = Object.prototype, n2 = r2.hasOwnProperty, o = Object.defineProperty || function(t3, e3, r3) {
          t3[e3] = r3.value;
        }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c2 = i.asyncIterator || "@@asyncIterator", u2 = i.toStringTag || "@@toStringTag";
        function define(t3, e3, r3) {
          return Object.defineProperty(t3, e3, {
            value: r3,
            enumerable: true,
            configurable: true,
            writable: true
          }), t3[e3];
        }
        try {
          define({}, "");
        } catch (t3) {
          define = function define2(t4, e3, r3) {
            return t4[e3] = r3;
          };
        }
        function wrap(t3, e3, r3, n3) {
          var i2 = e3 && e3.prototype instanceof Generator ? e3 : Generator, a2 = Object.create(i2.prototype), c3 = new Context(n3 || []);
          return o(a2, "_invoke", {
            value: makeInvokeMethod(t3, r3, c3)
          }), a2;
        }
        function tryCatch(t3, e3, r3) {
          try {
            return {
              type: "normal",
              arg: t3.call(e3, r3)
            };
          } catch (t4) {
            return {
              type: "throw",
              arg: t4
            };
          }
        }
        e2.wrap = wrap;
        var h2 = "suspendedStart", l2 = "suspendedYield", f2 = "executing", s = "completed", y2 = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var p2 = {};
        define(p2, a, function() {
          return this;
        });
        var d2 = Object.getPrototypeOf, v2 = d2 && d2(d2(values([])));
        v2 && v2 !== r2 && n2.call(v2, a) && (p2 = v2);
        var g2 = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p2);
        function defineIteratorMethods(t3) {
          ["next", "throw", "return"].forEach(function(e3) {
            define(t3, e3, function(t4) {
              return this._invoke(e3, t4);
            });
          });
        }
        function AsyncIterator(t3, e3) {
          function invoke(r4, o2, i2, a2) {
            var c3 = tryCatch(t3[r4], t3, o2);
            if ("throw" !== c3.type) {
              var u3 = c3.arg, h3 = u3.value;
              return h3 && "object" == _typeof2(h3) && n2.call(h3, "__await") ? e3.resolve(h3.__await).then(function(t4) {
                invoke("next", t4, i2, a2);
              }, function(t4) {
                invoke("throw", t4, i2, a2);
              }) : e3.resolve(h3).then(function(t4) {
                u3.value = t4, i2(u3);
              }, function(t4) {
                return invoke("throw", t4, i2, a2);
              });
            }
            a2(c3.arg);
          }
          var r3;
          o(this, "_invoke", {
            value: function value2(t4, n3) {
              function callInvokeWithMethodAndArg() {
                return new e3(function(e4, r4) {
                  invoke(t4, n3, e4, r4);
                });
              }
              return r3 = r3 ? r3.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
            }
          });
        }
        function makeInvokeMethod(e3, r3, n3) {
          var o2 = h2;
          return function(i2, a2) {
            if (o2 === f2) throw Error("Generator is already running");
            if (o2 === s) {
              if ("throw" === i2) throw a2;
              return {
                value: t2,
                done: true
              };
            }
            for (n3.method = i2, n3.arg = a2; ; ) {
              var c3 = n3.delegate;
              if (c3) {
                var u3 = maybeInvokeDelegate(c3, n3);
                if (u3) {
                  if (u3 === y2) continue;
                  return u3;
                }
              }
              if ("next" === n3.method) n3.sent = n3._sent = n3.arg;
              else if ("throw" === n3.method) {
                if (o2 === h2) throw o2 = s, n3.arg;
                n3.dispatchException(n3.arg);
              } else "return" === n3.method && n3.abrupt("return", n3.arg);
              o2 = f2;
              var p3 = tryCatch(e3, r3, n3);
              if ("normal" === p3.type) {
                if (o2 = n3.done ? s : l2, p3.arg === y2) continue;
                return {
                  value: p3.arg,
                  done: n3.done
                };
              }
              "throw" === p3.type && (o2 = s, n3.method = "throw", n3.arg = p3.arg);
            }
          };
        }
        function maybeInvokeDelegate(e3, r3) {
          var n3 = r3.method, o2 = e3.iterator[n3];
          if (o2 === t2) return r3.delegate = null, "throw" === n3 && e3.iterator["return"] && (r3.method = "return", r3.arg = t2, maybeInvokeDelegate(e3, r3), "throw" === r3.method) || "return" !== n3 && (r3.method = "throw", r3.arg = new TypeError("The iterator does not provide a '" + n3 + "' method")), y2;
          var i2 = tryCatch(o2, e3.iterator, r3.arg);
          if ("throw" === i2.type) return r3.method = "throw", r3.arg = i2.arg, r3.delegate = null, y2;
          var a2 = i2.arg;
          return a2 ? a2.done ? (r3[e3.resultName] = a2.value, r3.next = e3.nextLoc, "return" !== r3.method && (r3.method = "next", r3.arg = t2), r3.delegate = null, y2) : a2 : (r3.method = "throw", r3.arg = new TypeError("iterator result is not an object"), r3.delegate = null, y2);
        }
        function pushTryEntry(t3) {
          var e3 = {
            tryLoc: t3[0]
          };
          1 in t3 && (e3.catchLoc = t3[1]), 2 in t3 && (e3.finallyLoc = t3[2], e3.afterLoc = t3[3]), this.tryEntries.push(e3);
        }
        function resetTryEntry(t3) {
          var e3 = t3.completion || {};
          e3.type = "normal", delete e3.arg, t3.completion = e3;
        }
        function Context(t3) {
          this.tryEntries = [{
            tryLoc: "root"
          }], t3.forEach(pushTryEntry, this), this.reset(true);
        }
        function values(e3) {
          if (e3 || "" === e3) {
            var r3 = e3[a];
            if (r3) return r3.call(e3);
            if ("function" == typeof e3.next) return e3;
            if (!isNaN(e3.length)) {
              var o2 = -1, i2 = function next() {
                for (; ++o2 < e3.length; ) if (n2.call(e3, o2)) return next.value = e3[o2], next.done = false, next;
                return next.value = t2, next.done = true, next;
              };
              return i2.next = i2;
            }
          }
          throw new TypeError(_typeof2(e3) + " is not iterable");
        }
        return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g2, "constructor", {
          value: GeneratorFunctionPrototype,
          configurable: true
        }), o(GeneratorFunctionPrototype, "constructor", {
          value: GeneratorFunction,
          configurable: true
        }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u2, "GeneratorFunction"), e2.isGeneratorFunction = function(t3) {
          var e3 = "function" == typeof t3 && t3.constructor;
          return !!e3 && (e3 === GeneratorFunction || "GeneratorFunction" === (e3.displayName || e3.name));
        }, e2.mark = function(t3) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(t3, GeneratorFunctionPrototype) : (t3.__proto__ = GeneratorFunctionPrototype, define(t3, u2, "GeneratorFunction")), t3.prototype = Object.create(g2), t3;
        }, e2.awrap = function(t3) {
          return {
            __await: t3
          };
        }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c2, function() {
          return this;
        }), e2.AsyncIterator = AsyncIterator, e2.async = function(t3, r3, n3, o2, i2) {
          void 0 === i2 && (i2 = Promise);
          var a2 = new AsyncIterator(wrap(t3, r3, n3, o2), i2);
          return e2.isGeneratorFunction(r3) ? a2 : a2.next().then(function(t4) {
            return t4.done ? t4.value : a2.next();
          });
        }, defineIteratorMethods(g2), define(g2, u2, "Generator"), define(g2, a, function() {
          return this;
        }), define(g2, "toString", function() {
          return "[object Generator]";
        }), e2.keys = function(t3) {
          var e3 = Object(t3), r3 = [];
          for (var n3 in e3) r3.push(n3);
          return r3.reverse(), function next() {
            for (; r3.length; ) {
              var t4 = r3.pop();
              if (t4 in e3) return next.value = t4, next.done = false, next;
            }
            return next.done = true, next;
          };
        }, e2.values = values, Context.prototype = {
          constructor: Context,
          reset: function reset(e3) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = t2, this.done = false, this.delegate = null, this.method = "next", this.arg = t2, this.tryEntries.forEach(resetTryEntry), !e3) for (var r3 in this) "t" === r3.charAt(0) && n2.call(this, r3) && !isNaN(+r3.slice(1)) && (this[r3] = t2);
          },
          stop: function stop() {
            this.done = true;
            var t3 = this.tryEntries[0].completion;
            if ("throw" === t3.type) throw t3.arg;
            return this.rval;
          },
          dispatchException: function dispatchException(e3) {
            if (this.done) throw e3;
            var r3 = this;
            function handle(n3, o3) {
              return a2.type = "throw", a2.arg = e3, r3.next = n3, o3 && (r3.method = "next", r3.arg = t2), !!o3;
            }
            for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
              var i2 = this.tryEntries[o2], a2 = i2.completion;
              if ("root" === i2.tryLoc) return handle("end");
              if (i2.tryLoc <= this.prev) {
                var c3 = n2.call(i2, "catchLoc"), u3 = n2.call(i2, "finallyLoc");
                if (c3 && u3) {
                  if (this.prev < i2.catchLoc) return handle(i2.catchLoc, true);
                  if (this.prev < i2.finallyLoc) return handle(i2.finallyLoc);
                } else if (c3) {
                  if (this.prev < i2.catchLoc) return handle(i2.catchLoc, true);
                } else {
                  if (!u3) throw Error("try statement without catch or finally");
                  if (this.prev < i2.finallyLoc) return handle(i2.finallyLoc);
                }
              }
            }
          },
          abrupt: function abrupt(t3, e3) {
            for (var r3 = this.tryEntries.length - 1; r3 >= 0; --r3) {
              var o2 = this.tryEntries[r3];
              if (o2.tryLoc <= this.prev && n2.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
                var i2 = o2;
                break;
              }
            }
            i2 && ("break" === t3 || "continue" === t3) && i2.tryLoc <= e3 && e3 <= i2.finallyLoc && (i2 = null);
            var a2 = i2 ? i2.completion : {};
            return a2.type = t3, a2.arg = e3, i2 ? (this.method = "next", this.next = i2.finallyLoc, y2) : this.complete(a2);
          },
          complete: function complete(t3, e3) {
            if ("throw" === t3.type) throw t3.arg;
            return "break" === t3.type || "continue" === t3.type ? this.next = t3.arg : "return" === t3.type ? (this.rval = this.arg = t3.arg, this.method = "return", this.next = "end") : "normal" === t3.type && e3 && (this.next = e3), y2;
          },
          finish: function finish(t3) {
            for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
              var r3 = this.tryEntries[e3];
              if (r3.finallyLoc === t3) return this.complete(r3.completion, r3.afterLoc), resetTryEntry(r3), y2;
            }
          },
          "catch": function _catch(t3) {
            for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
              var r3 = this.tryEntries[e3];
              if (r3.tryLoc === t3) {
                var n3 = r3.completion;
                if ("throw" === n3.type) {
                  var o2 = n3.arg;
                  resetTryEntry(r3);
                }
                return o2;
              }
            }
            throw Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(e3, r3, n3) {
            return this.delegate = {
              iterator: values(e3),
              resultName: r3,
              nextLoc: n3
            }, "next" === this.method && (this.arg = t2), y2;
          }
        }, e2;
      }
      module2.exports = _regeneratorRuntime2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    })(regeneratorRuntime$1);
    var regeneratorRuntimeExports = regeneratorRuntime$1.exports;
    var runtime = regeneratorRuntimeExports();
    var regenerator = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
    const _regeneratorRuntime = /* @__PURE__ */ getDefaultExportFromCjs(regenerator);
    var isArray$c = Array.isArray;
    var isArray_1 = isArray$c;
    var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var _freeGlobal = freeGlobal$1;
    var freeGlobal = _freeGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root$8 = freeGlobal || freeSelf || Function("return this")();
    var _root = root$8;
    var root$7 = _root;
    var Symbol$7 = root$7.Symbol;
    var _Symbol = Symbol$7;
    var Symbol$6 = _Symbol;
    var objectProto$f = Object.prototype;
    var hasOwnProperty$c = objectProto$f.hasOwnProperty;
    var nativeObjectToString$1 = objectProto$f.toString;
    var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : void 0;
    function getRawTag$1(value2) {
      var isOwn = hasOwnProperty$c.call(value2, symToStringTag$1), tag = value2[symToStringTag$1];
      try {
        value2[symToStringTag$1] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString$1.call(value2);
      if (unmasked) {
        if (isOwn) {
          value2[symToStringTag$1] = tag;
        } else {
          delete value2[symToStringTag$1];
        }
      }
      return result;
    }
    var _getRawTag = getRawTag$1;
    var objectProto$e = Object.prototype;
    var nativeObjectToString = objectProto$e.toString;
    function objectToString$1(value2) {
      return nativeObjectToString.call(value2);
    }
    var _objectToString = objectToString$1;
    var Symbol$5 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
    var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : void 0;
    function baseGetTag$6(value2) {
      if (value2 == null) {
        return value2 === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
    }
    var _baseGetTag = baseGetTag$6;
    function isObjectLike$9(value2) {
      return value2 != null && typeof value2 == "object";
    }
    var isObjectLike_1 = isObjectLike$9;
    var baseGetTag$5 = _baseGetTag, isObjectLike$8 = isObjectLike_1;
    var symbolTag$3 = "[object Symbol]";
    function isSymbol$4(value2) {
      return typeof value2 == "symbol" || isObjectLike$8(value2) && baseGetTag$5(value2) == symbolTag$3;
    }
    var isSymbol_1 = isSymbol$4;
    var isArray$b = isArray_1, isSymbol$3 = isSymbol_1;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
    function isKey$3(value2, object) {
      if (isArray$b(value2)) {
        return false;
      }
      var type = typeof value2;
      if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol$3(value2)) {
        return true;
      }
      return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object(object);
    }
    var _isKey = isKey$3;
    function isObject$h(value2) {
      var type = typeof value2;
      return value2 != null && (type == "object" || type == "function");
    }
    var isObject_1 = isObject$h;
    var baseGetTag$4 = _baseGetTag, isObject$g = isObject_1;
    var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
    function isFunction$4(value2) {
      if (!isObject$g(value2)) {
        return false;
      }
      var tag = baseGetTag$4(value2);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }
    var isFunction_1 = isFunction$4;
    var root$6 = _root;
    var coreJsData$1 = root$6["__core-js_shared__"];
    var _coreJsData = coreJsData$1;
    var coreJsData = _coreJsData;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked$1(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var _isMasked = isMasked$1;
    var funcProto$2 = Function.prototype;
    var funcToString$2 = funcProto$2.toString;
    function toSource$2(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    var _toSource = toSource$2;
    var isFunction$3 = isFunction_1, isMasked = _isMasked, isObject$f = isObject_1, toSource$1 = _toSource;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto$1 = Function.prototype, objectProto$d = Object.prototype;
    var funcToString$1 = funcProto$1.toString;
    var hasOwnProperty$b = objectProto$d.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString$1.call(hasOwnProperty$b).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative$1(value2) {
      if (!isObject$f(value2) || isMasked(value2)) {
        return false;
      }
      var pattern = isFunction$3(value2) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource$1(value2));
    }
    var _baseIsNative = baseIsNative$1;
    function getValue$1(object, key) {
      return object == null ? void 0 : object[key];
    }
    var _getValue = getValue$1;
    var baseIsNative = _baseIsNative, getValue = _getValue;
    function getNative$7(object, key) {
      var value2 = getValue(object, key);
      return baseIsNative(value2) ? value2 : void 0;
    }
    var _getNative = getNative$7;
    var getNative$6 = _getNative;
    var nativeCreate$4 = getNative$6(Object, "create");
    var _nativeCreate = nativeCreate$4;
    var nativeCreate$3 = _nativeCreate;
    function hashClear$1() {
      this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
      this.size = 0;
    }
    var _hashClear = hashClear$1;
    function hashDelete$1(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    var _hashDelete = hashDelete$1;
    var nativeCreate$2 = _nativeCreate;
    var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
    var objectProto$c = Object.prototype;
    var hasOwnProperty$a = objectProto$c.hasOwnProperty;
    function hashGet$1(key) {
      var data = this.__data__;
      if (nativeCreate$2) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? void 0 : result;
      }
      return hasOwnProperty$a.call(data, key) ? data[key] : void 0;
    }
    var _hashGet = hashGet$1;
    var nativeCreate$1 = _nativeCreate;
    var objectProto$b = Object.prototype;
    var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
    function hashHas$1(key) {
      var data = this.__data__;
      return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$9.call(data, key);
    }
    var _hashHas = hashHas$1;
    var nativeCreate = _nativeCreate;
    var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
    function hashSet$1(key, value2) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED$1 : value2;
      return this;
    }
    var _hashSet = hashSet$1;
    var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
    function Hash$1(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash$1.prototype.clear = hashClear;
    Hash$1.prototype["delete"] = hashDelete;
    Hash$1.prototype.get = hashGet;
    Hash$1.prototype.has = hashHas;
    Hash$1.prototype.set = hashSet;
    var _Hash = Hash$1;
    function listCacheClear$1() {
      this.__data__ = [];
      this.size = 0;
    }
    var _listCacheClear = listCacheClear$1;
    function eq$5(value2, other) {
      return value2 === other || value2 !== value2 && other !== other;
    }
    var eq_1 = eq$5;
    var eq$4 = eq_1;
    function assocIndexOf$4(array, key) {
      var length = array.length;
      while (length--) {
        if (eq$4(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    var _assocIndexOf = assocIndexOf$4;
    var assocIndexOf$3 = _assocIndexOf;
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete$1(key) {
      var data = this.__data__, index = assocIndexOf$3(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    var _listCacheDelete = listCacheDelete$1;
    var assocIndexOf$2 = _assocIndexOf;
    function listCacheGet$1(key) {
      var data = this.__data__, index = assocIndexOf$2(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    var _listCacheGet = listCacheGet$1;
    var assocIndexOf$1 = _assocIndexOf;
    function listCacheHas$1(key) {
      return assocIndexOf$1(this.__data__, key) > -1;
    }
    var _listCacheHas = listCacheHas$1;
    var assocIndexOf = _assocIndexOf;
    function listCacheSet$1(key, value2) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value2]);
      } else {
        data[index][1] = value2;
      }
      return this;
    }
    var _listCacheSet = listCacheSet$1;
    var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
    function ListCache$4(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache$4.prototype.clear = listCacheClear;
    ListCache$4.prototype["delete"] = listCacheDelete;
    ListCache$4.prototype.get = listCacheGet;
    ListCache$4.prototype.has = listCacheHas;
    ListCache$4.prototype.set = listCacheSet;
    var _ListCache = ListCache$4;
    var getNative$5 = _getNative, root$5 = _root;
    var Map$4 = getNative$5(root$5, "Map");
    var _Map = Map$4;
    var Hash = _Hash, ListCache$3 = _ListCache, Map$3 = _Map;
    function mapCacheClear$1() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map$3 || ListCache$3)(),
        "string": new Hash()
      };
    }
    var _mapCacheClear = mapCacheClear$1;
    function isKeyable$1(value2) {
      var type = typeof value2;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
    }
    var _isKeyable = isKeyable$1;
    var isKeyable = _isKeyable;
    function getMapData$4(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    var _getMapData = getMapData$4;
    var getMapData$3 = _getMapData;
    function mapCacheDelete$1(key) {
      var result = getMapData$3(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    var _mapCacheDelete = mapCacheDelete$1;
    var getMapData$2 = _getMapData;
    function mapCacheGet$1(key) {
      return getMapData$2(this, key).get(key);
    }
    var _mapCacheGet = mapCacheGet$1;
    var getMapData$1 = _getMapData;
    function mapCacheHas$1(key) {
      return getMapData$1(this, key).has(key);
    }
    var _mapCacheHas = mapCacheHas$1;
    var getMapData = _getMapData;
    function mapCacheSet$1(key, value2) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value2);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    var _mapCacheSet = mapCacheSet$1;
    var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
    function MapCache$3(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache$3.prototype.clear = mapCacheClear;
    MapCache$3.prototype["delete"] = mapCacheDelete;
    MapCache$3.prototype.get = mapCacheGet;
    MapCache$3.prototype.has = mapCacheHas;
    MapCache$3.prototype.set = mapCacheSet;
    var _MapCache = MapCache$3;
    var MapCache$2 = _MapCache;
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize$1(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize$1.Cache || MapCache$2)();
      return memoized;
    }
    memoize$1.Cache = MapCache$2;
    var memoize_1 = memoize$1;
    var memoize = memoize_1;
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped$1(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    var _memoizeCapped = memoizeCapped$1;
    var memoizeCapped = _memoizeCapped;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath$1 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    var _stringToPath = stringToPath$1;
    function arrayMap$3(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    var _arrayMap = arrayMap$3;
    var Symbol$4 = _Symbol, arrayMap$2 = _arrayMap, isArray$a = isArray_1, isSymbol$2 = isSymbol_1;
    var INFINITY$2 = 1 / 0;
    var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : void 0, symbolToString = symbolProto$2 ? symbolProto$2.toString : void 0;
    function baseToString$2(value2) {
      if (typeof value2 == "string") {
        return value2;
      }
      if (isArray$a(value2)) {
        return arrayMap$2(value2, baseToString$2) + "";
      }
      if (isSymbol$2(value2)) {
        return symbolToString ? symbolToString.call(value2) : "";
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY$2 ? "-0" : result;
    }
    var _baseToString = baseToString$2;
    var baseToString$1 = _baseToString;
    function toString$3(value2) {
      return value2 == null ? "" : baseToString$1(value2);
    }
    var toString_1 = toString$3;
    var isArray$9 = isArray_1, isKey$2 = _isKey, stringToPath = _stringToPath, toString$2 = toString_1;
    function castPath$6(value2, object) {
      if (isArray$9(value2)) {
        return value2;
      }
      return isKey$2(value2, object) ? [value2] : stringToPath(toString$2(value2));
    }
    var _castPath = castPath$6;
    var isSymbol$1 = isSymbol_1;
    var INFINITY$1 = 1 / 0;
    function toKey$6(value2) {
      if (typeof value2 == "string" || isSymbol$1(value2)) {
        return value2;
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY$1 ? "-0" : result;
    }
    var _toKey = toKey$6;
    var castPath$5 = _castPath, toKey$5 = _toKey;
    function baseGet$4(object, path) {
      path = castPath$5(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey$5(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    var _baseGet = baseGet$4;
    var getNative$4 = _getNative;
    var defineProperty$3 = function() {
      try {
        var func = getNative$4(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e2) {
      }
    }();
    var _defineProperty = defineProperty$3;
    var defineProperty$2 = _defineProperty;
    function baseAssignValue$4(object, key, value2) {
      if (key == "__proto__" && defineProperty$2) {
        defineProperty$2(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value2,
          "writable": true
        });
      } else {
        object[key] = value2;
      }
    }
    var _baseAssignValue = baseAssignValue$4;
    var baseAssignValue$3 = _baseAssignValue, eq$3 = eq_1;
    var objectProto$a = Object.prototype;
    var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
    function assignValue$3(object, key, value2) {
      var objValue = object[key];
      if (!(hasOwnProperty$8.call(object, key) && eq$3(objValue, value2)) || value2 === void 0 && !(key in object)) {
        baseAssignValue$3(object, key, value2);
      }
    }
    var _assignValue = assignValue$3;
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex$4(value2, length) {
      var type = typeof value2;
      length = length == null ? MAX_SAFE_INTEGER$1 : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length);
    }
    var _isIndex = isIndex$4;
    var assignValue$2 = _assignValue, castPath$4 = _castPath, isIndex$3 = _isIndex, isObject$e = isObject_1, toKey$4 = _toKey;
    function baseSet$1(object, path, value2, customizer) {
      if (!isObject$e(object)) {
        return object;
      }
      path = castPath$4(path, object);
      var index = -1, length = path.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index < length) {
        var key = toKey$4(path[index]), newValue = value2;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject$e(objValue) ? objValue : isIndex$3(path[index + 1]) ? [] : {};
          }
        }
        assignValue$2(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    var _baseSet = baseSet$1;
    var baseGet$3 = _baseGet, baseSet = _baseSet, castPath$3 = _castPath;
    function basePickBy$2(object, paths, predicate) {
      var index = -1, length = paths.length, result = {};
      while (++index < length) {
        var path = paths[index], value2 = baseGet$3(object, path);
        if (predicate(value2, path)) {
          baseSet(result, castPath$3(path, object), value2);
        }
      }
      return result;
    }
    var _basePickBy = basePickBy$2;
    function baseHasIn$1(object, key) {
      return object != null && key in Object(object);
    }
    var _baseHasIn = baseHasIn$1;
    var baseGetTag$3 = _baseGetTag, isObjectLike$7 = isObjectLike_1;
    var argsTag$3 = "[object Arguments]";
    function baseIsArguments$1(value2) {
      return isObjectLike$7(value2) && baseGetTag$3(value2) == argsTag$3;
    }
    var _baseIsArguments = baseIsArguments$1;
    var baseIsArguments = _baseIsArguments, isObjectLike$6 = isObjectLike_1;
    var objectProto$9 = Object.prototype;
    var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
    var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;
    var isArguments$4 = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value2) {
      return isObjectLike$6(value2) && hasOwnProperty$7.call(value2, "callee") && !propertyIsEnumerable$1.call(value2, "callee");
    };
    var isArguments_1 = isArguments$4;
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength$3(value2) {
      return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
    }
    var isLength_1 = isLength$3;
    var castPath$2 = _castPath, isArguments$3 = isArguments_1, isArray$8 = isArray_1, isIndex$2 = _isIndex, isLength$2 = isLength_1, toKey$3 = _toKey;
    function hasPath$1(object, path, hasFunc) {
      path = castPath$2(path, object);
      var index = -1, length = path.length, result = false;
      while (++index < length) {
        var key = toKey$3(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength$2(length) && isIndex$2(key, length) && (isArray$8(object) || isArguments$3(object));
    }
    var _hasPath = hasPath$1;
    var baseHasIn = _baseHasIn, hasPath = _hasPath;
    function hasIn$2(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    var hasIn_1 = hasIn$2;
    var basePickBy$1 = _basePickBy, hasIn$1 = hasIn_1;
    function basePick$1(object, paths) {
      return basePickBy$1(object, paths, function(value2, path) {
        return hasIn$1(object, path);
      });
    }
    var _basePick = basePick$1;
    function arrayPush$3(array, values) {
      var index = -1, length = values.length, offset2 = array.length;
      while (++index < length) {
        array[offset2 + index] = values[index];
      }
      return array;
    }
    var _arrayPush = arrayPush$3;
    var Symbol$3 = _Symbol, isArguments$2 = isArguments_1, isArray$7 = isArray_1;
    var spreadableSymbol = Symbol$3 ? Symbol$3.isConcatSpreadable : void 0;
    function isFlattenable$1(value2) {
      return isArray$7(value2) || isArguments$2(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
    }
    var _isFlattenable = isFlattenable$1;
    var arrayPush$2 = _arrayPush, isFlattenable = _isFlattenable;
    function baseFlatten$1(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value2 = array[index];
        if (depth > 0 && predicate(value2)) {
          if (depth > 1) {
            baseFlatten$1(value2, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush$2(result, value2);
          }
        } else if (!isStrict) {
          result[result.length] = value2;
        }
      }
      return result;
    }
    var _baseFlatten = baseFlatten$1;
    var baseFlatten = _baseFlatten;
    function flatten$1(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }
    var flatten_1 = flatten$1;
    function apply$1(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    var _apply = apply$1;
    var apply = _apply;
    var nativeMax$1 = Math.max;
    function overRest$2(func, start, transform) {
      start = nativeMax$1(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax$1(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    var _overRest = overRest$2;
    function constant$1(value2) {
      return function() {
        return value2;
      };
    }
    var constant_1 = constant$1;
    function identity$3(value2) {
      return value2;
    }
    var identity_1 = identity$3;
    var constant = constant_1, defineProperty$1 = _defineProperty, identity$2 = identity_1;
    var baseSetToString$1 = !defineProperty$1 ? identity$2 : function(func, string) {
      return defineProperty$1(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    var _baseSetToString = baseSetToString$1;
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut$1(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    var _shortOut = shortOut$1;
    var baseSetToString = _baseSetToString, shortOut = _shortOut;
    var setToString$2 = shortOut(baseSetToString);
    var _setToString = setToString$2;
    var flatten = flatten_1, overRest$1 = _overRest, setToString$1 = _setToString;
    function flatRest$2(func) {
      return setToString$1(overRest$1(func, void 0, flatten), func + "");
    }
    var _flatRest = flatRest$2;
    var basePick = _basePick, flatRest$1 = _flatRest;
    var pick = flatRest$1(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    var pick_1 = pick;
    const pick$1 = /* @__PURE__ */ getDefaultExportFromCjs(pick_1);
    function last$1(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    var last_1 = last$1;
    const last$2 = /* @__PURE__ */ getDefaultExportFromCjs(last_1);
    var ListCache$2 = _ListCache;
    function stackClear$1() {
      this.__data__ = new ListCache$2();
      this.size = 0;
    }
    var _stackClear = stackClear$1;
    function stackDelete$1(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    var _stackDelete = stackDelete$1;
    function stackGet$1(key) {
      return this.__data__.get(key);
    }
    var _stackGet = stackGet$1;
    function stackHas$1(key) {
      return this.__data__.has(key);
    }
    var _stackHas = stackHas$1;
    var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$1 = _MapCache;
    var LARGE_ARRAY_SIZE = 200;
    function stackSet$1(key, value2) {
      var data = this.__data__;
      if (data instanceof ListCache$1) {
        var pairs = data.__data__;
        if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value2]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache$1(pairs);
      }
      data.set(key, value2);
      this.size = data.size;
      return this;
    }
    var _stackSet = stackSet$1;
    var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
    function Stack$4(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack$4.prototype.clear = stackClear;
    Stack$4.prototype["delete"] = stackDelete;
    Stack$4.prototype.get = stackGet;
    Stack$4.prototype.has = stackHas;
    Stack$4.prototype.set = stackSet;
    var _Stack = Stack$4;
    function arrayEach$1(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    var _arrayEach = arrayEach$1;
    var assignValue$1 = _assignValue, baseAssignValue$2 = _baseAssignValue;
    function copyObject$6(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue$2(object, key, newValue);
        } else {
          assignValue$1(object, key, newValue);
        }
      }
      return object;
    }
    var _copyObject = copyObject$6;
    function baseTimes$1(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    var _baseTimes = baseTimes$1;
    var isBuffer$4 = { exports: {} };
    function stubFalse() {
      return false;
    }
    var stubFalse_1 = stubFalse;
    isBuffer$4.exports;
    (function(module2, exports2) {
      var root2 = _root, stubFalse2 = stubFalse_1;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root2.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer2 = nativeIsBuffer || stubFalse2;
      module2.exports = isBuffer2;
    })(isBuffer$4, isBuffer$4.exports);
    var isBufferExports = isBuffer$4.exports;
    var baseGetTag$2 = _baseGetTag, isLength$1 = isLength_1, isObjectLike$5 = isObjectLike_1;
    var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", funcTag$1 = "[object Function]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", objectTag$4 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", weakMapTag$2 = "[object WeakMap]";
    var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
    function baseIsTypedArray$1(value2) {
      return isObjectLike$5(value2) && isLength$1(value2.length) && !!typedArrayTags[baseGetTag$2(value2)];
    }
    var _baseIsTypedArray = baseIsTypedArray$1;
    function baseUnary$3(func) {
      return function(value2) {
        return func(value2);
      };
    }
    var _baseUnary = baseUnary$3;
    var _nodeUtil = { exports: {} };
    _nodeUtil.exports;
    (function(module2, exports2) {
      var freeGlobal2 = _freeGlobal;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal2.process;
      var nodeUtil2 = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e2) {
        }
      }();
      module2.exports = nodeUtil2;
    })(_nodeUtil, _nodeUtil.exports);
    var _nodeUtilExports = _nodeUtil.exports;
    var baseIsTypedArray = _baseIsTypedArray, baseUnary$2 = _baseUnary, nodeUtil$2 = _nodeUtilExports;
    var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
    var isTypedArray$3 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;
    var isTypedArray_1 = isTypedArray$3;
    var baseTimes = _baseTimes, isArguments$1 = isArguments_1, isArray$6 = isArray_1, isBuffer$3 = isBufferExports, isIndex$1 = _isIndex, isTypedArray$2 = isTypedArray_1;
    var objectProto$8 = Object.prototype;
    var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
    function arrayLikeKeys$2(value2, inherited) {
      var isArr = isArray$6(value2), isArg = !isArr && isArguments$1(value2), isBuff = !isArr && !isArg && isBuffer$3(value2), isType = !isArr && !isArg && !isBuff && isTypedArray$2(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value2.length, String) : [], length = result.length;
      for (var key in value2) {
        if ((inherited || hasOwnProperty$6.call(value2, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex$1(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    var _arrayLikeKeys = arrayLikeKeys$2;
    var objectProto$7 = Object.prototype;
    function isPrototype$3(value2) {
      var Ctor = value2 && value2.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$7;
      return value2 === proto2;
    }
    var _isPrototype = isPrototype$3;
    function overArg$2(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var _overArg = overArg$2;
    var overArg$1 = _overArg;
    var nativeKeys$1 = overArg$1(Object.keys, Object);
    var _nativeKeys = nativeKeys$1;
    var isPrototype$2 = _isPrototype, nativeKeys = _nativeKeys;
    var objectProto$6 = Object.prototype;
    var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
    function baseKeys$1(object) {
      if (!isPrototype$2(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$5.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    var _baseKeys = baseKeys$1;
    var isFunction$2 = isFunction_1, isLength = isLength_1;
    function isArrayLike$4(value2) {
      return value2 != null && isLength(value2.length) && !isFunction$2(value2);
    }
    var isArrayLike_1 = isArrayLike$4;
    var arrayLikeKeys$1 = _arrayLikeKeys, baseKeys = _baseKeys, isArrayLike$3 = isArrayLike_1;
    function keys$6(object) {
      return isArrayLike$3(object) ? arrayLikeKeys$1(object) : baseKeys(object);
    }
    var keys_1 = keys$6;
    const keys$7 = /* @__PURE__ */ getDefaultExportFromCjs(keys_1);
    var copyObject$5 = _copyObject, keys$5 = keys_1;
    function baseAssign$1(object, source) {
      return object && copyObject$5(source, keys$5(source), object);
    }
    var _baseAssign = baseAssign$1;
    function nativeKeysIn$1(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    var _nativeKeysIn = nativeKeysIn$1;
    var isObject$d = isObject_1, isPrototype$1 = _isPrototype, nativeKeysIn = _nativeKeysIn;
    var objectProto$5 = Object.prototype;
    var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
    function baseKeysIn$1(object) {
      if (!isObject$d(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype$1(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty$4.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    var _baseKeysIn = baseKeysIn$1;
    var arrayLikeKeys = _arrayLikeKeys, baseKeysIn = _baseKeysIn, isArrayLike$2 = isArrayLike_1;
    function keysIn$5(object) {
      return isArrayLike$2(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var keysIn_1 = keysIn$5;
    var copyObject$4 = _copyObject, keysIn$4 = keysIn_1;
    function baseAssignIn$1(object, source) {
      return object && copyObject$4(source, keysIn$4(source), object);
    }
    var _baseAssignIn = baseAssignIn$1;
    var _cloneBuffer = { exports: {} };
    _cloneBuffer.exports;
    (function(module2, exports2) {
      var root2 = _root;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      function cloneBuffer2(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      module2.exports = cloneBuffer2;
    })(_cloneBuffer, _cloneBuffer.exports);
    var _cloneBufferExports = _cloneBuffer.exports;
    function copyArray$2(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    var _copyArray = copyArray$2;
    function arrayFilter$1(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value2 = array[index];
        if (predicate(value2, index, array)) {
          result[resIndex++] = value2;
        }
      }
      return result;
    }
    var _arrayFilter = arrayFilter$1;
    function stubArray$2() {
      return [];
    }
    var stubArray_1 = stubArray$2;
    var arrayFilter = _arrayFilter, stubArray$1 = stubArray_1;
    var objectProto$4 = Object.prototype;
    var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
    var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var _getSymbols = getSymbols$3;
    var copyObject$3 = _copyObject, getSymbols$2 = _getSymbols;
    function copySymbols$1(source, object) {
      return copyObject$3(source, getSymbols$2(source), object);
    }
    var _copySymbols = copySymbols$1;
    var overArg = _overArg;
    var getPrototype$3 = overArg(Object.getPrototypeOf, Object);
    var _getPrototype = getPrototype$3;
    var arrayPush$1 = _arrayPush, getPrototype$2 = _getPrototype, getSymbols$1 = _getSymbols, stubArray = stubArray_1;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush$1(result, getSymbols$1(object));
        object = getPrototype$2(object);
      }
      return result;
    };
    var _getSymbolsIn = getSymbolsIn$2;
    var copyObject$2 = _copyObject, getSymbolsIn$1 = _getSymbolsIn;
    function copySymbolsIn$1(source, object) {
      return copyObject$2(source, getSymbolsIn$1(source), object);
    }
    var _copySymbolsIn = copySymbolsIn$1;
    var arrayPush = _arrayPush, isArray$5 = isArray_1;
    function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$5(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    var _baseGetAllKeys = baseGetAllKeys$2;
    var baseGetAllKeys$1 = _baseGetAllKeys, getSymbols = _getSymbols, keys$4 = keys_1;
    function getAllKeys$2(object) {
      return baseGetAllKeys$1(object, keys$4, getSymbols);
    }
    var _getAllKeys = getAllKeys$2;
    var baseGetAllKeys = _baseGetAllKeys, getSymbolsIn = _getSymbolsIn, keysIn$3 = keysIn_1;
    function getAllKeysIn$3(object) {
      return baseGetAllKeys(object, keysIn$3, getSymbolsIn);
    }
    var _getAllKeysIn = getAllKeysIn$3;
    var getNative$3 = _getNative, root$4 = _root;
    var DataView$1 = getNative$3(root$4, "DataView");
    var _DataView = DataView$1;
    var getNative$2 = _getNative, root$3 = _root;
    var Promise$2 = getNative$2(root$3, "Promise");
    var _Promise = Promise$2;
    var getNative$1 = _getNative, root$2 = _root;
    var Set$2 = getNative$1(root$2, "Set");
    var _Set = Set$2;
    var getNative = _getNative, root$1 = _root;
    var WeakMap$2 = getNative(root$1, "WeakMap");
    var _WeakMap = WeakMap$2;
    var DataView = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag$1 = _baseGetTag, toSource = _toSource;
    var mapTag$4 = "[object Map]", objectTag$3 = "[object Object]", promiseTag = "[object Promise]", setTag$4 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
    var dataViewTag$3 = "[object DataView]";
    var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
    var getTag$4 = baseGetTag$1;
    if (DataView && getTag$4(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$4(new Map$1()) != mapTag$4 || Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag || Set$1 && getTag$4(new Set$1()) != setTag$4 || WeakMap$1 && getTag$4(new WeakMap$1()) != weakMapTag$1) {
      getTag$4 = function(value2) {
        var result = baseGetTag$1(value2), Ctor = result == objectTag$3 ? value2.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag$3;
            case mapCtorString:
              return mapTag$4;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag$4;
            case weakMapCtorString:
              return weakMapTag$1;
          }
        }
        return result;
      };
    }
    var _getTag = getTag$4;
    var objectProto$3 = Object.prototype;
    var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
    function initCloneArray$1(array) {
      var length = array.length, result = new array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty$3.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    var _initCloneArray = initCloneArray$1;
    var root = _root;
    var Uint8Array$2 = root.Uint8Array;
    var _Uint8Array = Uint8Array$2;
    var Uint8Array$1 = _Uint8Array;
    function cloneArrayBuffer$3(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
      return result;
    }
    var _cloneArrayBuffer = cloneArrayBuffer$3;
    var cloneArrayBuffer$2 = _cloneArrayBuffer;
    function cloneDataView$1(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    var _cloneDataView = cloneDataView$1;
    var reFlags = /\w*$/;
    function cloneRegExp$1(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    var _cloneRegExp = cloneRegExp$1;
    var Symbol$2 = _Symbol;
    var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : void 0;
    function cloneSymbol$1(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }
    var _cloneSymbol = cloneSymbol$1;
    var cloneArrayBuffer$1 = _cloneArrayBuffer;
    function cloneTypedArray$2(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    var _cloneTypedArray = cloneTypedArray$2;
    var cloneArrayBuffer = _cloneArrayBuffer, cloneDataView = _cloneDataView, cloneRegExp = _cloneRegExp, cloneSymbol = _cloneSymbol, cloneTypedArray$1 = _cloneTypedArray;
    var boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$3 = "[object Map]", numberTag$2 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$2 = "[object Symbol]";
    var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
    function initCloneByTag$1(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$2:
          return cloneArrayBuffer(object);
        case boolTag$2:
        case dateTag$2:
          return new Ctor(+object);
        case dataViewTag$2:
          return cloneDataView(object, isDeep);
        case float32Tag$1:
        case float64Tag$1:
        case int8Tag$1:
        case int16Tag$1:
        case int32Tag$1:
        case uint8Tag$1:
        case uint8ClampedTag$1:
        case uint16Tag$1:
        case uint32Tag$1:
          return cloneTypedArray$1(object, isDeep);
        case mapTag$3:
          return new Ctor();
        case numberTag$2:
        case stringTag$2:
          return new Ctor(object);
        case regexpTag$2:
          return cloneRegExp(object);
        case setTag$3:
          return new Ctor();
        case symbolTag$2:
          return cloneSymbol(object);
      }
    }
    var _initCloneByTag = initCloneByTag$1;
    var isObject$c = isObject_1;
    var objectCreate = Object.create;
    var baseCreate$1 = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto2) {
        if (!isObject$c(proto2)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto2);
        }
        object.prototype = proto2;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    var _baseCreate = baseCreate$1;
    var baseCreate = _baseCreate, getPrototype$1 = _getPrototype, isPrototype = _isPrototype;
    function initCloneObject$2(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype$1(object)) : {};
    }
    var _initCloneObject = initCloneObject$2;
    var getTag$3 = _getTag, isObjectLike$4 = isObjectLike_1;
    var mapTag$2 = "[object Map]";
    function baseIsMap$1(value2) {
      return isObjectLike$4(value2) && getTag$3(value2) == mapTag$2;
    }
    var _baseIsMap = baseIsMap$1;
    var baseIsMap = _baseIsMap, baseUnary$1 = _baseUnary, nodeUtil$1 = _nodeUtilExports;
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
    var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;
    var isMap_1 = isMap$1;
    var getTag$2 = _getTag, isObjectLike$3 = isObjectLike_1;
    var setTag$2 = "[object Set]";
    function baseIsSet$1(value2) {
      return isObjectLike$3(value2) && getTag$2(value2) == setTag$2;
    }
    var _baseIsSet = baseIsSet$1;
    var baseIsSet = _baseIsSet, baseUnary = _baseUnary, nodeUtil = _nodeUtilExports;
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    var isSet_1 = isSet$1;
    var Stack$3 = _Stack, arrayEach = _arrayEach, assignValue = _assignValue, baseAssign = _baseAssign, baseAssignIn = _baseAssignIn, cloneBuffer$1 = _cloneBufferExports, copyArray$1 = _copyArray, copySymbols = _copySymbols, copySymbolsIn = _copySymbolsIn, getAllKeys$1 = _getAllKeys, getAllKeysIn$2 = _getAllKeysIn, getTag$1 = _getTag, initCloneArray = _initCloneArray, initCloneByTag = _initCloneByTag, initCloneObject$1 = _initCloneObject, isArray$4 = isArray_1, isBuffer$2 = isBufferExports, isMap = isMap_1, isObject$b = isObject_1, isSet = isSet_1, keys$3 = keys_1, keysIn$2 = keysIn_1;
    var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$1 = 4;
    var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$1 = "[object Map]", numberTag$1 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$1 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]", weakMapTag = "[object WeakMap]";
    var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$1] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone$1(value2, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG$1, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
      if (customizer) {
        result = object ? customizer(value2, key, object, stack) : customizer(value2);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject$b(value2)) {
        return value2;
      }
      var isArr = isArray$4(value2);
      if (isArr) {
        result = initCloneArray(value2);
        if (!isDeep) {
          return copyArray$1(value2, result);
        }
      } else {
        var tag = getTag$1(value2), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer$2(value2)) {
          return cloneBuffer$1(value2, isDeep);
        }
        if (tag == objectTag$2 || tag == argsTag$1 || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject$1(value2);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value2, baseAssignIn(result, value2)) : copySymbols(value2, baseAssign(result, value2));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value2 : {};
          }
          result = initCloneByTag(value2, tag, isDeep);
        }
      }
      stack || (stack = new Stack$3());
      var stacked = stack.get(value2);
      if (stacked) {
        return stacked;
      }
      stack.set(value2, result);
      if (isSet(value2)) {
        value2.forEach(function(subValue) {
          result.add(baseClone$1(subValue, bitmask, customizer, subValue, value2, stack));
        });
      } else if (isMap(value2)) {
        value2.forEach(function(subValue, key2) {
          result.set(key2, baseClone$1(subValue, bitmask, customizer, key2, value2, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn$2 : getAllKeys$1 : isFlat ? keysIn$2 : keys$3;
      var props = isArr ? void 0 : keysFunc(value2);
      arrayEach(props || value2, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value2[key2];
        }
        assignValue(result, key2, baseClone$1(subValue, bitmask, customizer, key2, value2, stack));
      });
      return result;
    }
    var _baseClone = baseClone$1;
    function baseSlice$1(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    var _baseSlice = baseSlice$1;
    var baseGet$2 = _baseGet, baseSlice = _baseSlice;
    function parent$2(object, path) {
      return path.length < 2 ? object : baseGet$2(object, baseSlice(path, 0, -1));
    }
    var _parent = parent$2;
    var castPath$1 = _castPath, last = last_1, parent$1 = _parent, toKey$2 = _toKey;
    function baseUnset$1(object, path) {
      path = castPath$1(path, object);
      object = parent$1(object, path);
      return object == null || delete object[toKey$2(last(path))];
    }
    var _baseUnset = baseUnset$1;
    var baseGetTag = _baseGetTag, getPrototype = _getPrototype, isObjectLike$2 = isObjectLike_1;
    var objectTag$1 = "[object Object]";
    var funcProto = Function.prototype, objectProto$2 = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject$3(value2) {
      if (!isObjectLike$2(value2) || baseGetTag(value2) != objectTag$1) {
        return false;
      }
      var proto2 = getPrototype(value2);
      if (proto2 === null) {
        return true;
      }
      var Ctor = hasOwnProperty$2.call(proto2, "constructor") && proto2.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isPlainObject_1 = isPlainObject$3;
    var isPlainObject$2 = isPlainObject_1;
    function customOmitClone$1(value2) {
      return isPlainObject$2(value2) ? void 0 : value2;
    }
    var _customOmitClone = customOmitClone$1;
    var arrayMap$1 = _arrayMap, baseClone = _baseClone, baseUnset = _baseUnset, castPath = _castPath, copyObject$1 = _copyObject, customOmitClone = _customOmitClone, flatRest = _flatRest, getAllKeysIn$1 = _getAllKeysIn;
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap$1(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject$1(object, getAllKeysIn$1(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });
    var omit_1 = omit;
    const omit$1 = /* @__PURE__ */ getDefaultExportFromCjs(omit_1);
    function _createForOfIteratorHelper$e(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$e(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$e(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$e(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$e(o, minLen);
    }
    function _arrayLikeToArray$e(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$y(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$y(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$y(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$y(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var isObject$a = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var toListValue = function toListValue2(v2, title) {
      if (v2 == null || v2 == "") {
        return void 0;
      } else if (isObject$a(v2)) {
        return _objectSpread$y(_objectSpread$y({}, v2), {}, {
          title: v2.title || v2.value
          // fallback to value
        });
      } else {
        return {
          value: v2,
          title: title !== void 0 ? title : "" + v2
        };
      }
    };
    var makeCustomListValue = function makeCustomListValue2(v2) {
      var lv = toListValue(v2);
      if (isObject$a(lv)) {
        return _objectSpread$y(_objectSpread$y({}, toListValue(v2)), {}, {
          isCustom: true
        });
      } else {
        return lv;
      }
    };
    var listValuesToArray = function listValuesToArray2(listValuesObj) {
      if (Array.isArray(listValuesObj)) return listValuesObj.map(function(v3) {
        return toListValue(v3);
      });
      if (!isObject$a(listValuesObj)) return listValuesObj;
      var listValuesArr = [];
      for (var v2 in listValuesObj) {
        var title = listValuesObj[v2];
        listValuesArr.push(toListValue(v2, title));
      }
      return listValuesArr;
    };
    var getItemInListValues = function getItemInListValues2(listValues2, value2) {
      if (Array.isArray(listValues2)) {
        var values = listValues2.map(function(v2) {
          return toListValue(v2);
        });
        return values.find(function(v2) {
          return "" + v2.value === "" + value2;
        });
      } else {
        return listValues2[value2] !== void 0 ? toListValue(value2, listValues2[value2]) : void 0;
      }
    };
    var getTitleInListValues$1 = function getTitleInListValues2(listValues2, value2) {
      if (listValues2 == void 0) return value2;
      var it = getItemInListValues(listValues2, value2);
      return it !== void 0 ? it.title : value2;
    };
    var getValueInListValues = function getValueInListValues2(listValues2, value2) {
      if (listValues2 == void 0) return value2;
      var it = getItemInListValues(listValues2, value2);
      return it !== void 0 ? it.value : value2;
    };
    var mapListValues$2 = function mapListValues2(listValues2, mapFn) {
      var ret = [];
      if (Array.isArray(listValues2)) {
        var _iterator = _createForOfIteratorHelper$e(listValues2), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var v2 = _step.value;
            var lv = mapFn(toListValue(v2));
            if (lv != null) ret.push(lv);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        for (var value2 in listValues2) {
          var _lv = mapFn(toListValue(value2, listValues2[value2]));
          if (_lv != null) ret.push(_lv);
        }
      }
      return ret;
    };
    var searchListValue = function searchListValue2(search, listValues2) {
      return mapListValues$2(listValues2, function(lv) {
        return "".concat(lv.value).indexOf(search) != -1 || lv.title.indexOf(search) != -1 ? lv : null;
      }).filter(function(v2) {
        return v2 !== null;
      }).shift();
    };
    var getListValue = function getListValue2(selectedValue, listValues2) {
      return mapListValues$2(listValues2, function(lv) {
        return "" + lv.value === "" + selectedValue ? lv : null;
      }).filter(function(v2) {
        return v2 !== null;
      }).shift();
    };
    const listValues = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      getItemInListValues,
      getListValue,
      getTitleInListValues: getTitleInListValues$1,
      getValueInListValues,
      listValuesToArray,
      makeCustomListValue,
      mapListValues: mapListValues$2,
      searchListValue,
      toListValue
    }, Symbol.toStringTag, { value: "Module" }));
    var expandTreePath = function expandTreePath2(path) {
      for (var _len = arguments.length, suffix = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        suffix[_key - 1] = arguments[_key];
      }
      return path.interpose("children1").withMutations(function(list) {
        list.skip(1);
        list.push.apply(list, suffix);
        return list;
      });
    };
    var expandTreeSubpath = function expandTreeSubpath2(path) {
      for (var _len2 = arguments.length, suffix = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        suffix[_key2 - 1] = arguments[_key2];
      }
      return path.interpose("children1").withMutations(function(list) {
        list.push.apply(list, suffix);
        return list;
      });
    };
    var getItemByPath = function getItemByPath2(tree2, path) {
      var children = new Immutable.OrderedMap(_defineProperty$1({}, tree2.get("id"), tree2));
      var res = tree2;
      path.forEach(function(id2) {
        var _children, _res;
        res = (_children = children) === null || _children === void 0 ? void 0 : _children.get(id2);
        children = (_res = res) === null || _res === void 0 ? void 0 : _res.get("children1");
      });
      return res;
    };
    var getAncestorRuleGroups = function getAncestorRuleGroups2(tree2, path) {
      var parentRuleGroups = path.map(function(_id, i) {
        return path.take(i + 1);
      }).reverse().toJS().map(function(path2) {
        return {
          item: getItemByPath(tree2, path2),
          path: path2
        };
      }).filter(function(_ref) {
        var item = _ref.item;
        return (item === null || item === void 0 ? void 0 : item.get("type")) === "rule_group";
      });
      if (parentRuleGroups.length) {
        return parentRuleGroups.map(function(_ref2) {
          var item = _ref2.item, path2 = _ref2.path;
          return {
            path: path2,
            field: item.get("properties").get("field")
          };
        });
      }
      return [];
    };
    var removeIsLockedInTree = function removeIsLockedInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path) {
        var isParentLocked = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var itemPath = path.push(item.get("id"));
        var isLocked = item.getIn(["properties", "isLocked"]);
        if (isParentLocked && isLocked) {
          newTree = newTree.deleteIn(expandTreePath(itemPath, "properties", "isLocked"));
        }
        var children = item.get("children1");
        if (children) {
          children.map(function(child, _childId) {
            _processNode(child, itemPath, isLocked || isParentLocked);
          });
        }
      }
      _processNode(tree2, new Immutable.List());
      return newTree;
    };
    var fixPathsInTree = function fixPathsInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path, lev, nodeId) {
        if (!item) return;
        var currPath = item.get("path");
        var currId = item.get("id");
        var itemId = currId || nodeId || uuid$1();
        var itemPath = path.push(itemId);
        if (!currPath || !currPath.equals(itemPath)) {
          newTree = newTree.setIn(expandTreePath(itemPath, "path"), itemPath);
        }
        if (!currId) {
          newTree = newTree.setIn(expandTreePath(itemPath, "id"), itemId);
        }
        var children = item.get("children1");
        if (children) {
          if (children.constructor.name === "Map") {
            newTree = newTree.setIn(expandTreePath(itemPath, "children1"), new Immutable.OrderedMap(children));
          }
          children.map(function(child, childId) {
            _processNode(child, itemPath, lev + 1, childId);
          });
        }
      }
      _processNode(tree2, new Immutable.List(), 0);
      return newTree;
    };
    var fixEmptyGroupsInTree = function fixEmptyGroupsInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path, lev, nodeId) {
        if (!item) return false;
        var itemId = item.get("id") || nodeId;
        var itemPath = path.push(itemId);
        var children = item.get("children1");
        if (children) {
          var allChildrenGone = children.map(function(child, childId) {
            return _processNode(child, itemPath, lev + 1, childId);
          }).reduce(function(curr, v2) {
            return curr && v2;
          }, true);
          if ((children.size == 0 || allChildrenGone) && lev > 0) {
            newTree = newTree.deleteIn(expandTreePath(itemPath));
            return true;
          }
        }
        return false;
      }
      _processNode(tree2, new Immutable.List(), 0);
      return newTree;
    };
    var getFlatTree$1 = function getFlatTree2(tree2, config2) {
      var flat = [];
      var items = {};
      var cases = [];
      var visibleHeight = 0;
      var globalLeafCount = 0;
      var globalGroupCount = 0;
      var globalCountByType = {};
      function _flatizeTree(item2, path, insideCollapsed, insideLocked, insideRuleGroup, lev, atomicLev, caseId, childNo) {
        var _items$closestRuleGro, _items$closestRuleGro2, _items$closestRuleGro3;
        var isRoot = item2 === tree2;
        var type = item2.get("type");
        var collapsed = item2.get("collapsed");
        var id2 = item2.get("id");
        var children = item2.get("children1");
        var isLocked = item2.getIn(["properties", "isLocked"]);
        var childrenIds = children ? children.map(function(_child, childId) {
          return childId;
        }).valueSeq().toArray() : null;
        var isRuleGroup = type === "rule_group";
        var isRule = type === "rule";
        var isGroup = type === "group";
        var isCaseGroup = type === "case_group";
        var isAtomicRule = !insideRuleGroup && (!children || isRuleGroup);
        var hasChildren2 = (childrenIds === null || childrenIds === void 0 ? void 0 : childrenIds.length) > 0;
        var parentId = path.length ? path[path.length - 1] : null;
        var closestRuleGroupId = _toConsumableArray(path).reverse().find(function(id3) {
          return items[id3].type == "rule_group";
        });
        var field = item2.getIn(["properties", "field"]);
        var fieldConfig = field && config2 && getFieldConfig$b(config2, field);
        var canRegroup = fieldConfig ? (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.canRegroup) !== false : void 0;
        var maxNesting = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.maxNesting;
        var closestRuleGroupCanRegroup = items === null || items === void 0 || (_items$closestRuleGro = items[closestRuleGroupId]) === null || _items$closestRuleGro === void 0 ? void 0 : _items$closestRuleGro.canRegroup;
        var closestRuleGroupMaxNesting = items === null || items === void 0 || (_items$closestRuleGro2 = items[closestRuleGroupId]) === null || _items$closestRuleGro2 === void 0 ? void 0 : _items$closestRuleGro2.maxNesting;
        var closestRuleGroupLev = items === null || items === void 0 || (_items$closestRuleGro3 = items[closestRuleGroupId]) === null || _items$closestRuleGro3 === void 0 ? void 0 : _items$closestRuleGro3.lev;
        var currentCaseId = isCaseGroup ? id2 : caseId;
        if (isCaseGroup) {
          cases.push(id2);
          globalLeafCount = 0;
          globalGroupCount = 0;
          globalCountByType = {};
        }
        var caseNo = currentCaseId ? cases.indexOf(currentCaseId) : null;
        var itemsBefore = flat.length;
        var top = visibleHeight;
        var position;
        if (!isRoot) {
          position = {};
          position.caseNo = caseNo;
          position.globalNoByType = isCaseGroup ? caseNo : globalCountByType[type] || 0;
          position.indexPath = [].concat(_toConsumableArray(path.slice(1).map(function(id3) {
            return items[id3].childNo;
          })), [childNo]);
          if (isRule) {
            position.globalLeafNo = globalLeafCount;
          } else if (isGroup) {
            position.globalGroupNo = globalGroupCount;
          }
        }
        var nextAtomicLev = insideRuleGroup || isRuleGroup ? atomicLev : atomicLev + 1;
        flat.push(id2);
        items[id2] = {
          node: item2,
          index: itemsBefore,
          // index in `flat`
          id: id2,
          type,
          parent: parentId,
          children: childrenIds,
          childNo,
          caseId: currentCaseId,
          caseNo,
          closestRuleGroupId,
          closestRuleGroupLev,
          closestRuleGroupMaxNesting,
          closestRuleGroupCanRegroup,
          maxNesting,
          canRegroup,
          path: path.concat(id2),
          lev,
          // depth level (0 for root node)
          atomicLev,
          // same as lev, but rules inside rule_group retains same number
          nextAtomicLev,
          isLeaf: !children,
          // is atomic rule OR rule inside rule_group
          isAtomicRule,
          // is atomic (rule or rule_group, but not rules inside rule_group)
          isLocked: isLocked || insideLocked,
          // vertical
          top: insideCollapsed ? null : top,
          // for case
          isDefaultCase: isCaseGroup ? !children : void 0,
          atomicRulesCountInCase: isCaseGroup ? 0 : void 0,
          // object with numbers indicating # of item in tree
          position,
          // unused
          collapsed,
          _top: itemsBefore,
          parentType: parentId ? items[parentId].type : null,
          // @deprecated use isLeaf instead
          leaf: !children
          // will be added later:
          //  prev
          //  next
          //  depth  - for any group (children of rule_group are not counted, collapsed are not counted)
          //  height  - visible height
          //  bottom = (insideCollapsed ? null : top + height)
          //  _height = (itemsAfter - itemsBefore)  - real height (incl. collapsed)
        };
        var height = 0;
        var depth = 0;
        if (!insideCollapsed) {
          visibleHeight += 1;
          height += 1;
          if (hasChildren2 && !collapsed && !isRuleGroup) {
            depth += 1;
          }
          if (!isRoot && !isCaseGroup) {
            isGroup && globalGroupCount++;
            isRule && globalLeafCount++;
            globalCountByType[type] = (globalCountByType[type] || 0) + 1;
          }
        }
        if (caseId && isAtomicRule) {
          items[caseId].atomicRulesCountInCase++;
        }
        var maxChildDepth = 0;
        var sumHeight = 0;
        if (hasChildren2) {
          var childCount = 0;
          children.map(function(child, childId) {
            if (child) {
              _flatizeTree(child, path.concat(id2), insideCollapsed || collapsed, insideLocked || isLocked, insideRuleGroup || isRuleGroup, lev + 1, nextAtomicLev, currentCaseId, childCount);
              var childItem = items[childId];
              maxChildDepth = Math.max(maxChildDepth, childItem.depth || 0);
              sumHeight += childItem.height;
              childCount++;
            }
          });
        }
        height += sumHeight;
        depth += maxChildDepth;
        var itemsAfter = flat.length;
        var _height = itemsAfter - itemsBefore;
        var bottom = insideCollapsed ? null : top + height;
        Object.assign(items[id2], {
          depth: children ? depth : void 0,
          _height,
          height,
          bottom
        });
      }
      _flatizeTree(tree2, [], false, false, false, 0, 0, null, null);
      for (var i = 0; i < flat.length; i++) {
        var prevId = i > 0 ? flat[i - 1] : null;
        var nextId = i < flat.length - 1 ? flat[i + 1] : null;
        var item = items[flat[i]];
        item.prev = prevId;
        item.next = nextId;
      }
      return {
        flat,
        items,
        cases
      };
    };
    var getTotalReordableNodesCountInTree$3 = function getTotalReordableNodesCountInTree2(tree2) {
      if (!tree2) return -1;
      var cnt = 0;
      function _processNode(item, path, lev) {
        var id2, children, type;
        if (typeof item.get === "function") {
          id2 = item.get("id");
          children = item.get("children1");
          type = item.get("type");
        } else {
          id2 = item.id;
          children = item.children1;
          type = item.type;
        }
        cnt++;
        if (type == "rule_group" && lev > 0) ;
        else if (children) {
          children.map(function(child, _childId) {
            if (child) {
              _processNode(child, path.concat(id2), lev + 1);
            }
          });
        }
      }
      _processNode(tree2, [], 0);
      return cnt - 1;
    };
    var getTotalRulesCountInTree$3 = function getTotalRulesCountInTree2(tree2) {
      if (!tree2) return -1;
      var cnt = 0;
      function _processNode(item, path, lev) {
        var id2, children, type;
        if (typeof item.get === "function") {
          id2 = item.get("id");
          children = item.get("children1");
          type = item.get("type");
        } else {
          id2 = item.id;
          children = item.children1;
          type = item.type;
        }
        if (type == "rule" || type == "rule_group" && lev > 0) {
          cnt++;
        } else if (children) {
          children.map(function(child, _childId) {
            if (child) {
              _processNode(child, path.concat(id2), lev + 1);
            }
          });
        }
      }
      _processNode(tree2, [], 0);
      return cnt;
    };
    var getLightTree = function getLightTree2(tree2) {
      var deleteExcess = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var children1AsArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var newTree = tree2;
      function _processNode(item, itemId) {
        if (deleteExcess && item.path) {
          delete item.path;
        }
        if (deleteExcess && !children1AsArray && itemId) {
          delete item.id;
        }
        var properties = item.properties;
        if (properties) {
          if (properties.operatorOptions == null) {
            delete properties.operatorOptions;
          }
        }
        var children = item.children1;
        if (children) {
          for (var id2 in children) {
            if (children[id2]) {
              _processNode(children[id2], id2);
            }
          }
          if (children1AsArray) {
            item.children1 = Object.values(children);
          }
        }
      }
      _processNode(tree2, null);
      return newTree;
    };
    var getSwitchValues = function getSwitchValues2(tree2) {
      var vals = [];
      var children = tree2.get("children1");
      if (children) {
        children.map(function(child) {
          var value2 = child.getIn(["properties", "value"]);
          var caseValue;
          if (value2 && value2.size == 1) {
            caseValue = value2.get(0);
            if (Array.isArray(caseValue) && caseValue.length == 0) {
              caseValue = null;
            }
          } else {
            caseValue = null;
          }
          vals = [].concat(_toConsumableArray(vals), [caseValue]);
        });
      }
      return vals;
    };
    var isEmptyTree = function isEmptyTree2(tree2) {
      return !tree2.get("children1") || tree2.get("children1").size == 0;
    };
    var hasChildren = function hasChildren2(tree2, path) {
      return tree2.getIn(expandTreePath(path, "children1")).size > 0;
    };
    var _fixImmutableValue$1 = function _fixImmutableValue2(v2) {
      if (v2 !== null && v2 !== void 0 && v2.toJS) {
        var _v$toJS;
        var vJs = v2 === null || v2 === void 0 || (_v$toJS = v2.toJS) === null || _v$toJS === void 0 ? void 0 : _v$toJS.call(v2);
        if (vJs !== null && vJs !== void 0 && vJs.func) {
          return v2.toOrderedMap();
        } else {
          return vJs;
        }
      } else {
        return v2;
      }
    };
    const treeUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      _fixImmutableValue: _fixImmutableValue$1,
      expandTreePath,
      expandTreeSubpath,
      fixEmptyGroupsInTree,
      fixPathsInTree,
      getAncestorRuleGroups,
      getFlatTree: getFlatTree$1,
      getItemByPath,
      getLightTree,
      getSwitchValues,
      getTotalReordableNodesCountInTree: getTotalReordableNodesCountInTree$3,
      getTotalRulesCountInTree: getTotalRulesCountInTree$3,
      hasChildren,
      immutableToJs: applyToJS,
      isEmptyTree,
      isImmutable: isImmutable$1,
      jsToImmutable,
      removeIsLockedInTree,
      toImmutableList
    }, Symbol.toStringTag, { value: "Module" }));
    var getTree$1 = function getTree2(immutableTree) {
      var light = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var children1AsArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (!immutableTree) return void 0;
      var tree2 = immutableTree;
      tree2 = tree2.toJS();
      tree2 = getLightTree(tree2, light, children1AsArray);
      return tree2;
    };
    var loadTree$1 = function loadTree2(serTree) {
      if (isImmutableTree(serTree)) {
        return serTree;
      } else if (isTree(serTree)) {
        return fixPathsInTree(jsToImmutable(serTree));
      } else if (typeof serTree == "string" && serTree.startsWith('["~#iM"')) {
        throw new Error("You are trying to load query in obsolete serialization format (Immutable string) which is not supported in versions starting from 2.1.17");
      } else if (typeof serTree === "string") {
        return fixPathsInTree(jsToImmutable(JSON.parse(serTree)));
      } else throw new Error("Can't load tree!");
    };
    var isImmutableTree = function isImmutableTree2(tree2) {
      return Map$5.isMap(tree2);
    };
    var isTree = function isTree2(tree2) {
      return _typeof$1(tree2) == "object" && (tree2.type == "group" || tree2.type == "switch_group");
    };
    function jsToImmutable(tree2) {
      var imm = fromJS(tree2, function(key, value2, path) {
        var isFuncArg = path && path.length > 3 && path[path.length - 1] === "value" && path[path.length - 3] === "args";
        var isRuleValue = path && path.length > 3 && path[path.length - 1] === "value" && path[path.length - 2] === "properties";
        var outValue;
        if (key == "properties") {
          outValue = value2.toOrderedMap();
          for (var i = 0; i < 2; i++) {
            var _outValue$get, _outValue$get$get, _outValue$get2;
            if (((_outValue$get = outValue.get("value")) === null || _outValue$get === void 0 || (_outValue$get$get = (_outValue$get2 = _outValue$get).get) === null || _outValue$get$get === void 0 ? void 0 : _outValue$get$get.call(_outValue$get2, i)) === null) {
              outValue = outValue.setIn(["value", i], void 0);
            }
          }
        } else if (isFuncArg) {
          outValue = _fixImmutableValue$1(value2);
        } else if ((path ? isRuleValue : key == "value") && Immutable.Iterable.isIndexed(value2)) {
          outValue = value2.map(_fixImmutableValue$1).toList();
        } else if (key == "asyncListValues") {
          outValue = value2.toJS();
        } else if (key == "children1" && Immutable.Iterable.isIndexed(value2)) {
          outValue = new Immutable.OrderedMap(value2.map(function(child) {
            return [(child === null || child === void 0 ? void 0 : child.get("id")) || uuid$1(), child];
          }));
        } else {
          outValue = Immutable.Iterable.isIndexed(value2) ? value2.toList() : value2.toOrderedMap();
        }
        return outValue;
      });
      return imm;
    }
    function _toArray(arr) {
      return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$f(arr) || _nonIterableRest();
    }
    //! moment.js
    //! version : 2.30.1
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    var hookCallback;
    function hooks() {
      return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray$3(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
    }
    function isObject$9(input) {
      return input != null && Object.prototype.toString.call(input) === "[object Object]";
    }
    function hasOwnProp(a, b2) {
      return Object.prototype.hasOwnProperty.call(a, b2);
    }
    function isObjectEmpty(obj) {
      if (Object.getOwnPropertyNames) {
        return Object.getOwnPropertyNames(obj).length === 0;
      } else {
        var k2;
        for (k2 in obj) {
          if (hasOwnProp(obj, k2)) {
            return false;
          }
        }
        return true;
      }
    }
    function isUndefined(input) {
      return input === void 0;
    }
    function isNumber(input) {
      return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
    }
    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
    }
    function map(arr, fn) {
      var res = [], i, arrLen = arr.length;
      for (i = 0; i < arrLen; ++i) {
        res.push(fn(arr[i], i));
      }
      return res;
    }
    function extend(a, b2) {
      for (var i in b2) {
        if (hasOwnProp(b2, i)) {
          a[i] = b2[i];
        }
      }
      if (hasOwnProp(b2, "toString")) {
        a.toString = b2.toString;
      }
      if (hasOwnProp(b2, "valueOf")) {
        a.valueOf = b2.valueOf;
      }
      return a;
    }
    function createUTC(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, true).utc();
    }
    function defaultParsingFlags() {
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidEra: null,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false,
        parsedDateParts: [],
        era: null,
        meridiem: null,
        rfc2822: false,
        weekdayMismatch: false
      };
    }
    function getParsingFlags(m2) {
      if (m2._pf == null) {
        m2._pf = defaultParsingFlags();
      }
      return m2._pf;
    }
    var some;
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function(fun) {
        var t2 = Object(this), len = t2.length >>> 0, i;
        for (i = 0; i < len; i++) {
          if (i in t2 && fun.call(this, t2[i], i, t2)) {
            return true;
          }
        }
        return false;
      };
    }
    function isValid(m2) {
      var flags = null, parsedParts = false, isNowValid = m2._d && !isNaN(m2._d.getTime());
      if (isNowValid) {
        flags = getParsingFlags(m2);
        parsedParts = some.call(flags.parsedDateParts, function(i) {
          return i != null;
        });
        isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
        if (m2._strict) {
          isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
        }
      }
      if (Object.isFrozen == null || !Object.isFrozen(m2)) {
        m2._isValid = isNowValid;
      } else {
        return isNowValid;
      }
      return m2._isValid;
    }
    function createInvalid(flags) {
      var m2 = createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m2), flags);
      } else {
        getParsingFlags(m2).userInvalidated = true;
      }
      return m2;
    }
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to2, from2) {
      var i, prop, val, momentPropertiesLen = momentProperties.length;
      if (!isUndefined(from2._isAMomentObject)) {
        to2._isAMomentObject = from2._isAMomentObject;
      }
      if (!isUndefined(from2._i)) {
        to2._i = from2._i;
      }
      if (!isUndefined(from2._f)) {
        to2._f = from2._f;
      }
      if (!isUndefined(from2._l)) {
        to2._l = from2._l;
      }
      if (!isUndefined(from2._strict)) {
        to2._strict = from2._strict;
      }
      if (!isUndefined(from2._tzm)) {
        to2._tzm = from2._tzm;
      }
      if (!isUndefined(from2._isUTC)) {
        to2._isUTC = from2._isUTC;
      }
      if (!isUndefined(from2._offset)) {
        to2._offset = from2._offset;
      }
      if (!isUndefined(from2._pf)) {
        to2._pf = getParsingFlags(from2);
      }
      if (!isUndefined(from2._locale)) {
        to2._locale = from2._locale;
      }
      if (momentPropertiesLen > 0) {
        for (i = 0; i < momentPropertiesLen; i++) {
          prop = momentProperties[i];
          val = from2[prop];
          if (!isUndefined(val)) {
            to2[prop] = val;
          }
        }
      }
      return to2;
    }
    function Moment(config2) {
      copyConfig(this, config2);
      this._d = new Date(config2._d != null ? config2._d.getTime() : NaN);
      if (!this.isValid()) {
        this._d = /* @__PURE__ */ new Date(NaN);
      }
      if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
      if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
        console.warn("Deprecation warning: " + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend(function() {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
          var args = [], arg, i, key, argLen = arguments.length;
          for (i = 0; i < argLen; i++) {
            arg = "";
            if (typeof arguments[i] === "object") {
              arg += "\n[" + i + "] ";
              for (key in arguments[0]) {
                if (hasOwnProp(arguments[0], key)) {
                  arg += key + ": " + arguments[0][key] + ", ";
                }
              }
              arg = arg.slice(0, -2);
            } else {
              arg = arguments[i];
            }
            args.push(arg);
          }
          warn(
            msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
          );
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
      }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction$1(input) {
      return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
    }
    function set(config2) {
      var prop, i;
      for (i in config2) {
        if (hasOwnProp(config2, i)) {
          prop = config2[i];
          if (isFunction$1(prop)) {
            this[i] = prop;
          } else {
            this["_" + i] = prop;
          }
        }
      }
      this._config = config2;
      this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
      );
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig), prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject$9(parentConfig[prop]) && isObject$9(childConfig[prop])) {
            res[prop] = {};
            extend(res[prop], parentConfig[prop]);
            extend(res[prop], childConfig[prop]);
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop];
          } else {
            delete res[prop];
          }
        }
      }
      for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject$9(parentConfig[prop])) {
          res[prop] = extend({}, res[prop]);
        }
      }
      return res;
    }
    function Locale(config2) {
      if (config2 != null) {
        this.set(config2);
      }
    }
    var keys$2;
    if (Object.keys) {
      keys$2 = Object.keys;
    } else {
      keys$2 = function(obj) {
        var i, res = [];
        for (i in obj) {
          if (hasOwnProp(obj, i)) {
            res.push(i);
          }
        }
        return res;
      };
    }
    var defaultCalendar = {
      sameDay: "[Today at] LT",
      nextDay: "[Tomorrow at] LT",
      nextWeek: "dddd [at] LT",
      lastDay: "[Yesterday at] LT",
      lastWeek: "[Last] dddd [at] LT",
      sameElse: "L"
    };
    function calendar(key, mom, now2) {
      var output = this._calendar[key] || this._calendar["sameElse"];
      return isFunction$1(output) ? output.call(mom, now2) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
      var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
      return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
    function addFormatToken(token2, padded, ordinal2, callback) {
      var func = callback;
      if (typeof callback === "string") {
        func = function() {
          return this[callback]();
        };
      }
      if (token2) {
        formatTokenFunctions[token2] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function() {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal2) {
        formatTokenFunctions[ordinal2] = function() {
          return this.localeData().ordinal(
            func.apply(this, arguments),
            token2
          );
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, "");
      }
      return input.replace(/\\/g, "");
    }
    function makeFormatFunction(format2) {
      var array = format2.match(formattingTokens), i, length;
      for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]];
        } else {
          array[i] = removeFormattingTokens(array[i]);
        }
      }
      return function(mom) {
        var output = "", i2;
        for (i2 = 0; i2 < length; i2++) {
          output += isFunction$1(array[i2]) ? array[i2].call(mom, format2) : array[i2];
        }
        return output;
      };
    }
    function formatMoment(m2, format2) {
      if (!m2.isValid()) {
        return m2.localeData().invalidDate();
      }
      format2 = expandFormat(format2, m2.localeData());
      formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
      return formatFunctions[format2](m2);
    }
    function expandFormat(format2, locale2) {
      var i = 5;
      function replaceLongDateFormatTokens(input) {
        return locale2.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format2)) {
        format2 = format2.replace(
          localFormattingTokens,
          replaceLongDateFormatTokens
        );
        localFormattingTokens.lastIndex = 0;
        i -= 1;
      }
      return format2;
    }
    var defaultLongDateFormat = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    function longDateFormat(key) {
      var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format2 || !formatUpper) {
        return format2;
      }
      this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
        if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
          return tok.slice(1);
        }
        return tok;
      }).join("");
      return this._longDateFormat[key];
    }
    var defaultInvalidDate = "Invalid date";
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace("%d", number);
    }
    var defaultRelativeTime = {
      future: "in %s",
      past: "%s ago",
      s: "a few seconds",
      ss: "%d seconds",
      m: "a minute",
      mm: "%d minutes",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      w: "a week",
      ww: "%d weeks",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return isFunction$1(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff2, output) {
      var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
      return isFunction$1(format2) ? format2(output) : format2.replace(/%s/i, output);
    }
    var aliases = {
      D: "date",
      dates: "date",
      date: "date",
      d: "day",
      days: "day",
      day: "day",
      e: "weekday",
      weekdays: "weekday",
      weekday: "weekday",
      E: "isoWeekday",
      isoweekdays: "isoWeekday",
      isoweekday: "isoWeekday",
      DDD: "dayOfYear",
      dayofyears: "dayOfYear",
      dayofyear: "dayOfYear",
      h: "hour",
      hours: "hour",
      hour: "hour",
      ms: "millisecond",
      milliseconds: "millisecond",
      millisecond: "millisecond",
      m: "minute",
      minutes: "minute",
      minute: "minute",
      M: "month",
      months: "month",
      month: "month",
      Q: "quarter",
      quarters: "quarter",
      quarter: "quarter",
      s: "second",
      seconds: "second",
      second: "second",
      gg: "weekYear",
      weekyears: "weekYear",
      weekyear: "weekYear",
      GG: "isoWeekYear",
      isoweekyears: "isoWeekYear",
      isoweekyear: "isoWeekYear",
      w: "week",
      weeks: "week",
      week: "week",
      W: "isoWeek",
      isoweeks: "isoWeek",
      isoweek: "isoWeek",
      y: "year",
      years: "year",
      year: "year"
    };
    function normalizeUnits(units) {
      return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {}, normalizedProp, prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    var priorities = {
      date: 9,
      day: 11,
      weekday: 11,
      isoWeekday: 11,
      dayOfYear: 4,
      hour: 13,
      millisecond: 16,
      minute: 14,
      month: 8,
      quarter: 7,
      second: 15,
      weekYear: 1,
      isoWeekYear: 1,
      week: 5,
      isoWeek: 5,
      year: 1
    };
    function getPrioritizedUnits(unitsObj) {
      var units = [], u2;
      for (u2 in unitsObj) {
        if (hasOwnProp(unitsObj, u2)) {
          units.push({ unit: u2, priority: priorities[u2] });
        }
      }
      units.sort(function(a, b2) {
        return a.priority - b2.priority;
      });
      return units;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, match1to2NoLeadingZero = /^[1-9]\d?/, match1to2HasZero = /^([1-9]\d|\d)/, regexes;
    regexes = {};
    function addRegexToken(token2, regex, strictRegex) {
      regexes[token2] = isFunction$1(regex) ? regex : function(isStrict, localeData2) {
        return isStrict && strictRegex ? strictRegex : regex;
      };
    }
    function getParseRegexForToken(token2, config2) {
      if (!hasOwnProp(regexes, token2)) {
        return new RegExp(unescapeFormat(token2));
      }
      return regexes[token2](config2._strict, config2._locale);
    }
    function unescapeFormat(s) {
      return regexEscape$1(
        s.replace("\\", "").replace(
          /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
          function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
          }
        )
      );
    }
    function regexEscape$1(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    function absFloor(number) {
      if (number < 0) {
        return Math.ceil(number) || 0;
      } else {
        return Math.floor(number);
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion, value2 = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value2 = absFloor(coercedNumber);
      }
      return value2;
    }
    var tokens = {};
    function addParseToken(token2, callback) {
      var i, func = callback, tokenLen;
      if (typeof token2 === "string") {
        token2 = [token2];
      }
      if (isNumber(callback)) {
        func = function(input, array) {
          array[callback] = toInt(input);
        };
      }
      tokenLen = token2.length;
      for (i = 0; i < tokenLen; i++) {
        tokens[token2[i]] = func;
      }
    }
    function addWeekParseToken(token2, callback) {
      addParseToken(token2, function(input, array, config2, token3) {
        config2._w = config2._w || {};
        callback(input, config2._w, config2, token3);
      });
    }
    function addTimeToArrayFromToken(token2, input, config2) {
      if (input != null && hasOwnProp(tokens, token2)) {
        tokens[token2](input, config2._a, config2, token2);
      }
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    addFormatToken("Y", 0, 0, function() {
      var y2 = this.year();
      return y2 <= 9999 ? zeroFill(y2, 4) : "+" + y2;
    });
    addFormatToken(0, ["YY", 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ["YYYY", 4], 0, "year");
    addFormatToken(0, ["YYYYY", 5], 0, "year");
    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken(["YYYYY", "YYYYYY"], YEAR);
    addParseToken("YYYY", function(input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
      array[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }
    hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    var getSetYear = makeGetSet("FullYear", true);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    function makeGetSet(unit, keepTime) {
      return function(value2) {
        if (value2 != null) {
          set$1(this, unit, value2);
          hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get$3(this, unit);
        }
      };
    }
    function get$3(mom, unit) {
      if (!mom.isValid()) {
        return NaN;
      }
      var d2 = mom._d, isUTC = mom._isUTC;
      switch (unit) {
        case "Milliseconds":
          return isUTC ? d2.getUTCMilliseconds() : d2.getMilliseconds();
        case "Seconds":
          return isUTC ? d2.getUTCSeconds() : d2.getSeconds();
        case "Minutes":
          return isUTC ? d2.getUTCMinutes() : d2.getMinutes();
        case "Hours":
          return isUTC ? d2.getUTCHours() : d2.getHours();
        case "Date":
          return isUTC ? d2.getUTCDate() : d2.getDate();
        case "Day":
          return isUTC ? d2.getUTCDay() : d2.getDay();
        case "Month":
          return isUTC ? d2.getUTCMonth() : d2.getMonth();
        case "FullYear":
          return isUTC ? d2.getUTCFullYear() : d2.getFullYear();
        default:
          return NaN;
      }
    }
    function set$1(mom, unit, value2) {
      var d2, isUTC, year, month, date;
      if (!mom.isValid() || isNaN(value2)) {
        return;
      }
      d2 = mom._d;
      isUTC = mom._isUTC;
      switch (unit) {
        case "Milliseconds":
          return void (isUTC ? d2.setUTCMilliseconds(value2) : d2.setMilliseconds(value2));
        case "Seconds":
          return void (isUTC ? d2.setUTCSeconds(value2) : d2.setSeconds(value2));
        case "Minutes":
          return void (isUTC ? d2.setUTCMinutes(value2) : d2.setMinutes(value2));
        case "Hours":
          return void (isUTC ? d2.setUTCHours(value2) : d2.setHours(value2));
        case "Date":
          return void (isUTC ? d2.setUTCDate(value2) : d2.setDate(value2));
        case "FullYear":
          break;
        default:
          return;
      }
      year = value2;
      month = mom.month();
      date = mom.date();
      date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
      void (isUTC ? d2.setUTCFullYear(year, month, date) : d2.setFullYear(year, month, date));
    }
    function stringGet(units) {
      units = normalizeUnits(units);
      if (isFunction$1(this[units])) {
        return this[units]();
      }
      return this;
    }
    function stringSet(units, value2) {
      if (typeof units === "object") {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
        for (i = 0; i < prioritizedLen; i++) {
          this[prioritized[i].unit](units[prioritized[i].unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction$1(this[units])) {
          return this[units](value2);
        }
      }
      return this;
    }
    function mod(n2, x2) {
      return (n2 % x2 + x2) % x2;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(o) {
        var i;
        for (i = 0; i < this.length; ++i) {
          if (this[i] === o) {
            return i;
          }
        }
        return -1;
      };
    }
    function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
        return NaN;
      }
      var modMonth = mod(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    addFormatToken("M", ["MM", 2], "Mo", function() {
      return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken("MMMM", 0, 0, function(format2) {
      return this.localeData().months(this, format2);
    });
    addRegexToken("M", match1to2, match1to2NoLeadingZero);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(["M", "MM"], function(input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(["MMM", "MMMM"], function(input, array, config2, token2) {
      var month = config2._locale.monthsParse(input, token2, config2._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config2).invalidMonth = input;
      }
    });
    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
      "_"
    ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m2, format2) {
      if (!m2) {
        return isArray$3(this._months) ? this._months : this._months["standalone"];
      }
      return isArray$3(this._months) ? this._months[m2.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m2.month()];
    }
    function localeMonthsShort(m2, format2) {
      if (!m2) {
        return isArray$3(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
      }
      return isArray$3(this._monthsShort) ? this._monthsShort[m2.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m2.month()];
    }
    function handleStrictParse(monthName, format2, strict) {
      var i, ii2, mom, llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
          mom = createUTC([2e3, i]);
          this._shortMonthsParse[i] = this.monthsShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "MMM") {
          ii2 = indexOf.call(this._shortMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._longMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      } else {
        if (format2 === "MMM") {
          ii2 = indexOf.call(this._shortMonthsParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._longMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._longMonthsParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._shortMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      }
    }
    function localeMonthsParse(monthName, format2, strict) {
      var i, mom, regex;
      if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format2, strict);
      }
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }
      for (i = 0; i < 12; i++) {
        mom = createUTC([2e3, i]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp(
            "^" + this.months(mom, "").replace(".", "") + "$",
            "i"
          );
          this._shortMonthsParse[i] = new RegExp(
            "^" + this.monthsShort(mom, "").replace(".", "") + "$",
            "i"
          );
        }
        if (!strict && !this._monthsParse[i]) {
          regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
          this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
          return i;
        } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
          return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i;
        }
      }
    }
    function setMonth(mom, value2) {
      if (!mom.isValid()) {
        return mom;
      }
      if (typeof value2 === "string") {
        if (/^\d+$/.test(value2)) {
          value2 = toInt(value2);
        } else {
          value2 = mom.localeData().monthsParse(value2);
          if (!isNumber(value2)) {
            return mom;
          }
        }
      }
      var month = value2, date = mom.date();
      date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
      void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
      return mom;
    }
    function getSetMonth(value2) {
      if (value2 != null) {
        setMonth(this, value2);
        hooks.updateOffset(this, true);
        return this;
      } else {
        return get$3(this, "Month");
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsShortStrictRegex;
        } else {
          return this._monthsShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsShortRegex")) {
          this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
      }
    }
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsStrictRegex;
        } else {
          return this._monthsRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsRegex")) {
          this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a, b2) {
        return b2.length - a.length;
      }
      var shortPieces = [], longPieces = [], mixedPieces = [], i, mom, shortP, longP;
      for (i = 0; i < 12; i++) {
        mom = createUTC([2e3, i]);
        shortP = regexEscape$1(this.monthsShort(mom, ""));
        longP = regexEscape$1(this.months(mom, ""));
        shortPieces.push(shortP);
        longPieces.push(longP);
        mixedPieces.push(longP);
        mixedPieces.push(shortP);
      }
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._monthsShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
    }
    function createDate(y2, m2, d2, h2, M2, s, ms) {
      var date;
      if (y2 < 100 && y2 >= 0) {
        date = new Date(y2 + 400, m2, d2, h2, M2, s, ms);
        if (isFinite(date.getFullYear())) {
          date.setFullYear(y2);
        }
      } else {
        date = new Date(y2, m2, d2, h2, M2, s, ms);
      }
      return date;
    }
    function createUTCDate(y2) {
      var date, args;
      if (y2 < 100 && y2 >= 0) {
        args = Array.prototype.slice.call(arguments);
        args[0] = y2 + 400;
        date = new Date(Date.UTC.apply(null, args));
        if (isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y2);
        }
      } else {
        date = new Date(Date.UTC.apply(null, arguments));
      }
      return date;
    }
    function firstWeekOffset(year, dow, doy) {
      var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
      } else {
        resYear = year;
        resDayOfYear = dayOfYear;
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      };
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
      } else {
        resYear = mom.year();
        resWeek = week;
      }
      return {
        week: resWeek,
        year: resYear
      };
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken("w", ["ww", 2], "wo", "week");
    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
    addRegexToken("w", match1to2, match1to2NoLeadingZero);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2, match1to2NoLeadingZero);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken(
      ["w", "ww", "W", "WW"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      }
    );
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6
      // The week that contains Jan 6th is the first week of the year.
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken("ddd", 0, 0, function(format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken("dddd", 0, 0, function(format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config2, token2) {
      var weekday = config2._locale.weekdaysParse(input, token2, config2._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config2).invalidWeekday = input;
      }
    });
    addWeekParseToken(["d", "e", "E"], function(input, week, config2, token2) {
      week[token2] = toInt(input);
    });
    function parseWeekday(input, locale2) {
      if (typeof input !== "string") {
        return input;
      }
      if (!isNaN(input)) {
        return parseInt(input, 10);
      }
      input = locale2.weekdaysParse(input);
      if (typeof input === "number") {
        return input;
      }
      return null;
    }
    function parseIsoWeekday(input, locale2) {
      if (typeof input === "string") {
        return locale2.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
    }
    function shiftWeekdays(ws, n2) {
      return ws.slice(n2, 7).concat(ws.slice(0, n2));
    }
    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m2, format2) {
      var weekdays = isArray$3(this._weekdays) ? this._weekdays : this._weekdays[m2 && m2 !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
      return m2 === true ? shiftWeekdays(weekdays, this._week.dow) : m2 ? weekdays[m2.day()] : weekdays;
    }
    function localeWeekdaysShort(m2) {
      return m2 === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m2 ? this._weekdaysShort[m2.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m2) {
      return m2 === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m2 ? this._weekdaysMin[m2.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format2, strict) {
      var i, ii2, mom, llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];
        for (i = 0; i < 7; ++i) {
          mom = createUTC([2e3, 1]).day(i);
          this._minWeekdaysParse[i] = this.weekdaysMin(
            mom,
            ""
          ).toLocaleLowerCase();
          this._shortWeekdaysParse[i] = this.weekdaysShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "dddd") {
          ii2 = indexOf.call(this._weekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else if (format2 === "ddd") {
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      } else {
        if (format2 === "dddd") {
          ii2 = indexOf.call(this._weekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else if (format2 === "ddd") {
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._weekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._weekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      }
    }
    function localeWeekdaysParse(weekdayName, format2, strict) {
      var i, mom, regex;
      if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format2, strict);
      }
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
      }
      for (i = 0; i < 7; i++) {
        mom = createUTC([2e3, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
          this._fullWeekdaysParse[i] = new RegExp(
            "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._shortWeekdaysParse[i] = new RegExp(
            "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._minWeekdaysParse[i] = new RegExp(
            "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
        }
        if (!this._weekdaysParse[i]) {
          regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
          this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
          return i;
        }
      }
    }
    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var day = get$3(this, "Day");
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, "d");
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, "d");
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
        return this.day() || 7;
      }
    }
    function weekdaysRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysStrictRegex;
        } else {
          return this._weekdaysRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
      }
    }
    function weekdaysShortRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysShortStrictRegex;
        } else {
          return this._weekdaysShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysShortRegex")) {
          this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
    }
    function weekdaysMinRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysMinStrictRegex;
        } else {
          return this._weekdaysMinRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysMinRegex")) {
          this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
    }
    function computeWeekdaysParse() {
      function cmpLenRev(a, b2) {
        return b2.length - a.length;
      }
      var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
      for (i = 0; i < 7; i++) {
        mom = createUTC([2e3, 1]).day(i);
        minp = regexEscape$1(this.weekdaysMin(mom, ""));
        shortp = regexEscape$1(this.weekdaysShort(mom, ""));
        longp = regexEscape$1(this.weekdays(mom, ""));
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
      }
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;
      this._weekdaysStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._weekdaysShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
      this._weekdaysMinStrictRegex = new RegExp(
        "^(" + minPieces.join("|") + ")",
        "i"
      );
    }
    function hFormat() {
      return this.hours() % 12 || 12;
    }
    function kFormat() {
      return this.hours() || 24;
    }
    addFormatToken("H", ["HH", 2], 0, "hour");
    addFormatToken("h", ["hh", 2], 0, hFormat);
    addFormatToken("k", ["kk", 2], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token2, lowercase) {
      addFormatToken(token2, 0, 0, function() {
        return this.localeData().meridiem(
          this.hours(),
          this.minutes(),
          lowercase
        );
      });
    }
    meridiem("a", true);
    meridiem("A", false);
    function matchMeridiem(isStrict, locale2) {
      return locale2._meridiemParse;
    }
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2, match1to2HasZero);
    addRegexToken("h", match1to2, match1to2NoLeadingZero);
    addRegexToken("k", match1to2, match1to2NoLeadingZero);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken(["H", "HH"], HOUR);
    addParseToken(["k", "kk"], function(input, array, config2) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(["a", "A"], function(input, array, config2) {
      config2._isPm = config2._locale.isPM(input);
      config2._meridiem = input;
    });
    addParseToken(["h", "hh"], function(input, array, config2) {
      array[HOUR] = toInt(input);
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config2) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config2) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
      return (input + "").toLowerCase().charAt(0) === "p";
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
    function localeMeridiem(hours2, minutes2, isLower) {
      if (hours2 > 11) {
        return isLower ? "pm" : "PM";
      } else {
        return isLower ? "am" : "AM";
      }
    }
    var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {}, localeFamilies = {}, globalLocale;
    function commonPrefix(arr1, arr2) {
      var i, minl = Math.min(arr1.length, arr2.length);
      for (i = 0; i < minl; i += 1) {
        if (arr1[i] !== arr2[i]) {
          return i;
        }
      }
      return minl;
    }
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace("_", "-") : key;
    }
    function chooseLocale(names) {
      var i = 0, j, next, locale2, split;
      while (i < names.length) {
        split = normalizeLocale(names[i]).split("-");
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split("-") : null;
        while (j > 0) {
          locale2 = loadLocale(split.slice(0, j).join("-"));
          if (locale2) {
            return locale2;
          }
          if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
            break;
          }
          j--;
        }
        i++;
      }
      return globalLocale;
    }
    function isLocaleNameSane(name) {
      return !!(name && name.match("^[^/\\\\]*$"));
    }
    function loadLocale(name) {
      var oldLocale = null, aliasedRequire;
      if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
        try {
          oldLocale = globalLocale._abbr;
          aliasedRequire = require;
          aliasedRequire("./locale/" + name);
          getSetGlobalLocale(oldLocale);
        } catch (e2) {
          locales[name] = null;
        }
      }
      return locales[name];
    }
    function getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (isUndefined(values)) {
          data = getLocale(key);
        } else {
          data = defineLocale(key, values);
        }
        if (data) {
          globalLocale = data;
        } else {
          if (typeof console !== "undefined" && console.warn) {
            console.warn(
              "Locale " + key + " not found. Did you forget to load it?"
            );
          }
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, config2) {
      if (config2 !== null) {
        var locale2, parentConfig = baseConfig;
        config2.abbr = name;
        if (locales[name] != null) {
          deprecateSimple(
            "defineLocaleOverride",
            "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
          );
          parentConfig = locales[name]._config;
        } else if (config2.parentLocale != null) {
          if (locales[config2.parentLocale] != null) {
            parentConfig = locales[config2.parentLocale]._config;
          } else {
            locale2 = loadLocale(config2.parentLocale);
            if (locale2 != null) {
              parentConfig = locale2._config;
            } else {
              if (!localeFamilies[config2.parentLocale]) {
                localeFamilies[config2.parentLocale] = [];
              }
              localeFamilies[config2.parentLocale].push({
                name,
                config: config2
              });
              return null;
            }
          }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config2));
        if (localeFamilies[name]) {
          localeFamilies[name].forEach(function(x2) {
            defineLocale(x2.name, x2.config);
          });
        }
        getSetGlobalLocale(name);
        return locales[name];
      } else {
        delete locales[name];
        return null;
      }
    }
    function updateLocale(name, config2) {
      if (config2 != null) {
        var locale2, tmpLocale, parentConfig = baseConfig;
        if (locales[name] != null && locales[name].parentLocale != null) {
          locales[name].set(mergeConfigs(locales[name]._config, config2));
        } else {
          tmpLocale = loadLocale(name);
          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }
          config2 = mergeConfigs(parentConfig, config2);
          if (tmpLocale == null) {
            config2.abbr = name;
          }
          locale2 = new Locale(config2);
          locale2.parentLocale = locales[name];
          locales[name] = locale2;
        }
        getSetGlobalLocale(name);
      } else {
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale;
            if (name === getSetGlobalLocale()) {
              getSetGlobalLocale(name);
            }
          } else if (locales[name] != null) {
            delete locales[name];
          }
        }
      }
      return locales[name];
    }
    function getLocale(key) {
      var locale2;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray$3(key)) {
        locale2 = loadLocale(key);
        if (locale2) {
          return locale2;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    function listLocales() {
      return keys$2(locales);
    }
    function checkOverflow(m2) {
      var overflow, a = m2._a;
      if (a && getParsingFlags(m2).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m2)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        if (getParsingFlags(m2)._overflowWeeks && overflow === -1) {
          overflow = WEEK;
        }
        if (getParsingFlags(m2)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY;
        }
        getParsingFlags(m2).overflow = overflow;
      }
      return m2;
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
      ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
      ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
      ["YYYY-DDD", /\d{4}-\d{3}/],
      ["YYYY-MM", /\d{4}-\d\d/, false],
      ["YYYYYYMMDD", /[+-]\d{10}/],
      ["YYYYMMDD", /\d{8}/],
      ["GGGG[W]WWE", /\d{4}W\d{3}/],
      ["GGGG[W]WW", /\d{4}W\d{2}/, false],
      ["YYYYDDD", /\d{7}/],
      ["YYYYMM", /\d{6}/, false],
      ["YYYY", /\d{4}/, false]
    ], isoTimes = [
      ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
      ["HH:mm:ss", /\d\d:\d\d:\d\d/],
      ["HH:mm", /\d\d:\d\d/],
      ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
      ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
      ["HHmmss", /\d\d\d\d\d\d/],
      ["HHmm", /\d\d\d\d/],
      ["HH", /\d\d/]
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    function configFromISO(config2) {
      var i, l2, string = config2._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
      if (match) {
        getParsingFlags(config2).iso = true;
        for (i = 0, l2 = isoDatesLen; i < l2; i++) {
          if (isoDates[i][1].exec(match[1])) {
            dateFormat = isoDates[i][0];
            allowTime = isoDates[i][2] !== false;
            break;
          }
        }
        if (dateFormat == null) {
          config2._isValid = false;
          return;
        }
        if (match[3]) {
          for (i = 0, l2 = isoTimesLen; i < l2; i++) {
            if (isoTimes[i][1].exec(match[3])) {
              timeFormat = (match[2] || " ") + isoTimes[i][0];
              break;
            }
          }
          if (timeFormat == null) {
            config2._isValid = false;
            return;
          }
        }
        if (!allowTime && timeFormat != null) {
          config2._isValid = false;
          return;
        }
        if (match[4]) {
          if (tzRegex.exec(match[4])) {
            tzFormat = "Z";
          } else {
            config2._isValid = false;
            return;
          }
        }
        config2._f = dateFormat + (timeFormat || "") + (tzFormat || "");
        configFromStringAndFormat(config2);
      } else {
        config2._isValid = false;
      }
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      var result = [
        untruncateYear(yearStr),
        defaultLocaleMonthsShort.indexOf(monthStr),
        parseInt(dayStr, 10),
        parseInt(hourStr, 10),
        parseInt(minuteStr, 10)
      ];
      if (secondStr) {
        result.push(parseInt(secondStr, 10));
      }
      return result;
    }
    function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
        return 2e3 + year;
      } else if (year <= 999) {
        return 1900 + year;
      }
      return year;
    }
    function preprocessRFC2822(s) {
      return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    }
    function checkWeekday(weekdayStr, parsedInput, config2) {
      if (weekdayStr) {
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
          parsedInput[0],
          parsedInput[1],
          parsedInput[2]
        ).getDay();
        if (weekdayProvided !== weekdayActual) {
          getParsingFlags(config2).weekdayMismatch = true;
          config2._isValid = false;
          return false;
        }
      }
      return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
        return obsOffsets[obsOffset];
      } else if (militaryOffset) {
        return 0;
      } else {
        var hm = parseInt(numOffset, 10), m2 = hm % 100, h2 = (hm - m2) / 100;
        return h2 * 60 + m2;
      }
    }
    function configFromRFC2822(config2) {
      var match = rfc2822.exec(preprocessRFC2822(config2._i)), parsedArray;
      if (match) {
        parsedArray = extractFromRFC2822Strings(
          match[4],
          match[3],
          match[2],
          match[5],
          match[6],
          match[7]
        );
        if (!checkWeekday(match[1], parsedArray, config2)) {
          return;
        }
        config2._a = parsedArray;
        config2._tzm = calculateOffset(match[8], match[9], match[10]);
        config2._d = createUTCDate.apply(null, config2._a);
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
        getParsingFlags(config2).rfc2822 = true;
      } else {
        config2._isValid = false;
      }
    }
    function configFromString(config2) {
      var matched = aspNetJsonRegex.exec(config2._i);
      if (matched !== null) {
        config2._d = /* @__PURE__ */ new Date(+matched[1]);
        return;
      }
      configFromISO(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      configFromRFC2822(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      if (config2._strict) {
        config2._isValid = false;
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    hooks.createFromInputFallback = deprecate(
      "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
      function(config2) {
        config2._d = /* @__PURE__ */ new Date(config2._i + (config2._useUTC ? " UTC" : ""));
      }
    );
    function defaults(a, b2, c2) {
      if (a != null) {
        return a;
      }
      if (b2 != null) {
        return b2;
      }
      return c2;
    }
    function currentDateArray(config2) {
      var nowValue = new Date(hooks.now());
      if (config2._useUTC) {
        return [
          nowValue.getUTCFullYear(),
          nowValue.getUTCMonth(),
          nowValue.getUTCDate()
        ];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }
    function configFromArray(config2) {
      var i, date, input = [], currentDate, expectedWeekday, yearToUse;
      if (config2._d) {
        return;
      }
      currentDate = currentDateArray(config2);
      if (config2._w && config2._a[DATE] == null && config2._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config2);
      }
      if (config2._dayOfYear != null) {
        yearToUse = defaults(config2._a[YEAR], currentDate[YEAR]);
        if (config2._dayOfYear > daysInYear(yearToUse) || config2._dayOfYear === 0) {
          getParsingFlags(config2)._overflowDayOfYear = true;
        }
        date = createUTCDate(yearToUse, 0, config2._dayOfYear);
        config2._a[MONTH] = date.getUTCMonth();
        config2._a[DATE] = date.getUTCDate();
      }
      for (i = 0; i < 3 && config2._a[i] == null; ++i) {
        config2._a[i] = input[i] = currentDate[i];
      }
      for (; i < 7; i++) {
        config2._a[i] = input[i] = config2._a[i] == null ? i === 2 ? 1 : 0 : config2._a[i];
      }
      if (config2._a[HOUR] === 24 && config2._a[MINUTE] === 0 && config2._a[SECOND] === 0 && config2._a[MILLISECOND] === 0) {
        config2._nextDay = true;
        config2._a[HOUR] = 0;
      }
      config2._d = (config2._useUTC ? createUTCDate : createDate).apply(
        null,
        input
      );
      expectedWeekday = config2._useUTC ? config2._d.getUTCDay() : config2._d.getDay();
      if (config2._tzm != null) {
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
      }
      if (config2._nextDay) {
        config2._a[HOUR] = 24;
      }
      if (config2._w && typeof config2._w.d !== "undefined" && config2._w.d !== expectedWeekday) {
        getParsingFlags(config2).weekdayMismatch = true;
      }
    }
    function dayOfYearFromWeekInfo(config2) {
      var w2, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
      w2 = config2._w;
      if (w2.GG != null || w2.W != null || w2.E != null) {
        dow = 1;
        doy = 4;
        weekYear = defaults(
          w2.GG,
          config2._a[YEAR],
          weekOfYear(createLocal(), 1, 4).year
        );
        week = defaults(w2.W, 1);
        weekday = defaults(w2.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true;
        }
      } else {
        dow = config2._locale._week.dow;
        doy = config2._locale._week.doy;
        curWeek = weekOfYear(createLocal(), dow, doy);
        weekYear = defaults(w2.gg, config2._a[YEAR], curWeek.year);
        week = defaults(w2.w, curWeek.week);
        if (w2.d != null) {
          weekday = w2.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true;
          }
        } else if (w2.e != null) {
          weekday = w2.e + dow;
          if (w2.e < 0 || w2.e > 6) {
            weekdayOverflow = true;
          }
        } else {
          weekday = dow;
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config2)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
        getParsingFlags(config2)._overflowWeekday = true;
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config2._a[YEAR] = temp.year;
        config2._dayOfYear = temp.dayOfYear;
      }
    }
    hooks.ISO_8601 = function() {
    };
    hooks.RFC_2822 = function() {
    };
    function configFromStringAndFormat(config2) {
      if (config2._f === hooks.ISO_8601) {
        configFromISO(config2);
        return;
      }
      if (config2._f === hooks.RFC_2822) {
        configFromRFC2822(config2);
        return;
      }
      config2._a = [];
      getParsingFlags(config2).empty = true;
      var string = "" + config2._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
      tokens2 = expandFormat(config2._f, config2._locale).match(formattingTokens) || [];
      tokenLen = tokens2.length;
      for (i = 0; i < tokenLen; i++) {
        token2 = tokens2[i];
        parsedInput = (string.match(getParseRegexForToken(token2, config2)) || [])[0];
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config2).unusedInput.push(skipped);
          }
          string = string.slice(
            string.indexOf(parsedInput) + parsedInput.length
          );
          totalParsedInputLength += parsedInput.length;
        }
        if (formatTokenFunctions[token2]) {
          if (parsedInput) {
            getParsingFlags(config2).empty = false;
          } else {
            getParsingFlags(config2).unusedTokens.push(token2);
          }
          addTimeToArrayFromToken(token2, parsedInput, config2);
        } else if (config2._strict && !parsedInput) {
          getParsingFlags(config2).unusedTokens.push(token2);
        }
      }
      getParsingFlags(config2).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config2).unusedInput.push(string);
      }
      if (config2._a[HOUR] <= 12 && getParsingFlags(config2).bigHour === true && config2._a[HOUR] > 0) {
        getParsingFlags(config2).bigHour = void 0;
      }
      getParsingFlags(config2).parsedDateParts = config2._a.slice(0);
      getParsingFlags(config2).meridiem = config2._meridiem;
      config2._a[HOUR] = meridiemFixWrap(
        config2._locale,
        config2._a[HOUR],
        config2._meridiem
      );
      era = getParsingFlags(config2).era;
      if (era !== null) {
        config2._a[YEAR] = config2._locale.erasConvertYear(era, config2._a[YEAR]);
      }
      configFromArray(config2);
      checkOverflow(config2);
    }
    function meridiemFixWrap(locale2, hour, meridiem2) {
      var isPm;
      if (meridiem2 == null) {
        return hour;
      }
      if (locale2.meridiemHour != null) {
        return locale2.meridiemHour(hour, meridiem2);
      } else if (locale2.isPM != null) {
        isPm = locale2.isPM(meridiem2);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        return hour;
      }
    }
    function configFromStringAndArray(config2) {
      var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config2._f.length;
      if (configfLen === 0) {
        getParsingFlags(config2).invalidFormat = true;
        config2._d = /* @__PURE__ */ new Date(NaN);
        return;
      }
      for (i = 0; i < configfLen; i++) {
        currentScore = 0;
        validFormatFound = false;
        tempConfig = copyConfig({}, config2);
        if (config2._useUTC != null) {
          tempConfig._useUTC = config2._useUTC;
        }
        tempConfig._f = config2._f[i];
        configFromStringAndFormat(tempConfig);
        if (isValid(tempConfig)) {
          validFormatFound = true;
        }
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (!bestFormatIsValid) {
          if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
            if (validFormatFound) {
              bestFormatIsValid = true;
            }
          }
        } else {
          if (currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }
      }
      extend(config2, bestMoment || tempConfig);
    }
    function configFromObject(config2) {
      if (config2._d) {
        return;
      }
      var i = normalizeObjectUnits(config2._i), dayOrDate = i.day === void 0 ? i.date : i.day;
      config2._a = map(
        [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
        function(obj) {
          return obj && parseInt(obj, 10);
        }
      );
      configFromArray(config2);
    }
    function createFromConfig(config2) {
      var res = new Moment(checkOverflow(prepareConfig(config2)));
      if (res._nextDay) {
        res.add(1, "d");
        res._nextDay = void 0;
      }
      return res;
    }
    function prepareConfig(config2) {
      var input = config2._i, format2 = config2._f;
      config2._locale = config2._locale || getLocale(config2._l);
      if (input === null || format2 === void 0 && input === "") {
        return createInvalid({ nullInput: true });
      }
      if (typeof input === "string") {
        config2._i = input = config2._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isDate(input)) {
        config2._d = input;
      } else if (isArray$3(format2)) {
        configFromStringAndArray(config2);
      } else if (format2) {
        configFromStringAndFormat(config2);
      } else {
        configFromInput(config2);
      }
      if (!isValid(config2)) {
        config2._d = null;
      }
      return config2;
    }
    function configFromInput(config2) {
      var input = config2._i;
      if (isUndefined(input)) {
        config2._d = new Date(hooks.now());
      } else if (isDate(input)) {
        config2._d = new Date(input.valueOf());
      } else if (typeof input === "string") {
        configFromString(config2);
      } else if (isArray$3(input)) {
        config2._a = map(input.slice(0), function(obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config2);
      } else if (isObject$9(input)) {
        configFromObject(config2);
      } else if (isNumber(input)) {
        config2._d = new Date(input);
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
      var c2 = {};
      if (format2 === true || format2 === false) {
        strict = format2;
        format2 = void 0;
      }
      if (locale2 === true || locale2 === false) {
        strict = locale2;
        locale2 = void 0;
      }
      if (isObject$9(input) && isObjectEmpty(input) || isArray$3(input) && input.length === 0) {
        input = void 0;
      }
      c2._isAMomentObject = true;
      c2._useUTC = c2._isUTC = isUTC;
      c2._l = locale2;
      c2._i = input;
      c2._f = format2;
      c2._strict = strict;
      return createFromConfig(c2);
    }
    function createLocal(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, false);
    }
    var prototypeMin = deprecate(
      "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }
    ), prototypeMax = deprecate(
      "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    function pickBy$2(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray$3(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
          res = moments[i];
        }
      }
      return res;
    }
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy$2("isBefore", args);
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy$2("isAfter", args);
    }
    var now = function() {
      return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
    };
    var ordering = [
      "year",
      "quarter",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    function isDurationValid(m2) {
      var key, unitHasDecimal = false, i, orderLen = ordering.length;
      for (key in m2) {
        if (hasOwnProp(m2, key) && !(indexOf.call(ordering, key) !== -1 && (m2[key] == null || !isNaN(m2[key])))) {
          return false;
        }
      }
      for (i = 0; i < orderLen; ++i) {
        if (m2[ordering[i]]) {
          if (unitHasDecimal) {
            return false;
          }
          if (parseFloat(m2[ordering[i]]) !== toInt(m2[ordering[i]])) {
            unitHasDecimal = true;
          }
        }
      }
      return true;
    }
    function isValid$1() {
      return this._isValid;
    }
    function createInvalid$1() {
      return createDuration(NaN);
    }
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
      this._isValid = isDurationValid(normalizedInput);
      this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
      minutes2 * 6e4 + // 1000 * 60
      hours2 * 1e3 * 60 * 60;
      this._days = +days2 + weeks2 * 7;
      this._months = +months2 + quarters * 3 + years2 * 12;
      this._data = {};
      this._locale = getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function absRound(number) {
      if (number < 0) {
        return Math.round(-1 * number) * -1;
      } else {
        return Math.round(number);
      }
    }
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
      for (i = 0; i < len; i++) {
        if (toInt(array1[i]) !== toInt(array2[i])) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }
    function offset(token2, separator) {
      addFormatToken(token2, 0, 0, function() {
        var offset2 = this.utcOffset(), sign2 = "+";
        if (offset2 < 0) {
          offset2 = -offset2;
          sign2 = "-";
        }
        return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
      });
    }
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken(["Z", "ZZ"], function(input, array, config2) {
      config2._useUTC = true;
      config2._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
      var matches = (string || "").match(matcher), chunk, parts, minutes2;
      if (matches === null) {
        return null;
      }
      chunk = matches[matches.length - 1] || [];
      parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
      minutes2 = +(parts[1] * 60) + toInt(parts[2]);
      return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
    }
    function cloneWithOffset(input, model) {
      var res, diff2;
      if (model._isUTC) {
        res = model.clone();
        diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        res._d.setTime(res._d.valueOf() + diff2);
        hooks.updateOffset(res, false);
        return res;
      } else {
        return createLocal(input).local();
      }
    }
    function getDateOffset(m2) {
      return -Math.round(m2._d.getTimezoneOffset());
    }
    hooks.updateOffset = function() {
    };
    function getSetOffset(input, keepLocalTime, keepMinutes) {
      var offset2 = this._offset || 0, localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        if (typeof input === "string") {
          input = offsetFromString(matchShortOffset, input);
          if (input === null) {
            return this;
          }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, "m");
        }
        if (offset2 !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            addSubtract(
              this,
              createDuration(input - offset2, "m"),
              1,
              false
            );
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset2 : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== "string") {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), "m");
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === "string") {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
          this.utcOffset(tZone);
        } else {
          this.utcOffset(0, true);
        }
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
      }
      var c2 = {}, other;
      copyConfig(c2, this);
      c2 = prepareConfig(c2);
      if (c2._a) {
        other = c2._isUTC ? createUTC(c2._a) : createLocal(c2._a);
        this._isDSTShifted = this.isValid() && compareArrays(c2._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }
      return this._isDSTShifted;
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
      var duration = input, match = null, sign2, ret, diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (isNumber(input) || !isNaN(+input)) {
        duration = {};
        if (key) {
          duration[key] = +input;
        } else {
          duration.milliseconds = +input;
        }
      } else if (match = aspNetRegex.exec(input)) {
        sign2 = match[1] === "-" ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match[DATE]) * sign2,
          h: toInt(match[HOUR]) * sign2,
          m: toInt(match[MINUTE]) * sign2,
          s: toInt(match[SECOND]) * sign2,
          ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          // the millisecond decimal point is included in the match
        };
      } else if (match = isoRegex.exec(input)) {
        sign2 = match[1] === "-" ? -1 : 1;
        duration = {
          y: parseIso(match[2], sign2),
          M: parseIso(match[3], sign2),
          w: parseIso(match[4], sign2),
          d: parseIso(match[5], sign2),
          h: parseIso(match[6], sign2),
          m: parseIso(match[7], sign2),
          s: parseIso(match[8], sign2)
        };
      } else if (duration == null) {
        duration = {};
      } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
        diffRes = momentsDifference(
          createLocal(duration.from),
          createLocal(duration.to)
        );
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, "_locale")) {
        ret._locale = input._locale;
      }
      if (isDuration(input) && hasOwnProp(input, "_isValid")) {
        ret._isValid = input._isValid;
      }
      return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign2) {
      var res = inp && parseFloat(inp.replace(",", "."));
      return (isNaN(res) ? 0 : res) * sign2;
    }
    function positiveMomentsDifference(base, other) {
      var res = {};
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, "M").isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +base.clone().add(res.months, "M");
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return { milliseconds: 0, months: 0 };
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }
    function createAdder(direction, name) {
      return function(val, period) {
        var dur, tmp;
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(
            name,
            "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
          );
          tmp = val;
          val = period;
          period = tmp;
        }
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
      };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
      if (!mom.isValid()) {
        return;
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (months2) {
        setMonth(mom, get$3(mom, "Month") + months2 * isAdding);
      }
      if (days2) {
        set$1(mom, "Date", get$3(mom, "Date") + days2 * isAdding);
      }
      if (milliseconds2) {
        mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
      }
      if (updateOffset) {
        hooks.updateOffset(mom, days2 || months2);
      }
    }
    var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
    function isString(input) {
      return typeof input === "string" || input instanceof String;
    }
    function isMomentInput(input) {
      return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
    }
    function isMomentInputObject(input) {
      var objectTest = isObject$9(input) && !isObjectEmpty(input), propertyTest = false, properties = [
        "years",
        "year",
        "y",
        "months",
        "month",
        "M",
        "days",
        "day",
        "d",
        "dates",
        "date",
        "D",
        "hours",
        "hour",
        "h",
        "minutes",
        "minute",
        "m",
        "seconds",
        "second",
        "s",
        "milliseconds",
        "millisecond",
        "ms"
      ], i, property2, propertyLen = properties.length;
      for (i = 0; i < propertyLen; i += 1) {
        property2 = properties[i];
        propertyTest = propertyTest || hasOwnProp(input, property2);
      }
      return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
      var arrayTest = isArray$3(input), dataTypeTest = false;
      if (arrayTest) {
        dataTypeTest = input.filter(function(item) {
          return !isNumber(item) && isString(input);
        }).length === 0;
      }
      return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
      var objectTest = isObject$9(input) && !isObjectEmpty(input), propertyTest = false, properties = [
        "sameDay",
        "nextDay",
        "lastDay",
        "nextWeek",
        "lastWeek",
        "sameElse"
      ], i, property2;
      for (i = 0; i < properties.length; i += 1) {
        property2 = properties[i];
        propertyTest = propertyTest || hasOwnProp(input, property2);
      }
      return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now2) {
      var diff2 = myMoment.diff(now2, "days", true);
      return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
    }
    function calendar$1(time, formats) {
      if (arguments.length === 1) {
        if (!arguments[0]) {
          time = void 0;
          formats = void 0;
        } else if (isMomentInput(arguments[0])) {
          time = arguments[0];
          formats = void 0;
        } else if (isCalendarSpec(arguments[0])) {
          formats = arguments[0];
          time = void 0;
        }
      }
      var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction$1(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
      return this.format(
        output || this.localeData().calendar(format2, this, createLocal(now2))
      );
    }
    function clone$5() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() > localInput.valueOf();
      } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() < localInput.valueOf();
      } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
    }
    function isBetween(from2, to2, units, inclusivity) {
      var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
      if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
        return false;
      }
      inclusivity = inclusivity || "()";
      return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input), inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() === localInput.valueOf();
      } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, output;
      if (!this.isValid()) {
        return NaN;
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN;
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
      units = normalizeUnits(units);
      switch (units) {
        case "year":
          output = monthDiff(this, that) / 12;
          break;
        case "month":
          output = monthDiff(this, that);
          break;
        case "quarter":
          output = monthDiff(this, that) / 3;
          break;
        case "second":
          output = (this - that) / 1e3;
          break;
        case "minute":
          output = (this - that) / 6e4;
          break;
        case "hour":
          output = (this - that) / 36e5;
          break;
        case "day":
          output = (this - that - zoneDelta) / 864e5;
          break;
        case "week":
          output = (this - that - zoneDelta) / 6048e5;
          break;
        default:
          output = this - that;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b2) {
      if (a.date() < b2.date()) {
        return -monthDiff(b2, a);
      }
      var wholeMonthDiff = (b2.year() - a.year()) * 12 + (b2.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
      if (b2 - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
        adjust = (b2 - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
        adjust = (b2 - anchor) / (anchor2 - anchor);
      }
      return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    function toString$1() {
      return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }
    function toISOString(keepOffset) {
      if (!this.isValid()) {
        return null;
      }
      var utc = keepOffset !== true, m2 = utc ? this.clone().utc() : this;
      if (m2.year() < 0 || m2.year() > 9999) {
        return formatMoment(
          m2,
          utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      if (isFunction$1(Date.prototype.toISOString)) {
        if (utc) {
          return this.toDate().toISOString();
        } else {
          return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m2, "Z"));
        }
      }
      return formatMoment(
        m2,
        utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
      );
    }
    function inspect() {
      if (!this.isValid()) {
        return "moment.invalid(/* " + this._i + " */)";
      }
      var func = "moment", zone = "", prefix, year, datetime, suffix;
      if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
        zone = "Z";
      }
      prefix = "[" + func + '("]';
      year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
      datetime = "-MM-DD[T]HH:mm:ss.SSS";
      suffix = zone + '[")]';
      return this.format(prefix + year + datetime + suffix);
    }
    function format(inputString) {
      if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function toNow(withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
    }
    function locale(key) {
      var newLocaleData;
      if (key === void 0) {
        return this._locale._abbr;
      } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate(
      "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
      function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );
    function localeData() {
      return this._locale;
    }
    var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    function mod$1(dividend, divisor) {
      return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y2, m2, d2) {
      if (y2 < 100 && y2 >= 0) {
        return new Date(y2 + 400, m2, d2) - MS_PER_400_YEARS;
      } else {
        return new Date(y2, m2, d2).valueOf();
      }
    }
    function utcStartOfDate(y2, m2, d2) {
      if (y2 < 100 && y2 >= 0) {
        return Date.UTC(y2 + 400, m2, d2) - MS_PER_400_YEARS;
      } else {
        return Date.UTC(y2, m2, d2);
      }
    }
    function startOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time = startOfDate(this.year(), 0, 1);
          break;
        case "quarter":
          time = startOfDate(
            this.year(),
            this.month() - this.month() % 3,
            1
          );
          break;
        case "month":
          time = startOfDate(this.year(), this.month(), 1);
          break;
        case "week":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday()
          );
          break;
        case "isoWeek":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1)
          );
          break;
        case "day":
        case "date":
          time = startOfDate(this.year(), this.month(), this.date());
          break;
        case "hour":
          time = this._d.valueOf();
          time -= mod$1(
            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          );
          break;
        case "minute":
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_MINUTE);
          break;
        case "second":
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_SECOND);
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function endOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time = startOfDate(this.year() + 1, 0, 1) - 1;
          break;
        case "quarter":
          time = startOfDate(
            this.year(),
            this.month() - this.month() % 3 + 3,
            1
          ) - 1;
          break;
        case "month":
          time = startOfDate(this.year(), this.month() + 1, 1) - 1;
          break;
        case "week":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday() + 7
          ) - 1;
          break;
        case "isoWeek":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1) + 7
          ) - 1;
          break;
        case "day":
        case "date":
          time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
          break;
        case "hour":
          time = this._d.valueOf();
          time += MS_PER_HOUR - mod$1(
            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          ) - 1;
          break;
        case "minute":
          time = this._d.valueOf();
          time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
          break;
        case "second":
          time = this._d.valueOf();
          time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function valueOf() {
      return this._d.valueOf() - (this._offset || 0) * 6e4;
    }
    function unix() {
      return Math.floor(this.valueOf() / 1e3);
    }
    function toDate() {
      return new Date(this.valueOf());
    }
    function toArray() {
      var m2 = this;
      return [
        m2.year(),
        m2.month(),
        m2.date(),
        m2.hour(),
        m2.minute(),
        m2.second(),
        m2.millisecond()
      ];
    }
    function toObject() {
      var m2 = this;
      return {
        years: m2.year(),
        months: m2.month(),
        date: m2.date(),
        hours: m2.hours(),
        minutes: m2.minutes(),
        seconds: m2.seconds(),
        milliseconds: m2.milliseconds()
      };
    }
    function toJSON() {
      return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
      return isValid(this);
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      };
    }
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", ["y", 1], "yo", "eraYear");
    addFormatToken("y", ["yy", 2], 0, "eraYear");
    addFormatToken("y", ["yyy", 3], 0, "eraYear");
    addFormatToken("y", ["yyyy", 4], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken(
      ["N", "NN", "NNN", "NNNN", "NNNNN"],
      function(input, array, config2, token2) {
        var era = config2._locale.erasParse(input, token2, config2._strict);
        if (era) {
          getParsingFlags(config2).era = era;
        } else {
          getParsingFlags(config2).invalidEra = input;
        }
      }
    );
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
    addParseToken(["yo"], function(input, array, config2, token2) {
      var match;
      if (config2._locale._eraYearOrdinalRegex) {
        match = input.match(config2._locale._eraYearOrdinalRegex);
      }
      if (config2._locale.eraYearOrdinalParse) {
        array[YEAR] = config2._locale.eraYearOrdinalParse(input, match);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    function localeEras(m2, format2) {
      var i, l2, date, eras = this._eras || getLocale("en")._eras;
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        switch (typeof eras[i].since) {
          case "string":
            date = hooks(eras[i].since).startOf("day");
            eras[i].since = date.valueOf();
            break;
        }
        switch (typeof eras[i].until) {
          case "undefined":
            eras[i].until = Infinity;
            break;
          case "string":
            date = hooks(eras[i].until).startOf("day").valueOf();
            eras[i].until = date.valueOf();
            break;
        }
      }
      return eras;
    }
    function localeErasParse(eraName, format2, strict) {
      var i, l2, eras = this.eras(), name, abbr, narrow;
      eraName = eraName.toUpperCase();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        name = eras[i].name.toUpperCase();
        abbr = eras[i].abbr.toUpperCase();
        narrow = eras[i].narrow.toUpperCase();
        if (strict) {
          switch (format2) {
            case "N":
            case "NN":
            case "NNN":
              if (abbr === eraName) {
                return eras[i];
              }
              break;
            case "NNNN":
              if (name === eraName) {
                return eras[i];
              }
              break;
            case "NNNNN":
              if (narrow === eraName) {
                return eras[i];
              }
              break;
          }
        } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
          return eras[i];
        }
      }
    }
    function localeErasConvertYear(era, year) {
      var dir = era.since <= era.until ? 1 : -1;
      if (year === void 0) {
        return hooks(era.since).year();
      } else {
        return hooks(era.since).year() + (year - era.offset) * dir;
      }
    }
    function getEraName() {
      var i, l2, val, eras = this.localeData().eras();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].name;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].name;
        }
      }
      return "";
    }
    function getEraNarrow() {
      var i, l2, val, eras = this.localeData().eras();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].narrow;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].narrow;
        }
      }
      return "";
    }
    function getEraAbbr() {
      var i, l2, val, eras = this.localeData().eras();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].abbr;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].abbr;
        }
      }
      return "";
    }
    function getEraYear() {
      var i, l2, dir, val, eras = this.localeData().eras();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        dir = eras[i].since <= eras[i].until ? 1 : -1;
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
          return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
        }
      }
      return this.year();
    }
    function erasNameRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNameRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
      if (!hasOwnProp(this, "_erasAbbrRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNarrowRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale2) {
      return locale2.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale2) {
      return locale2.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale2) {
      return locale2.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale2) {
      return locale2._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
      var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l2, erasName, erasAbbr, erasNarrow, eras = this.eras();
      for (i = 0, l2 = eras.length; i < l2; ++i) {
        erasName = regexEscape$1(eras[i].name);
        erasAbbr = regexEscape$1(eras[i].abbr);
        erasNarrow = regexEscape$1(eras[i].narrow);
        namePieces.push(erasName);
        abbrPieces.push(erasAbbr);
        narrowPieces.push(erasNarrow);
        mixedPieces.push(erasName);
        mixedPieces.push(erasAbbr);
        mixedPieces.push(erasNarrow);
      }
      this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
      this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
      this._erasNarrowRegex = new RegExp(
        "^(" + narrowPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken(0, ["gg", 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ["GG", 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token2, getter) {
      addFormatToken(0, [token2, token2.length], 0, getter);
    }
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken(
      ["gggg", "ggggg", "GGGG", "GGGGG"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      }
    );
    addWeekParseToken(["gg", "GG"], function(input, week, config2, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.week(),
        this.weekday() + this.localeData()._week.dow,
        this.localeData()._week.dow,
        this.localeData()._week.doy
      );
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.isoWeek(),
        this.isoWeekday(),
        1,
        4
      );
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
      return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year;
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this;
    }
    addFormatToken("Q", 0, "Qo", "quarter");
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken("D", ["DD", 2], "Do", "date");
    addRegexToken("D", match1to2, match1to2NoLeadingZero);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(["D", "DD"], DATE);
    addParseToken("Do", function(input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });
    var getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken(["DDD", "DDDD"], function(input, array, config2) {
      config2._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round(
        (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
      ) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    }
    addFormatToken("m", ["mm", 2], 0, "minute");
    addRegexToken("m", match1to2, match1to2HasZero);
    addRegexToken("mm", match1to2, match2);
    addParseToken(["m", "mm"], MINUTE);
    var getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", ["ss", 2], 0, "second");
    addRegexToken("s", match1to2, match1to2HasZero);
    addRegexToken("ss", match1to2, match2);
    addParseToken(["s", "ss"], SECOND);
    var getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ["SS", 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ["SSS", 3], 0, "millisecond");
    addFormatToken(0, ["SSSS", 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ["SSSSS", 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ["SSSSSS", 6], 0, function() {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ["SSSSSSS", 7], 0, function() {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
      return this.millisecond() * 1e6;
    });
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    var token, getSetMillisecond;
    for (token = "SSSS"; token.length <= 9; token += "S") {
      addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
      array[MILLISECOND] = toInt(("0." + input) * 1e3);
    }
    for (token = "S"; token.length <= 9; token += "S") {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    function getZoneAbbr() {
      return this._isUTC ? "UTC" : "";
    }
    function getZoneName() {
      return this._isUTC ? "Coordinated Universal Time" : "";
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone$5;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) {
      proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString$1;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
      "dates accessor is deprecated. Use date instead.",
      getSetDayOfMonth
    );
    proto.months = deprecate(
      "months accessor is deprecated. Use month instead",
      getSetMonth
    );
    proto.years = deprecate(
      "years accessor is deprecated. Use year instead",
      getSetYear
    );
    proto.zone = deprecate(
      "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
      getSetZone
    );
    proto.isDSTShifted = deprecate(
      "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
      isDaylightSavingTimeShifted
    );
    function createUnix(input) {
      return createLocal(input * 1e3);
    }
    function createInZone() {
      return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
      return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1$1(format2, index, field, setter) {
      var locale2 = getLocale(), utc = createUTC().set(setter, index);
      return locale2[field](utc, format2);
    }
    function listMonthsImpl(format2, index, field) {
      if (isNumber(format2)) {
        index = format2;
        format2 = void 0;
      }
      format2 = format2 || "";
      if (index != null) {
        return get$1$1(format2, index, field, "month");
      }
      var i, out = [];
      for (i = 0; i < 12; i++) {
        out[i] = get$1$1(format2, i, field, "month");
      }
      return out;
    }
    function listWeekdaysImpl(localeSorted, format2, index, field) {
      if (typeof localeSorted === "boolean") {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      } else {
        format2 = localeSorted;
        index = format2;
        localeSorted = false;
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      }
      var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
      if (index != null) {
        return get$1$1(format2, (index + shift) % 7, field, "day");
      }
      for (i = 0; i < 7; i++) {
        out[i] = get$1$1(format2, (i + shift) % 7, field, "day");
      }
      return out;
    }
    function listMonths(format2, index) {
      return listMonthsImpl(format2, index, "months");
    }
    function listMonthsShort(format2, index) {
      return listMonthsImpl(format2, index, "monthsShort");
    }
    function listWeekdays(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
    }
    function listWeekdaysShort(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
    }
    function listWeekdaysMin(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
    }
    getSetGlobalLocale("en", {
      eras: [
        {
          since: "0001-01-01",
          until: Infinity,
          offset: 1,
          name: "Anno Domini",
          narrow: "AD",
          abbr: "AD"
        },
        {
          since: "0000-12-31",
          until: -Infinity,
          offset: 1,
          name: "Before Christ",
          narrow: "BC",
          abbr: "BC"
        }
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number) {
        var b2 = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b2 === 1 ? "st" : b2 === 2 ? "nd" : b2 === 3 ? "rd" : "th";
        return number + output;
      }
    });
    hooks.lang = deprecate(
      "moment.lang is deprecated. Use moment.locale instead.",
      getSetGlobalLocale
    );
    hooks.langData = deprecate(
      "moment.langData is deprecated. Use moment.localeData instead.",
      getLocale
    );
    var mathAbs = Math.abs;
    function abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function addSubtract$1(duration, input, value2, direction) {
      var other = createDuration(input, value2);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble();
    }
    function add$1(input, value2) {
      return addSubtract$1(this, input, value2, 1);
    }
    function subtract$1(input, value2) {
      return addSubtract$1(this, input, value2, -1);
    }
    function absCeil(number) {
      if (number < 0) {
        return Math.floor(number);
      } else {
        return Math.ceil(number);
      }
    }
    function bubble() {
      var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
      if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
        milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
        days2 = 0;
        months2 = 0;
      }
      data.milliseconds = milliseconds2 % 1e3;
      seconds2 = absFloor(milliseconds2 / 1e3);
      data.seconds = seconds2 % 60;
      minutes2 = absFloor(seconds2 / 60);
      data.minutes = minutes2 % 60;
      hours2 = absFloor(minutes2 / 60);
      data.hours = hours2 % 24;
      days2 += absFloor(hours2 / 24);
      monthsFromDays = absFloor(daysToMonths(days2));
      months2 += monthsFromDays;
      days2 -= absCeil(monthsToDays(monthsFromDays));
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      data.days = days2;
      data.months = months2;
      data.years = years2;
      return this;
    }
    function daysToMonths(days2) {
      return days2 * 4800 / 146097;
    }
    function monthsToDays(months2) {
      return months2 * 146097 / 4800;
    }
    function as(units) {
      if (!this.isValid()) {
        return NaN;
      }
      var days2, months2, milliseconds2 = this._milliseconds;
      units = normalizeUnits(units);
      if (units === "month" || units === "quarter" || units === "year") {
        days2 = this._days + milliseconds2 / 864e5;
        months2 = this._months + daysToMonths(days2);
        switch (units) {
          case "month":
            return months2;
          case "quarter":
            return months2 / 3;
          case "year":
            return months2 / 12;
        }
      } else {
        days2 = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case "week":
            return days2 / 7 + milliseconds2 / 6048e5;
          case "day":
            return days2 + milliseconds2 / 864e5;
          case "hour":
            return days2 * 24 + milliseconds2 / 36e5;
          case "minute":
            return days2 * 1440 + milliseconds2 / 6e4;
          case "second":
            return days2 * 86400 + milliseconds2 / 1e3;
          case "millisecond":
            return Math.floor(days2 * 864e5) + milliseconds2;
          default:
            throw new Error("Unknown unit " + units);
        }
      }
    }
    function makeAs(alias) {
      return function() {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y"), valueOf$1 = asMilliseconds;
    function clone$1$1() {
      return createDuration(this);
    }
    function get$2$1(units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + "s"]() : NaN;
    }
    function makeGetter(name) {
      return function() {
        return this.isValid() ? this._data[name] : NaN;
      };
    }
    var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round = Math.round, thresholds = {
      ss: 44,
      // a few seconds to seconds
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month/week
      w: null,
      // weeks to month
      M: 11
      // months to year
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
      return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
      var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
      if (thresholds2.w != null) {
        a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
      }
      a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale2;
      return substituteTimeAgo.apply(null, a);
    }
    function getSetRelativeTimeRounding(roundingFunction) {
      if (roundingFunction === void 0) {
        return round;
      }
      if (typeof roundingFunction === "function") {
        round = roundingFunction;
        return true;
      }
      return false;
    }
    function getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === void 0) {
        return false;
      }
      if (limit === void 0) {
        return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      if (threshold === "s") {
        thresholds.ss = limit - 1;
      }
      return true;
    }
    function humanize(argWithSuffix, argThresholds) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var withSuffix = false, th2 = thresholds, locale2, output;
      if (typeof argWithSuffix === "object") {
        argThresholds = argWithSuffix;
        argWithSuffix = false;
      }
      if (typeof argWithSuffix === "boolean") {
        withSuffix = argWithSuffix;
      }
      if (typeof argThresholds === "object") {
        th2 = Object.assign({}, thresholds, argThresholds);
        if (argThresholds.s != null && argThresholds.ss == null) {
          th2.ss = argThresholds.s - 1;
        }
      }
      locale2 = this.localeData();
      output = relativeTime$1(this, !withSuffix, th2, locale2);
      if (withSuffix) {
        output = locale2.pastFuture(+this, output);
      }
      return locale2.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x2) {
      return (x2 > 0) - (x2 < 0) || +x2;
    }
    function toISOString$1() {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
      if (!total) {
        return "P0D";
      }
      minutes2 = absFloor(seconds2 / 60);
      hours2 = absFloor(minutes2 / 60);
      seconds2 %= 60;
      minutes2 %= 60;
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
      totalSign = total < 0 ? "-" : "";
      ymSign = sign(this._months) !== sign(total) ? "-" : "";
      daysSign = sign(this._days) !== sign(total) ? "-" : "";
      hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
      return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1$1;
    proto$2.get = get$2$1;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate(
      "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
      toISOString$1
    );
    proto$2.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config2) {
      config2._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken("x", function(input, array, config2) {
      config2._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = "2.30.1";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
      // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
      // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
      // <input type="datetime-local" step="0.001" />
      DATE: "YYYY-MM-DD",
      // <input type="date" />
      TIME: "HH:mm",
      // <input type="time" />
      TIME_SECONDS: "HH:mm:ss",
      // <input type="time" step="1" />
      TIME_MS: "HH:mm:ss.SSS",
      // <input type="time" step="0.001" />
      WEEK: "GGGG-[W]WW",
      // <input type="week" />
      MONTH: "YYYY-MM"
      // <input type="month" />
    };
    function ownKeys$x(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$x(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$x(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$x(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _createForOfIteratorHelper$d(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$d(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$d(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$d(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$d(o, minLen);
    }
    function _arrayLikeToArray$d(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var arrayUniq = function arrayUniq2(arr) {
      return Array.from(new Set(arr));
    };
    var jlFieldMarker = "jlField";
    var jlArgsMarker = "jlArgs";
    var jlEqOps = ["==", "!="];
    var jlRangeOps = ["<", "<=", ">", ">="];
    var multiselectOps = ["multiselect_equals", "multiselect_not_equals", "multiselect_contains", "multiselect_not_contains"];
    var createMeta = function createMeta2(parentMeta) {
      return {
        errors: [],
        settings: parentMeta === null || parentMeta === void 0 ? void 0 : parentMeta.settings
      };
    };
    var loadFromJsonLogic$1 = function loadFromJsonLogic2(logicTree, config2) {
      return _loadFromJsonLogic(logicTree, config2, false);
    };
    var _loadFromJsonLogic = function _loadFromJsonLogic2(logicTree, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = createMeta();
      meta.settings = {
        allowUnknownFields: false,
        returnErrors
      };
      var extendedConfig = extendConfig(config2, void 0, false);
      var conv = buildConv$1(extendedConfig);
      var jsTree = logicTree ? convertFromLogic(logicTree, conv, extendedConfig, ["rule", "group", "switch"], meta) : void 0;
      var immTree = jsTree ? loadTree$1(jsTree) : void 0;
      if (returnErrors) {
        return [immTree, meta.errors];
      } else {
        if (meta.errors.length) console.warn("Errors while importing from JsonLogic:", meta.errors);
        return immTree;
      }
    };
    var buildConv$1 = function buildConv2(config2) {
      var operators2 = {};
      var combinationOperators = {};
      for (var opKey in config2.operators) {
        var opConfig = config2.operators[opKey];
        if (typeof opConfig.jsonLogic == "string") {
          var opk = opConfig.jsonLogic + "/" + getOpCardinality$1(opConfig);
          if (!operators2[opk]) operators2[opk] = [];
          operators2[opk].push(opKey);
        } else if (typeof opConfig.jsonLogic2 == "string") {
          var _opk = opConfig.jsonLogic2 + "/" + getOpCardinality$1(opConfig);
          if (!operators2[_opk]) operators2[_opk] = [];
          operators2[_opk].push(opKey);
          if (!combinationOperators[opKey]) combinationOperators[opKey] = {};
          combinationOperators[opKey] = {
            "template": opConfig.jsonLogic(jlFieldMarker, opKey, jlArgsMarker),
            "jsonLogic2": opConfig.jsonLogic2,
            "_jsonLogicIsExclamationOp": !!opConfig._jsonLogicIsExclamationOp
          };
        }
      }
      var conjunctions2 = {};
      for (var conjKey in config2.conjunctions) {
        var conjunctionDefinition = config2.conjunctions[conjKey];
        var ck2 = conjunctionDefinition.jsonLogicConj || conjKey.toLowerCase();
        conjunctions2[ck2] = conjKey;
      }
      var funcs2 = {};
      var _iterator = _createForOfIteratorHelper$d(iterateFuncs(config2)), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray(_step.value, 2), funcPath = _step$value[0], funcConfig = _step$value[1];
          var fk2 = void 0;
          if (funcConfig.jsonLogicIsMethod) {
            fk2 = "#" + funcConfig.jsonLogic;
          } else if (typeof funcConfig.jsonLogic == "string") {
            fk2 = funcConfig.jsonLogic;
          }
          if (fk2) {
            if (!funcs2[fk2]) funcs2[fk2] = [];
            funcs2[fk2].push(funcPath);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var _config$settings$json = config2.settings.jsonLogic, groupVarKey = _config$settings$json.groupVarKey, altVarKey = _config$settings$json.altVarKey;
      return {
        operators: operators2,
        conjunctions: conjunctions2,
        funcs: funcs2,
        varKeys: ["var", groupVarKey, altVarKey],
        combinationOperators
      };
    };
    var matchAgainstTemplates = function matchAgainstTemplates2(jsonlogic, conv, meta) {
      var operatorsToCheck = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var response;
      if (conv !== null && conv !== void 0 && conv.combinationOperators) {
        for (var _i = 0, _Object$entries = Object.entries(conv.combinationOperators); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key = _Object$entries$_i[0], value2 = _Object$entries$_i[1];
          if (operatorsToCheck == null || operatorsToCheck.includes(key)) {
            var tempResponse = isTemplateMatch(value2.template, jsonlogic);
            if (tempResponse.match) {
              if (!response) response = tempResponse;
              else meta.errors.push("Operator matched against 2 templates: ".concat(response.newOp, " and ").concat(key));
              response["newOp"] = value2.jsonLogic2;
            }
          }
        }
      }
      return response;
    };
    var isTemplateMatch = function isTemplateMatch2(template, jsonlogic) {
      var response = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        "match": true,
        "jlField": null,
        "jlArgs": []
      };
      if (template == void 0 || jsonlogic == void 0) {
        response.match = false;
        return response;
      }
      var tKeys = Object.keys(template);
      var jKeys = Object.keys(jsonlogic);
      if (tKeys.length !== jKeys.length) {
        response.match = false;
        return response;
      }
      for (var index = 0; index < tKeys.length; index++) {
        var key = tKeys[index];
        var value2 = template[key];
        if (key !== jKeys[index]) {
          response.match = false;
          return response;
        } else if (value2 === jlFieldMarker && isJsonLogic(jsonlogic[key])) {
          response.jlField = jsonlogic[key];
        } else if (value2 === jlArgsMarker) {
          response.jlArgs.push(jsonlogic[key]);
        } else if (_typeof$1(value2) === "object" && value2 !== null || Array.isArray(value2)) {
          response = isTemplateMatch2(value2, jsonlogic[key], response);
        } else if (value2 !== jsonlogic[key]) {
          response.match = false;
          return response;
        }
      }
      return response;
    };
    var convertFromLogic = function convertFromLogic2(logic2, conv, config2, expectedTypes, meta) {
      var not2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var fieldConfig = arguments.length > 6 ? arguments[6] : void 0;
      var widget = arguments.length > 7 ? arguments[7] : void 0;
      var parentField = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : null;
      var op, vals;
      if (isJsonLogic(logic2)) {
        op = Object.keys(logic2)[0];
        vals = logic2[op];
        if (!Array.isArray(vals)) vals = [vals];
      }
      var ret;
      var beforeErrorsCnt = meta.errors.length;
      var lockedOp = config2.settings.jsonLogic.lockedOp;
      var isEmptyOp = op == "!" && vals.length == 1 && vals[0] && isJsonLogic(vals[0]) && conv.varKeys.includes(Object.keys(vals[0])[0]);
      var match = matchAgainstTemplates(logic2, conv, meta);
      if (match) {
        vals = [];
        vals[0] = match.jlField;
        match.jlArgs.forEach(function(arg) {
          return vals.push(arg);
        });
        op = match.newOp;
      }
      var isNot = op == "!" && !isEmptyOp;
      var isLocked = lockedOp && op == lockedOp;
      var isSwitch = expectedTypes.includes("switch");
      var isRoot = isSwitch;
      if (isLocked) {
        ret = convertFromLogic2(vals[0], conv, config2, expectedTypes, meta, not2, fieldConfig, widget, parentField, true);
      } else if (isNot) {
        ret = convertFromLogic2(vals[0], conv, config2, expectedTypes, meta, !not2, fieldConfig, widget, parentField);
      } else if (expectedTypes.includes("val")) {
        ret = convertFieldRhs(op, vals, conv, config2, not2, meta, parentField) || convertFuncRhs(op, vals, conv, config2, not2, fieldConfig, meta, parentField) || convertValRhs(logic2, fieldConfig, widget, config2, meta);
      } else {
        if (expectedTypes.includes("switch")) {
          ret = convertIf(op, vals, conv, config2, not2, meta, parentField);
        }
        if (ret == void 0 && expectedTypes.includes("group")) {
          ret = convertConj(op, vals, conv, config2, not2, meta, parentField, false);
        }
        if (ret == void 0 && expectedTypes.includes("rule")) {
          ret = convertOp$1(op, vals, conv, config2, not2, meta, parentField);
        }
        if (ret) {
          if (isRoot && !["group", "switch_group"].includes(ret.type)) {
            ret = wrapInDefaultConj$1(ret, config2);
          }
        }
      }
      var afterErrorsCnt = meta.errors.length;
      if (op != "!" && ret === void 0 && afterErrorsCnt == beforeErrorsCnt) {
        meta.errors.push("Can't parse logic ".concat(JSON.stringify(logic2)));
      }
      if (isLocked) {
        ret.properties.isLocked = true;
      }
      return ret;
    };
    var convertValRhs = function convertValRhs2(val, fieldConfig, widget, config2, meta) {
      var _fieldConfig$fieldSet;
      if (val === void 0) val = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.defaultValue;
      if (val === void 0) return void 0;
      widget = widget || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.mainWidget);
      var widgetConfig = config2.widgets[widget];
      var fieldType = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type;
      if (fieldType && !widgetConfig) {
        meta.errors.push("No widget for type ".concat(fieldType));
        return void 0;
      }
      if (isJsonLogic(val)) {
        meta.errors.push("Unexpected logic in value: ".concat(JSON.stringify(val)));
        return void 0;
      }
      if (fieldType === "time" && typeof val === "number") {
        var h2 = Math.floor(val / 60 / 60) % 24, m2 = Math.floor(val / 60) % 60, s = val % 60;
        var valueFormat = widgetConfig.valueFormat;
        if (valueFormat) {
          var dateVal = new Date(val);
          dateVal.setMilliseconds(0);
          dateVal.setHours(h2);
          dateVal.setMinutes(m2);
          dateVal.setSeconds(s);
          val = hooks(dateVal).format(valueFormat);
        } else {
          val = "".concat(h2, ":").concat(m2, ":").concat(s);
        }
      }
      if (["date", "datetime"].includes(fieldType) && val && !(val instanceof Date)) {
        try {
          var _dateVal = new Date(val);
          if (_dateVal instanceof Date && _dateVal.toISOString() === val) {
            val = _dateVal;
          }
        } catch (e2) {
          meta.errors.push("Can't convert value ".concat(val, " as Date"));
          val = void 0;
        }
      }
      if (val instanceof Date && fieldConfig) {
        var _valueFormat = widgetConfig.valueFormat;
        if (_valueFormat) {
          val = hooks(val).format(_valueFormat);
        }
      }
      var asyncListValues;
      if (val && fieldConfig !== null && fieldConfig !== void 0 && (_fieldConfig$fieldSet = fieldConfig.fieldSettings) !== null && _fieldConfig$fieldSet !== void 0 && _fieldConfig$fieldSet.asyncFetch) {
        var vals = Array.isArray(val) ? val : [val];
        asyncListValues = vals;
      }
      if (widgetConfig !== null && widgetConfig !== void 0 && widgetConfig.jsonLogicImport) {
        try {
          val = widgetConfig.jsonLogicImport.call(config2.ctx, val);
        } catch (e2) {
          var _e$message;
          meta.errors.push("Can't import value ".concat(val, " using import func of widget ").concat(widget, ": ").concat((_e$message = e2 === null || e2 === void 0 ? void 0 : e2.message) !== null && _e$message !== void 0 ? _e$message : e2));
          val = void 0;
        }
      }
      return {
        valueSrc: "value",
        value: val,
        valueType: widgetConfig === null || widgetConfig === void 0 ? void 0 : widgetConfig.type,
        asyncListValues
      };
    };
    var convertFieldRhs = function convertFieldRhs2(op, vals, conv, config2, not2, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (conv.varKeys.includes(op) && typeof vals[0] == "string") {
        var _meta$settings;
        var field = normalizeField(config2, vals[0], parentField);
        var fieldConfig = getFieldConfig$b(config2, field);
        if (!fieldConfig && !((_meta$settings = meta.settings) !== null && _meta$settings !== void 0 && _meta$settings.allowUnknownFields)) {
          meta.errors.push("No config for field ".concat(field));
          return void 0;
        }
        return {
          valueSrc: "field",
          value: field,
          valueType: fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type
        };
      }
      return void 0;
    };
    var convertLhs = function convertLhs2(isGroup0, jlField, args, conv, config2) {
      var not2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var fieldConfig = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var meta = arguments.length > 7 ? arguments[7] : void 0;
      var parentField = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : null;
      var k2 = Object.keys(jlField)[0];
      var v2 = Object.values(jlField)[0];
      var _parse = function _parse2(k3, v3) {
        return convertFieldLhs(k3, v3, conv, config2, not2, meta, parentField) || convertFuncLhs(k3, v3, conv, config2, not2, fieldConfig, meta, parentField);
      };
      var beforeErrorsCnt = meta.errors.length;
      var field, fieldSrc, having, isGroup;
      var parsed = _parse(k2, v2);
      if (parsed) {
        field = parsed.field;
        fieldSrc = parsed.fieldSrc;
      }
      if (isGroup0) {
        isGroup = true;
        having = args[0];
        args = [];
      }
      if (k2 == "reduce" && Array.isArray(v2) && v2.length == 3) {
        var _v = v2, _v2 = _slicedToArray(_v, 3), filter = _v2[0], acc = _v2[1], init = _v2[2];
        if (isJsonLogic(filter) && init == 0 && isJsonLogic(acc) && Array.isArray(acc["+"]) && acc["+"][0] == 1 && isJsonLogic(acc["+"][1]) && acc["+"][1]["var"] == "accumulator") {
          k2 = Object.keys(filter)[0];
          v2 = Object.values(filter)[0];
          if (k2 == "filter") {
            var _v3 = v2, _v4 = _slicedToArray(_v3, 2), group2 = _v4[0], _filter = _v4[1];
            if (isJsonLogic(group2)) {
              k2 = Object.keys(group2)[0];
              v2 = Object.values(group2)[0];
              var parsedGroup = _parse(k2, v2);
              if (parsedGroup) {
                field = parsedGroup.field;
                fieldSrc = parsedGroup.fieldSrc;
                having = _filter;
                isGroup = true;
              }
            }
          } else {
            var _parsedGroup = _parse(k2, v2);
            if (_parsedGroup) {
              field = _parsedGroup.field;
              fieldSrc = _parsedGroup.fieldSrc;
              isGroup = true;
            }
          }
        }
      }
      var afterErrorsCnt = meta.errors.length;
      if (!field && afterErrorsCnt == beforeErrorsCnt) {
        meta.errors.push("Unknown LHS ".concat(JSON.stringify(jlField)));
      }
      if (!field) return;
      return {
        field,
        fieldSrc,
        having,
        isGroup,
        args
      };
    };
    var convertFieldLhs = function convertFieldLhs2(op, vals, conv, config2, not2, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (!Array.isArray(vals)) vals = [vals];
      var parsed = convertFieldRhs(op, vals, conv, config2, not2, meta, parentField);
      if (parsed) {
        return {
          fieldSrc: "field",
          field: parsed.value
        };
      }
      return void 0;
    };
    var convertFuncLhs = function convertFuncLhs2(op, vals, conv, config2, not2) {
      var fieldConfig = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var meta = arguments.length > 6 ? arguments[6] : void 0;
      var parentField = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      var parsed = convertFuncRhs(op, vals, conv, config2, not2, fieldConfig, meta, parentField);
      if (parsed) {
        return {
          fieldSrc: "func",
          field: parsed.value
        };
      }
      return void 0;
    };
    var convertFuncRhs = function convertFuncRhs2(op, vals, conv, config2, not2) {
      var fieldConfig = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var meta = arguments.length > 6 ? arguments[6] : void 0;
      var parentField = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      if (!op) return void 0;
      var func, argsArr, funcKey;
      var jsonLogicIsMethod = op == "method";
      if (jsonLogicIsMethod) {
        var obj, opts;
        var _vals = _toArray(vals);
        obj = _vals[0];
        func = _vals[1];
        opts = _vals.slice(2);
        argsArr = [obj].concat(_toConsumableArray(opts));
      } else {
        func = op;
        argsArr = vals;
      }
      var fk2 = (jsonLogicIsMethod ? "#" : "") + func;
      var returnType = (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.returnType);
      var funcKeys = (conv.funcs[fk2] || []).filter(function(k2) {
        return fieldConfig ? getFuncConfig$2(config2, k2).returnType == returnType : true;
      });
      if (funcKeys.length) {
        funcKey = funcKeys[0];
      } else {
        var v2 = _defineProperty$1({}, op, vals);
        var _iterator2 = _createForOfIteratorHelper$d(iterateFuncs(config2)), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _step2$value = _slicedToArray(_step2.value, 2), f2 = _step2$value[0], fc2 = _step2$value[1];
            if (fc2.jsonLogicImport && (returnType ? fc2.returnType == returnType : true)) {
              var parsed = void 0;
              try {
                parsed = fc2.jsonLogicImport(v2);
              } catch (_e) {
              }
              if (parsed) {
                funcKey = f2;
                argsArr = parsed;
              }
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (!funcKey) return void 0;
      if (funcKey) {
        var funcConfig = getFuncConfig$2(config2, funcKey);
        var argKeys = Object.keys(funcConfig.args || {});
        var argsObj = argsArr.reduce(function(acc, val, ind) {
          var argKey2 = argKeys[ind];
          var argConfig2 = funcConfig.args[argKey2];
          var argVal2;
          if (argConfig2) {
            argVal2 = convertFromLogic(val, conv, config2, ["val"], meta, false, argConfig2, null, parentField);
          }
          return argVal2 !== void 0 ? _objectSpread$x(_objectSpread$x({}, acc), {}, _defineProperty$1({}, argKey2, argVal2)) : acc;
        }, {});
        for (var argKey in funcConfig.args) {
          var argConfig = funcConfig.args[argKey];
          var argVal = argsObj[argKey];
          if (argVal === void 0) {
            argVal = argConfig === null || argConfig === void 0 ? void 0 : argConfig.defaultValue;
            if (argVal !== void 0) {
              var _argVal;
              argVal = {
                value: argVal,
                valueSrc: (_argVal = argVal) !== null && _argVal !== void 0 && _argVal.func ? "func" : "value",
                valueType: argConfig.type
              };
            }
            if (argVal === void 0) {
              if (argConfig !== null && argConfig !== void 0 && argConfig.isOptional) ;
              else {
                meta.errors.push("No value for arg ".concat(argKey, " of func ").concat(funcKey));
                return void 0;
              }
            } else {
              argsObj[argKey] = argVal;
            }
          }
        }
        return {
          valueSrc: "func",
          value: {
            func: funcKey,
            args: argsObj
          },
          valueType: funcConfig.returnType
        };
      }
      return void 0;
    };
    var convertConj = function convertConj2(op, vals, conv, config2, not2, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var conjKey = conv.conjunctions[op];
      var fieldSeparator = config2.settings.fieldSeparator;
      if (conjKey) {
        var type = "group";
        var children = vals.map(function(v2) {
          return convertFromLogic(v2, conv, config2, ["rule", "group"], meta, false, null, null, parentField);
        }).filter(function(r2) {
          return r2 !== void 0;
        }).reduce(function(acc, r2) {
          return _objectSpread$x(_objectSpread$x({}, acc), {}, _defineProperty$1({}, r2.id, r2));
        }, {});
        var complexFields = Object.values(children).map(function(v2) {
          var _v$properties, _v$properties2;
          return (v2 === null || v2 === void 0 || (_v$properties = v2.properties) === null || _v$properties === void 0 ? void 0 : _v$properties.fieldSrc) == "field" && (v2 === null || v2 === void 0 || (_v$properties2 = v2.properties) === null || _v$properties2 === void 0 ? void 0 : _v$properties2.field);
        }).filter(function(f2) {
          var _f$includes;
          return f2 === null || f2 === void 0 || (_f$includes = f2.includes) === null || _f$includes === void 0 ? void 0 : _f$includes.call(f2, fieldSeparator);
        });
        var complexFieldsGroupAncestors = Object.fromEntries(arrayUniq(complexFields).map(function(f2) {
          var parts = f2.split(fieldSeparator);
          var ancs = Object.fromEntries(parts.slice(0, -1).map(function(f3, i, parts2) {
            return [].concat(_toConsumableArray(parts2.slice(0, i)), [f3]);
          }).map(function(fp) {
            return [fp.join(fieldSeparator), getFieldConfig$b(config2, fp)];
          }).filter(function(_ref) {
            var _ref2 = _slicedToArray(_ref, 2);
            _ref2[0];
            var fc2 = _ref2[1];
            return (fc2 === null || fc2 === void 0 ? void 0 : fc2.type) == "!group";
          }));
          return [f2, Object.keys(ancs)];
        }));
        var properties = {
          conjunction: conjKey,
          not: not2
        };
        var id2 = uuid$1();
        var children1 = {};
        var groupToId = {};
        Object.entries(children).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), k2 = _ref4[0], v2 = _ref4[1];
          if ((v2 === null || v2 === void 0 ? void 0 : v2.type) == "group" || (v2 === null || v2 === void 0 ? void 0 : v2.type) == "rule_group") {
            children1[k2] = v2;
          } else {
            var _v$properties3;
            var field = v2 === null || v2 === void 0 || (_v$properties3 = v2.properties) === null || _v$properties3 === void 0 ? void 0 : _v$properties3.field;
            var groupAncestors = complexFieldsGroupAncestors[field] || [];
            var groupField = groupAncestors[groupAncestors.length - 1];
            if (!groupField) {
              if (v2) {
                children1[k2] = v2;
              }
            } else {
              var ch2 = children1;
              var parentFieldParts = getFieldParts$3(parentField, config2);
              var groupPath = getFieldParts$3(groupField, config2);
              var isInParent = shallowEqual$5(parentFieldParts, groupPath.slice(0, parentFieldParts.length));
              if (!isInParent) parentFieldParts = [];
              var traverseGroupFields = groupField.split(fieldSeparator).slice(parentFieldParts.length).map(function(f2, i, parts) {
                return [].concat(_toConsumableArray(parentFieldParts), _toConsumableArray(parts.slice(0, i)), [f2]).join(fieldSeparator);
              }).map(function(f2) {
                return {
                  f: f2,
                  fc: getFieldConfig$b(config2, f2) || {}
                };
              }).filter(function(_ref5) {
                var fc2 = _ref5.fc;
                return fc2.type != "!struct";
              });
              traverseGroupFields.map(function(_ref6, i) {
                var gf2 = _ref6.f, gfc = _ref6.fc;
                var groupId = groupToId[gf2];
                if (!groupId) {
                  groupId = uuid$1();
                  groupToId[gf2] = groupId;
                  ch2[groupId] = {
                    type: "rule_group",
                    id: groupId,
                    children1: {},
                    properties: {
                      conjunction: conjKey,
                      not: false,
                      field: gf2,
                      fieldSrc: "field",
                      mode: gfc.mode
                    }
                  };
                }
                ch2 = ch2[groupId].children1;
              });
              ch2[k2] = v2;
            }
          }
        });
        return {
          type,
          id: id2,
          children1,
          properties
        };
      }
      return void 0;
    };
    var wrapInDefaultConjRuleGroup = function wrapInDefaultConjRuleGroup2(rule2, groupField, groupFieldConfig, config2) {
      var conj = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : void 0;
      var not2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      if (!rule2) return void 0;
      return {
        type: "rule_group",
        id: uuid$1(),
        children1: _defineProperty$1({}, rule2.id, rule2),
        properties: {
          conjunction: conj || defaultGroupConjunction$1(config2, groupFieldConfig),
          not: not2,
          field: groupField
        }
      };
    };
    var wrapInDefaultConj$1 = function wrapInDefaultConj2(rule2, config2) {
      var not2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      return {
        type: "group",
        id: uuid$1(),
        children1: _defineProperty$1({}, rule2.id, rule2),
        properties: {
          conjunction: defaultGroupConjunction$1(config2),
          not: not2
        }
      };
    };
    var parseRule = function parseRule2(op, arity, vals, parentField, conv, config2, meta) {
      var submeta = createMeta(meta);
      var res = _parseRule(op, arity, vals, parentField, conv, config2, submeta);
      if (!res) {
        meta.errors.push(submeta.errors.join("; ") || "Unknown op ".concat(op, "/").concat(arity));
        return void 0;
      }
      return res;
    };
    var _parseRule = function _parseRule2(op, arity, vals, parentField, conv, config2, meta) {
      var _meta$settings2;
      var isAllOrSomeInForMultiselect = multiselectOps.map(function(opName) {
        var _config$operators$opN;
        return (_config$operators$opN = config2.operators[opName]) === null || _config$operators$opN === void 0 ? void 0 : _config$operators$opN.jsonLogic2;
      }).includes(op);
      var isGroup0 = config2.settings.groupOperators.includes(op) && !isAllOrSomeInForMultiselect;
      var cardinality = isGroup0 ? 0 : arity - 1;
      if (isGroup0) cardinality = 0;
      else if (jlEqOps.includes(op) && cardinality == 1 && vals[1] === null) {
        arity = 1;
        cardinality = 0;
        vals = [vals[0]];
      }
      var opk = op + "/" + cardinality;
      var opKeys = conv.operators[opk];
      if (!opKeys) return;
      var jlField, jlArgs = [];
      if (jlRangeOps.includes(op) && arity == 3) {
        jlField = vals[1];
        jlArgs = [vals[0], vals[2]];
      } else {
        var _vals2 = vals;
        var _vals3 = _toArray(_vals2);
        jlField = _vals3[0];
        jlArgs = _vals3.slice(1);
      }
      if (!isJsonLogic(jlField)) {
        meta.errors.push("Incorrect operands for ".concat(op, ": ").concat(JSON.stringify(vals)));
        return;
      }
      var lhs = convertLhs(isGroup0, jlField, jlArgs, conv, config2, null, null, meta, parentField);
      if (!lhs) return;
      var field = lhs.field, fieldSrc = lhs.fieldSrc, having = lhs.having;
      lhs.isGroup;
      var args = lhs.args;
      var fieldConfig = getFieldConfig$b(config2, field);
      if (!fieldConfig && !((_meta$settings2 = meta.settings) !== null && _meta$settings2 !== void 0 && _meta$settings2.allowUnknownFields)) {
        meta.errors.push("No config for LHS ".concat(field));
        return;
      }
      var opKey = opKeys[0];
      if (opKeys.length > 1 && fieldConfig && fieldConfig.operators) {
        opKeys = opKeys.filter(function(k2) {
          return fieldConfig.operators.includes(k2);
        });
        if (opKeys.length == 0) {
          meta.errors.push("No corresponding ops for LHS ".concat(field));
          return;
        }
        opKey = opKeys[0];
      }
      return {
        field,
        fieldSrc,
        fieldConfig,
        opKey,
        args,
        having
      };
    };
    var convertOp$1 = function convertOp2(op, vals, conv, config2, not2, meta) {
      var _opConfig;
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var _isOneRuleInRuleGroup = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      if (!op) return void 0;
      var jlConjs = Object.values(config2.conjunctions).map(function(_ref7) {
        var jsonLogicConj = _ref7.jsonLogicConj;
        return jsonLogicConj;
      });
      var arity = vals.length;
      var parseRes = parseRule(op, arity, vals, parentField, conv, config2, meta);
      if (!parseRes) return void 0;
      var field = parseRes.field, fieldSrc = parseRes.fieldSrc, fieldConfig = parseRes.fieldConfig, opKey = parseRes.opKey, args = parseRes.args, having = parseRes.having;
      var parentFieldConfig = getFieldConfig$b(config2, parentField);
      var opConfig = config2.operators[opKey];
      var reversedOpConfig = config2.operators[(_opConfig = opConfig) === null || _opConfig === void 0 ? void 0 : _opConfig.reversedOp];
      var opNeedsReverse = false;
      var opCanReverse = !!reversedOpConfig;
      var isRuleGroup = fieldConfig.type == "!group";
      var isInRuleGroup = (parentFieldConfig === null || parentFieldConfig === void 0 ? void 0 : parentFieldConfig.type) == "!group";
      var canRev = opCanReverse && (!!config2.settings.reverseOperatorsForNot || opNeedsReverse || isRuleGroup && !having || !isRuleGroup && isInRuleGroup && !_isOneRuleInRuleGroup);
      var needRev = not2 && canRev || opNeedsReverse;
      var conj;
      var havingVals;
      var havingNot = false;
      var canRevHaving = !!config2.settings.reverseOperatorsForNot;
      if ((fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) == "!group" && having) {
        conj = Object.keys(having)[0];
        havingVals = having[conj];
        if (!Array.isArray(havingVals)) havingVals = [havingVals];
        var match = matchAgainstTemplates(having, conv, meta);
        while (conj == "!" && !match) {
          var isEmptyOp = conj == "!" && havingVals.length == 1 && havingVals[0] && isJsonLogic(havingVals[0]) && conv.varKeys.includes(Object.keys(havingVals[0])[0]);
          if (isEmptyOp) {
            break;
          }
          havingNot = !havingNot;
          having = having["!"];
          conj = Object.keys(having)[0];
          havingVals = having[conj];
          if (canRevHaving && jlConjs.includes(conj) && havingVals.length == 1) {
            having = having[conj][0];
            conj = Object.keys(having)[0];
            havingVals = having[conj];
          }
          var matchTemp = matchAgainstTemplates(having, conv, meta);
          match = matchTemp ? matchTemp : match;
        }
        if (!Array.isArray(havingVals)) {
          havingVals = [havingVals];
        }
        if (match) {
          havingVals = [];
          havingVals[0] = match.jlField;
          match.jlArgs.forEach(function(arg) {
            return havingVals.push(arg);
          });
          conj = match.newOp;
        }
      }
      if (needRev) {
        not2 = !not2;
        opKey = opConfig.reversedOp;
        opConfig = config2.operators[opKey];
      }
      var widget = getWidgetForFieldOp$3(config2, field, opKey, null);
      var convertedArgs = args.map(function(v2) {
        return convertFromLogic(v2, conv, config2, ["val"], meta, false, fieldConfig, widget, parentField);
      });
      if (convertedArgs.filter(function(v2) {
        return v2 === void 0;
      }).length) {
        return void 0;
      }
      var res;
      fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type;
      if ((fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) == "!group" && having) {
        if (conv.conjunctions[conj] !== void 0) {
          res = convertConj(conj, havingVals, conv, config2, havingNot, meta, field, true);
        } else {
          res = convertOp2(conj, havingVals, conv, config2, havingNot, meta, field, true);
          if (res) {
            var _res$properties;
            if (res.type === "rule_group" && ((_res$properties = res.properties) === null || _res$properties === void 0 ? void 0 : _res$properties.field) !== field) {
              res = wrapInDefaultConjRuleGroup(res, field, fieldConfig, config2);
            }
            Object.assign(res.properties, {
              conjunction: defaultGroupConjunction$1(config2, fieldConfig)
            });
          }
        }
        if (!res) return void 0;
        res.type = "rule_group";
        Object.assign(res.properties, {
          field,
          mode: fieldConfig.mode,
          operator: opKey
        });
        if (fieldConfig.mode == "array") {
          Object.assign(res.properties, {
            value: convertedArgs.map(function(v2) {
              return v2.value;
            }),
            valueSrc: convertedArgs.map(function(v2) {
              return v2.valueSrc;
            }),
            valueType: convertedArgs.map(function(v2) {
              return v2.valueType;
            })
          });
        }
        if (not2) {
          res = wrapInDefaultConj$1(res, config2, not2);
        }
      } else if ((fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) == "!group" && !having) {
        res = {
          type: "rule_group",
          id: uuid$1(),
          children1: {},
          properties: {
            conjunction: defaultGroupConjunction$1(config2, fieldConfig),
            // tip: `not: true` have no effect if there are no children! "NOT" is hidden in UI and is ignored during export
            // So it's better to reverse group op (see `canRev =`), or wrap in conj with NOT as a last resort
            not: false,
            mode: fieldConfig.mode,
            field,
            operator: opKey
          }
        };
        if (fieldConfig.mode === "array") {
          Object.assign(res.properties, {
            value: convertedArgs.map(function(v2) {
              return v2.value;
            }),
            valueSrc: convertedArgs.map(function(v2) {
              return v2.valueSrc;
            }),
            valueType: convertedArgs.map(function(v2) {
              return v2.valueType;
            })
          });
        }
        if (not2) {
          res = wrapInDefaultConj$1(res, config2, not2);
        }
      } else {
        var asyncListValuesArr = convertedArgs.map(function(v2) {
          return v2.asyncListValues;
        }).filter(function(v2) {
          return v2 != void 0;
        });
        var asyncListValues = asyncListValuesArr.length ? asyncListValuesArr[0] : void 0;
        res = {
          type: "rule",
          id: uuid$1(),
          properties: _objectSpread$x({
            field,
            fieldSrc,
            operator: opKey,
            value: convertedArgs.map(function(v2) {
              return v2.value;
            }),
            valueSrc: convertedArgs.map(function(v2) {
              return v2.valueSrc;
            }),
            valueType: convertedArgs.map(function(v2) {
              return v2.valueType;
            })
          }, asyncListValues ? {
            asyncListValues
          } : {})
        };
        if (not2 || _isOneRuleInRuleGroup) {
          res = wrapInDefaultConj$1(res, config2, not2);
        }
      }
      return res;
    };
    var convertIf = function convertIf2(op, vals, conv, config2, not2, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if ((op === null || op === void 0 ? void 0 : op.toLowerCase()) !== "if") return void 0;
      var flat = flatizeTernary$1(vals);
      var cases = flat.map(function(_ref8) {
        var _ref9 = _slicedToArray(_ref8, 2), cond = _ref9[0], val = _ref9[1];
        return [cond ? convertFromLogic(cond, conv, config2, ["rule", "group"], meta, false, null, null, parentField) : null, buildCaseValProperties$1(config2, meta, conv, val)];
      });
      var children1 = cases.map(function(_ref10) {
        var _ref11 = _slicedToArray(_ref10, 2), cond = _ref11[0], val = _ref11[1];
        return wrapInCase(cond, val, config2, meta);
      });
      var switchI = {
        type: "switch_group",
        id: uuid$1(),
        children1,
        properties: {}
      };
      return switchI;
    };
    var flatizeTernary$1 = function flatizeTernary2(children) {
      var flat = [];
      function _processTernaryChildren(tern) {
        var _tern = _slicedToArray(tern, 3), cond = _tern[0], if_val = _tern[1], else_val = _tern[2];
        flat.push([cond, if_val]);
        var else_op = isJsonLogic(else_val) ? Object.keys(else_val)[0] : null;
        if ((else_op === null || else_op === void 0 ? void 0 : else_op.toLowerCase()) === "if") {
          _processTernaryChildren(else_val[else_op]);
        } else {
          flat.push([void 0, else_val]);
        }
      }
      _processTernaryChildren(children);
      return flat;
    };
    var wrapInCase = function wrapInCase2(cond, valProperties, config2, meta) {
      var caseI;
      if (cond) {
        caseI = _objectSpread$x({}, cond);
        if (caseI.type) {
          if (caseI.type != "group") {
            caseI = wrapInDefaultConj$1(caseI, config2);
          }
          caseI.type = "case_group";
        } else {
          meta.errors.push("Unexpected case: ".concat(JSON.stringify(caseI)));
          caseI = void 0;
        }
      } else {
        caseI = {
          id: uuid$1(),
          type: "case_group",
          properties: {}
        };
      }
      if (caseI) {
        caseI.properties = _objectSpread$x(_objectSpread$x({}, caseI.properties), valProperties);
      }
      return caseI;
    };
    var buildCaseValProperties$1 = function buildCaseValProperties2(config2, meta, conv, val) {
      var caseValueFieldConfig = getFieldConfig$b(config2, "!case_value");
      if (!caseValueFieldConfig) {
        meta.errors.push("Missing caseValueField in settings");
        return void 0;
      }
      var widget = caseValueFieldConfig.mainWidget;
      var widgetDef = config2.widgets[widget];
      if (!widgetDef) {
        meta.errors.push("No widget ".concat(widget, " for case value"));
        return void 0;
      }
      var convVal = convertFromLogic(val, conv, config2, ["val", "case_val"], meta, false, caseValueFieldConfig, widget);
      if (convVal == void 0) {
        return void 0;
      }
      var value2 = convVal.value, valueSrc = convVal.valueSrc, valueType = convVal.valueType;
      var valProperties = {
        value: [value2],
        valueSrc: [valueSrc !== null && valueSrc !== void 0 ? valueSrc : "value"],
        valueType: [valueType !== null && valueType !== void 0 ? valueType : widgetDef === null || widgetDef === void 0 ? void 0 : widgetDef.type],
        field: "!case_value"
      };
      return valProperties;
    };
    var spel2js = { exports: {} };
    (function(module2, exports2) {
      (function webpackUniversalModuleDefinition(root2, factory) {
        module2.exports = factory();
      })(commonjsGlobal, function() {
        return (
          /******/
          function(modules) {
            var installedModules = {};
            function __webpack_require__(moduleId) {
              if (installedModules[moduleId]) {
                return installedModules[moduleId].exports;
              }
              var module3 = installedModules[moduleId] = {
                /******/
                i: moduleId,
                /******/
                l: false,
                /******/
                exports: {}
                /******/
              };
              modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
              module3.l = true;
              return module3.exports;
            }
            __webpack_require__.m = modules;
            __webpack_require__.c = installedModules;
            __webpack_require__.d = function(exports3, name, getter) {
              if (!__webpack_require__.o(exports3, name)) {
                Object.defineProperty(exports3, name, {
                  /******/
                  configurable: false,
                  /******/
                  enumerable: true,
                  /******/
                  get: getter
                  /******/
                });
              }
            };
            __webpack_require__.n = function(module3) {
              var getter = module3 && module3.__esModule ? (
                /******/
                function getDefault() {
                  return module3["default"];
                }
              ) : (
                /******/
                function getModuleExports() {
                  return module3;
                }
              );
              __webpack_require__.d(getter, "a", getter);
              return getter;
            };
            __webpack_require__.o = function(object, property2) {
              return Object.prototype.hasOwnProperty.call(object, property2);
            };
            __webpack_require__.p = "";
            return __webpack_require__(__webpack_require__.s = 3);
          }([
            /* 0 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              function createSpelNode(nodeType, position) {
                var node = {}, type = nodeType || "Abstract", children = [], parent2 = null, activeContext;
                node._type = type;
                node.getType = function() {
                  return type;
                };
                node.setType = function(nodeType2) {
                  type = nodeType2;
                };
                node.getChildren = function() {
                  return children;
                };
                node.addChild = function(childNode) {
                  if (!childNode) {
                    return;
                  }
                  if (!childNode.setParent) {
                    throw {
                      name: "Error",
                      message: "Trying to add a child which is not a node: " + JSON.stringify(childNode)
                    };
                  }
                  childNode.setParent(node);
                  children.push(childNode);
                };
                node.getParent = function() {
                  return parent2;
                };
                node.setParent = function(parentNode) {
                  parent2 = parentNode;
                };
                node.getContext = function(state) {
                  return activeContext || state.activeContext.peek();
                };
                node.setContext = function(nodeContext) {
                  activeContext = nodeContext;
                };
                node.getStartPosition = function() {
                  return position >> 16;
                };
                node.getEndPosition = function() {
                  return position & 65535;
                };
                node.getValue = function() {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "SpelNode#getValue() must be overridden."
                  };
                };
                node.toString = function() {
                  var s = "Kind: " + node.getType();
                  s += ", Children: [";
                  for (var i = 0, l2 = node.getChildren().length; i < l2; i += 1) {
                    s += "{" + node.getChildren()[i] + "}, ";
                  }
                  s += "]";
                  return s;
                };
                if (position === 0) {
                  throw {
                    name: "Error",
                    message: "Position cannot be 0"
                  };
                }
                for (var _len = arguments.length, operands = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                  operands[_key - 2] = arguments[_key];
                }
                if (operands) {
                  operands.forEach(function(operand) {
                    node.addChild(operand);
                  });
                }
                return node;
              }
              exports3.SpelNode = {
                create: createSpelNode
              };
            },
            /* 1 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Stack = Stack2;
              function Stack2(startingElements) {
                this.elements = startingElements || [];
              }
              Stack2.prototype.push = function(el) {
                this.elements.push(el);
                return el;
              };
              Stack2.prototype.pop = function() {
                return this.elements.pop();
              };
              Stack2.prototype.peek = function() {
                return this.elements[this.elements.length - 1];
              };
              Stack2.prototype.empty = function() {
                return this.elements.length > 0;
              };
              Stack2.prototype.search = function(el) {
                return this.elements.length - this.elements.indexOf(el);
              };
            },
            /* 2 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              var types2 = {
                LITERAL_INT: 1,
                //tested
                LITERAL_LONG: 2,
                //tested
                LITERAL_HEXINT: 3,
                //tested
                LITERAL_HEXLONG: 4,
                //tested
                LITERAL_STRING: 5,
                //tested
                LITERAL_REAL: 6,
                //tested
                LITERAL_REAL_FLOAT: 7,
                //tested
                LPAREN: "(",
                //tested
                RPAREN: ")",
                //tested
                COMMA: ",",
                //tested
                IDENTIFIER: 0,
                //tested
                COLON: ":",
                //tested
                HASH: "#",
                //tested
                RSQUARE: "]",
                //tested
                LSQUARE: "[",
                //tested
                LCURLY: "{",
                //tested
                RCURLY: "}",
                //tested
                DOT: ".",
                //tested
                PLUS: "+",
                //tested
                STAR: "*",
                //tested
                MINUS: "-",
                //tested
                SELECT_FIRST: "^[",
                //tested
                SELECT_LAST: "$[",
                //tested
                QMARK: "?",
                //tested
                PROJECT: "![",
                //tested
                DIV: "/",
                //tested
                GE: ">=",
                //tested
                GT: ">",
                //tested
                LE: "<=",
                //tested
                LT: "<",
                //tested
                EQ: "==",
                //tested
                NE: "!=",
                //tested
                MOD: "%",
                //tested
                NOT: "!",
                //tested
                ASSIGN: "=",
                //tested
                INSTANCEOF: "instanceof",
                //test fails
                MATCHES: "matches",
                //test fails
                BETWEEN: "between",
                //test fails
                SELECT: "?[",
                //tested
                POWER: "^",
                //tested
                ELVIS: "?:",
                //tested
                SAFE_NAVI: "?.",
                //tested
                BEAN_REF: "@",
                //tested
                SYMBOLIC_OR: "||",
                //tested
                SYMBOLIC_AND: "&&",
                //tested
                INC: "++",
                //tested
                DEC: "--"
                //tested
              };
              function TokenKind(type) {
                this.type = type;
                this.tokenChars = types2[type];
                this._hasPayload = typeof types2[type] !== "string";
                if (typeof types2[type] === "number") {
                  this._ordinal = types2[type];
                }
              }
              for (var t2 in types2) {
                if (types2.hasOwnProperty(t2)) {
                  TokenKind[t2] = new TokenKind(t2);
                }
              }
              TokenKind.prototype.toString = function() {
                return this.type + (this.tokenChars.length !== 0 ? "(" + this.tokenChars + ")" : "");
              };
              TokenKind.prototype.getLength = function() {
                return this.tokenChars.length;
              };
              TokenKind.prototype.hasPayload = function() {
                return this._hasPayload;
              };
              TokenKind.prototype.valueOf = function(id2) {
                for (var t3 in types2) {
                  if (types2.hasOwnProperty(t3) && types2[t3] === id2) {
                    return TokenKind[t3];
                  }
                }
              };
              TokenKind.prototype.ordinal = function() {
                return this._ordinal;
              };
              exports3.TokenKind = TokenKind;
            },
            /* 3 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.StandardContext = exports3.SpelExpressionEvaluator = void 0;
              var _SpelExpressionEvaluator = __webpack_require__(4);
              var _StandardContext = __webpack_require__(50);
              exports3.SpelExpressionEvaluator = _SpelExpressionEvaluator.SpelExpressionEvaluator;
              exports3.StandardContext = _StandardContext.StandardContext;
            },
            /* 4 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.SpelExpressionEvaluator = void 0;
              var _SpelExpressionParser = __webpack_require__(5);
              var _Stack2 = __webpack_require__(1);
              var spelExpressionEvaluator = {};
              function evalCompiled(compiledExpression, context2, locals) {
                var activeContext = new _Stack2.Stack(), state;
                if (!context2) {
                  context2 = {};
                }
                activeContext.push(context2);
                state = {
                  rootContext: context2,
                  activeContext,
                  locals
                };
                return compiledExpression.getValue(state);
              }
              spelExpressionEvaluator.compile = function(expression) {
                var compiledExpression = (0, _SpelExpressionParser.SpelExpressionParser)().parse(expression);
                return {
                  eval: function _eval(context2, locals) {
                    return evalCompiled(compiledExpression, context2, locals);
                  },
                  _compiledExpression: compiledExpression
                };
              };
              spelExpressionEvaluator.eval = function(expression, context2, locals) {
                return spelExpressionEvaluator.compile(expression).eval(context2, locals);
              };
              exports3.SpelExpressionEvaluator = spelExpressionEvaluator;
            },
            /* 5 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.SpelExpressionParser = void 0;
              var _TokenKind = __webpack_require__(2);
              var _Tokenizer = __webpack_require__(6);
              var _BooleanLiteral = __webpack_require__(8);
              var _NumberLiteral = __webpack_require__(9);
              var _StringLiteral = __webpack_require__(10);
              var _NullLiteral = __webpack_require__(11);
              var _FunctionReference = __webpack_require__(12);
              var _MethodReference = __webpack_require__(13);
              var _PropertyReference = __webpack_require__(14);
              var _VariableReference = __webpack_require__(15);
              var _CompoundExpression = __webpack_require__(16);
              var _Indexer = __webpack_require__(17);
              var _Assign = __webpack_require__(18);
              var _OpEQ = __webpack_require__(19);
              var _OpNE = __webpack_require__(20);
              var _OpGE = __webpack_require__(21);
              var _OpGT = __webpack_require__(22);
              var _OpLE = __webpack_require__(23);
              var _OpLT = __webpack_require__(24);
              var _OpPlus = __webpack_require__(25);
              var _OpMinus = __webpack_require__(26);
              var _OpMultiply = __webpack_require__(27);
              var _OpDivide = __webpack_require__(28);
              var _OpModulus = __webpack_require__(29);
              var _OpPower = __webpack_require__(30);
              var _OpInc = __webpack_require__(31);
              var _OpDec = __webpack_require__(32);
              var _OpNot = __webpack_require__(33);
              var _OpAnd = __webpack_require__(34);
              var _OpOr = __webpack_require__(35);
              var _OpMatches = __webpack_require__(36);
              var _Ternary = __webpack_require__(37);
              var _Elvis = __webpack_require__(38);
              var _InlineList = __webpack_require__(39);
              var _InlineMap = __webpack_require__(40);
              var _Selection = __webpack_require__(41);
              var _Projection = __webpack_require__(42);
              var _OpInstanceof = __webpack_require__(43);
              var _OpBetween = __webpack_require__(44);
              var _TypeReference = __webpack_require__(45);
              var _BeanReference = __webpack_require__(46);
              var _Identifier = __webpack_require__(47);
              var _QualifiedIdentifier = __webpack_require__(48);
              var _ConstructorReference = __webpack_require__(49);
              exports3.SpelExpressionParser = function SpelExpressionParser() {
                var VALID_QUALIFIED_ID_PATTERN = new RegExp("[\\p{L}\\p{N}_$]+");
                var constructedNodes = [];
                var expressionString;
                var tokenStream;
                var tokenStreamLength;
                var tokenStreamPointer;
                function setConfiguration(config2) {
                }
                function parse(expression, context2) {
                  try {
                    expressionString = expression;
                    tokenStream = _Tokenizer.Tokenizer.tokenize(expression);
                    tokenStreamLength = tokenStream.length;
                    tokenStreamPointer = 0;
                    constructedNodes = [];
                    var ast = eatExpression();
                    if (moreTokens()) {
                      raiseInternalException(peekToken().startPos, "MORE_INPUT", nextToken().toString());
                    }
                    return ast;
                  } catch (e2) {
                    throw e2.message;
                  }
                }
                function eatExpression() {
                  var expr = eatLogicalOrExpression();
                  if (moreTokens()) {
                    var token2 = peekToken();
                    if (token2.getKind() === _TokenKind.TokenKind.ASSIGN) {
                      if (expr === null) {
                        expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 1));
                      }
                      nextToken();
                      var assignedValue = eatLogicalOrExpression();
                      return _Assign.Assign.create(toPosToken(token2), expr, assignedValue);
                    }
                    if (token2.getKind() === _TokenKind.TokenKind.ELVIS) {
                      if (expr === null) {
                        expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 2));
                      }
                      nextToken();
                      var valueIfNull = eatExpression();
                      if (valueIfNull === null) {
                        valueIfNull = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos + 1, token2.endPos + 1));
                      }
                      return _Elvis.Elvis.create(toPosToken(token2), expr, valueIfNull);
                    }
                    if (token2.getKind() === _TokenKind.TokenKind.QMARK) {
                      if (expr === null) {
                        expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 1));
                      }
                      nextToken();
                      var ifTrueExprValue = eatExpression();
                      eatToken(_TokenKind.TokenKind.COLON);
                      var ifFalseExprValue = eatExpression();
                      return _Ternary.Ternary.create(toPosToken(token2), expr, ifTrueExprValue, ifFalseExprValue);
                    }
                  }
                  return expr;
                }
                function eatLogicalOrExpression() {
                  var expr = eatLogicalAndExpression();
                  while (peekIdentifierToken("or") || peekTokenOne(_TokenKind.TokenKind.SYMBOLIC_OR)) {
                    var token2 = nextToken();
                    var rhExpr = eatLogicalAndExpression();
                    checkOperands(token2, expr, rhExpr);
                    expr = _OpOr.OpOr.create(toPosToken(token2), expr, rhExpr);
                  }
                  return expr;
                }
                function eatLogicalAndExpression() {
                  var expr = eatRelationalExpression();
                  while (peekIdentifierToken("and") || peekTokenOne(_TokenKind.TokenKind.SYMBOLIC_AND)) {
                    var token2 = nextToken();
                    var rhExpr = eatRelationalExpression();
                    checkOperands(token2, expr, rhExpr);
                    expr = _OpAnd.OpAnd.create(toPosToken(token2), expr, rhExpr);
                  }
                  return expr;
                }
                function eatRelationalExpression() {
                  var expr = eatSumExpression();
                  var relationalOperatorToken = maybeEatRelationalOperator();
                  if (relationalOperatorToken !== null) {
                    var token2 = nextToken();
                    var rhExpr = eatSumExpression();
                    checkOperands(token2, expr, rhExpr);
                    var tk = relationalOperatorToken.kind;
                    if (relationalOperatorToken.isNumericRelationalOperator()) {
                      var pos = toPosToken(token2);
                      if (tk === _TokenKind.TokenKind.GT) {
                        return _OpGT.OpGT.create(pos, expr, rhExpr);
                      }
                      if (tk === _TokenKind.TokenKind.LT) {
                        return _OpLT.OpLT.create(pos, expr, rhExpr);
                      }
                      if (tk === _TokenKind.TokenKind.LE) {
                        return _OpLE.OpLE.create(pos, expr, rhExpr);
                      }
                      if (tk === _TokenKind.TokenKind.GE) {
                        return _OpGE.OpGE.create(pos, expr, rhExpr);
                      }
                      if (tk === _TokenKind.TokenKind.EQ) {
                        return _OpEQ.OpEQ.create(pos, expr, rhExpr);
                      }
                      return _OpNE.OpNE.create(pos, expr, rhExpr);
                    }
                    if (tk === _TokenKind.TokenKind.INSTANCEOF) {
                      return _OpInstanceof.OpInstanceof.create(toPosToken(token2), expr, rhExpr);
                    }
                    if (tk === _TokenKind.TokenKind.MATCHES) {
                      return _OpMatches.OpMatches.create(toPosToken(token2), expr, rhExpr);
                    }
                    return _OpBetween.OpBetween.create(toPosToken(token2), expr, rhExpr);
                  }
                  return expr;
                }
                function eatSumExpression() {
                  var expr = eatProductExpression();
                  while (peekTokenAny(_TokenKind.TokenKind.PLUS, _TokenKind.TokenKind.MINUS, _TokenKind.TokenKind.INC)) {
                    var token2 = nextToken();
                    var rhExpr = eatProductExpression();
                    checkRightOperand(token2, rhExpr);
                    if (token2.getKind() === _TokenKind.TokenKind.PLUS) {
                      expr = _OpPlus.OpPlus.create(toPosToken(token2), expr, rhExpr);
                    } else if (token2.getKind() === _TokenKind.TokenKind.MINUS) {
                      expr = _OpMinus.OpMinus.create(toPosToken(token2), expr, rhExpr);
                    }
                  }
                  return expr;
                }
                function eatProductExpression() {
                  var expr = eatPowerIncDecExpression();
                  while (peekTokenAny(_TokenKind.TokenKind.STAR, _TokenKind.TokenKind.DIV, _TokenKind.TokenKind.MOD)) {
                    var token2 = nextToken();
                    var rhExpr = eatPowerIncDecExpression();
                    checkOperands(token2, expr, rhExpr);
                    if (token2.getKind() === _TokenKind.TokenKind.STAR) {
                      expr = _OpMultiply.OpMultiply.create(toPosToken(token2), expr, rhExpr);
                    } else if (token2.getKind() === _TokenKind.TokenKind.DIV) {
                      expr = _OpDivide.OpDivide.create(toPosToken(token2), expr, rhExpr);
                    } else {
                      expr = _OpModulus.OpModulus.create(toPosToken(token2), expr, rhExpr);
                    }
                  }
                  return expr;
                }
                function eatPowerIncDecExpression() {
                  var expr = eatUnaryExpression(), token2;
                  if (peekTokenOne(_TokenKind.TokenKind.POWER)) {
                    token2 = nextToken();
                    var rhExpr = eatUnaryExpression();
                    checkRightOperand(token2, rhExpr);
                    return _OpPower.OpPower.create(toPosToken(token2), expr, rhExpr);
                  }
                  if (expr !== null && peekTokenAny(_TokenKind.TokenKind.INC, _TokenKind.TokenKind.DEC)) {
                    token2 = nextToken();
                    if (token2.getKind() === _TokenKind.TokenKind.INC) {
                      return _OpInc.OpInc.create(toPosToken(token2), true, expr);
                    }
                    return _OpDec.OpDec.create(toPosToken(token2), true, expr);
                  }
                  return expr;
                }
                function eatUnaryExpression() {
                  var token2, expr;
                  if (peekTokenAny(_TokenKind.TokenKind.PLUS, _TokenKind.TokenKind.MINUS, _TokenKind.TokenKind.NOT)) {
                    token2 = nextToken();
                    expr = eatUnaryExpression();
                    if (token2.getKind() === _TokenKind.TokenKind.NOT) {
                      return _OpNot.OpNot.create(toPosToken(token2), expr);
                    }
                    if (token2.getKind() === _TokenKind.TokenKind.PLUS) {
                      return _OpPlus.OpPlus.create(toPosToken(token2), expr);
                    }
                    return _OpMinus.OpMinus.create(toPosToken(token2), expr);
                  }
                  if (peekTokenAny(_TokenKind.TokenKind.INC, _TokenKind.TokenKind.DEC)) {
                    token2 = nextToken();
                    expr = eatUnaryExpression();
                    if (token2.getKind() === _TokenKind.TokenKind.INC) {
                      return _OpInc.OpInc.create(toPosToken(token2), false, expr);
                    }
                    return _OpDec.OpDec.create(toPosToken(token2), false, expr);
                  }
                  return eatPrimaryExpression();
                }
                function eatPrimaryExpression() {
                  var nodes = [];
                  var start = eatStartNode();
                  nodes.push(start);
                  while (maybeEatNode()) {
                    nodes.push(pop());
                  }
                  if (nodes.length === 1) {
                    return nodes[0];
                  }
                  return _CompoundExpression.CompoundExpression.create(toPosBounds(start.getStartPosition(), nodes[nodes.length - 1].getEndPosition()), nodes);
                }
                function maybeEatNode() {
                  var expr = null;
                  if (peekTokenAny(_TokenKind.TokenKind.DOT, _TokenKind.TokenKind.SAFE_NAVI)) {
                    expr = eatDottedNode();
                  } else {
                    expr = maybeEatNonDottedNode();
                  }
                  if (expr === null) {
                    return false;
                  } else {
                    push(expr);
                    return true;
                  }
                }
                function maybeEatNonDottedNode() {
                  if (peekTokenOne(_TokenKind.TokenKind.LSQUARE)) {
                    if (maybeEatIndexer()) {
                      return pop();
                    }
                  }
                  return null;
                }
                function eatDottedNode() {
                  var token2 = nextToken();
                  var nullSafeNavigation = token2.getKind() === _TokenKind.TokenKind.SAFE_NAVI;
                  if (maybeEatMethodOrProperty(nullSafeNavigation) || maybeEatFunctionOrVar() || maybeEatProjection(nullSafeNavigation) || maybeEatSelection(nullSafeNavigation)) {
                    return pop();
                  }
                  if (peekToken() === null) {
                    raiseInternalException(token2.startPos, "OOD");
                  } else {
                    raiseInternalException(token2.startPos, "UNEXPECTED_DATA_AFTER_DOT", toString2(peekToken()));
                  }
                  return null;
                }
                function maybeEatFunctionOrVar() {
                  if (!peekTokenOne(_TokenKind.TokenKind.HASH)) {
                    return false;
                  }
                  var token2 = nextToken();
                  var functionOrVariableName = eatToken(_TokenKind.TokenKind.IDENTIFIER);
                  var args = maybeEatMethodArgs();
                  if (args === null) {
                    push(_VariableReference.VariableReference.create(functionOrVariableName.data, toPosBounds(token2.startPos, functionOrVariableName.endPos)));
                    return true;
                  }
                  push(_FunctionReference.FunctionReference.create(functionOrVariableName.data, toPosBounds(token2.startPos, functionOrVariableName.endPos), args));
                  return true;
                }
                function maybeEatMethodArgs() {
                  if (!peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                    return null;
                  }
                  var args = [];
                  consumeArguments(args);
                  eatToken(_TokenKind.TokenKind.RPAREN);
                  return args;
                }
                function eatConstructorArgs(accumulatedArguments) {
                  if (!peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                    raiseInternalException(toPosToken(peekToken()), "MISSING_CONSTRUCTOR_ARGS");
                  }
                  consumeArguments(accumulatedArguments);
                  eatToken(_TokenKind.TokenKind.RPAREN);
                }
                function consumeArguments(accumulatedArguments) {
                  var pos = peekToken().startPos;
                  var next;
                  do {
                    nextToken();
                    var token2 = peekToken();
                    if (token2 === null) {
                      raiseInternalException(pos, "RUN_OUT_OF_ARGUMENTS");
                    }
                    if (token2.getKind() !== _TokenKind.TokenKind.RPAREN) {
                      accumulatedArguments.push(eatExpression());
                    }
                    next = peekToken();
                  } while (next !== null && next.kind === _TokenKind.TokenKind.COMMA);
                  if (next === null) {
                    raiseInternalException(pos, "RUN_OUT_OF_ARGUMENTS");
                  }
                }
                function eatStartNode() {
                  if (maybeEatLiteral()) {
                    return pop();
                  } else if (maybeEatParenExpression()) {
                    return pop();
                  } else if (maybeEatTypeReference() || maybeEatNullReference() || maybeEatConstructorReference() || maybeEatMethodOrProperty(false) || maybeEatFunctionOrVar()) {
                    return pop();
                  } else if (maybeEatBeanReference()) {
                    return pop();
                  } else if (maybeEatProjection(false) || maybeEatSelection(false) || maybeEatIndexer()) {
                    return pop();
                  } else if (maybeEatInlineListOrMap()) {
                    return pop();
                  } else {
                    return null;
                  }
                }
                function maybeEatBeanReference() {
                  if (peekTokenOne(_TokenKind.TokenKind.BEAN_REF)) {
                    var beanRefToken = nextToken();
                    var beanNameToken = null;
                    var beanName = null;
                    if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                      beanNameToken = eatToken(_TokenKind.TokenKind.IDENTIFIER);
                      beanName = beanNameToken.data;
                    } else if (peekTokenOne(_TokenKind.TokenKind.LITERAL_STRING)) {
                      beanNameToken = eatToken(_TokenKind.TokenKind.LITERAL_STRING);
                      beanName = beanNameToken.stringValue();
                      beanName = beanName.substring(1, beanName.length() - 1);
                    } else {
                      raiseInternalException(beanRefToken.startPos, "INVALID_BEAN_REFERENCE");
                    }
                    var beanReference = _BeanReference.BeanReference.create(toPosToken(beanNameToken), beanName);
                    push(beanReference);
                    return true;
                  }
                  return false;
                }
                function maybeEatTypeReference() {
                  if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                    var typeName = peekToken();
                    if (typeName.stringValue() !== "T") {
                      return false;
                    }
                    var token2 = nextToken();
                    if (peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                      push(_PropertyReference.PropertyReference.create(token2.stringValue(), toPosToken(token2)));
                      return true;
                    }
                    eatToken(_TokenKind.TokenKind.LPAREN);
                    var node = eatPossiblyQualifiedId();
                    var dims = 0;
                    while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                      eatToken(_TokenKind.TokenKind.RSQUARE);
                      dims++;
                    }
                    eatToken(_TokenKind.TokenKind.RPAREN);
                    push(_TypeReference.TypeReference.create(toPosToken(typeName), node, dims));
                    return true;
                  }
                  return false;
                }
                function maybeEatNullReference() {
                  if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                    var nullToken = peekToken();
                    if (nullToken.stringValue().toLowerCase() !== "null") {
                      return false;
                    }
                    nextToken();
                    push(_NullLiteral.NullLiteral.create(toPosToken(nullToken)));
                    return true;
                  }
                  return false;
                }
                function maybeEatProjection(nullSafeNavigation) {
                  var token2 = peekToken();
                  if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.PROJECT, true)) {
                    return false;
                  }
                  var expr = eatExpression();
                  eatToken(_TokenKind.TokenKind.RSQUARE);
                  push(_Projection.Projection.create(nullSafeNavigation, toPosToken(token2), expr));
                  return true;
                }
                function maybeEatInlineListOrMap() {
                  var token2 = peekToken(), listElements = [];
                  if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.LCURLY, true)) {
                    return false;
                  }
                  var expr = null;
                  var closingCurly = peekToken();
                  if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.RCURLY, true)) {
                    expr = _InlineList.InlineList.create(toPosBounds(token2.startPos, closingCurly.endPos));
                  } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COLON, true)) {
                    closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                    expr = _InlineMap.InlineMap.create(toPosBounds(token2.startPos, closingCurly.endPos));
                  } else {
                    var firstExpression = eatExpression();
                    if (peekTokenOne(_TokenKind.TokenKind.RCURLY)) {
                      listElements.push(firstExpression);
                      closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                      expr = _InlineList.InlineList.create(toPosBounds(token2.startPos, closingCurly.endPos), listElements);
                    } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true)) {
                      listElements.push(firstExpression);
                      do {
                        listElements.push(eatExpression());
                      } while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true));
                      closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                      expr = _InlineList.InlineList.create(toPosToken(token2.startPos, closingCurly.endPos), listElements);
                    } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COLON, true)) {
                      var mapElements = [];
                      mapElements.push(firstExpression);
                      mapElements.push(eatExpression());
                      while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true)) {
                        mapElements.push(eatExpression());
                        eatToken(_TokenKind.TokenKind.COLON);
                        mapElements.push(eatExpression());
                      }
                      closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                      expr = _InlineMap.InlineMap.create(toPosBounds(token2.startPos, closingCurly.endPos), mapElements);
                    } else {
                      raiseInternalException(token2.startPos, "OOD");
                    }
                  }
                  push(expr);
                  return true;
                }
                function maybeEatIndexer() {
                  var token2 = peekToken();
                  if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                    return false;
                  }
                  var expr = eatExpression();
                  eatToken(_TokenKind.TokenKind.RSQUARE);
                  push(_Indexer.Indexer.create(toPosToken(token2), expr));
                  return true;
                }
                function maybeEatSelection(nullSafeNavigation) {
                  var token2 = peekToken();
                  if (!peekSelectToken()) {
                    return false;
                  }
                  nextToken();
                  var expr = eatExpression();
                  if (expr === null) {
                    raiseInternalException(toPosToken(token2), "MISSING_SELECTION_EXPRESSION");
                  }
                  eatToken(_TokenKind.TokenKind.RSQUARE);
                  if (token2.getKind() === _TokenKind.TokenKind.SELECT_FIRST) {
                    push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.FIRST, toPosToken(token2), expr));
                  } else if (token2.getKind() === _TokenKind.TokenKind.SELECT_LAST) {
                    push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.LAST, toPosToken(token2), expr));
                  } else {
                    push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.ALL, toPosToken(token2), expr));
                  }
                  return true;
                }
                function eatPossiblyQualifiedId() {
                  var qualifiedIdPieces = [];
                  var node = peekToken();
                  while (isValidQualifiedId(node)) {
                    nextToken();
                    if (node.kind !== _TokenKind.TokenKind.DOT) {
                      qualifiedIdPieces.push(_Identifier.Identifier.create(node.stringValue(), toPosToken(node)));
                    }
                    node = peekToken();
                  }
                  if (!qualifiedIdPieces.length) {
                    if (node === null) {
                      raiseInternalException(expressionString.length(), "OOD");
                    }
                    raiseInternalException(node.startPos, "NOT_EXPECTED_TOKEN", "qualified ID", node.getKind().toString().toLowerCase());
                  }
                  var pos = toPosBounds(qualifiedIdPieces[0].getStartPosition(), qualifiedIdPieces[qualifiedIdPieces.length - 1].getEndPosition());
                  return _QualifiedIdentifier.QualifiedIdentifier.create(pos, qualifiedIdPieces);
                }
                function isValidQualifiedId(node) {
                  if (node === null || node.kind === _TokenKind.TokenKind.LITERAL_STRING) {
                    return false;
                  }
                  if (node.kind === _TokenKind.TokenKind.DOT || node.kind === _TokenKind.TokenKind.IDENTIFIER) {
                    return true;
                  }
                  var value2 = node.stringValue();
                  return value2 && value2.length && VALID_QUALIFIED_ID_PATTERN.test(value2);
                }
                function maybeEatMethodOrProperty(nullSafeNavigation) {
                  if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                    var methodOrPropertyName = nextToken();
                    var args = maybeEatMethodArgs();
                    if (args === null) {
                      push(_PropertyReference.PropertyReference.create(nullSafeNavigation, methodOrPropertyName.stringValue(), toPosToken(methodOrPropertyName)));
                      return true;
                    }
                    push(_MethodReference.MethodReference.create(nullSafeNavigation, methodOrPropertyName.stringValue(), toPosToken(methodOrPropertyName), args));
                    return true;
                  }
                  return false;
                }
                function maybeEatConstructorReference() {
                  if (peekIdentifierToken("new")) {
                    var newToken = nextToken();
                    if (peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                      push(_PropertyReference.PropertyReference.create(newToken.stringValue(), toPosToken(newToken)));
                      return true;
                    }
                    var possiblyQualifiedConstructorName = eatPossiblyQualifiedId();
                    var nodes = [];
                    nodes.push(possiblyQualifiedConstructorName);
                    if (peekTokenOne(_TokenKind.TokenKind.LSQUARE)) {
                      var dimensions = [];
                      while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                        if (!peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                          dimensions.push(eatExpression());
                        } else {
                          dimensions.push(null);
                        }
                        eatToken(_TokenKind.TokenKind.RSQUARE);
                      }
                      if (maybeEatInlineListOrMap()) {
                        nodes.push(pop());
                      }
                      push(_ConstructorReference.ConstructorReference.create(toPosToken(newToken), dimensions, nodes));
                    } else {
                      eatConstructorArgs(nodes);
                      push(_ConstructorReference.ConstructorReference.create(toPosToken(newToken), nodes));
                    }
                    return true;
                  }
                  return false;
                }
                function push(newNode) {
                  constructedNodes.push(newNode);
                }
                function pop() {
                  return constructedNodes.pop();
                }
                function maybeEatLiteral() {
                  var token2 = peekToken();
                  if (token2 === null) {
                    return false;
                  }
                  if (token2.getKind() === _TokenKind.TokenKind.LITERAL_INT || token2.getKind() === _TokenKind.TokenKind.LITERAL_LONG) {
                    push(_NumberLiteral.NumberLiteral.create(parseInt(token2.stringValue(), 10), toPosToken(token2)));
                  } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_REAL || token2.getKind() === _TokenKind.TokenKind.LITERAL_REAL_FLOAT) {
                    push(_NumberLiteral.NumberLiteral.create(parseFloat(token2.stringValue()), toPosToken(token2)));
                  } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_HEXINT || token2.getKind() === _TokenKind.TokenKind.LITERAL_HEXLONG) {
                    push(_NumberLiteral.NumberLiteral.create(parseInt(token2.stringValue(), 16), toPosToken(token2)));
                  } else if (peekIdentifierToken("true")) {
                    push(_BooleanLiteral.BooleanLiteral.create(true, toPosToken(token2)));
                  } else if (peekIdentifierToken("false")) {
                    push(_BooleanLiteral.BooleanLiteral.create(false, toPosToken(token2)));
                  } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_STRING) {
                    push(_StringLiteral.StringLiteral.create(token2.stringValue(), toPosToken(token2)));
                  } else {
                    return false;
                  }
                  nextToken();
                  return true;
                }
                function maybeEatParenExpression() {
                  if (peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                    nextToken();
                    var expr = eatExpression();
                    eatToken(_TokenKind.TokenKind.RPAREN);
                    push(expr);
                    return true;
                  } else {
                    return false;
                  }
                }
                function maybeEatRelationalOperator() {
                  var token2 = peekToken();
                  if (token2 === null) {
                    return null;
                  }
                  if (token2.isNumericRelationalOperator()) {
                    return token2;
                  }
                  if (token2.isIdentifier()) {
                    var idString = token2.stringValue();
                    if (idString.toLowerCase() === "instanceof") {
                      return token2.asInstanceOfToken();
                    }
                    if (idString.toLowerCase() === "matches") {
                      return token2.asMatchesToken();
                    }
                    if (idString.toLowerCase() === "between") {
                      return token2.asBetweenToken();
                    }
                  }
                  return null;
                }
                function eatToken(expectedKind) {
                  var token2 = nextToken();
                  if (token2 === null) {
                    raiseInternalException(expressionString.length, "OOD");
                  }
                  if (token2.getKind() !== expectedKind) {
                    raiseInternalException(token2.startPos, "NOT_EXPECTED_TOKEN", expectedKind.toString().toLowerCase(), token2.getKind().toString().toLowerCase());
                  }
                  return token2;
                }
                function peekTokenOne(desiredTokenKind) {
                  return peekTokenConsumeIfMatched(desiredTokenKind, false);
                }
                function peekTokenConsumeIfMatched(desiredTokenKind, consumeIfMatched) {
                  if (!moreTokens()) {
                    return false;
                  }
                  var token2 = peekToken();
                  if (token2.getKind() === desiredTokenKind) {
                    if (consumeIfMatched) {
                      tokenStreamPointer++;
                    }
                    return true;
                  }
                  if (desiredTokenKind === _TokenKind.TokenKind.IDENTIFIER) {
                    if (token2.getKind().ordinal() >= _TokenKind.TokenKind.DIV.ordinal() && token2.getKind().ordinal() <= _TokenKind.TokenKind.NOT.ordinal() && token2.data !== null) {
                      return true;
                    }
                  }
                  return false;
                }
                function peekTokenAny() {
                  if (!moreTokens()) {
                    return false;
                  }
                  var token2 = peekToken();
                  var args = Array.prototype.slice.call(arguments);
                  for (var i = 0, l2 = args.length; i < l2; i += 1) {
                    if (token2.getKind() === args[i]) {
                      return true;
                    }
                  }
                  return false;
                }
                function peekIdentifierToken(identifierString) {
                  if (!moreTokens()) {
                    return false;
                  }
                  var token2 = peekToken();
                  return token2.getKind() === _TokenKind.TokenKind.IDENTIFIER && token2.stringValue().toLowerCase() === identifierString.toLowerCase();
                }
                function peekSelectToken() {
                  if (!moreTokens()) {
                    return false;
                  }
                  var token2 = peekToken();
                  return token2.getKind() === _TokenKind.TokenKind.SELECT || token2.getKind() === _TokenKind.TokenKind.SELECT_FIRST || token2.getKind() === _TokenKind.TokenKind.SELECT_LAST;
                }
                function moreTokens() {
                  return tokenStreamPointer < tokenStream.length;
                }
                function nextToken() {
                  if (tokenStreamPointer >= tokenStreamLength) {
                    return null;
                  }
                  return tokenStream[tokenStreamPointer++];
                }
                function peekToken() {
                  if (tokenStreamPointer >= tokenStreamLength) {
                    return null;
                  }
                  return tokenStream[tokenStreamPointer];
                }
                function raiseInternalException(pos, message, expected, actual) {
                  if (expected) {
                    message += "\nExpected: " + expected;
                  }
                  if (actual) {
                    message += "\nActual: " + actual;
                  }
                  throw {
                    name: "InternalParseException",
                    message: "Error occurred while attempting to parse expression '" + expressionString + "' at position " + pos + ". Message: " + message
                  };
                }
                function toString2(token2) {
                  if (token2.getKind().hasPayload()) {
                    return token2.stringValue();
                  }
                  return token2.getKind().toString().toLowerCase();
                }
                function checkOperands(token2, left, right) {
                  checkLeftOperand(token2, left);
                  checkRightOperand(token2, right);
                }
                function checkLeftOperand(token2, operandExpression) {
                  if (operandExpression === null) {
                    raiseInternalException(token2.startPos, "LEFT_OPERAND_PROBLEM");
                  }
                }
                function checkRightOperand(token2, operandExpression) {
                  if (operandExpression === null) {
                    raiseInternalException(token2.startPos, "RIGHT_OPERAND_PROBLEM");
                  }
                }
                function toPosToken(token2) {
                  return (token2.startPos << 16) + token2.endPos;
                }
                function toPosBounds(start, end) {
                  return (start << 16) + end;
                }
                return {
                  setConfiguration,
                  parse
                };
              };
            },
            /* 6 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Tokenizer = void 0;
              var _Token = __webpack_require__(7);
              var _TokenKind = __webpack_require__(2);
              var ALTERNATIVE_OPERATOR_NAMES = ["DIV", "EQ", "GE", "GT", "LE", "LT", "MOD", "NE", "NOT"], FLAGS = [], IS_DIGIT = 1, IS_HEXDIGIT = 2, IS_ALPHA = 4;
              function init() {
                var ch2;
                for (ch2 = "0".charCodeAt(0); ch2 <= "9".charCodeAt(0); ch2 += 1) {
                  FLAGS[ch2] |= IS_DIGIT | IS_HEXDIGIT;
                }
                for (ch2 = "A".charCodeAt(0); ch2 <= "F".charCodeAt(0); ch2 += 1) {
                  FLAGS[ch2] |= IS_HEXDIGIT;
                }
                for (ch2 = "a".charCodeAt(0); ch2 <= "f".charCodeAt(0); ch2 += 1) {
                  FLAGS[ch2] |= IS_HEXDIGIT;
                }
                for (ch2 = "A".charCodeAt(0); ch2 <= "Z".charCodeAt(0); ch2 += 1) {
                  FLAGS[ch2] |= IS_ALPHA;
                }
                for (ch2 = "a".charCodeAt(0); ch2 <= "z".charCodeAt(0); ch2 += 1) {
                  FLAGS[ch2] |= IS_ALPHA;
                }
              }
              init();
              function tokenize(inputData) {
                var expressionString = inputData, toProcess = inputData + "\0", max2 = toProcess.length, pos = 0, tokens2 = [];
                function process2() {
                  var ch2;
                  while (pos < max2) {
                    ch2 = toProcess[pos];
                    if (isAlphabetic(ch2)) {
                      lexIdentifier();
                    } else {
                      switch (ch2) {
                        case "+":
                          if (isTwoCharToken(_TokenKind.TokenKind.INC)) {
                            pushPairToken(_TokenKind.TokenKind.INC);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.PLUS);
                          }
                          break;
                        case "_":
                          lexIdentifier();
                          break;
                        case "-":
                          if (isTwoCharToken(_TokenKind.TokenKind.DEC)) {
                            pushPairToken(_TokenKind.TokenKind.DEC);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.MINUS);
                          }
                          break;
                        case ":":
                          pushCharToken(_TokenKind.TokenKind.COLON);
                          break;
                        case ".":
                          pushCharToken(_TokenKind.TokenKind.DOT);
                          break;
                        case ",":
                          pushCharToken(_TokenKind.TokenKind.COMMA);
                          break;
                        case "*":
                          pushCharToken(_TokenKind.TokenKind.STAR);
                          break;
                        case "/":
                          pushCharToken(_TokenKind.TokenKind.DIV);
                          break;
                        case "%":
                          pushCharToken(_TokenKind.TokenKind.MOD);
                          break;
                        case "(":
                          pushCharToken(_TokenKind.TokenKind.LPAREN);
                          break;
                        case ")":
                          pushCharToken(_TokenKind.TokenKind.RPAREN);
                          break;
                        case "[":
                          pushCharToken(_TokenKind.TokenKind.LSQUARE);
                          break;
                        case "#":
                          pushCharToken(_TokenKind.TokenKind.HASH);
                          break;
                        case "]":
                          pushCharToken(_TokenKind.TokenKind.RSQUARE);
                          break;
                        case "{":
                          pushCharToken(_TokenKind.TokenKind.LCURLY);
                          break;
                        case "}":
                          pushCharToken(_TokenKind.TokenKind.RCURLY);
                          break;
                        case "@":
                          pushCharToken(_TokenKind.TokenKind.BEAN_REF);
                          break;
                        case "^":
                          if (isTwoCharToken(_TokenKind.TokenKind.SELECT_FIRST)) {
                            pushPairToken(_TokenKind.TokenKind.SELECT_FIRST);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.POWER);
                          }
                          break;
                        case "!":
                          if (isTwoCharToken(_TokenKind.TokenKind.NE)) {
                            pushPairToken(_TokenKind.TokenKind.NE);
                          } else if (isTwoCharToken(_TokenKind.TokenKind.PROJECT)) {
                            pushPairToken(_TokenKind.TokenKind.PROJECT);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.NOT);
                          }
                          break;
                        case "=":
                          if (isTwoCharToken(_TokenKind.TokenKind.EQ)) {
                            pushPairToken(_TokenKind.TokenKind.EQ);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.ASSIGN);
                          }
                          break;
                        case "&":
                          if (!isTwoCharToken(_TokenKind.TokenKind.SYMBOLIC_AND)) {
                            throw {
                              name: "SpelParseException",
                              message: "Missing character '&' in expression (" + expressionString + ") at position " + pos
                            };
                          }
                          pushPairToken(_TokenKind.TokenKind.SYMBOLIC_AND);
                          break;
                        case "|":
                          if (!isTwoCharToken(_TokenKind.TokenKind.SYMBOLIC_OR)) {
                            throw {
                              name: "SpelParseException",
                              message: "Missing character '|' in expression (" + expressionString + ") at position " + pos
                            };
                          }
                          pushPairToken(_TokenKind.TokenKind.SYMBOLIC_OR);
                          break;
                        case "?":
                          if (isTwoCharToken(_TokenKind.TokenKind.SELECT)) {
                            pushPairToken(_TokenKind.TokenKind.SELECT);
                          } else if (isTwoCharToken(_TokenKind.TokenKind.ELVIS)) {
                            pushPairToken(_TokenKind.TokenKind.ELVIS);
                          } else if (isTwoCharToken(_TokenKind.TokenKind.SAFE_NAVI)) {
                            pushPairToken(_TokenKind.TokenKind.SAFE_NAVI);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.QMARK);
                          }
                          break;
                        case "$":
                          if (isTwoCharToken(_TokenKind.TokenKind.SELECT_LAST)) {
                            pushPairToken(_TokenKind.TokenKind.SELECT_LAST);
                          } else {
                            lexIdentifier();
                          }
                          break;
                        case ">":
                          if (isTwoCharToken(_TokenKind.TokenKind.GE)) {
                            pushPairToken(_TokenKind.TokenKind.GE);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.GT);
                          }
                          break;
                        case "<":
                          if (isTwoCharToken(_TokenKind.TokenKind.LE)) {
                            pushPairToken(_TokenKind.TokenKind.LE);
                          } else {
                            pushCharToken(_TokenKind.TokenKind.LT);
                          }
                          break;
                        case "0":
                        case "1":
                        case "2":
                        case "3":
                        case "4":
                        case "5":
                        case "6":
                        case "7":
                        case "8":
                        case "9":
                          lexNumericLiteral(ch2 === "0");
                          break;
                        case " ":
                        case "	":
                        case "\r":
                        case "\n":
                          pos += 1;
                          break;
                        case "'":
                          lexQuotedStringLiteral();
                          break;
                        case '"':
                          lexDoubleQuotedStringLiteral();
                          break;
                        case "\0":
                          pos += 1;
                          break;
                        case "\\":
                          throw {
                            name: "SpelParseException",
                            message: "Unexpected escape character in expression (" + expressionString + ") at position " + pos
                          };
                        default:
                          throw {
                            name: "SpelParseException",
                            message: "Cannot handle character '" + ch2 + "' in expression (" + expressionString + ") at position " + pos
                          };
                      }
                    }
                  }
                }
                function lexQuotedStringLiteral() {
                  var start = pos, terminated = false, ch2;
                  while (!terminated) {
                    pos += 1;
                    ch2 = toProcess[pos];
                    if (ch2 === "'") {
                      if (toProcess[pos + 1] === "'") {
                        pos += 1;
                      } else {
                        terminated = true;
                      }
                    }
                    if (ch2.charCodeAt(0) === 0) {
                      throw {
                        name: "SpelParseException",
                        message: "Non-terminating quoted string in expression (" + expressionString + ") at position " + pos
                      };
                    }
                  }
                  pos += 1;
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_STRING, subarray(start, pos), start, pos));
                }
                function lexDoubleQuotedStringLiteral() {
                  var start = pos, terminated = false, ch2;
                  while (!terminated) {
                    pos += 1;
                    ch2 = toProcess[pos];
                    if (ch2 === '"') {
                      if (toProcess[pos + 1] === '"') {
                        pos += 1;
                      } else {
                        terminated = true;
                      }
                    }
                    if (ch2.charCodeAt(0) === 0) {
                      throw {
                        name: "SpelParseException",
                        message: "Non-terminating double-quoted string in expression (" + expressionString + ") at position " + pos
                      };
                    }
                  }
                  pos += 1;
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_STRING, subarray(start, pos), start, pos));
                }
                function lexNumericLiteral(firstCharIsZero) {
                  var isReal = false, start = pos, ch2 = toProcess[pos + 1], isHex = ch2 === "x" || ch2 === "X", dotpos, endOfNumber, possibleSign, isFloat;
                  if (firstCharIsZero && isHex) {
                    pos = pos + 1;
                    do {
                      pos += 1;
                    } while (isHexadecimalDigit(toProcess[pos]));
                    if (isChar("L", "l")) {
                      pushHexIntToken(subarray(start + 2, pos), true, start, pos);
                      pos += 1;
                    } else {
                      pushHexIntToken(subarray(start + 2, pos), false, start, pos);
                    }
                    return;
                  }
                  do {
                    pos += 1;
                  } while (isDigit(toProcess[pos]));
                  ch2 = toProcess[pos];
                  if (ch2 === ".") {
                    isReal = true;
                    dotpos = pos;
                    do {
                      pos += 1;
                    } while (isDigit(toProcess[pos]));
                    if (pos === dotpos + 1) {
                      pos = dotpos;
                      pushIntToken(subarray(start, pos), false, start, pos);
                      return;
                    }
                  }
                  endOfNumber = pos;
                  if (isChar("L", "l")) {
                    if (isReal) {
                      throw {
                        name: "SpelParseException",
                        message: "Real cannot be long in expression (" + expressionString + ") at position " + pos
                      };
                    }
                    pushIntToken(subarray(start, endOfNumber), true, start, endOfNumber);
                    pos += 1;
                  } else if (isExponentChar(toProcess[pos])) {
                    isReal = true;
                    pos += 1;
                    possibleSign = toProcess[pos];
                    if (isSign(possibleSign)) {
                      pos += 1;
                    }
                    do {
                      pos += 1;
                    } while (isDigit(toProcess[pos]));
                    isFloat = false;
                    if (isFloatSuffix(toProcess[pos])) {
                      isFloat = true;
                      pos += 1;
                      endOfNumber = pos;
                    } else if (isDoubleSuffix(toProcess[pos])) {
                      pos += 1;
                      endOfNumber = pos;
                    }
                    pushRealToken(subarray(start, pos), isFloat, start, pos);
                  } else {
                    ch2 = toProcess[pos];
                    isFloat = false;
                    if (isFloatSuffix(ch2)) {
                      isReal = true;
                      isFloat = true;
                      pos += 1;
                      endOfNumber = pos;
                    } else if (isDoubleSuffix(ch2)) {
                      isReal = true;
                      pos += 1;
                      endOfNumber = pos;
                    }
                    if (isReal) {
                      pushRealToken(subarray(start, endOfNumber), isFloat, start, endOfNumber);
                    } else {
                      pushIntToken(subarray(start, endOfNumber), false, start, endOfNumber);
                    }
                  }
                }
                function lexIdentifier() {
                  var start = pos, substring, asString, idx;
                  do {
                    pos += 1;
                  } while (isIdentifier(toProcess[pos]));
                  substring = subarray(start, pos);
                  if (pos - start === 2 || pos - start === 3) {
                    asString = substring.toUpperCase();
                    idx = ALTERNATIVE_OPERATOR_NAMES.indexOf(asString);
                    if (idx >= 0) {
                      pushOneCharOrTwoCharToken(_TokenKind.TokenKind.valueOf(asString), start, substring);
                      return;
                    }
                  }
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.IDENTIFIER, substring.replace("\0", ""), start, pos));
                }
                function pushIntToken(data, isLong, start, end) {
                  if (isLong) {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_LONG, data, start, end));
                  } else {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_INT, data, start, end));
                  }
                }
                function pushHexIntToken(data, isLong, start, end) {
                  if (data.length === 0) {
                    if (isLong) {
                      throw {
                        name: "SpelParseException",
                        message: "Not a long in expression (" + expressionString + ") at position " + pos
                      };
                    } else {
                      throw {
                        name: "SpelParseException",
                        message: "Not an int in expression (" + expressionString + ") at position " + pos
                      };
                    }
                  }
                  if (isLong) {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_HEXLONG, data, start, end));
                  } else {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_HEXINT, data, start, end));
                  }
                }
                function pushRealToken(data, isFloat, start, end) {
                  if (isFloat) {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_REAL_FLOAT, data, start, end));
                  } else {
                    tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_REAL, data, start, end));
                  }
                }
                function subarray(start, end) {
                  return toProcess.substring(start, end);
                }
                function isTwoCharToken(kind) {
                  if (kind.tokenChars.length === 2 && toProcess[pos] === kind.tokenChars[0]) {
                    return toProcess[pos + 1] === kind.tokenChars[1];
                  }
                  return false;
                }
                function pushCharToken(kind) {
                  tokens2.push(new _Token.Token(kind, null, pos, pos + 1));
                  pos += 1;
                }
                function pushPairToken(kind) {
                  tokens2.push(new _Token.Token(kind, null, pos, pos + 2));
                  pos += 2;
                }
                function pushOneCharOrTwoCharToken(kind, pos2, data) {
                  tokens2.push(new _Token.Token(kind, data, pos2, pos2 + kind.getLength()));
                }
                function isIdentifier(ch2) {
                  return isAlphabetic(ch2) || isDigit(ch2) || ch2 === "_" || ch2 === "$";
                }
                function isChar(a, b2) {
                  var ch2 = toProcess[pos];
                  return ch2 === a || ch2 === b2;
                }
                function isExponentChar(ch2) {
                  return ch2 === "e" || ch2 === "E";
                }
                function isFloatSuffix(ch2) {
                  return ch2 === "f" || ch2 === "F";
                }
                function isDoubleSuffix(ch2) {
                  return ch2 === "d" || ch2 === "D";
                }
                function isSign(ch2) {
                  return ch2 === "+" || ch2 === "-";
                }
                function isDigit(ch2) {
                  if (ch2.charCodeAt(0) > 255) {
                    return false;
                  }
                  return (FLAGS[ch2.charCodeAt(0)] & IS_DIGIT) !== 0;
                }
                function isAlphabetic(ch2) {
                  if (ch2.charCodeAt(0) > 255) {
                    return false;
                  }
                  return (FLAGS[ch2.charCodeAt(0)] & IS_ALPHA) !== 0;
                }
                function isHexadecimalDigit(ch2) {
                  if (ch2.charCodeAt(0) > 255) {
                    return false;
                  }
                  return (FLAGS[ch2.charCodeAt(0)] & IS_HEXDIGIT) !== 0;
                }
                process2();
                return tokens2;
              }
              exports3.Tokenizer = {
                tokenize
              };
            },
            /* 7 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Token = void 0;
              var _TokenKind = __webpack_require__(2);
              function Token(tokenKind, tokenData, startPos, endPos) {
                this.kind = tokenKind;
                this.startPos = startPos;
                this.endPos = endPos;
                if (tokenData) {
                  this.data = tokenData;
                }
              }
              Token.prototype.getKind = function() {
                return this.kind;
              };
              Token.prototype.toString = function() {
                var s = "[";
                s += this.kind.toString();
                if (this.kind.hasPayload()) {
                  s += ":" + this.data;
                }
                s += "]";
                s += "(" + this.startPos + "," + this.endPos + ")";
                return s;
              };
              Token.prototype.isIdentifier = function() {
                return this.kind === _TokenKind.TokenKind.IDENTIFIER;
              };
              Token.prototype.isNumericRelationalOperator = function() {
                return this.kind === _TokenKind.TokenKind.GT || this.kind === _TokenKind.TokenKind.GE || this.kind === _TokenKind.TokenKind.LT || this.kind === _TokenKind.TokenKind.LE || this.kind === _TokenKind.TokenKind.EQ || this.kind === _TokenKind.TokenKind.NE;
              };
              Token.prototype.stringValue = function() {
                return this.data;
              };
              Token.prototype.asInstanceOfToken = function() {
                return new Token(_TokenKind.TokenKind.INSTANCEOF, this.startPos, this.endPos);
              };
              Token.prototype.asMatchesToken = function() {
                return new Token(_TokenKind.TokenKind.MATCHES, this.startPos, this.endPos);
              };
              Token.prototype.asBetweenToken = function() {
                return new Token(_TokenKind.TokenKind.BETWEEN, this.startPos, this.endPos);
              };
              Token.prototype.getStartPosition = function() {
                return this.startPos;
              };
              Token.prototype.getEndPosition = function() {
                return this.endPos;
              };
              exports3.Token = Token;
            },
            /* 8 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.BooleanLiteral = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(value2, position) {
                var node = _SpelNode.SpelNode.create("boolean", position);
                node.getValue = function() {
                  return value2;
                };
                node.setValue = function(newValue) {
                  return value2 = newValue;
                };
                return node;
              }
              exports3.BooleanLiteral = {
                create: createNode
              };
            },
            /* 9 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.NumberLiteral = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(value2, position) {
                var node = _SpelNode.SpelNode.create("number", position);
                node.getValue = function() {
                  return value2;
                };
                node.setValue = function(newValue) {
                  return value2 = newValue;
                };
                return node;
              }
              exports3.NumberLiteral = {
                create: createNode
              };
            },
            /* 10 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.StringLiteral = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(value2, position) {
                var node = _SpelNode.SpelNode.create("string", position);
                function stripQuotes(value3) {
                  if (value3[0] === "'" && value3[value3.length - 1] === "'" || value3[0] === '"' && value3[value3.length - 1] === '"') {
                    value3 = value3.substring(1, value3.length - 1);
                  }
                  return value3.replace(/''/g, "'").replace(/""/g, '"');
                }
                value2 = stripQuotes(value2);
                node.getValue = function() {
                  return value2;
                };
                node.setValue = function(newValue) {
                  return value2 = newValue;
                };
                return node;
              }
              exports3.StringLiteral = {
                create: createNode
              };
            },
            /* 11 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.NullLiteral = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(value2, position) {
                var node = _SpelNode.SpelNode.create("null", position);
                node.getValue = function() {
                  return null;
                };
                return node;
              }
              exports3.NullLiteral = {
                create: createNode
              };
            },
            /* 12 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.FunctionReference = void 0;
              var _SpelNode = __webpack_require__(0);
              var _Stack2 = __webpack_require__(1);
              function createNode(functionName, position, args) {
                var node = _SpelNode.SpelNode.create("function", position);
                node.getRaw = function() {
                  return {
                    functionName,
                    args
                  };
                };
                node.getValue = function(state) {
                  var locals = state.locals || {}, context2 = state.rootContext, compiledArgs = [];
                  args.forEach(function(arg) {
                    var currentActiveContext = state.activeContext;
                    state.activeContext = new _Stack2.Stack();
                    state.activeContext.push(state.rootContext);
                    compiledArgs.push(arg.getValue(state));
                    state.activeContext = currentActiveContext;
                  });
                  if (locals[functionName]) {
                    return locals[functionName].apply(context2, compiledArgs);
                  }
                  throw {
                    name: "FunctionDoesNotExistException",
                    message: "Function '" + functionName + "' does not exist."
                  };
                };
                return node;
              }
              exports3.FunctionReference = {
                create: createNode
              };
            },
            /* 13 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.MethodReference = void 0;
              var _SpelNode = __webpack_require__(0);
              var _Stack2 = __webpack_require__(1);
              function createNode(nullSafeNavigation, methodName, position, args) {
                var node = _SpelNode.SpelNode.create("method", position);
                node.getRaw = function() {
                  return {
                    methodName,
                    args
                  };
                };
                node.getValue = function(state) {
                  var context2 = state.activeContext.peek(), compiledArgs = [], method;
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to look up property '" + methodName + "' for an undefined context."
                    };
                  }
                  function maybeHandleNullSafeNavigation(member) {
                    if (member === void 0 || member === null) {
                      if (nullSafeNavigation) {
                        return null;
                      }
                      throw {
                        name: "NullPointerException",
                        message: "Method " + methodName + " does not exist."
                      };
                    }
                    return member;
                  }
                  args.forEach(function(arg) {
                    var currentActiveContext = state.activeContext;
                    state.activeContext = new _Stack2.Stack();
                    state.activeContext.push(state.rootContext);
                    compiledArgs.push(arg.getValue(state));
                    state.activeContext = currentActiveContext;
                  });
                  if (methodName.substr(0, 3) === "get" && !context2[methodName]) {
                    return maybeHandleNullSafeNavigation(context2[methodName.charAt(3).toLowerCase() + methodName.substring(4)]);
                  }
                  if (methodName.substr(0, 3) === "set" && !context2[methodName]) {
                    return context2[methodName.charAt(3).toLowerCase() + methodName.substring(4)] = compiledArgs[0];
                  }
                  if (Array.isArray(context2)) {
                    if (methodName === "size") {
                      return context2.length;
                    }
                    if (methodName === "contains") {
                      return context2.includes(compiledArgs[0]);
                    }
                  }
                  method = maybeHandleNullSafeNavigation(context2[methodName]);
                  if (method) {
                    return method.apply(context2, compiledArgs);
                  }
                  return null;
                };
                return node;
              }
              exports3.MethodReference = {
                create: createNode
              };
            },
            /* 14 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.PropertyReference = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(nullSafeNavigation, propertyName, position) {
                var node = _SpelNode.SpelNode.create("property", position);
                node.getRaw = function() {
                  return propertyName;
                };
                node.getValue = function(state) {
                  var context2 = state.activeContext.peek();
                  if (!context2) {
                    if (nullSafeNavigation) {
                      return null;
                    }
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to look up property '" + propertyName + "' for an undefined context."
                    };
                  }
                  if (context2[propertyName] === void 0 || context2[propertyName] === null) {
                    if (nullSafeNavigation) {
                      return null;
                    }
                    if (propertyName === "size" && Array.isArray(context2)) {
                      return context2.length;
                    }
                    throw {
                      name: "NullPointerException",
                      message: "Property '" + propertyName + "' does not exist."
                    };
                  }
                  return context2[propertyName];
                };
                node.setValue = function(value2, state) {
                  var context2 = state.activeContext.peek();
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to assign property '" + propertyName + "' for an undefined context."
                    };
                  }
                  return context2[propertyName] = value2;
                };
                node.getName = function() {
                  return propertyName;
                };
                return node;
              }
              exports3.PropertyReference = {
                create: createNode
              };
            },
            /* 15 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.VariableReference = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(variableName, position) {
                var node = _SpelNode.SpelNode.create("variable", position);
                node.getRaw = function() {
                  return variableName;
                };
                node.getValue = function(state) {
                  var context2 = state.activeContext.peek(), locals = state.locals;
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to look up variable '" + variableName + "' for an undefined context."
                    };
                  }
                  if (variableName === "this") {
                    return context2;
                  }
                  if (variableName === "root") {
                    return state.rootContext;
                  }
                  return locals[variableName];
                };
                node.setValue = function(value2, state) {
                  var locals = state.locals;
                  return locals[variableName] = value2;
                };
                return node;
              }
              exports3.VariableReference = {
                create: createNode
              };
            },
            /* 16 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.CompoundExpression = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, expressionComponents) {
                var node = _SpelNode.SpelNode.create.apply(null, ["compound", position].concat(expressionComponents));
                function buildContextStack(state) {
                  var childrenCount = node.getChildren().length, i;
                  for (i = 0; i < childrenCount; i += 1) {
                    if (node.getChildren()[i].getType() === "indexer") {
                      state.activeContext.push(state.activeContext.peek()[node.getChildren()[i].getValue(state)]);
                    } else {
                      state.activeContext.push(node.getChildren()[i].getValue(state));
                    }
                  }
                  return function unbuildContextStack() {
                    for (i = 0; i < childrenCount; i += 1) {
                      state.activeContext.pop();
                    }
                  };
                }
                node.getValue = function(state) {
                  var context2 = state.activeContext.peek(), value2;
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to evaluate compound expression with an undefined context."
                    };
                  }
                  var unbuildContextStack = buildContextStack(state);
                  value2 = state.activeContext.peek();
                  unbuildContextStack();
                  return value2;
                };
                node.setValue = function(value2, state) {
                  var unbuildContextStack = buildContextStack(state), childCount = node.getChildren().length;
                  state.activeContext.pop();
                  value2 = node.getChildren()[childCount - 1].setValue(value2, state);
                  state.activeContext.push(null);
                  unbuildContextStack();
                  return value2;
                };
                return node;
              }
              exports3.CompoundExpression = {
                create: createNode
              };
            },
            /* 17 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Indexer = void 0;
              var _SpelNode = __webpack_require__(0);
              var _Stack2 = __webpack_require__(1);
              function createNode(position, expressionComponents) {
                var node = _SpelNode.SpelNode.create.apply(null, ["indexer", position].concat(expressionComponents));
                node.getValue = function(state) {
                  var activeContext = state.activeContext, context2, childrenCount = node.getChildren().length, i, value2;
                  state.activeContext = new _Stack2.Stack();
                  state.activeContext.push(state.rootContext);
                  context2 = state.activeContext.peek();
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to evaluate compound expression with an undefined context."
                    };
                  }
                  for (i = 0; i < childrenCount; i += 1) {
                    state.activeContext.push(node.getChildren()[i].getValue(state));
                  }
                  value2 = state.activeContext.peek();
                  for (i = 0; i < childrenCount; i += 1) {
                    state.activeContext.pop();
                  }
                  state.activeContext = activeContext;
                  return value2;
                };
                return node;
              }
              exports3.Indexer = {
                create: createNode
              };
            },
            /* 18 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Assign = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, property2, assignedValue) {
                var node = _SpelNode.SpelNode.create("assign", position, property2, assignedValue);
                node.getValue = function(state) {
                  var context2 = state.activeContext.peek();
                  if (!context2) {
                    throw {
                      name: "ContextDoesNotExistException",
                      message: "Attempting to assign property '" + property2.getValue(state) + "' for an undefined context."
                    };
                  }
                  return property2.setValue(assignedValue.getValue(state), state);
                };
                return node;
              }
              exports3.Assign = {
                create: createNode
              };
            },
            /* 19 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpEQ = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-eq", position, left, right);
                node.getValue = function(state) {
                  return left.getValue(state) === right.getValue(state);
                };
                return node;
              }
              exports3.OpEQ = {
                create: createNode
              };
            },
            /* 20 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpNE = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-ne", position, left, right);
                node.getValue = function(state) {
                  return left.getValue(state) !== right.getValue(state);
                };
                return node;
              }
              exports3.OpNE = {
                create: createNode
              };
            },
            /* 21 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpGE = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-ge", position, left, right);
                node.getValue = function(state) {
                  return left.getValue(state) >= right.getValue(state);
                };
                return node;
              }
              exports3.OpGE = {
                create: createNode
              };
            },
            /* 22 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpGT = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-gt", position, left, right);
                node.getValue = function(state) {
                  return left.getValue(state) > right.getValue(state);
                };
                return node;
              }
              exports3.OpGT = {
                create: createNode
              };
            },
            /* 23 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpLE = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-le", position, left, right);
                node.getValue = function(state) {
                  return left.getValue(state) <= right.getValue(state);
                };
                return node;
              }
              exports3.OpLE = {
                create: createNode
              };
            },
            /* 24 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpLT = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-lt", position, left, right);
                node.getValue = function(state) {
                  return left.getValue(state) < right.getValue(state);
                };
                return node;
              }
              exports3.OpLT = {
                create: createNode
              };
            },
            /* 25 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpPlus = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-plus", position, left, right);
                node.getValue = function(state) {
                  if (!right) {
                    return +left.getValue(state);
                  }
                  return left.getValue(state) + right.getValue(state);
                };
                return node;
              }
              exports3.OpPlus = {
                create: createNode
              };
            },
            /* 26 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpMinus = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-minus", position, left, right);
                node.getValue = function(state) {
                  if (!right) {
                    return -left.getValue(state);
                  }
                  return left.getValue(state) - right.getValue(state);
                };
                return node;
              }
              exports3.OpMinus = {
                create: createNode
              };
            },
            /* 27 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpMultiply = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-multiply", position, left, right);
                node.getValue = function(state) {
                  var leftValue = left.getValue(state), rightValue = right.getValue(state);
                  if (typeof leftValue === "number" && typeof rightValue === "number") {
                    return leftValue * rightValue;
                  }
                  if (typeof leftValue === "string" && typeof rightValue === "number") {
                    var s = "", i = 0;
                    for (; i < rightValue; i += 1) {
                      s += leftValue;
                    }
                    return s;
                  }
                  return null;
                };
                return node;
              }
              exports3.OpMultiply = {
                create: createNode
              };
            },
            /* 28 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpDivide = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-divide", position, left, right);
                node.getValue = function(state) {
                  return left.getValue(state) / right.getValue(state);
                };
                return node;
              }
              exports3.OpDivide = {
                create: createNode
              };
            },
            /* 29 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpModulus = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-modulus", position, left, right);
                node.getValue = function(state) {
                  return left.getValue(state) % right.getValue(state);
                };
                return node;
              }
              exports3.OpModulus = {
                create: createNode
              };
            },
            /* 30 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpPower = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, base, exp) {
                var node = _SpelNode.SpelNode.create("op-power", position, base, exp);
                node.getValue = function(state) {
                  return Math.pow(base.getValue(state), exp.getValue(state));
                };
                return node;
              }
              exports3.OpPower = {
                create: createNode
              };
            },
            /* 31 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpInc = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, postfix, int) {
                var node = _SpelNode.SpelNode.create("op-inc", position, int);
                node.getValue = function(state) {
                  var cur = int.getValue(state);
                  int.setValue(cur + 1, state);
                  if (postfix) {
                    return cur;
                  }
                  return cur + 1;
                };
                return node;
              }
              exports3.OpInc = {
                create: createNode
              };
            },
            /* 32 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpDec = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, postfix, int) {
                var node = _SpelNode.SpelNode.create("op-dec", position, int);
                node.getValue = function(state) {
                  var cur = int.getValue(state);
                  int.setValue(cur - 1, state);
                  if (postfix) {
                    return cur;
                  }
                  return cur - 1;
                };
                return node;
              }
              exports3.OpDec = {
                create: createNode
              };
            },
            /* 33 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpNot = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, expr) {
                var node = _SpelNode.SpelNode.create("op-not", position, expr);
                node.getValue = function(state) {
                  return !expr.getValue(state);
                };
                return node;
              }
              exports3.OpNot = {
                create: createNode
              };
            },
            /* 34 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpAnd = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-and", position, left, right);
                node.getValue = function(state) {
                  return !!left.getValue(state) && !!right.getValue(state);
                };
                return node;
              }
              exports3.OpAnd = {
                create: createNode
              };
            },
            /* 35 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpOr = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("op-or", position, left, right);
                node.getValue = function(state) {
                  return !!left.getValue(state) || !!right.getValue(state);
                };
                return node;
              }
              exports3.OpOr = {
                create: createNode
              };
            },
            /* 36 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpMatches = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("matches", position, left, right);
                node.getValue = function(state) {
                  var data = left.getValue(state);
                  var regexpString = right.getValue(state);
                  try {
                    var regexp = new RegExp(regexpString);
                    return !!regexp.exec(data);
                  } catch (error) {
                    throw {
                      name: "EvaluationException",
                      message: error.toString()
                    };
                  }
                };
                return node;
              }
              exports3.OpMatches = {
                create: createNode
              };
            },
            /* 37 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Ternary = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, expression, ifTrue, ifFalse) {
                var node = _SpelNode.SpelNode.create("ternary", position, expression, ifTrue, ifFalse);
                node.getValue = function(state) {
                  return expression.getValue(state) ? ifTrue.getValue(state) : ifFalse.getValue(state);
                };
                return node;
              }
              exports3.Ternary = {
                create: createNode
              };
            },
            /* 38 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Elvis = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, expression, ifFalse) {
                var node = _SpelNode.SpelNode.create("elvis", position, expression, ifFalse);
                node.getValue = function(state) {
                  return expression.getValue(state) !== null ? expression.getValue(state) : ifFalse.getValue(state);
                };
                return node;
              }
              exports3.Elvis = {
                create: createNode
              };
            },
            /* 39 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.InlineList = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, elements) {
                var node = _SpelNode.SpelNode.create("list", position), list = [].concat(elements || []);
                node.getRaw = function() {
                  return list;
                };
                node.getValue = function(state) {
                  return list.map(function(element) {
                    return element.getValue(state);
                  });
                };
                return node;
              }
              exports3.InlineList = {
                create: createNode
              };
            },
            /* 40 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.InlineMap = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, elements) {
                var node = _SpelNode.SpelNode.create("map", position), mapPieces = [].concat(elements || []);
                node.getValue = function(state) {
                  var key = true, keyValue = null, map2 = {};
                  mapPieces.forEach(function(piece) {
                    if (key) {
                      if (piece.getType() === "property") {
                        keyValue = piece.getName();
                      } else {
                        keyValue = piece.getValue(state);
                      }
                    } else {
                      map2[keyValue] = piece.getValue(state);
                    }
                    key = !key;
                  });
                  return map2;
                };
                return node;
              }
              exports3.InlineMap = {
                create: createNode
              };
            },
            /* 41 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Selection = void 0;
              var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj;
              } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
              };
              var _SpelNode = __webpack_require__(0);
              function matches(element, expr, state) {
                var doesMatch = false;
                state.activeContext.push(element);
                doesMatch = expr.getValue(state);
                state.activeContext.pop();
                return doesMatch;
              }
              function selectFromArray(collection, whichElement, expr, state) {
                var newCollection = collection.filter(function(element) {
                  return matches(element, expr, state);
                });
                switch (whichElement) {
                  case "ALL":
                    return newCollection;
                  case "FIRST":
                    return newCollection[0] || null;
                  case "LAST":
                    if (newCollection.length) {
                      return newCollection[newCollection.length - 1];
                    }
                    return null;
                }
              }
              function selectFromMap(collection, whichElement, expr, state) {
                var newCollection = {}, entry, key, entries = [], returnValue = {};
                for (key in collection) {
                  if (collection.hasOwnProperty(key)) {
                    entry = {
                      key,
                      value: collection[key]
                    };
                    if (matches(entry, expr, state)) {
                      entries.push(entry);
                    }
                  }
                }
                switch (whichElement) {
                  case "ALL":
                    entries.forEach(function(entry2) {
                      newCollection[entry2.key] = entry2.value;
                    });
                    return newCollection;
                  case "FIRST":
                    if (entries.length) {
                      returnValue[entries[0].key] = entries[0].value;
                      return returnValue;
                    }
                    return null;
                  case "LAST":
                    if (entries.length) {
                      returnValue[entries[entries.length - 1].key] = entries[entries.length - 1].value;
                      return returnValue;
                    }
                    return null;
                }
                entries.forEach(function(entry2) {
                  newCollection[entry2.key] = entry2.value;
                });
              }
              function createNode(nullSafeNavigation, whichElement, position, expr) {
                var node = _SpelNode.SpelNode.create("selection", position, expr);
                node.getValue = function(state) {
                  var collection = state.activeContext.peek();
                  if (collection) {
                    if (Array.isArray(collection)) {
                      return selectFromArray(collection, whichElement, expr, state);
                    } else if ((typeof collection === "undefined" ? "undefined" : _typeof2(collection)) === "object") {
                      return selectFromMap(collection, whichElement, expr, state);
                    }
                  }
                  return null;
                };
                return node;
              }
              exports3.Selection = {
                create: createNode,
                FIRST: "FIRST",
                LAST: "LAST",
                ALL: "ALL"
              };
            },
            /* 42 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Projection = void 0;
              var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj;
              } : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
              };
              var _SpelNode = __webpack_require__(0);
              function projectCollection(collection, expr, state) {
                return collection.map(function(element) {
                  var matches;
                  state.activeContext.push(element);
                  matches = expr.getValue(state);
                  state.activeContext.pop();
                  return matches;
                });
              }
              function createNode(nullSafeNavigation, position, expr) {
                var node = _SpelNode.SpelNode.create("projection", position, expr);
                node.getValue = function(state) {
                  var collection = state.activeContext.peek(), entries = [], key;
                  if (Array.isArray(collection)) {
                    return projectCollection(collection, expr, state);
                  } else if ((typeof collection === "undefined" ? "undefined" : _typeof2(collection)) === "object") {
                    for (key in collection) {
                      if (collection.hasOwnProperty(key)) {
                        entries.push(collection[key]);
                      }
                    }
                    return projectCollection(entries, expr, state);
                  }
                  return null;
                };
                return node;
              }
              exports3.Projection = {
                create: createNode
              };
            },
            /* 43 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpInstanceof = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("instanceof", position, left, right);
                node.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "OpInstanceOf: Not implemented"
                  };
                };
                return node;
              }
              exports3.OpInstanceof = {
                create: createNode
              };
            },
            /* 44 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.OpBetween = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, left, right) {
                var node = _SpelNode.SpelNode.create("between", position, left, right);
                node.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "OpBetween: Not implemented"
                  };
                };
                return node;
              }
              exports3.OpBetween = {
                create: createNode
              };
            },
            /* 45 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.TypeReference = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, node, _dims) {
                var node = _SpelNode.SpelNode.create("typeref", position, node);
                node.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "TypeReference: Not implemented"
                  };
                };
                return node;
              }
              exports3.TypeReference = {
                create: createNode
              };
            },
            /* 46 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.BeanReference = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(position, beanName) {
                var node = _SpelNode.SpelNode.create("beanref", position);
                node.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "BeanReference: Not implemented"
                  };
                };
                return node;
              }
              exports3.BeanReference = {
                create: createNode
              };
            },
            /* 47 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.Identifier = void 0;
              var _SpelNode = __webpack_require__(0);
              function createNode(identifierName, position) {
                var node = _SpelNode.SpelNode.create("identifier", position);
                node.getRaw = function() {
                  return identifierName;
                };
                node.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "Identifier: Not implemented"
                  };
                };
                return node;
              }
              exports3.Identifier = {
                create: createNode
              };
            },
            /* 48 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.QualifiedIdentifier = void 0;
              var _SpelNode = __webpack_require__(0);
              function _toConsumableArray2(arr) {
                if (Array.isArray(arr)) {
                  for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                  }
                  return arr2;
                } else {
                  return Array.from(arr);
                }
              }
              function createNode(position, pieces) {
                var node = _SpelNode.SpelNode.create.apply(_SpelNode.SpelNode, ["qualifiedidentifier", position].concat(_toConsumableArray2(pieces)));
                node.getRaw = function() {
                  return pieces.map(function(p2) {
                    return p2.getRaw();
                  });
                };
                node.getValue = function(state) {
                  throw {
                    name: "MethodNotImplementedException",
                    message: "QualifiedIdentifier: Not implemented"
                  };
                };
                return node;
              }
              exports3.QualifiedIdentifier = {
                create: createNode
              };
            },
            /* 49 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              exports3.ConstructorReference = void 0;
              var _SpelNode = __webpack_require__(0);
              var _Stack2 = __webpack_require__(1);
              function _toConsumableArray2(arr) {
                if (Array.isArray(arr)) {
                  for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                  }
                  return arr2;
                } else {
                  return Array.from(arr);
                }
              }
              function _toArray2(arr) {
                return Array.isArray(arr) ? arr : Array.from(arr);
              }
              function createNode(position, dimensions, nodes) {
                var isArray2 = nodes !== void 0;
                var dimension;
                if (isArray2) {
                  dimension = dimensions.length && dimensions[0] && dimensions[0].getType() === "number" ? dimensions[0].getValue() : null;
                } else {
                  nodes = dimensions;
                  dimensions = void 0;
                }
                var _nodes = nodes, _nodes2 = _toArray2(_nodes);
                _nodes2[0];
                var args = _nodes2.slice(1);
                var node = _SpelNode.SpelNode.create.apply(_SpelNode.SpelNode, ["constructorref", position].concat(_toConsumableArray2(nodes)));
                node.getRaw = function() {
                  return dimension;
                };
                node.getValue = function(state) {
                  if (isArray2 && args.length <= 1) {
                    var compiledArgs = [];
                    args.forEach(function(arg) {
                      var currentActiveContext = state.activeContext;
                      state.activeContext = new _Stack2.Stack();
                      state.activeContext.push(state.rootContext);
                      compiledArgs.push(arg.getValue(state));
                      state.activeContext = currentActiveContext;
                    });
                    if (args.length === 1) {
                      return compiledArgs[0];
                    } else {
                      return dimension ? new Array(dimension) : [];
                    }
                  }
                  throw {
                    name: "MethodNotImplementedException",
                    message: "ConstructorReference: Not implemented"
                  };
                };
                return node;
              }
              exports3.ConstructorReference = {
                create: createNode
              };
            },
            /* 50 */
            /***/
            function(module3, exports3, __webpack_require__) {
              Object.defineProperty(exports3, "__esModule", {
                value: true
              });
              function create(authentication, principal) {
                var context2 = {};
                context2.authentication = authentication || {};
                context2.principal = principal || {};
                context2.hasRole = function(role) {
                  var hasRole = false;
                  if (!role) {
                    return false;
                  }
                  if (!context2.authentication && !Array.isArray(context2.authentication.authorities)) {
                    return false;
                  }
                  context2.authentication.authorities.forEach(function(grantedAuthority) {
                    if (grantedAuthority.authority.toLowerCase() === role.toLowerCase()) {
                      hasRole = true;
                    }
                  });
                  return hasRole;
                };
                context2.hasPermission = function() {
                  var args = Array.prototype.slice.call(arguments);
                  if (args.length === 1) {
                    return context2.hasRole(args[0]);
                  }
                };
                return context2;
              }
              exports3.StandardContext = {
                create
              };
            }
            /******/
          ])
        );
      });
    })(spel2js);
    var spel2jsExports = spel2js.exports;
    var SqlString$1 = {};
    (function(exports2) {
      var SqlString2 = exports2;
      var ID_GLOBAL_REGEXP = /`/g;
      var QUAL_GLOBAL_REGEXP = /\./g;
      var CHARS_GLOBAL_REGEXP = /[\0\b\t\n\r\x1a\"\'\\]/g;
      var CHARS_ESCAPE_MAP = {
        "\0": "\\0",
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\r": "\\r",
        "": "\\Z",
        '"': '\\"',
        "'": "\\'",
        "\\": "\\\\"
      };
      SqlString2.escapeId = function escapeId(val, forbidQualified) {
        if (Array.isArray(val)) {
          var sql = "";
          for (var i = 0; i < val.length; i++) {
            sql += (i === 0 ? "" : ", ") + SqlString2.escapeId(val[i], forbidQualified);
          }
          return sql;
        } else if (forbidQualified) {
          return "`" + String(val).replace(ID_GLOBAL_REGEXP, "``") + "`";
        } else {
          return "`" + String(val).replace(ID_GLOBAL_REGEXP, "``").replace(QUAL_GLOBAL_REGEXP, "`.`") + "`";
        }
      };
      SqlString2.escape = function escape2(val, stringifyObjects, timeZone) {
        if (val === void 0 || val === null) {
          return "NULL";
        }
        switch (typeof val) {
          case "boolean":
            return val ? "true" : "false";
          case "number":
            return val + "";
          case "object":
            if (Object.prototype.toString.call(val) === "[object Date]") {
              return SqlString2.dateToString(val, timeZone || "local");
            } else if (Array.isArray(val)) {
              return SqlString2.arrayToList(val, timeZone);
            } else if (Buffer.isBuffer(val)) {
              return SqlString2.bufferToString(val);
            } else if (typeof val.toSqlString === "function") {
              return String(val.toSqlString());
            } else if (stringifyObjects) {
              return escapeString(val.toString());
            } else {
              return SqlString2.objectToValues(val, timeZone);
            }
          default:
            return escapeString(val);
        }
      };
      SqlString2.arrayToList = function arrayToList(array, timeZone) {
        var sql = "";
        for (var i = 0; i < array.length; i++) {
          var val = array[i];
          if (Array.isArray(val)) {
            sql += (i === 0 ? "" : ", ") + "(" + SqlString2.arrayToList(val, timeZone) + ")";
          } else {
            sql += (i === 0 ? "" : ", ") + SqlString2.escape(val, true, timeZone);
          }
        }
        return sql;
      };
      SqlString2.format = function format2(sql, values, stringifyObjects, timeZone) {
        if (values == null) {
          return sql;
        }
        if (!Array.isArray(values)) {
          values = [values];
        }
        var chunkIndex = 0;
        var placeholdersRegex = /\?+/g;
        var result = "";
        var valuesIndex = 0;
        var match;
        while (valuesIndex < values.length && (match = placeholdersRegex.exec(sql))) {
          var len = match[0].length;
          if (len > 2) {
            continue;
          }
          var value2 = len === 2 ? SqlString2.escapeId(values[valuesIndex]) : SqlString2.escape(values[valuesIndex], stringifyObjects, timeZone);
          result += sql.slice(chunkIndex, match.index) + value2;
          chunkIndex = placeholdersRegex.lastIndex;
          valuesIndex++;
        }
        if (chunkIndex === 0) {
          return sql;
        }
        if (chunkIndex < sql.length) {
          return result + sql.slice(chunkIndex);
        }
        return result;
      };
      SqlString2.dateToString = function dateToString(date, timeZone) {
        var dt = new Date(date);
        if (isNaN(dt.getTime())) {
          return "NULL";
        }
        var year;
        var month;
        var day;
        var hour;
        var minute;
        var second;
        var millisecond;
        if (timeZone === "local") {
          year = dt.getFullYear();
          month = dt.getMonth() + 1;
          day = dt.getDate();
          hour = dt.getHours();
          minute = dt.getMinutes();
          second = dt.getSeconds();
          millisecond = dt.getMilliseconds();
        } else {
          var tz = convertTimezone(timeZone);
          if (tz !== false && tz !== 0) {
            dt.setTime(dt.getTime() + tz * 6e4);
          }
          year = dt.getUTCFullYear();
          month = dt.getUTCMonth() + 1;
          day = dt.getUTCDate();
          hour = dt.getUTCHours();
          minute = dt.getUTCMinutes();
          second = dt.getUTCSeconds();
          millisecond = dt.getUTCMilliseconds();
        }
        var str = zeroPad(year, 4) + "-" + zeroPad(month, 2) + "-" + zeroPad(day, 2) + " " + zeroPad(hour, 2) + ":" + zeroPad(minute, 2) + ":" + zeroPad(second, 2) + "." + zeroPad(millisecond, 3);
        return escapeString(str);
      };
      SqlString2.bufferToString = function bufferToString(buffer) {
        return "X" + escapeString(buffer.toString("hex"));
      };
      SqlString2.objectToValues = function objectToValues(object, timeZone) {
        var sql = "";
        for (var key in object) {
          var val = object[key];
          if (typeof val === "function") {
            continue;
          }
          sql += (sql.length === 0 ? "" : ", ") + SqlString2.escapeId(key) + " = " + SqlString2.escape(val, true, timeZone);
        }
        return sql;
      };
      SqlString2.raw = function raw(sql) {
        if (typeof sql !== "string") {
          throw new TypeError("argument sql must be a string");
        }
        return {
          toSqlString: function toSqlString() {
            return sql;
          }
        };
      };
      function escapeString(val) {
        var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;
        var escapedVal = "";
        var match;
        while (match = CHARS_GLOBAL_REGEXP.exec(val)) {
          escapedVal += val.slice(chunkIndex, match.index) + CHARS_ESCAPE_MAP[match[0]];
          chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;
        }
        if (chunkIndex === 0) {
          return "'" + val + "'";
        }
        if (chunkIndex < val.length) {
          return "'" + escapedVal + val.slice(chunkIndex) + "'";
        }
        return "'" + escapedVal + "'";
      }
      function zeroPad(number, length) {
        number = number.toString();
        while (number.length < length) {
          number = "0" + number;
        }
        return number;
      }
      function convertTimezone(tz) {
        if (tz === "Z") {
          return 0;
        }
        var m2 = tz.match(/([\+\-\s])(\d\d):?(\d\d)?/);
        if (m2) {
          return (m2[1] === "-" ? -1 : 1) * (parseInt(m2[2], 10) + (m2[3] ? parseInt(m2[3], 10) : 0) / 60) * 60;
        }
        return false;
      }
    })(SqlString$1);
    var sqlstring = SqlString$1;
    const SqlStringOrig = /* @__PURE__ */ getDefaultExportFromCjs(sqlstring);
    var SqlString = SqlStringOrig;
    SqlString.trim = function(val) {
      if (val.charAt(0) == "'") return val.substring(1, val.length - 1);
      else return val;
    };
    SqlString.escapeLike = function(val) {
      var any_start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var any_end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var res = SqlString.escape(val);
      res = SqlString.trim(res);
      res = res.replace(/[%_]/g, "\\$&");
      res = (any_start ? "%" : "") + res + (any_end ? "%" : "");
      res = "'" + res + "'";
      return res;
    };
    var sqlEmptyValue = function sqlEmptyValue2(fieldDef) {
      var v2 = "''";
      var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;
      if (type == "date") {
        v2 = "'0000-00-00'";
      } else if (type == "datetime") {
        v2 = "'0000-00-00 00:00'";
      } else if (type == "time") {
        v2 = "'00:00'";
      } else if (type == "number") {
        v2 = "0";
      }
      return v2;
    };
    var mongoEmptyValue = function mongoEmptyValue2(fieldDef) {
      var v2 = "";
      var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;
      if (type == "number") {
        v2 = 0;
      }
      return v2;
    };
    var spelEscapeString = function spelEscapeString2(val) {
      return "'" + val.replace(/'/g, "''") + "'";
    };
    var spelInlineList = function spelInlineList2(vals) {
      var toArray2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var javaType;
      var jt;
      var numberJavaTypes = ["int", "float"];
      vals.map(function(v2) {
        if (v2 !== void 0 && v2 !== null) {
          if (typeof v2 === "string") {
            jt = "String";
          } else if (typeof v2 === "number") {
            jt = Number.isInteger(v2) ? "int" : "float";
          } else throw new Error("spelEscape: Can't use value ".concat(v2, " in array"));
          if (!javaType) {
            javaType = jt;
          } else if (javaType != jt) {
            if (numberJavaTypes.includes(javaType) && numberJavaTypes.includes(jt)) {
              javaType = "float";
            } else throw new Error("spelEscape: Can't use different types in array: found ".concat(javaType, " and ").concat(jt));
          }
        }
      });
      if (!javaType) {
        javaType = "String";
      }
      var escapedVals;
      if (javaType == "float") {
        escapedVals = vals.map(function(v2) {
          return spelEscape(v2, true);
        });
      } else {
        escapedVals = vals.map(function(v2) {
          return spelEscape(v2);
        });
      }
      var res;
      if (toArray2) {
        res = "new ".concat(javaType, "[]{").concat(escapedVals.join(", "), "}");
      } else {
        res = "{".concat(escapedVals.join(", "), "}");
      }
      return res;
    };
    var spelFixList = function spelFixList2(val) {
      return "".concat(val, ".?[true]");
    };
    var spelEscape = function spelEscape2(val) {
      var numberToFloat = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var arrayToArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (val === void 0 || val === null) {
        return "null";
      }
      switch (_typeof$1(val)) {
        case "boolean":
          return val ? "true" : "false";
        case "number":
          if (!Number.isFinite(val) || isNaN(val)) return void 0;
          return val + (!Number.isInteger(val) || numberToFloat ? "f" : "");
        case "object":
          if (Array.isArray(val)) {
            return spelInlineList(val, arrayToArray);
          } else {
            throw new Error("spelEscape: Object is not supported");
          }
        default:
          return spelEscapeString(val);
      }
    };
    var spelFormatConcat = function spelFormatConcat2(parts) {
      if (parts && Array.isArray(parts) && parts.length) {
        return parts.map(function(part) {
          if (part.type == "const") {
            return spelEscape(part.value);
          } else if (part.type == "property") {
            return "" + part.value;
          } else if (part.type == "variable") {
            return "#" + part.value;
          }
          return void 0;
        }).filter(function(r2) {
          return r2 != void 0;
        }).join(" + ");
      } else {
        return "null";
      }
    };
    var spelImportConcat = function spelImportConcat2(val) {
      if (val == void 0) return [void 0, []];
      var errors = [];
      var value2 = val.valueType == "case_value" ? val.value : val;
      var valueArr = Array.isArray(value2) ? value2 : [value2];
      var res = valueArr.map(function(child) {
        if (child.valueSrc === "value") {
          if (child.value === null) {
            return void 0;
          } else {
            return {
              type: "const",
              value: child.value
            };
          }
        } else if (child.valueSrc === "field") {
          return {
            type: child.isVariable ? "variable" : "property",
            value: child.value
          };
        } else {
          errors.push("Unsupported valueSrc ".concat(child.valueSrc, " in concatenation"));
        }
      }).filter(function(v2) {
        return v2 != void 0;
      });
      return [res, errors];
    };
    var stringifyForDisplay = function stringifyForDisplay2(v2) {
      return v2 == null ? "NULL" : v2.toString();
    };
    var wrapWithBrackets = function wrapWithBrackets2(v2) {
      if (v2 == void 0) return v2;
      if ((v2 === null || v2 === void 0 ? void 0 : v2[0]) === "(" && (v2 === null || v2 === void 0 ? void 0 : v2[(v2 === null || v2 === void 0 ? void 0 : v2.length) - 1]) === ")") {
        return v2;
      }
      return "(" + v2 + ")";
    };
    const _export = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      SqlString,
      mongoEmptyValue,
      spelEscape,
      spelFixList,
      spelFormatConcat,
      spelImportConcat,
      sqlEmptyValue,
      stringifyForDisplay,
      wrapWithBrackets
    }, Symbol.toStringTag, { value: "Module" }));
    function _createForOfIteratorHelper$c(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$c(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$c(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$c(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$c(o, minLen);
    }
    function _arrayLikeToArray$c(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$w(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$w(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$w(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$w(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var compareToSign = "${0}.compareTo(${1})";
    var TypesWithCompareTo = {
      datetime: true,
      time: true,
      date: true
    };
    var spelFormat = function spelFormat2(tree2, config2) {
      return _spelFormat(tree2, config2, false);
    };
    var _spelFormat = function _spelFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig(config2, void 0, false);
      var res = formatItem$5(tree2, extendedConfig, meta, null);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length) console.warn("Errors while exporting to SpEL:", meta.errors);
        return res;
      }
    };
    var formatItem$5 = function formatItem2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      if (!item) return void 0;
      var type = item.get("type");
      if (type === "group" || type === "rule_group") {
        return formatGroup$5(item, config2, meta, parentField);
      } else if (type === "rule") {
        return formatRule$5(item, config2, meta, parentField);
      } else if (type == "switch_group") {
        return formatSwitch$1(item, config2, meta);
      } else if (type == "case_group") {
        return formatCase$1(item, config2, meta, parentField);
      }
      return void 0;
    };
    var formatCase$1 = function formatCase2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var type = item.get("type");
      if (type != "case_group") {
        meta.errors.push("Unexpected child of type ".concat(type, " inside switch"));
        return void 0;
      }
      var properties = item.get("properties") || new Map$5();
      var _formatItemValue = formatItemValue$2(config2, properties, meta, null, parentField, "!case_value"), _formatItemValue2 = _slicedToArray(_formatItemValue, 3), formattedValue = _formatItemValue2[0];
      _formatItemValue2[1];
      _formatItemValue2[2];
      var cond = formatGroup$5(item, config2, meta, parentField);
      return [cond, formattedValue];
    };
    var formatSwitch$1 = function formatSwitch2(item, config2, meta) {
      item.get("properties") || new Map$5();
      var children = item.get("children1");
      if (!children) return void 0;
      var cases = children.map(function(currentChild) {
        return formatCase$1(currentChild, config2, meta, null);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      }).valueSeq().toArray();
      if (!cases.length) return void 0;
      if (cases.length == 1 && !cases[0][0]) {
        return cases[0][1];
      }
      var filteredCases = [];
      for (var i = 0; i < cases.length; i++) {
        if (i != cases.length - 1 && !cases[i][0]) {
          meta.errors.push("No condition for case ".concat(i));
        } else {
          filteredCases.push(cases[i]);
          if (i == cases.length - 1 && cases[i][0]) {
            filteredCases.push([void 0, null]);
          }
        }
      }
      var left = "", right = "";
      for (var _i = 0; _i < filteredCases.length; _i++) {
        var _filteredCases$_i = _slicedToArray(filteredCases[_i], 2), cond = _filteredCases$_i[0], value2 = _filteredCases$_i[1];
        if (value2 == void 0) value2 = "null";
        if (cond == void 0) cond = "true";
        if (_i != filteredCases.length - 1) {
          left += "(".concat(cond, " ? ").concat(value2, " : ");
          right += ")";
        } else {
          left += "".concat(value2);
        }
      }
      return left + right;
    };
    var formatGroup$5 = function formatGroup2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var type = item.get("type");
      var properties = item.get("properties") || new Map$5();
      var mode = properties.get("mode");
      var children = item.get("children1") || new List();
      var field = properties.get("field");
      var conjunction = properties.get("conjunction");
      if (!conjunction) conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var not2 = properties.get("not");
      var isRuleGroup = type === "rule_group";
      var isRuleGroupArray = isRuleGroup && mode != "struct";
      var groupField = isRuleGroupArray ? field : parentField;
      var groupFieldDef = getFieldConfig$b(config2, groupField) || {};
      var isSpelArray = groupFieldDef.isSpelArray;
      var fieldSeparator = config2.settings.fieldSeparator;
      var groupOperator = properties.get("operator");
      if (!groupOperator && (!mode || mode == "some")) {
        groupOperator = "some";
      }
      var realGroupOperator = checkOp(config2, groupOperator, field);
      var isGroupOpRev = realGroupOperator != groupOperator;
      var realGroupOperatorDefinition = groupOperator && getOperatorConfig$4(config2, realGroupOperator, field) || null;
      var isGroup0 = isRuleGroup && (!realGroupOperator || realGroupOperatorDefinition.cardinality == 0);
      var _formatItemValue3 = formatItemValue$2(config2, properties, meta, realGroupOperator, parentField, null), _formatItemValue4 = _slicedToArray(_formatItemValue3, 3), formattedValue = _formatItemValue4[0], valueSrc = _formatItemValue4[1], valueType = _formatItemValue4[2];
      var list = children.map(function(currentChild) {
        return formatItem$5(currentChild, config2, meta, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (isRuleGroupArray && !isGroup0) {
        if (formattedValue == void 0) return void 0;
      } else {
        if (!list.size) return void 0;
      }
      var omitBrackets = isRuleGroup;
      var filter = list.size ? conjunctionDefinition.spelFormatConj.call(config2.ctx, list, conjunction, not2, omitBrackets) : null;
      var ret;
      if (isRuleGroupArray) {
        var formattedField = formatField$3(meta, config2, field, parentField);
        var sep = fieldSeparator || ".";
        var getSize = sep + (isSpelArray ? "length" : "size()");
        var fullSize = "".concat(formattedField).concat(getSize);
        var filteredSize = filter ? "".concat(formattedField, ".?[").concat(filter, "]").concat(getSize) : fullSize;
        var groupValue = isGroup0 ? fullSize : formattedValue;
        ret = formatExpression(meta, config2, properties, filteredSize, groupValue, realGroupOperator, valueSrc, valueType, isGroupOpRev);
      } else {
        ret = filter;
      }
      return ret;
    };
    var buildFnToFormatOp$3 = function buildFnToFormatOp2(operator, operatorDefinition, valueType) {
      var spelOp = operatorDefinition.spelOp;
      if (!spelOp) return void 0;
      var isSign = spelOp.includes("${0}");
      var isCompareTo = TypesWithCompareTo[valueType];
      var sop = spelOp;
      var fn;
      var cardinality = getOpCardinality$1(operatorDefinition);
      if (isCompareTo) {
        fn = function fn2(field, op, values, valueSrc, valueType2, opDef, operatorOptions, fieldDef) {
          var compareRes = compareToSign.replace(/\${(\w+)}/g, function(_, k2) {
            return k2 == 0 ? field : cardinality > 1 ? values[k2 - 1] : values;
          });
          return "".concat(compareRes, " ").concat(sop, " 0");
        };
      } else if (isSign) {
        fn = function fn2(field, op, values, valueSrc, valueType2, opDef, operatorOptions, fieldDef) {
          return spelOp.replace(/\${(\w+)}/g, function(_, k2) {
            return k2 == 0 ? field : cardinality > 1 ? values[k2 - 1] : values;
          });
        };
      } else if (cardinality == 0) {
        fn = function fn2(field, op, values, valueSrc, valueType2, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sop);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, values, valueSrc, valueType2, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sop, " ").concat(values);
        };
      }
      return fn;
    };
    var formatExpression = function formatExpression2(meta, config2, properties, formattedField, formattedValue, operator, valueSrc, valueType) {
      var isRev = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var field = properties.get("field");
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var fieldDef = getFieldConfig$b(config2, field) || {};
      var operatorOptions = properties.get("operatorOptions");
      var fn = opDef.spelFormatOp || buildFnToFormatOp$3(operator, opDef, valueType);
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var args = [formattedField, operator, formattedValue, valueSrc, valueType, omit$2(opDef, opDefKeysToOmit), operatorOptions, fieldDef];
      var ret;
      ret = fn.call.apply(fn, [config2.ctx].concat(args));
      if (isRev) {
        ret = config2.settings.spelFormatReverse.call(config2.ctx, ret);
      }
      if (ret === void 0) {
        meta.errors.push("Operator ".concat(operator, " is not supported for value source ").concat(valueSrc));
      }
      return ret;
    };
    var checkOp = function checkOp2(config2, operator, field) {
      if (!operator) return void 0;
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = opDef.reversedOp;
      var revOpDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var canFormatOp = opDef.spelOp || opDef.spelFormatOp;
      var canFormatRevOp = revOpDef.spelOp || revOpDef.spelFormatOp;
      if (!canFormatOp && !canFormatRevOp) {
        return void 0;
      }
      if (!canFormatOp && canFormatRevOp) {
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOpDef, opDef];
        opDef = _ref2[0];
        revOpDef = _ref2[1];
      }
      return operator;
    };
    var formatRule$5 = function formatRule2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var properties = item.get("properties") || new Map$5();
      var field = properties.get("field");
      var fieldSrc = properties.get("fieldSrc");
      var operator = properties.get("operator");
      if (field == null || operator == null) return void 0;
      var realOp = checkOp(config2, operator, field);
      if (!realOp) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var isRev = realOp != operator;
      var _formatItemValue5 = formatItemValue$2(config2, properties, meta, realOp, parentField, null), _formatItemValue6 = _slicedToArray(_formatItemValue5, 3), formattedValue = _formatItemValue6[0], valueSrc = _formatItemValue6[1], valueType = _formatItemValue6[2];
      if (formattedValue === void 0) return void 0;
      var formattedField = formatLhs(meta, config2, field, fieldSrc, parentField);
      if (formattedField === void 0) return void 0;
      var res = formatExpression(meta, config2, properties, formattedField, formattedValue, realOp, valueSrc, valueType, isRev);
      return res;
    };
    var formatLhs = function formatLhs2(meta, config2, field, fieldSrc) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (fieldSrc === "func") return formatFunc$4(meta, config2, field, parentField);
      else return formatField$3(meta, config2, field, parentField);
    };
    var formatItemValue$2 = function formatItemValue2(config2, properties, meta, operator, parentField) {
      var expectedValueType = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var field = properties.get("field");
      var iValueSrc = properties.get("valueSrc");
      var iValueType = properties.get("valueType");
      if (expectedValueType == "!case_value" || iValueType && iValueType.get(0) == "case_value") {
        field = "!case_value";
      }
      var fieldDef = getFieldConfig$b(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = getOpCardinality$1(operatorDefinition);
      var iValue = properties.get("value");
      var asyncListValues = properties.get("asyncListValues");
      var valueSrcs = [];
      var valueTypes = [];
      var formattedValue;
      if (iValue != void 0) {
        var fvalue = iValue.map(function(currentValue, ind) {
          var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
          var valueType = iValueType ? iValueType.get(ind) : null;
          var cValue = completeValue(currentValue, valueSrc, config2);
          var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var fieldWidgetDef = getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc, {
            forExport: true
          });
          var fv = formatValue$4(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDefinition, parentField, asyncListValues);
          if (fv !== void 0) {
            valueSrcs.push(valueSrc);
            valueTypes.push(valueType);
          }
          return fv;
        });
        var hasUndefinedValues = fvalue.filter(function(v2) {
          return v2 === void 0;
        }).size > 0;
        if (!(fvalue.size < cardinality || hasUndefinedValues)) {
          formattedValue = cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
        }
      }
      return [formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0]];
    };
    var formatValue$4 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef) {
      var parentField = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : null;
      var asyncListValues = arguments.length > 10 ? arguments[10] : void 0;
      if (currentValue === void 0) return void 0;
      var ret;
      if (valueSrc === "field") {
        ret = formatField$3(meta, config2, currentValue, parentField);
      } else if (valueSrc === "func") {
        ret = formatFunc$4(meta, config2, currentValue, parentField);
      } else {
        if (typeof (fieldWidgetDef === null || fieldWidgetDef === void 0 ? void 0 : fieldWidgetDef.spelFormatValue) === "function") {
          var fn = fieldWidgetDef.spelFormatValue;
          var args = [
            currentValue,
            _objectSpread$w(_objectSpread$w({}, pick$1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            //useful options: valueFormat for date/time
            omit$2(fieldWidgetDef, widgetDefKeysToOmit)
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$b(config2, currentValue) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          ret = spelEscape(currentValue);
        }
      }
      return ret;
    };
    var formatField$3 = function formatField2(meta, config2, field) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      if (!field) return;
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldDefinition = getFieldConfig$b(config2, field) || {};
      var fieldParts = getFieldParts$3(field, config2);
      var fieldPartsConfigs = getFieldPartsConfigs(field, config2, parentField);
      var formatFieldFn = config2.settings.formatSpelField;
      var fieldName = formatFieldName(field, config2, meta, parentField);
      var fieldPartsMeta = fieldPartsConfigs.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 3), key = _ref4[0], cnf = _ref4[1], parentCnf = _ref4[2];
        var parent2;
        if (parentCnf) {
          if (parentCnf.type == "!struct" || parentCnf.type == "!group" && parentCnf.mode == "struct") parent2 = cnf.isSpelMap ? "map" : "class";
          else if (parentCnf.type == "!group") parent2 = cnf.isSpelItemMap ? "[map]" : "[class]";
          else parent2 = "class";
        }
        var isSpelVariable = cnf === null || cnf === void 0 ? void 0 : cnf.isSpelVariable;
        return {
          key,
          parent: parent2,
          isSpelVariable,
          fieldSeparator
        };
      });
      var formattedField = formatFieldFn.call(config2.ctx, fieldName, parentField, fieldParts, fieldPartsMeta, fieldDefinition, config2);
      return formattedField;
    };
    var formatFunc$4 = function formatFunc2(meta, config2, currentValue) {
      var _currentValue$get, _currentValue$get2;
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var funcKey = (_currentValue$get = currentValue.get) === null || _currentValue$get === void 0 ? void 0 : _currentValue$get.call(currentValue, "func");
      var args = (_currentValue$get2 = currentValue.get) === null || _currentValue$get2 === void 0 ? void 0 : _currentValue$get2.call(currentValue, "args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) {
        meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
        return void 0;
      }
      var formattedArgs = {};
      var gaps = [];
      var missingArgKeys = [];
      for (var argKey in funcConfig.args) {
        var _argValue, _argConfig$spelEscape;
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$b(config2, argConfig);
        var defaultValue = argConfig.defaultValue, isOptional = argConfig.isOptional;
        var defaultValueSrc = defaultValue !== null && defaultValue !== void 0 && defaultValue.func ? "func" : "value";
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        if (argValueSrc !== "func" && (_argValue = argValue) !== null && _argValue !== void 0 && _argValue.toJS) {
          argValue = argValue.toJS();
        }
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var doEscape = (_argConfig$spelEscape = argConfig.spelEscapeForFormat) !== null && _argConfig$spelEscape !== void 0 ? _argConfig$spelEscape : true;
        var operator = null;
        var widget = getWidgetForFieldOp$3(config2, argConfig, operator, argValueSrc);
        var fieldWidgetDef = getFieldWidgetConfig$3(config2, argConfig, operator, widget, argValueSrc, {
          forExport: true
        });
        var formattedArgVal = formatValue$4(meta, config2, argValue, argValueSrc, argConfig.type, fieldWidgetDef, fieldDef, null, null, parentField, argAsyncListValues);
        if (argValue != void 0 && formattedArgVal === void 0) {
          if (argValueSrc != "func")
            meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        var formattedDefaultVal = void 0;
        if (formattedArgVal === void 0 && !isOptional && defaultValue != void 0) {
          var defaultWidget = getWidgetForFieldOp$3(config2, argConfig, operator, defaultValueSrc);
          var defaultFieldWidgetDef = getFieldWidgetConfig$3(config2, argConfig, operator, defaultWidget, defaultValueSrc, {
            forExport: true
          });
          formattedDefaultVal = formatValue$4(meta, config2, defaultValue, defaultValueSrc, argConfig.type, defaultFieldWidgetDef, fieldDef, null, null, parentField, argAsyncListValues);
          if (formattedDefaultVal === void 0) {
            if (defaultValueSrc != "func")
              meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
            return void 0;
          }
        }
        var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
        if (finalFormattedVal !== void 0) {
          var _argValue2;
          if (gaps.length) {
            var _iterator = _createForOfIteratorHelper$c(gaps), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var missedArgKey = _step.value;
                formattedArgs[missedArgKey] = void 0;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            gaps = [];
          }
          formattedArgs[argKey] = doEscape ? finalFormattedVal : (_argValue2 = argValue) !== null && _argValue2 !== void 0 ? _argValue2 : defaultValue;
        } else {
          if (!isOptional) missingArgKeys.push(argKey);
          gaps.push(argKey);
        }
      }
      if (missingArgKeys.length) {
        return void 0;
      }
      var ret;
      if (typeof funcConfig.spelFormatFunc === "function") {
        var fn = funcConfig.spelFormatFunc;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else if (funcConfig.spelFunc) {
        ret = funcConfig.spelFunc.replace(/\${(\w+)}/g, function(found, argKey2) {
          var _formattedArgs$argKey;
          return (_formattedArgs$argKey = formattedArgs[argKey2]) !== null && _formattedArgs$argKey !== void 0 ? _formattedArgs$argKey : found;
        });
        var optionalArgs = Object.keys(funcConfig.args || {}).reverse().filter(function(argKey2) {
          return !!funcConfig.args[argKey2].isOptional;
        });
        var _iterator2 = _createForOfIteratorHelper$c(optionalArgs), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _argKey = _step2.value;
            if (formattedArgs[_argKey] != void 0) break;
            ret = ret.replace(new RegExp("(, )?\\${" + _argKey + "}", "g"), "");
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ret = ret.replace(/\${(\w+)}/g, "null");
      } else {
        meta.errors.push("Func ".concat(funcKey, " is not supported"));
      }
      return ret;
    };
    function _createForOfIteratorHelper$b(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$b(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e2) {
            throw _e2;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e3) {
        didErr = true;
        err = _e3;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$b(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$b(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$b(o, minLen);
    }
    function _arrayLikeToArray$b(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$v(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$v(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$v(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$v(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var SpelPrimitiveTypes = {
      number: "number",
      string: "text",
      "boolean": "boolean",
      "null": "null"
      // should not be
    };
    var SpelPrimitiveClasses = {
      String: "text"
    };
    var ListValueType = "multiselect";
    var isFuncableProperty = function isFuncableProperty2(p2) {
      return ["length"].includes(p2);
    };
    var isObject$8 = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var loadFromSpel = function loadFromSpel2(logicTree, config2) {
      return _loadFromSpel(logicTree, config2, true);
    };
    var _loadFromSpel = function _loadFromSpel2(spelStr, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig(config2, void 0, false);
      var conv = buildConv(extendedConfig);
      var compiledExpression;
      var convertedObj;
      var jsTree = void 0;
      try {
        var compileRes = spel2jsExports.SpelExpressionEvaluator.compile(spelStr);
        compiledExpression = compileRes._compiledExpression;
      } catch (e2) {
        meta.errors.push(e2);
      }
      if (compiledExpression) {
        convertedObj = postprocessCompiled(compiledExpression, meta);
        logger$1.debug("convertedObj:", convertedObj, meta);
        jsTree = convertToTree(convertedObj, conv, extendedConfig, meta);
        if (jsTree && jsTree.type != "group" && jsTree.type != "switch_group") {
          jsTree = wrapInDefaultConj(jsTree, extendedConfig, convertedObj["not"]);
        }
        logger$1.debug("jsTree:", jsTree);
      }
      var immTree = jsTree ? loadTree$1(jsTree) : void 0;
      if (returnErrors) {
        return [immTree, meta.errors];
      } else {
        if (meta.errors.length) console.warn("Errors while importing from SpEL:", meta.errors);
        return immTree;
      }
    };
    var postprocessCompiled = function postprocessCompiled2(expr, meta) {
      var parentExpr = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var type = expr.getType();
      var children = expr.getChildren().map(function(child) {
        return postprocessCompiled2(child, meta, expr);
      });
      if (type == "op-or" || type == "op-and") {
        children = children.reduce(function(acc, child) {
          var canFlatize = child.type == type && !child.not;
          var flat = canFlatize ? child.children : [child];
          return [].concat(_toConsumableArray(acc), _toConsumableArray(flat));
        }, []);
      }
      if (type == "op-not") {
        if (children.length != 1) {
          meta.errors.push("Operator NOT should have 1 child, but got ".concat(children.length, "}"));
        }
        return _objectSpread$v(_objectSpread$v({}, children[0]), {}, {
          not: !(children[0].not || false)
        });
      }
      if (type == "compound") {
        children = children.filter(function(child) {
          var isListFix = child.type == "selection" && child.children.length == 1 && child.children[0].type == "boolean" && child.children[0].val == true;
          return !isListFix;
        });
        var selection = children.find(function(child) {
          return child.type == "selection";
        });
        if (selection && selection.children.length != 1) {
          meta.errors.push("Selection should have 1 child, but got ".concat(selection.children.length));
        }
        var filter = selection ? selection.children[0] : null;
        var lastChild = children[children.length - 1];
        var isSize = lastChild.type == "method" && lastChild.val.methodName == "size" || lastChild.type == "!func" && lastChild.methodName == "size";
        var isLength2 = lastChild.type == "property" && lastChild.val == "length";
        var sourceParts = children.filter(function(child) {
          return child !== selection && child !== lastChild;
        });
        var source = {
          type: "compound",
          children: sourceParts
        };
        var isAggr = (isSize || isLength2) && convertPath(sourceParts) != null;
        if (isAggr) {
          return {
            type: "!aggr",
            filter,
            source
          };
        }
        children = children.filter(function(child) {
          var isThis = child.type == "variable" && child.val == "this";
          var isRoot = child.type == "variable" && child.val == "root";
          return !(isThis || isRoot);
        });
        children = children.map(function(child) {
          if (child.type == "indexer" && child.children.length == 1) {
            return {
              type: "indexer",
              val: child.children[0].val,
              itype: child.children[0].type
            };
          } else {
            return child;
          }
        });
        if (lastChild.type == "!func") {
          var ret = {};
          var curr = ret;
          do {
            var _lastChild, _lastChild2;
            Object.assign(curr, lastChild);
            children = children.filter(function(child) {
              return child !== lastChild;
            });
            lastChild = children[children.length - 1];
            if (((_lastChild2 = lastChild) === null || _lastChild2 === void 0 ? void 0 : _lastChild2.type) == "!func") {
              curr.obj = {};
              curr = curr.obj;
            } else {
              if (children.length > 1) {
                curr.obj = {
                  type: "compound",
                  children
                };
              } else {
                curr.obj = lastChild;
              }
            }
          } while (((_lastChild = lastChild) === null || _lastChild === void 0 ? void 0 : _lastChild.type) == "!func");
          return ret;
        }
      }
      var val;
      try {
        if (expr.getRaw) {
          val = expr.getRaw();
        } else if (expr.getValue.length == 0) {
          val = expr.getValue();
        }
      } catch (e2) {
        logger$1.error("[spel2js] Error in getValue()", e2);
      }
      if (type == "ternary") {
        val = flatizeTernary(children);
      }
      if (_typeof$1(val) === "object" && val !== null) {
        if (val.methodName || val.functionName) {
          val.args = val.args.map(function(child) {
            return postprocessCompiled2(child, meta, expr);
          });
        }
      }
      if (type == "list") {
        val = val.map(function(item) {
          return postprocessCompiled2(item, meta, expr);
        });
        if (!parentExpr && val.length == 1) {
          return val[0];
        }
      }
      if (type == "constructorref") {
        var qid = children.find(function(child) {
          return child.type == "qualifiedidentifier";
        });
        var cls = qid === null || qid === void 0 ? void 0 : qid.val;
        if (!cls) {
          meta.errors.push("Can't find qualifiedidentifier in constructorref children: ".concat(JSON.stringify(children)));
          return void 0;
        }
        var args = children.filter(function(child) {
          return child.type != "qualifiedidentifier";
        });
        return {
          type: "!new",
          cls,
          args
        };
      }
      if (type == "typeref") {
        var _qid = children.find(function(child) {
          return child.type == "qualifiedidentifier";
        });
        var _cls = _qid === null || _qid === void 0 ? void 0 : _qid.val;
        if (!_cls) {
          meta.errors.push("Can't find qualifiedidentifier in typeref children: ".concat(JSON.stringify(children)));
          return void 0;
        }
        children.filter(function(child) {
          return child.type != "qualifiedidentifier";
        });
        return {
          type: "!type",
          cls: _cls
        };
      }
      if (type == "function" || type == "method") {
        var _val = val, functionName = _val.functionName, methodName = _val.methodName, _args2 = _val.args;
        return {
          type: "!func",
          methodName: functionName || methodName,
          isVar: type == "function",
          args: _args2
        };
      }
      return {
        type,
        children,
        val
      };
    };
    var flatizeTernary = function flatizeTernary2(children) {
      var flat = [];
      function _processTernaryChildren(tern) {
        var _tern = _slicedToArray(tern, 3), cond = _tern[0], if_val = _tern[1], else_val = _tern[2];
        flat.push([cond, if_val]);
        if ((else_val === null || else_val === void 0 ? void 0 : else_val.type) == "ternary") {
          _processTernaryChildren(else_val.children);
        } else {
          flat.push([void 0, else_val]);
        }
      }
      _processTernaryChildren(children);
      return flat;
    };
    var buildConv = function buildConv2(config2) {
      var operators2 = {};
      var _loop = function _loop3(opKey2) {
        var opConfig = config2.operators[opKey2];
        if (opConfig.spelOps) {
          opConfig.spelOps.forEach(function(spelOp2) {
            var opk2 = spelOp2;
            if (!operators2[opk2]) operators2[opk2] = [];
            operators2[opk2].push(opKey2);
          });
        } else if (opConfig.spelOp) {
          var opk = opConfig.spelOp;
          if (!operators2[opk]) operators2[opk] = [];
          operators2[opk].push(opKey2);
        } else {
          logger$1.log("[spel] No spelOp for operator ".concat(opKey2));
        }
      };
      for (var opKey in config2.operators) {
        _loop(opKey);
      }
      var conjunctions2 = {};
      for (var conjKey in config2.conjunctions) {
        var conjunctionDefinition = config2.conjunctions[conjKey];
        var ck2 = conjunctionDefinition.spelConj || conjKey.toLowerCase();
        conjunctions2[ck2] = conjKey;
      }
      var funcs2 = {};
      var _iterator = _createForOfIteratorHelper$b(iterateFuncs(config2)), _step;
      try {
        var _loop2 = function _loop22() {
          var _step$value = _slicedToArray(_step.value, 2), funcPath = _step$value[0], funcConfig = _step$value[1];
          var fks = [];
          var spelFunc = funcConfig.spelFunc;
          if (typeof spelFunc === "string") {
            var optionalArgs = Object.keys(funcConfig.args || {}).reverse().filter(function(argKey) {
              return !!funcConfig.args[argKey].isOptional || funcConfig.args[argKey].defaultValue != void 0;
            });
            var funcSignMain = spelFunc.replace(/\${(\w+)}/g, function(_, _k) {
              return "?";
            });
            var funcSignsOptional = optionalArgs.reduce(function(acc, argKey) {
              return [].concat(_toConsumableArray(acc), [[argKey].concat(_toConsumableArray(acc[acc.length - 1] || []))]);
            }, []).map(function(optionalArgKeys) {
              return spelFunc.replace(/(?:, )?\${(\w+)}/g, function(found, a) {
                return optionalArgKeys.includes(a) ? "" : found;
              }).replace(/\${(\w+)}/g, function(_, _k) {
                return "?";
              });
            });
            fks = [funcSignMain].concat(_toConsumableArray(funcSignsOptional));
          }
          var _iterator3 = _createForOfIteratorHelper$b(fks), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var _fk = _step3.value;
              if (!funcs2[_fk]) funcs2[_fk] = [];
              funcs2[_fk].push(funcPath);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          _loop2();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var valueFuncs = {};
      for (var w2 in config2.widgets) {
        var widgetDef = config2.widgets[w2];
        var spelImportFuncs = widgetDef.spelImportFuncs;
        widgetDef.type;
        if (spelImportFuncs) {
          var _iterator2 = _createForOfIteratorHelper$b(spelImportFuncs), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var fk2 = _step2.value;
              if (typeof fk2 === "string") {
                var fs = fk2.replace(/\${(\w+)}/g, function(_, k2) {
                  return "?";
                });
                var argsOrder = _toConsumableArray(fk2.matchAll(/\${(\w+)}/g)).map(function(_ref) {
                  var _ref2 = _slicedToArray(_ref, 2), _ = _ref2[0], k2 = _ref2[1];
                  return k2;
                });
                if (!valueFuncs[fs]) valueFuncs[fs] = [];
                valueFuncs[fs].push({
                  w: w2,
                  argsOrder
                });
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
      var opFuncs = {};
      for (var op in config2.operators) {
        var opDef = config2.operators[op];
        var spelOp = opDef.spelOp;
        if (spelOp !== null && spelOp !== void 0 && spelOp.includes("${0}")) {
          var _fs = spelOp.replace(/\${(\w+)}/g, function(_, k2) {
            return "?";
          });
          var _argsOrder = _toConsumableArray(spelOp.matchAll(/\${(\w+)}/g)).map(function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2);
            _ref4[0];
            var k2 = _ref4[1];
            return k2;
          });
          if (!opFuncs[_fs]) opFuncs[_fs] = [];
          opFuncs[_fs].push({
            op,
            argsOrder: _argsOrder
          });
        }
      }
      var compareToSS = compareToSign.replace(/\${(\w+)}/g, function(_, k2) {
        return "?";
      });
      opFuncs[compareToSS] = [{
        op: "!compare",
        argsOrder: ["0", "1"]
      }];
      return {
        operators: operators2,
        conjunctions: conjunctions2,
        funcs: funcs2,
        valueFuncs,
        opFuncs
      };
    };
    var convertToTree = function convertToTree2(spel, conv, config2, meta) {
      var _spel$_groupField;
      var parentSpel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!spel) return void 0;
      spel._groupField = (_spel$_groupField = spel._groupField) !== null && _spel$_groupField !== void 0 ? _spel$_groupField : parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField;
      var res, canParseAsArg = true;
      if (spel.type.indexOf("op-") === 0 || spel.type === "matches") {
        res = convertOp(spel, conv, config2, meta, parentSpel);
      } else if (spel.type == "!aggr") {
        var _groupFilter;
        var groupFieldValue = convertToTree2(spel.source, conv, config2, meta, spel);
        spel._groupField = groupFieldValue === null || groupFieldValue === void 0 ? void 0 : groupFieldValue.value;
        var groupFilter = convertToTree2(spel.filter, conv, config2, meta, spel);
        if (((_groupFilter = groupFilter) === null || _groupFilter === void 0 ? void 0 : _groupFilter.type) == "rule") {
          groupFilter = wrapInDefaultConj(groupFilter, config2, spel.filter.not);
        }
        res = {
          groupFilter,
          groupFieldValue
        };
        if (!parentSpel) {
          res = void 0;
          meta.errors.push("Unexpected !aggr in root");
          canParseAsArg = false;
        }
      } else if (spel.type == "ternary") {
        var children1 = {};
        spel.val.forEach(function(v2) {
          var _v = _slicedToArray(v2, 2), cond = _v[0], val = _v[1];
          var caseI = buildCase(cond, val, conv, config2, meta, spel);
          if (caseI) {
            children1[caseI.id] = caseI;
          }
        });
        res = {
          type: "switch_group",
          id: uuid$1(),
          children1,
          properties: {}
        };
      }
      if (!res && canParseAsArg) {
        res = convertArg(spel, conv, config2, meta, parentSpel);
      }
      if (res && !res.type && !parentSpel) {
        var sw = buildSimpleSwitch(spel, conv, config2, meta);
        if (sw) {
          res = sw;
        } else {
          res = void 0;
          meta.errors.push("Can't convert rule of type ".concat(spel.type, ", it looks like var/literal"));
        }
      }
      return res;
    };
    var convertOp = function convertOp2(spel, conv, config2, meta) {
      var parentSpel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var res;
      var op = spel.type.startsWith("op-") ? spel.type.slice("op-".length) : spel.type;
      var isUnary = (op == "minus" || op == "plus") && spel.children.length == 1;
      if (isUnary) {
        var negative = spel.negative;
        if (op == "minus") {
          negative = !negative;
        }
        spel.children[0].negative = negative;
        return convertToTree(spel.children[0], conv, config2, meta, parentSpel);
      }
      var isBetweenNormal = op == "and" && spel.children.length == 2 && spel.children[0].type == "op-ge" && spel.children[1].type == "op-le";
      var isBetweenRev = op == "or" && spel.children.length == 2 && spel.children[0].type == "op-lt" && spel.children[1].type == "op-gt";
      var isBetween2 = isBetweenNormal || isBetweenRev;
      if (isBetween2) {
        var _spel$children$0$chil = _slicedToArray(spel.children[0].children, 2), left = _spel$children$0$chil[0], from2 = _spel$children$0$chil[1];
        var _spel$children$1$chil = _slicedToArray(spel.children[1].children, 2), right = _spel$children$1$chil[0], to2 = _spel$children$1$chil[1];
        var isSameSource = compareArgs(left, right, spel, conv, config2, meta);
        if (isSameSource) {
          from2.val;
          to2.val;
          var oneSpel = {
            type: "op-between",
            children: [left, from2, to2],
            not: isBetweenRev
          };
          oneSpel._groupField = parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField;
          return convertOp2(oneSpel, conv, config2, meta, parentSpel);
        }
      }
      var opKeys = conv.operators[op];
      if (op == "eq" && spel.children[1].type == "null") {
        opKeys = ["is_null"];
      } else if (op == "ne" && spel.children[1].type == "null") {
        opKeys = ["is_not_null"];
      } else if (op == "le" && spel.children[1].type == "string" && spel.children[1].val == "") {
        opKeys = ["is_empty"];
      } else if (op == "gt" && spel.children[1].type == "string" && spel.children[1].val == "") {
        opKeys = ["is_not_empty"];
      } else if (op == "between") {
        opKeys = ["between"];
      }
      var convertChildren = function convertChildren2() {
        var _newChildren;
        var newChildren = spel.children.map(function(child) {
          return convertToTree(child, conv, config2, meta, spel);
        });
        if (newChildren.length >= 2 && ((_newChildren = newChildren) === null || _newChildren === void 0 || (_newChildren = _newChildren[0]) === null || _newChildren === void 0 ? void 0 : _newChildren.type) == "!compare") {
          newChildren = newChildren[0].children;
        }
        return newChildren;
      };
      if (op == "and" || op == "or") {
        var children1 = {};
        var vals = convertChildren();
        vals.forEach(function(v2) {
          if (v2) {
            var id2 = uuid$1();
            v2.id = id2;
            if (v2.type != void 0) {
              children1[id2] = v2;
            } else {
              meta.errors.push("Bad item in AND/OR: ".concat(JSON.stringify(v2)));
            }
          }
        });
        res = {
          type: "group",
          id: uuid$1(),
          children1,
          properties: {
            conjunction: conv.conjunctions[op],
            not: spel.not
          }
        };
      } else if (opKeys) {
        var _fieldObj$groupFieldV, _convertedArgs, _opConfig;
        var _vals = convertChildren();
        var fieldObj = _vals[0];
        var convertedArgs = _vals.slice(1);
        var groupField = fieldObj === null || fieldObj === void 0 || (_fieldObj$groupFieldV = fieldObj.groupFieldValue) === null || _fieldObj$groupFieldV === void 0 ? void 0 : _fieldObj$groupFieldV.value;
        var opArg = (_convertedArgs = convertedArgs) === null || _convertedArgs === void 0 ? void 0 : _convertedArgs[0];
        var opKey = opKeys[0];
        if (opKeys.length > 1) {
          var _vals$, _vals$2;
          var valueType = ((_vals$ = _vals[0]) === null || _vals$ === void 0 ? void 0 : _vals$.valueType) || ((_vals$2 = _vals[1]) === null || _vals$2 === void 0 ? void 0 : _vals$2.valueType);
          var field = fieldObj === null || fieldObj === void 0 ? void 0 : fieldObj.value;
          var widgets2 = opKeys.map(function(op2) {
            return {
              op: op2,
              widget: getWidgetForFieldOp$3(config2, field, op2)
            };
          });
          logger$1.warn("[spel] Spel operator ".concat(op, " can be mapped to ").concat(opKeys, "."), "widgets:", widgets2, "vals:", _vals, "valueType=", valueType);
          if (op == "eq" || op == "ne") {
            var ws = widgets2.find(function(_ref5) {
              _ref5.op;
              var widget = _ref5.widget;
              return widget && widget != "field";
            });
            if (ws) {
              opKey = ws.op;
            }
          }
        }
        if (fieldObj !== null && fieldObj !== void 0 && fieldObj.groupFieldValue) {
          if (opArg && opArg.groupFieldValue && opArg.groupFieldValue.valueSrc == "field" && opArg.groupFieldValue.value == groupField) {
            opKey = "all";
            convertedArgs = [];
          } else if (opKey == "equal" && opArg.valueSrc == "value" && opArg.valueType == "number" && opArg.value == 0) {
            opKey = "none";
            convertedArgs = [];
          } else if (opKey == "greater" && opArg.valueSrc == "value" && opArg.valueType == "number" && opArg.value == 0) {
            opKey = "some";
            convertedArgs = [];
          }
        }
        var opConfig = config2.operators[opKey];
        var reversedOpConfig = config2.operators[(_opConfig = opConfig) === null || _opConfig === void 0 ? void 0 : _opConfig.reversedOp];
        var opNeedsReverse = spel.not && ["between"].includes(opKey);
        var opCanReverse = !!reversedOpConfig;
        var canRev = opCanReverse && (!!config2.settings.reverseOperatorsForNot || opNeedsReverse);
        var needRev = spel.not && canRev || opNeedsReverse;
        if (needRev) {
          opKey = opConfig.reversedOp;
          opConfig = config2.operators[opKey];
          spel.not = !spel.not;
        }
        var needWrapWithNot = !!spel.not;
        spel.not = false;
        if (!fieldObj) ;
        else if (fieldObj.groupFieldValue) {
          if (fieldObj.groupFieldValue.valueSrc != "field") {
            meta.errors.push("Expected group field ".concat(JSON.stringify(fieldObj)));
          }
          res = buildRuleGroup(fieldObj, opKey, convertedArgs, config2, meta);
        } else {
          if (fieldObj.valueSrc != "field" && fieldObj.valueSrc != "func") {
            meta.errors.push("Expected field/func at LHS, but got ".concat(JSON.stringify(fieldObj)));
          }
          var _field = fieldObj.value;
          res = buildRule(config2, meta, _field, opKey, convertedArgs, spel);
        }
        if (needWrapWithNot) {
          if (res.type !== "group") {
            res = wrapInDefaultConj(res, config2, true);
          } else {
            res.properties.not = !res.properties.not;
          }
        }
      } else {
        if (!parentSpel) {
          res = buildSimpleSwitch(spel, conv, config2, meta);
        }
      }
      return res;
    };
    var convertPath = function convertPath2(parts) {
      var meta = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var expectingField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var isError = false;
      var res = parts.map(function(c2) {
        if (c2.type == "variable" || c2.type == "property" || c2.type == "indexer" && c2.itype == "string") {
          return c2.val;
        } else {
          var _meta$errors, _meta$errors$push;
          isError = true;
          expectingField && (meta === null || meta === void 0 || (_meta$errors = meta.errors) === null || _meta$errors === void 0 || (_meta$errors$push = _meta$errors.push) === null || _meta$errors$push === void 0 ? void 0 : _meta$errors$push.call(_meta$errors, "Unexpected item in field path compound: ".concat(JSON.stringify(c2))));
        }
      });
      return !isError ? res : void 0;
    };
    var convertArg = function convertArg2(spel, conv, config2, meta) {
      var _spel$_groupField2, _config$settings$case;
      var parentSpel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (spel == void 0) return void 0;
      var fieldSeparator = config2.settings.fieldSeparator;
      spel._groupField = (_spel$_groupField2 = spel._groupField) !== null && _spel$_groupField2 !== void 0 ? _spel$_groupField2 : parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField;
      if (spel.type == "variable" || spel.type == "property") {
        var field = normalizeField(config2, spel.val, spel._groupField);
        var fieldConfig = getFieldConfig$b(config2, field);
        var isVariable = spel.type == "variable";
        return {
          valueSrc: "field",
          valueType: fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type,
          isVariable,
          value: field
        };
      } else if (spel.type == "compound") {
        var parts = convertPath(spel.children, meta);
        if (parts) {
          var _spel$children;
          var _field2 = normalizeField(config2, parts.join(fieldSeparator), spel._groupField);
          var _fieldConfig = getFieldConfig$b(config2, _field2);
          var _isVariable = ((_spel$children = spel.children) === null || _spel$children === void 0 || (_spel$children = _spel$children[0]) === null || _spel$children === void 0 ? void 0 : _spel$children.type) == "variable";
          return {
            valueSrc: "field",
            valueType: _fieldConfig === null || _fieldConfig === void 0 ? void 0 : _fieldConfig.type,
            isVariable: _isVariable,
            value: _field2
          };
        }
      } else if (SpelPrimitiveTypes[spel.type]) {
        var value2 = spel.val;
        var valueType = SpelPrimitiveTypes[spel.type];
        if (spel.negative) {
          value2 = -value2;
        }
        return {
          valueSrc: "value",
          valueType,
          value: value2
        };
      } else if (spel.type == "!new" && SpelPrimitiveClasses[spel.cls.at(-1)]) {
        var args = spel.args.map(function(v2) {
          return convertArg2(v2, conv, config2, meta, spel);
        });
        var _value = args === null || args === void 0 ? void 0 : args[0];
        var _valueType = SpelPrimitiveClasses[spel.cls.at(-1)];
        return _objectSpread$v(_objectSpread$v({}, _value), {}, {
          valueType: _valueType
        });
      } else if (spel.type == "list") {
        var _values$;
        var values = spel.val.map(function(v2) {
          return convertArg2(v2, conv, config2, meta, spel);
        });
        values.length ? (_values$ = values[0]) === null || _values$ === void 0 ? void 0 : _values$.valueType : null;
        var _value2 = values.map(function(v2) {
          return v2 === null || v2 === void 0 ? void 0 : v2.value;
        });
        var _valueType2 = ListValueType;
        return {
          valueSrc: "value",
          valueType: _valueType2,
          value: _value2
        };
      } else if (spel.type === "op-plus" && (parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel.type) === "ternary" && ((_config$settings$case = config2.settings.caseValueField) === null || _config$settings$case === void 0 ? void 0 : _config$settings$case.type) === "case_value") {
        return buildCaseValueConcat(spel, conv, config2, meta);
      }
      var maybe = convertFunc(spel, conv, config2, meta, parentSpel);
      if (maybe !== void 0) {
        return maybe;
      }
      meta.errors.push("Can't convert arg of type ".concat(spel.type));
      return void 0;
    };
    var buildFuncSignatures = function buildFuncSignatures2(spel) {
      var brns = [{
        s: "",
        params: [],
        objs: []
      }];
      _buildFuncSignatures(spel, brns);
      return brns.map(function(_ref6) {
        var s = _ref6.s, params = _ref6.params;
        return {
          s,
          params
        };
      }).reverse().filter(function(_ref7) {
        var s = _ref7.s;
        return s !== "" && s !== "?";
      });
    };
    var _buildFuncSignatures = function _buildFuncSignatures2(spel, brns) {
      var params = [], s = "";
      var type = spel.type, methodName = spel.methodName;
      spel.val;
      var obj = spel.obj, args = spel.args, isVar = spel.isVar, cls = spel.cls, children = spel.children;
      var lastChild = children === null || children === void 0 ? void 0 : children[children.length - 1];
      var currBrn = brns[brns.length - 1];
      if (type === "!func") {
        var o = obj;
        while (o) {
          var _currBrn$params;
          var _buildFuncSignatures22 = _buildFuncSignatures2(_objectSpread$v(_objectSpread$v({}, o), {}, {
            obj: null
          }), [{}]), _buildFuncSignatures3 = _slicedToArray(_buildFuncSignatures22, 2), s1 = _buildFuncSignatures3[0], params1 = _buildFuncSignatures3[1];
          if (s1 !== "?") {
            var newBrn = {
              s: currBrn.s,
              params: _toConsumableArray(currBrn.params),
              objs: _toConsumableArray(currBrn.objs)
            };
            currBrn.objs.unshift("?");
            currBrn.params.unshift(o);
            brns.push(newBrn);
            currBrn = brns[brns.length - 1];
          }
          currBrn.objs.unshift(s1);
          (_currBrn$params = currBrn.params).unshift.apply(_currBrn$params, _toConsumableArray(params1));
          o = o.type === "!func" ? o.obj : null;
        }
        var _iterator4 = _createForOfIteratorHelper$b(brns), _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
            var _brn$objs;
            var brn = _step4.value;
            params = [].concat(_toConsumableArray((brn === null || brn === void 0 ? void 0 : brn.params) || []), _toConsumableArray(args || []));
            s = "";
            if (brn !== null && brn !== void 0 && (_brn$objs = brn.objs) !== null && _brn$objs !== void 0 && _brn$objs.length) s += brn.objs.join(".") + ".";
            s += (isVar ? "#" : "") + methodName;
            s += "(" + (args || []).map(function(_) {
              return "?";
            }).join(", ") + ")";
            brn.s = s;
            brn.params = params;
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } else if (type === "!new") {
        params = args || [];
        s = "new ".concat(cls.join("."), "(").concat(params.map(function(_) {
          return "?";
        }).join(", "), ")");
      } else if (type === "!type") {
        s = "T(".concat(cls.join("."), ")");
      } else if (type === "compound" && lastChild.type === "property" && isFuncableProperty(lastChild.val)) {
        s = children.map(function(c2) {
          var _params;
          if (c2 === lastChild) return c2.val;
          var _buildFuncSignatures4 = _buildFuncSignatures2(_objectSpread$v(_objectSpread$v({}, c2), {}, {
            obj: null
          }), [{}]), _buildFuncSignatures5 = _slicedToArray(_buildFuncSignatures4, 2), s12 = _buildFuncSignatures5[0], params12 = _buildFuncSignatures5[1];
          (_params = params).push.apply(_params, _toConsumableArray(params12));
          return s12;
        }).join(".");
      } else {
        params = [spel];
        s = "?";
      }
      if (currBrn) {
        currBrn.s = s;
        currBrn.params = params;
      }
      return [s, params];
    };
    var convertFunc = function convertFunc2(spel, conv, config2, meta) {
      var _fsigns$;
      var parentSpel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var convertFuncArg = function convertFuncArg2(v2) {
        return convertToTree(v2, conv, config2, meta, spel);
      };
      var fsigns = buildFuncSignatures(spel);
      var firstSign = fsigns === null || fsigns === void 0 || (_fsigns$ = fsigns[0]) === null || _fsigns$ === void 0 ? void 0 : _fsigns$.s;
      if (fsigns.length) logger$1.debug("Signatures for ", spel, ":", firstSign, fsigns);
      var maybeValue = convertFuncToValue(spel, conv, config2, meta, parentSpel, fsigns, convertFuncArg);
      if (maybeValue !== void 0) return maybeValue;
      var maybeOp = convertFuncToOp(spel, conv, config2, meta, parentSpel, fsigns, convertFuncArg);
      if (maybeOp !== void 0) return maybeOp;
      var funcKey, funcConfig, argsObj;
      var _iterator5 = _createForOfIteratorHelper$b(fsigns), _step5;
      try {
        var _loop3 = function _loop32() {
          var _step5$value = _step5.value, s = _step5$value.s, params = _step5$value.params;
          var funcKeys = conv.funcs[s];
          if (funcKeys) {
            funcKey = funcKeys[0];
            funcConfig = getFuncConfig$2(config2, funcKey);
            var _funcConfig = funcConfig, spelFunc = _funcConfig.spelFunc;
            var argsArr = params.map(convertFuncArg);
            var argsOrder = _toConsumableArray(spelFunc.matchAll(/\${(\w+)}/g)).map(function(_ref8) {
              var _ref9 = _slicedToArray(_ref8, 2), _ = _ref9[0], k2 = _ref9[1];
              return k2;
            });
            argsObj = Object.fromEntries(argsOrder.map(function(argKey2, i) {
              return [argKey2, argsArr[i]];
            }));
            return 1;
          }
        };
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
          if (_loop3()) break;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (!funcKey) {
        var _iterator6 = _createForOfIteratorHelper$b(iterateFuncs(config2)), _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
            var _step6$value = _slicedToArray(_step6.value, 2), f2 = _step6$value[0], fc2 = _step6$value[1];
            if (fc2.spelImport) {
              var parsed = void 0;
              try {
                parsed = fc2.spelImport(spel);
              } catch (_e) {
              }
              if (parsed) {
                funcKey = f2;
                funcConfig = getFuncConfig$2(config2, funcKey);
                argsObj = {};
                for (var argKey in parsed) {
                  argsObj[argKey] = convertFuncArg(parsed[argKey]);
                }
              }
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }
      if (funcKey) {
        var funcArgs = {};
        for (var _argKey in funcConfig.args) {
          var argConfig = funcConfig.args[_argKey];
          var argVal = argsObj[_argKey];
          if (argVal === void 0) {
            argVal = argConfig === null || argConfig === void 0 ? void 0 : argConfig.defaultValue;
            if (argVal === void 0) {
              if (argConfig !== null && argConfig !== void 0 && argConfig.isOptional) ;
              else {
                meta.errors.push("No value for arg ".concat(_argKey, " of func ").concat(funcKey));
                return void 0;
              }
            } else {
              var _argVal;
              argVal = {
                value: argVal,
                valueSrc: (_argVal = argVal) !== null && _argVal !== void 0 && _argVal.func ? "func" : "value",
                valueType: argConfig.type
              };
            }
          }
          if (argVal) funcArgs[_argKey] = argVal;
        }
        return {
          valueSrc: "func",
          value: {
            func: funcKey,
            args: funcArgs
          },
          valueType: funcConfig.returnType
        };
      }
      var methodName = spel.methodName;
      if (methodName) meta.errors.push("Signature ".concat(firstSign, " - failed to convert"));
      return void 0;
    };
    var convertFuncToValue = function convertFuncToValue2(spel, conv, config2, meta, parentSpel, fsigns, convertFuncArg) {
      var errs, foundSign, foundWidget;
      var candidates = [];
      for (var w2 in config2.widgets) {
        var widgetDef = config2.widgets[w2];
        var spelImportFuncs = widgetDef.spelImportFuncs;
        if (spelImportFuncs) {
          for (var i = 0; i < spelImportFuncs.length; i++) {
            var fj2 = spelImportFuncs[i];
            if (isObject$8(fj2)) {
              var bag = {};
              if (isJsonCompatible(fj2, spel, bag)) {
                for (var k2 in bag) {
                  bag[k2] = convertFuncArg(bag[k2]);
                }
                candidates.push({
                  s: "widgets.".concat(w2, ".spelImportFuncs[").concat(i, "]"),
                  w: w2,
                  argsObj: bag
                });
              }
            }
          }
        }
      }
      var _iterator7 = _createForOfIteratorHelper$b(fsigns), _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
          var _step7$value = _step7.value, _s = _step7$value.s, params = _step7$value.params;
          var found = conv.valueFuncs[_s] || [];
          var _iterator8 = _createForOfIteratorHelper$b(found), _step8;
          try {
            var _loop4 = function _loop42() {
              var _step8$value = _step8.value, w3 = _step8$value.w, argsOrder = _step8$value.argsOrder;
              var argsArr = params.map(convertFuncArg);
              var argsObj2 = Object.fromEntries(argsOrder.map(function(argKey, i2) {
                return [argKey, argsArr[i2]];
              }));
              candidates.push({
                s: _s,
                w: w3,
                argsObj: argsObj2
              });
            };
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
              _loop4();
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      for (var _i = 0, _candidates = candidates; _i < _candidates.length; _i++) {
        var _candidates$_i = _candidates[_i], s = _candidates$_i.s, _w = _candidates$_i.w, argsObj = _candidates$_i.argsObj;
        var _widgetDef = config2.widgets[_w];
        var spelImportValue = _widgetDef.spelImportValue, type = _widgetDef.type;
        foundWidget = _w;
        foundSign = s;
        errs = [];
        for (var _k2 in argsObj) {
          if (!["value"].includes(argsObj[_k2].valueSrc)) {
            errs.push("".concat(_k2, " has unsupported value src ").concat(argsObj[_k2].valueSrc));
          }
        }
        var value2 = argsObj.v.value;
        if (spelImportValue && !errs.length) {
          var _spelImportValue$call = spelImportValue.call(config2.ctx, argsObj.v, _widgetDef, argsObj);
          var _spelImportValue$call2 = _slicedToArray(_spelImportValue$call, 2);
          value2 = _spelImportValue$call2[0];
          errs = _spelImportValue$call2[1];
          if (errs && !Array.isArray(errs)) errs = [errs];
        }
        if (!errs.length) {
          return {
            valueSrc: "value",
            valueType: type,
            value: value2
          };
        }
      }
      if (foundWidget && errs.length) {
        meta.errors.push("Signature ".concat(foundSign, " - looks like convertable to ").concat(foundWidget, ", but: ").concat(errs.join("; ")));
      }
      return void 0;
    };
    var convertFuncToOp = function convertFuncToOp2(spel, conv, config2, meta, parentSpel, fsigns, convertFuncArg) {
      var errs, opKey, foundSign;
      var _iterator9 = _createForOfIteratorHelper$b(fsigns), _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
          var _step9$value = _step9.value, s = _step9$value.s, params = _step9$value.params;
          var found = conv.opFuncs[s] || [];
          var _iterator10 = _createForOfIteratorHelper$b(found), _step10;
          try {
            var _loop5 = function _loop52() {
              var _argsArr$filter$find;
              var _step10$value = _step10.value, op = _step10$value.op, argsOrder = _step10$value.argsOrder;
              var argsArr = params.map(convertFuncArg);
              opKey = op;
              if (op === "!compare") {
                if (parentSpel.type.startsWith("op-") && parentSpel.children.length == 2 && parentSpel.children[1].type == "number" && parentSpel.children[1].val === 0) {
                  return {
                    v: {
                      type: "!compare",
                      children: argsArr
                    }
                  };
                } else {
                  errs.push("Result of compareTo() should be compared to 0");
                }
              }
              foundSign = s;
              errs = [];
              var opDef = config2.operators[opKey];
              var spelOp = opDef.spelOp, valueTypes = opDef.valueTypes;
              var argsObj = Object.fromEntries(argsOrder.map(function(argKey, i) {
                return [argKey, argsArr[i]];
              }));
              var field = argsObj["0"];
              var convertedArgs = Object.keys(argsObj).filter(function(k2) {
                return parseInt(k2) > 0;
              }).map(function(k2) {
                return argsObj[k2];
              });
              var valueType = (_argsArr$filter$find = argsArr.filter(function(a) {
                return !!a;
              }).find(function(_ref10) {
                var valueSrc = _ref10.valueSrc;
                return valueSrc === "value";
              })) === null || _argsArr$filter$find === void 0 ? void 0 : _argsArr$filter$find.valueType;
              if (valueTypes && valueType && !valueTypes.includes(valueType)) {
                errs.push("Op supports types ".concat(valueTypes, ", but got ").concat(valueType));
              }
              if (!errs.length) {
                return {
                  v: buildRule(config2, meta, field, opKey, convertedArgs, spel)
                };
              }
            }, _ret;
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
              _ret = _loop5();
              if (_ret) return _ret.v;
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      if (opKey && errs.length) {
        meta.errors.push("Signature ".concat(foundSign, " - looks like convertable to ").concat(opKey, ", but: ").concat(errs.join("; ")));
      }
      return void 0;
    };
    var buildRule = function buildRule2(config2, meta, field, opKey, convertedArgs, spel) {
      var _field3, _opConfig2;
      if (convertedArgs.filter(function(v2) {
        return v2 === void 0;
      }).length) {
        return void 0;
      }
      var fieldSrc = (_field3 = field) !== null && _field3 !== void 0 && _field3.func ? "func" : "field";
      if (isObject$8(field) && field.valueSrc) {
        fieldSrc = field.valueSrc;
        field = field.value;
      }
      var fieldConfig = getFieldConfig$b(config2, field);
      if (!fieldConfig) {
        meta.errors.push("No config for field ".concat(field));
        return void 0;
      }
      var parentFieldConfig = getFieldConfig$b(config2, spel === null || spel === void 0 ? void 0 : spel._groupField);
      var isRuleGroup = fieldConfig.type == "!group";
      isRuleGroup && fieldConfig.mode == "array";
      var isInRuleGroup = (parentFieldConfig === null || parentFieldConfig === void 0 ? void 0 : parentFieldConfig.type) == "!group";
      var opConfig = config2.operators[opKey];
      var reversedOpConfig = config2.operators[(_opConfig2 = opConfig) === null || _opConfig2 === void 0 ? void 0 : _opConfig2.reversedOp];
      var opNeedsReverse = (spel === null || spel === void 0 ? void 0 : spel.not) && ["between"].includes(opKey);
      var opCanReverse = !!reversedOpConfig;
      var canRev = opCanReverse && (!!config2.settings.reverseOperatorsForNot || opNeedsReverse || !isRuleGroup && isInRuleGroup);
      var needRev = (spel === null || spel === void 0 ? void 0 : spel.not) && canRev || opNeedsReverse;
      if (needRev) {
        opKey = opConfig.reversedOp;
        opConfig = config2.operators[opKey];
        spel.not = !spel.not;
      }
      var needWrapWithNot = !!(spel !== null && spel !== void 0 && spel.not);
      var widget = getWidgetForFieldOp$3(config2, field, opKey);
      var widgetConfig = config2.widgets[widget || fieldConfig.mainWidget];
      var asyncListValuesArr = convertedArgs.map(function(v2) {
        return v2.asyncListValues;
      }).filter(function(v2) {
        return v2 != void 0;
      });
      var asyncListValues = asyncListValuesArr.length ? asyncListValuesArr[0] : void 0;
      var res = {
        type: "rule",
        id: uuid$1(),
        properties: _objectSpread$v({
          field,
          fieldSrc,
          operator: opKey,
          value: convertedArgs.map(function(v2) {
            return v2.value;
          }),
          valueSrc: convertedArgs.map(function(v2) {
            return v2.valueSrc;
          }),
          valueType: convertedArgs.map(function(v2) {
            if (v2.valueSrc == "value") {
              return (widgetConfig === null || widgetConfig === void 0 ? void 0 : widgetConfig.type) || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) || v2.valueType;
            }
            return v2.valueType;
          })
        }, asyncListValues ? {
          asyncListValues
        } : {})
      };
      if (needWrapWithNot) {
        res = wrapInDefaultConj(res, config2, spel.not);
      }
      return res;
    };
    var buildRuleGroup = function buildRuleGroup2(_ref11, opKey, convertedArgs, config2, meta) {
      var groupFilter = _ref11.groupFilter, groupFieldValue = _ref11.groupFieldValue;
      if (groupFieldValue.valueSrc != "field") throw "Bad groupFieldValue: ".concat(JSON.stringify(groupFieldValue));
      var groupField = groupFieldValue.value;
      var groupOpRule = buildRule(config2, meta, groupField, opKey, convertedArgs);
      if (!groupOpRule) return void 0;
      var fieldConfig = getFieldConfig$b(config2, groupField);
      var mode = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.mode;
      var res;
      if ((groupFilter === null || groupFilter === void 0 ? void 0 : groupFilter.type) === "group") {
        res = _objectSpread$v(_objectSpread$v({}, groupFilter || {}), {}, {
          type: "rule_group",
          properties: _objectSpread$v(_objectSpread$v(_objectSpread$v({}, groupOpRule.properties), (groupFilter === null || groupFilter === void 0 ? void 0 : groupFilter.properties) || {}), {}, {
            mode
          })
        });
      } else if (groupFilter) {
        res = _objectSpread$v(_objectSpread$v({}, groupOpRule || {}), {}, {
          type: "rule_group",
          children1: [groupFilter],
          properties: _objectSpread$v(_objectSpread$v({}, groupOpRule.properties), {}, {
            mode
          })
        });
      } else {
        res = _objectSpread$v(_objectSpread$v({}, groupOpRule || {}), {}, {
          type: "rule_group",
          properties: _objectSpread$v(_objectSpread$v({}, groupOpRule.properties), {}, {
            mode
          })
        });
      }
      if (!res.id) res.id = uuid$1();
      return res;
    };
    var compareArgs = function compareArgs2(left, right, spel, conv, config2, meta) {
      if (left.type == right.type) {
        if (left.type == "!aggr") {
          var _map = [left.source, right.source].map(function(v2) {
            return convertArg(v2, conv, config2, meta, spel);
          }), _map2 = _slicedToArray(_map, 2), leftSource = _map2[0], rightSource = _map2[1];
          return leftSource.value == rightSource.value;
        } else {
          var _map3 = [left, right].map(function(v2) {
            return convertArg(v2, conv, config2, meta, spel);
          }), _map4 = _slicedToArray(_map3, 2), leftVal = _map4[0], rightVal = _map4[1];
          return leftVal.value == rightVal.value;
        }
      }
      return false;
    };
    var buildSimpleSwitch = function buildSimpleSwitch2(val, conv, config2, meta) {
      var children1 = {};
      var cond = null;
      var caseI = buildCase(cond, val, conv, config2, meta);
      if (caseI) {
        children1[caseI.id] = caseI;
      }
      var res = {
        type: "switch_group",
        id: uuid$1(),
        children1,
        properties: {}
      };
      return res;
    };
    var buildCase = function buildCase2(cond, val, conv, config2, meta) {
      var spel = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var valProperties = buildCaseValProperties(config2, meta, conv, val, spel);
      var caseI;
      if (cond) {
        caseI = convertToTree(cond, conv, config2, meta, spel);
        if (caseI && caseI.type) {
          if (caseI.type != "group") {
            caseI = wrapInDefaultConj(caseI, config2);
          }
          caseI.type = "case_group";
        } else {
          meta.errors.push("Unexpected case: ".concat(JSON.stringify(caseI)));
          caseI = void 0;
        }
      } else {
        caseI = {
          id: uuid$1(),
          type: "case_group",
          properties: {}
        };
      }
      if (caseI) {
        caseI.properties = _objectSpread$v(_objectSpread$v({}, caseI.properties), valProperties);
      }
      return caseI;
    };
    var buildCaseValueConcat = function buildCaseValueConcat2(spel, conv, config2, meta) {
      var flat = [];
      function _processConcatChildren(children) {
        children.map(function(child) {
          if (child.type === "op-plus") {
            _processConcatChildren(child.children);
          } else {
            var convertedChild = convertArg(child, conv, config2, meta, spel);
            if (convertedChild) {
              flat.push(convertedChild);
            } else {
              meta.errors.push("Can't convert ".concat(child.type, " in concatenation"));
            }
          }
        });
      }
      _processConcatChildren(spel.children);
      return {
        valueSrc: "value",
        valueType: "case_value",
        value: flat
      };
    };
    var buildCaseValProperties = function buildCaseValProperties2(config2, meta, conv, val) {
      var _config$settings$case2, _convVal;
      var spel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var valProperties = {};
      var convVal;
      var widget;
      var widgetConfig;
      var caseValueFieldConfig = getFieldConfig$b(config2, "!case_value");
      if ((val === null || val === void 0 ? void 0 : val.type) === "op-plus" && ((_config$settings$case2 = config2.settings.caseValueField) === null || _config$settings$case2 === void 0 ? void 0 : _config$settings$case2.type) === "case_value") {
        widget = "case_value";
        convVal = buildCaseValueConcat(val, conv, config2, meta);
      } else {
        widget = caseValueFieldConfig === null || caseValueFieldConfig === void 0 ? void 0 : caseValueFieldConfig.mainWidget;
        widgetConfig = config2.widgets[widget];
        convVal = convertArg(val, conv, config2, meta, spel);
        if (convVal && convVal.valueSrc === "value") {
          var _widgetConfig;
          convVal.valueType = ((_widgetConfig = widgetConfig) === null || _widgetConfig === void 0 ? void 0 : _widgetConfig.type) || (caseValueFieldConfig === null || caseValueFieldConfig === void 0 ? void 0 : caseValueFieldConfig.type) || convVal.valueType;
        }
      }
      var widgetDef = config2.widgets[widget];
      if (widget === "case_value") {
        var importCaseValue = widgetDef === null || widgetDef === void 0 ? void 0 : widgetDef.spelImportValue;
        if (importCaseValue) {
          var _importCaseValue$call = importCaseValue.call(config2.ctx, convVal), _importCaseValue$call2 = _slicedToArray(_importCaseValue$call, 2), normVal = _importCaseValue$call2[0], normErrors = _importCaseValue$call2[1];
          normErrors.map(function(e2) {
            return meta.errors.push(e2);
          });
          if (normVal != void 0) {
            var _widgetDef$type;
            valProperties = {
              value: [normVal],
              valueSrc: ["value"],
              valueType: [(_widgetDef$type = widgetDef === null || widgetDef === void 0 ? void 0 : widgetDef.type) !== null && _widgetDef$type !== void 0 ? _widgetDef$type : "case_value"],
              field: "!case_value"
            };
          }
        }
      } else if (convVal != void 0 && ((_convVal = convVal) === null || _convVal === void 0 ? void 0 : _convVal.value) != void 0) {
        valProperties = {
          value: [convVal.value],
          valueSrc: [convVal.valueSrc],
          valueType: [convVal.valueType],
          field: "!case_value"
        };
      }
      return valProperties;
    };
    var wrapInDefaultConj = function wrapInDefaultConj2(rule2, config2) {
      var not2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      return {
        type: "group",
        id: uuid$1(),
        children1: _defineProperty$1({}, rule2.id, rule2),
        properties: {
          conjunction: defaultGroupConjunction$1(config2),
          not: not2 || false
        }
      };
    };
    const Import = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      _loadFromJsonLogic,
      _loadFromSpel,
      getTree: getTree$1,
      isImmutableTree,
      isJsonLogic,
      isTree,
      jsToImmutable,
      loadFromJsonLogic: loadFromJsonLogic$1,
      loadFromSpel,
      loadTree: loadTree$1
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$u(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$u(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$u(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$u(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var getDefaultField = function getDefaultField2(config2) {
      var canGetFirst = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var parentRuleGroupField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var defaultField = config2.settings.defaultField;
      var f2 = (!parentRuleGroupField ? defaultField : getDefaultSubField(config2, parentRuleGroupField)) || canGetFirst && getFirstField(config2, parentRuleGroupField) || null;
      if (f2 != null && typeof f2 !== "string" && !isImmutable$1(f2)) {
        f2 = jsToImmutable(f2);
      }
      return f2;
    };
    var getDefaultSubField = function getDefaultSubField2(config2) {
      var _config$settings;
      var parentRuleGroupField = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      if (!parentRuleGroupField) return null;
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings = config2.settings) === null || _config$settings === void 0 ? void 0 : _config$settings.fieldSeparator) || ".";
      var parentRuleGroupConfig = getFieldConfig$b(config2, parentRuleGroupField);
      var f2 = parentRuleGroupConfig === null || parentRuleGroupConfig === void 0 ? void 0 : parentRuleGroupConfig.defaultField;
      if (f2) {
        f2 = [].concat(_toConsumableArray(getFieldParts$3(parentRuleGroupField)), [f2]).join(fieldSeparator);
      }
      return f2;
    };
    var getDefaultFieldSrc = function getDefaultFieldSrc2(config2) {
      var _config$settings$fiel;
      var canGetFirst = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return canGetFirst && ((_config$settings$fiel = config2.settings.fieldSources) === null || _config$settings$fiel === void 0 ? void 0 : _config$settings$fiel[0]) || "field";
    };
    var getDefaultOperator = function getDefaultOperator2(config2, field) {
      var canGetFirst = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var fieldConfig = getFieldConfig$b(config2, field);
      var fieldOperators = (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.operators) || [];
      var globalDefaultOperator = config2.settings.defaultOperator;
      if (globalDefaultOperator && !fieldOperators.includes(globalDefaultOperator)) globalDefaultOperator = null;
      var fieldDefaultOperator = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.defaultOperator;
      var fieldOwnDefaultOperator = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.ownDefaultOperator;
      var firstOperator = canGetFirst ? getFirstOperator(config2, field) : null;
      var op = fieldOwnDefaultOperator || globalDefaultOperator || fieldDefaultOperator || firstOperator;
      return op;
    };
    var defaultOperatorOptions = function defaultOperatorOptions2(config2, operator, field) {
      var operatorConfig = operator ? getOperatorConfig$4(config2, operator, field) : null;
      if (!operatorConfig) return null;
      return operatorConfig.options ? new Immutable.Map(operatorConfig.options && operatorConfig.options.defaults || {}) : null;
    };
    var defaultRuleProperties = function defaultRuleProperties2(config2) {
      var parentRuleGroupField = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var item = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var canUseDefaultFieldAndOp = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var canGetFirst = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var field = null, operator = null, fieldSrc = null;
      var showErrorMessage = config2.settings.showErrorMessage;
      if (item) {
        var _item$properties, _item$properties2, _item$properties3;
        fieldSrc = item === null || item === void 0 || (_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.fieldSrc;
        field = item === null || item === void 0 || (_item$properties2 = item.properties) === null || _item$properties2 === void 0 ? void 0 : _item$properties2.field;
        operator = item === null || item === void 0 || (_item$properties3 = item.properties) === null || _item$properties3 === void 0 ? void 0 : _item$properties3.operator;
      } else if (canUseDefaultFieldAndOp) {
        field = getDefaultField(config2, canGetFirst, parentRuleGroupField);
        if (field) {
          fieldSrc = isImmutable$1(field) ? "func" : "field";
        } else {
          fieldSrc = getDefaultFieldSrc(config2);
        }
        operator = getDefaultOperator(config2, field, true);
      } else {
        fieldSrc = getDefaultFieldSrc(config2);
      }
      var current = new Immutable.Map({
        fieldSrc,
        field,
        operator,
        value: new Immutable.List(),
        valueSrc: new Immutable.List(),
        //used for complex operators like proximity
        operatorOptions: defaultOperatorOptions(config2, operator, field)
      });
      if (showErrorMessage) {
        current = current.set("valueError", new Immutable.List());
      }
      if (field && operator) {
        var canFix = false;
        var _getNewValueForFieldO = getNewValueForFieldOp(config2, config2, current, field, operator, "operator", canFix), newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueType = _getNewValueForFieldO.newValueType, newValueError = _getNewValueForFieldO.newValueError, newFieldError = _getNewValueForFieldO.newFieldError;
        current = current.set("value", newValue).set("valueSrc", newValueSrc).set("valueType", newValueType);
        if (showErrorMessage) {
          current = current.set("valueError", newValueError).set("fieldError", newFieldError);
        }
      }
      var fieldConfig = getFieldConfig$b(config2, field);
      if ((fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) === "!group") {
        var conjunction = defaultGroupConjunction$1(config2, fieldConfig);
        current = current.set("conjunction", conjunction);
      }
      return current;
    };
    var defaultGroupConjunction$1 = function defaultGroupConjunction2(config2) {
      var _groupFieldConfig, _groupFieldConfig2;
      var groupFieldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      groupFieldConfig = getFieldConfig$b(config2, groupFieldConfig);
      var conjs = ((_groupFieldConfig = groupFieldConfig) === null || _groupFieldConfig === void 0 ? void 0 : _groupFieldConfig.conjunctions) || Object.keys(config2.conjunctions);
      if (conjs.length == 1) return conjs[0];
      return ((_groupFieldConfig2 = groupFieldConfig) === null || _groupFieldConfig2 === void 0 ? void 0 : _groupFieldConfig2.defaultConjunction) || config2.settings.defaultConjunction || config2.settings.defaultGroupConjunction || conjs[0];
    };
    var defaultConjunction = function defaultConjunction2(config2) {
      return defaultGroupConjunction$1(config2);
    };
    var defaultGroupProperties = function defaultGroupProperties2(config2) {
      var groupFieldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return new Immutable.Map({
        conjunction: defaultGroupConjunction$1(config2, groupFieldConfig),
        not: false
      });
    };
    var defaultItemProperties = function defaultItemProperties2(config2, item) {
      return (item === null || item === void 0 ? void 0 : item.type) == "group" ? defaultGroupProperties(config2) : defaultRuleProperties(config2, null, item);
    };
    var defaultRule = function defaultRule2(id2, config2) {
      return _defineProperty$1({}, id2, new Immutable.Map({
        type: "rule",
        id: id2,
        properties: defaultRuleProperties(config2)
      }));
    };
    var defaultRoot$1 = function defaultRoot2(config2) {
      var canAddDefaultRule = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return new Immutable.Map({
        type: "group",
        id: uuid$1(),
        children1: new Immutable.OrderedMap(canAddDefaultRule ? _objectSpread$u({}, defaultRule(uuid$1(), config2)) : {}),
        properties: defaultGroupProperties(config2)
      });
    };
    var createListWithOneElement$2 = function createListWithOneElement2(el) {
      if (isImmutableList(el)) return el;
      return createListFromArray([el]);
    };
    var createListFromArray = function createListFromArray2(arr) {
      if (isImmutableList(arr)) return arr;
      return new Immutable.List(arr);
    };
    var emptyProperties$1 = function emptyProperties2() {
      return new Immutable.Map();
    };
    const defaultUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      createListFromArray,
      createListWithOneElement: createListWithOneElement$2,
      defaultConjunction,
      defaultGroupConjunction: defaultGroupConjunction$1,
      defaultGroupProperties,
      defaultItemProperties,
      defaultOperatorOptions,
      defaultRoot: defaultRoot$1,
      defaultRule,
      defaultRuleProperties,
      emptyProperties: emptyProperties$1,
      getDefaultField,
      getDefaultFieldSrc,
      getDefaultOperator,
      getDefaultSubField
    }, Symbol.toStringTag, { value: "Module" }));
    function _createForOfIteratorHelper$a(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$a(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$a(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$a(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$a(o, minLen);
    }
    function _arrayLikeToArray$a(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$t(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$t(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$t(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$t(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var queryString$1 = function queryString2(item, config2) {
      var isForDisplay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var isDebugMode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var meta = {
        errors: [],
        settings: {
          isForDisplay,
          isDebugMode
        }
      };
      var extendedConfig = extendConfig(config2, void 0, false);
      var res = formatItem$4(item, extendedConfig, meta, null);
      if (meta.errors.length) console.warn("Errors while exporting to string:", meta.errors);
      return res;
    };
    var formatItem$4 = function formatItem2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      if (!item) return void 0;
      var type = item.get("type");
      item.get("children1");
      if (type === "group" || type === "rule_group") {
        return formatGroup$4(item, config2, meta, parentField);
      } else if (type === "rule") {
        return formatRule$4(item, config2, meta, parentField);
      }
      return void 0;
    };
    var formatGroup$4 = function formatGroup2(item, config2, meta) {
      var _config$operators$gro, _config$operators$gro2;
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _meta$settings = meta.settings, isForDisplay = _meta$settings.isForDisplay, isDebugMode = _meta$settings.isDebugMode;
      var type = item.get("type");
      var properties = item.get("properties") || new Map$5();
      var mode = properties.get("mode");
      var children = item.get("children1") || new List();
      var isRuleGroup = type === "rule_group";
      var groupField = isRuleGroup && mode == "array" ? properties.get("field") : null;
      var groupOperator = type === "rule_group" ? properties.get("operator") : null;
      var groupOperatorCardinality = groupOperator ? (_config$operators$gro = (_config$operators$gro2 = config2.operators[groupOperator]) === null || _config$operators$gro2 === void 0 ? void 0 : _config$operators$gro2.cardinality) !== null && _config$operators$gro !== void 0 ? _config$operators$gro : 1 : void 0;
      var canHaveEmptyChildren = isRuleGroup && mode === "array" && groupOperatorCardinality >= 1;
      var not2 = properties.get("not");
      var list = children.map(function(currentChild) {
        return formatItem$4(currentChild, config2, meta, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!canHaveEmptyChildren && !list.size && !isDebugMode) {
        return void 0;
      }
      var conjunction = properties.get("conjunction");
      if (!conjunction) conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var conjStr = list.size ? conjunctionDefinition.formatConj.call(config2.ctx, list, conjunction, not2, isForDisplay) : null;
      var ret;
      if (groupField) {
        var aggrArgs = formatRule$4(item, config2, meta, parentField, true);
        if (aggrArgs) {
          var _config$settings$form;
          var isRev = aggrArgs.pop();
          var args = [conjStr].concat(_toConsumableArray(aggrArgs));
          ret = (_config$settings$form = config2.settings.formatAggr).call.apply(_config$settings$form, [config2.ctx].concat(_toConsumableArray(args)));
          if (isRev) {
            ret = config2.settings.formatReverse.call(config2.ctx, ret, null, null, null, null, isForDisplay);
          }
        }
      } else {
        ret = conjStr;
      }
      if (isDebugMode && ret == null) {
        ret = "?";
      }
      return ret;
    };
    var formatItemValue$1 = function formatItemValue2(config2, properties, meta, _operator, parentField) {
      var _meta$settings2 = meta.settings;
      _meta$settings2.isForDisplay;
      var isDebugMode = _meta$settings2.isDebugMode;
      var field = properties.get("field");
      var iValueSrc = properties.get("valueSrc");
      var iValueType = properties.get("valueType");
      var fieldDef = getFieldConfig$b(config2, field) || {};
      var operator = _operator || properties.get("operator");
      var operatorDef = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = getOpCardinality$1(operatorDef);
      var iValue = properties.get("value");
      var asyncListValues = properties.get("asyncListValues");
      var valueSrcs = [];
      var valueTypes = [];
      var formattedValue;
      var fvalue;
      if (iValue != void 0) {
        fvalue = iValue.map(function(currentValue, ind) {
          var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
          var valueType = iValueType ? iValueType.get(ind) : null;
          var cValue = !isDebugMode ? completeValue(currentValue, valueSrc, config2) : currentValue;
          var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var fieldWidgetDef = getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc, {
            forExport: true
          });
          var fv = formatValue$3(config2, meta, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef, parentField, asyncListValues);
          if (fv !== void 0) {
            valueSrcs.push(valueSrc);
            valueTypes.push(valueType);
          }
          return fv;
        });
        var hasUndefinedValues = fvalue.filter(function(v2) {
          return v2 === void 0;
        }).size > 0;
        var isOK = !hasUndefinedValues && fvalue.size === cardinality;
        if (isOK) {
          formattedValue = cardinality == 1 ? fvalue.first() : fvalue;
        }
      }
      if (isDebugMode && !formattedValue) {
        formattedValue = cardinality > 1 ? new List(Array.from({
          length: cardinality
        }).map(function(_, i) {
          var _fvalue$get, _fvalue;
          return (_fvalue$get = (_fvalue = fvalue) === null || _fvalue === void 0 ? void 0 : _fvalue.get(i)) !== null && _fvalue$get !== void 0 ? _fvalue$get : "?";
        })) : "?";
      }
      return [formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0]];
    };
    var buildFnToFormatOp$2 = function buildFnToFormatOp2(operator, operatorDefinition, meta) {
      var isDebugMode = meta.settings.isDebugMode;
      var fop = (operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.labelForFormat) || operator;
      var cardinality = getOpCardinality$1(operatorDefinition);
      var fn;
      if (cardinality == 0) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " ").concat(fop);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (isDebugMode && op === "?" && values === "?") {
            return field && field !== "?" ? "".concat(field, " ?") : "?";
          }
          return "".concat(field, " ").concat(fop, " ").concat(values);
        };
      } else if (cardinality == 2) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var _values$first, _values$get;
          var valFrom = values === null || values === void 0 || (_values$first = values.first) === null || _values$first === void 0 ? void 0 : _values$first.call(values);
          var valTo = values === null || values === void 0 || (_values$get = values.get) === null || _values$get === void 0 ? void 0 : _values$get.call(values, 1);
          return "".concat(field, " ").concat(fop, " ").concat(valFrom, " AND ").concat(valTo);
        };
      }
      return fn;
    };
    var formatRule$4 = function formatRule2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var returnArgs = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var _meta$settings3 = meta.settings, isForDisplay = _meta$settings3.isForDisplay, isDebugMode = _meta$settings3.isDebugMode;
      var properties = item.get("properties") || new Map$5();
      var field = properties.get("field");
      var fieldSrc = properties.get("fieldSrc");
      var operator = properties.get("operator");
      var operatorOptions = properties.get("operatorOptions");
      if ((field == null || operator == null) && !isDebugMode) return void 0;
      var fieldDef = getFieldConfig$b(config2, field) || {};
      var operatorDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = operatorDef.reversedOp;
      var revOperatorDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var isRev = false;
      var fn = operatorDef.formatOp;
      if (!fn && reversedOp) {
        fn = revOperatorDef.formatOp;
        if (fn) {
          isRev = true;
          var _ref = [reversedOp, operator];
          operator = _ref[0];
          reversedOp = _ref[1];
          var _ref2 = [revOperatorDef, operatorDef];
          operatorDef = _ref2[0];
          revOperatorDef = _ref2[1];
        }
      }
      if (isDebugMode && !operator) {
        operator = "?";
      }
      if (!fn) fn = buildFnToFormatOp$2(operator, operatorDef, meta);
      if (!fn) return void 0;
      var formattedField = fieldSrc === "func" ? formatFunc$3(config2, meta, field, parentField) : formatField$2(config2, meta, field, parentField);
      if (formattedField == void 0) return void 0;
      var _formatItemValue = formatItemValue$1(config2, properties, meta, operator, parentField), _formatItemValue2 = _slicedToArray(_formatItemValue, 3), formattedValue = _formatItemValue2[0], valueSrc = _formatItemValue2[1], valueType = _formatItemValue2[2];
      if (formattedValue === void 0) {
        return void 0;
      }
      var args = [formattedField, operator, formattedValue, valueSrc, valueType, omit$2(operatorDef, opDefKeysToOmit), operatorOptions, isForDisplay, fieldDef, isRev];
      if (returnArgs) {
        return args;
      } else {
        var _fn;
        var ret = (_fn = fn).call.apply(_fn, [config2.ctx].concat(args));
        if (isRev) {
          ret = config2.settings.formatReverse.call(config2.ctx, ret, operator, reversedOp, operatorDef, revOperatorDef, isForDisplay);
        }
        return ret;
      }
    };
    var formatValue$3 = function formatValue2(config2, meta, value2, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, opDef) {
      var parentField = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : null;
      var asyncListValues = arguments.length > 10 ? arguments[10] : void 0;
      var _meta$settings4 = meta.settings, isForDisplay = _meta$settings4.isForDisplay, isDebugMode = _meta$settings4.isDebugMode;
      if (value2 === void 0) {
        if (isDebugMode) {
          if ((fieldWidgetDef === null || fieldWidgetDef === void 0 ? void 0 : fieldWidgetDef.jsType) === "array") {
            return [];
          }
          return "?";
        } else {
          return void 0;
        }
      }
      var ret;
      if (valueSrc == "field") {
        ret = formatField$2(config2, meta, value2, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc$3(config2, meta, value2, parentField);
      } else {
        if (typeof (fieldWidgetDef === null || fieldWidgetDef === void 0 ? void 0 : fieldWidgetDef.formatValue) === "function") {
          var fn = fieldWidgetDef.formatValue;
          var args = [
            value2,
            _objectSpread$t(_objectSpread$t({}, pick$1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            //useful options: valueFormat for date/time
            omit$2(fieldWidgetDef, widgetDefKeysToOmit),
            isForDisplay
          ];
          if (operator) {
            args.push(operator);
            args.push(opDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$b(config2, value2) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          ret = value2;
        }
      }
      return ret;
    };
    var formatField$2 = function formatField2(config2, meta, field) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var cutParentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
      var _meta$settings5 = meta.settings, isForDisplay = _meta$settings5.isForDisplay, isDebugMode = _meta$settings5.isDebugMode;
      var _config$settings = config2.settings;
      _config$settings.fieldSeparator;
      var fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
      var ret = null;
      if (field) {
        var fieldDefinition = getFieldConfig$b(config2, field) || {};
        var fieldParts = getFieldParts$3(field, config2);
        var fieldPartsLabels = getFieldPathLabels$2(field, config2, cutParentField ? parentField : null);
        var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparatorDisplay) : null;
        var fieldLabel2 = fieldDefinition.label2 || fieldFullLabel;
        var formatFieldFn = config2.settings.formatField;
        var fieldName = formatFieldName(field, config2, meta, cutParentField ? parentField : null, {
          useTableName: true
        });
        ret = formatFieldFn(fieldName, fieldParts, fieldLabel2, fieldDefinition, config2, isForDisplay);
      } else if (isDebugMode) {
        ret = "?";
      }
      return ret;
    };
    var formatFunc$3 = function formatFunc2(config2, meta, funcValue) {
      var _funcValue$get, _funcValue$get2, _args$keySeq;
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _meta$settings6 = meta.settings, isForDisplay = _meta$settings6.isForDisplay, isDebugMode = _meta$settings6.isDebugMode;
      var funcKey = funcValue === null || funcValue === void 0 || (_funcValue$get = funcValue.get) === null || _funcValue$get === void 0 ? void 0 : _funcValue$get.call(funcValue, "func");
      if (!funcKey) {
        return isDebugMode ? "?()" : void 0;
      }
      var args = (_funcValue$get2 = funcValue.get) === null || _funcValue$get2 === void 0 ? void 0 : _funcValue$get2.call(funcValue, "args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) {
        if (!isDebugMode) {
          meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
          return void 0;
        }
      }
      var funcParts = getFieldParts$3(funcKey, config2);
      var funcLastKey = funcParts[funcParts.length - 1];
      var funcName = isForDisplay && (funcConfig === null || funcConfig === void 0 ? void 0 : funcConfig.label) || funcLastKey;
      var formattedArgs = {};
      var gaps = [];
      var missingArgKeys = [];
      var formattedArgsWithNames = {};
      var argsKeys = funcConfig ? Object.keys(funcConfig.args || {}) : (args === null || args === void 0 || (_args$keySeq = args.keySeq) === null || _args$keySeq === void 0 ? void 0 : _args$keySeq.call(args).toArray()) || [];
      var _iterator = _createForOfIteratorHelper$a(argsKeys), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _argValue;
          var argKey = _step.value;
          var argConfig = funcConfig === null || funcConfig === void 0 ? void 0 : funcConfig.args[argKey];
          var fieldDef = getFieldConfig$b(config2, argConfig);
          var _ref5 = argConfig || {}, defaultValue = _ref5.defaultValue, isOptional = _ref5.isOptional;
          var defaultValueSrc = defaultValue !== null && defaultValue !== void 0 && defaultValue.func ? "func" : "value";
          var argName = isForDisplay && (argConfig === null || argConfig === void 0 ? void 0 : argConfig.label) || argKey;
          var argVal = args ? args.get(argKey) : void 0;
          var argValue = argVal ? argVal.get("value") : void 0;
          var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
          if (argValueSrc !== "func" && (_argValue = argValue) !== null && _argValue !== void 0 && _argValue.toJS) {
            argValue = argValue.toJS();
          }
          var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
          var formattedArgVal = formatValue$3(config2, meta, argValue, argValueSrc, argConfig === null || argConfig === void 0 ? void 0 : argConfig.type, fieldDef, argConfig, null, null, parentField, argAsyncListValues);
          if (argValue != void 0 && formattedArgVal === void 0) {
            if (argValueSrc != "func")
              meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          }
          var formattedDefaultVal = void 0;
          if (formattedArgVal === void 0 && !isOptional && defaultValue != void 0) {
            formattedDefaultVal = formatValue$3(config2, meta, defaultValue, defaultValueSrc, argConfig === null || argConfig === void 0 ? void 0 : argConfig.type, fieldDef, argConfig, null, null, parentField, argAsyncListValues);
            if (formattedDefaultVal === void 0) {
              if (defaultValueSrc != "func")
                meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
              return void 0;
            }
          }
          var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
          if (finalFormattedVal !== void 0) {
            if (gaps.length) {
              var _iterator2 = _createForOfIteratorHelper$a(argKey), _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                  var _step2$value = _slicedToArray(_step2.value, 2), missedArgKey = _step2$value[0], missedArgName = _step2$value[1];
                  formattedArgs[missedArgKey] = void 0;
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
              gaps = [];
            }
            formattedArgs[argKey] = finalFormattedVal;
            formattedArgsWithNames[argName] = finalFormattedVal;
          } else {
            if (!isOptional) missingArgKeys.push(argKey);
            gaps.push([argKey, argName]);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (missingArgKeys.length) {
        if (!isDebugMode) {
          return void 0;
        }
      }
      var ret = null;
      if (typeof (funcConfig === null || funcConfig === void 0 ? void 0 : funcConfig.formatFunc) === "function") {
        var fn = funcConfig.formatFunc;
        var _args = [formattedArgs, isForDisplay];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var argsStr = Object.entries(isForDisplay ? formattedArgsWithNames : formattedArgs).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), k2 = _ref4[0], v2 = _ref4[1];
          return isForDisplay ? "".concat(k2, ": ").concat(v2) : "".concat(v2);
        }).join(", ");
        ret = "".concat(funcName, "(").concat(argsStr, ")");
      }
      return ret;
    };
    var EMPTY_GROUP = "EMPTY_GROUP";
    var EMPTY_RULE_GROUP = "EMPTY_RULE_GROUP";
    var EMPTY_QUERY = "EMPTY_QUERY";
    var EMPTY_CASE = "EMPTY_CASE";
    var NO_CONFIG_FOR_FIELD = "NO_CONFIG_FOR_FIELD";
    var NO_CONFIG_FOR_OPERATOR = "NO_CONFIG_FOR_OPERATOR";
    var FIXED_OPERATOR = "FIXED_OPERATOR";
    var NO_CONFIG_FOR_FUNCTION = "NO_CONFIG_FOR_FUNCTION";
    var INVALID_VALUE = "INVALID_VALUE";
    var INVALID_FUNC_ARG_VALUE = "INVALID_FUNC_ARG_VALUE";
    var UNSUPPORTED_FIELD_TYPE = "UNSUPPORTED_FIELD_TYPE";
    var UNSUPPORTED_OPERATOR_FOR_FIELD = "UNSUPPORTED_OPERATOR_FOR_FIELD";
    var INVALID_VALUE_SRC = "INVALID_VALUE_SRC";
    var INCOMPLETE_RULE = "INCOMPLETE_RULE";
    var INCOMPLETE_LHS = "INCOMPLETE_LHS";
    var INCOMPLETE_RHS = "INCOMPLETE_RHS";
    var BAD_MULTISELECT_VALUES = "BAD_MULTISELECT_VALUES";
    var BAD_SELECT_VALUE = "BAD_SELECT_VALUE";
    var INCORRECT_VALUE_TYPE = "INCORRECT_VALUE_TYPE";
    var INCORRECT_VALUE_JS_TYPE = "INCORRECT_VALUE_JS_TYPE";
    var VALUE_LENGTH_CONSTRAINT_FAIL = "VALUE_LENGTH_CONSTRAINT_FAIL";
    var VALUE_MIN_CONSTRAINT_FAIL = "VALUE_MIN_CONSTRAINT_FAIL";
    var VALUE_MAX_CONSTRAINT_FAIL = "VALUE_MAX_CONSTRAINT_FAIL";
    var NO_CONFIG_FOR_FIELD_VALUE = "NO_CONFIG_FOR_FIELD_VALUE";
    var CANT_COMPARE_FIELD_WITH_ITSELF = "CANT_COMPARE_FIELD_WITH_ITSELF";
    var CANT_COMPARE_FIELD_WITH_FIELD = "CANT_COMPARE_FIELD_WITH_FIELD";
    var INCORRECT_FIELD_TYPE = "INCORRECT_FIELD_TYPE";
    var UNSUPPORTED_FUNCTION_FOR_FIELD = "UNSUPPORTED_FUNCTION_FOR_FIELD";
    var REQUIRED_FUNCTION_ARG = "REQUIRED_FUNCTION_ARG";
    var INCORRECT_FUNCTION_RETURN_TYPE = "INCORRECT_FUNCTION_RETURN_TYPE";
    var INVALID_RANGE = "INVALID_RANGE";
    var ITEM_POSITION = "ITEM_POSITION";
    var ITEM_POSITION_ROOT = "ITEM_POSITION_ROOT";
    var ITEM_POSITION_WITH_INDEX_PATH = "ITEM_POSITION_WITH_INDEX_PATH";
    var ITEM_POSITION_IN_CASE = "ITEM_POSITION_IN_CASE";
    var _CONTEXT_MIN_MAX = "range";
    const consoleLogger = {
      type: "logger",
      log(args) {
        this.output("log", args);
      },
      warn(args) {
        this.output("warn", args);
      },
      error(args) {
        this.output("error", args);
      },
      output(type, args) {
        if (console && console[type]) console[type].apply(console, args);
      }
    };
    class Logger {
      constructor(concreteLogger) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.init(concreteLogger, options);
      }
      init(concreteLogger) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.prefix = options.prefix || "i18next:";
        this.logger = concreteLogger || consoleLogger;
        this.options = options;
        this.debug = options.debug;
      }
      log() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return this.forward(args, "log", "", true);
      }
      warn() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return this.forward(args, "warn", "", true);
      }
      error() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return this.forward(args, "error", "");
      }
      deprecate() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
      }
      forward(args, lvl, prefix, debugOnly) {
        if (debugOnly && !this.debug) return null;
        if (typeof args[0] === "string") args[0] = `${prefix}${this.prefix} ${args[0]}`;
        return this.logger[lvl](args);
      }
      create(moduleName) {
        return new Logger(this.logger, {
          ...{
            prefix: `${this.prefix}:${moduleName}:`
          },
          ...this.options
        });
      }
      clone(options) {
        options = options || this.options;
        options.prefix = options.prefix || this.prefix;
        return new Logger(this.logger, options);
      }
    }
    var baseLogger = new Logger();
    class EventEmitter {
      constructor() {
        this.observers = {};
      }
      on(events, listener) {
        events.split(" ").forEach((event) => {
          if (!this.observers[event]) this.observers[event] = /* @__PURE__ */ new Map();
          const numListeners = this.observers[event].get(listener) || 0;
          this.observers[event].set(listener, numListeners + 1);
        });
        return this;
      }
      off(event, listener) {
        if (!this.observers[event]) return;
        if (!listener) {
          delete this.observers[event];
          return;
        }
        this.observers[event].delete(listener);
      }
      emit(event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        if (this.observers[event]) {
          const cloned = Array.from(this.observers[event].entries());
          cloned.forEach((_ref) => {
            let [observer, numTimesAdded] = _ref;
            for (let i = 0; i < numTimesAdded; i++) {
              observer(...args);
            }
          });
        }
        if (this.observers["*"]) {
          const cloned = Array.from(this.observers["*"].entries());
          cloned.forEach((_ref2) => {
            let [observer, numTimesAdded] = _ref2;
            for (let i = 0; i < numTimesAdded; i++) {
              observer.apply(observer, [event, ...args]);
            }
          });
        }
      }
    }
    function defer() {
      let res;
      let rej;
      const promise = new Promise((resolve, reject) => {
        res = resolve;
        rej = reject;
      });
      promise.resolve = res;
      promise.reject = rej;
      return promise;
    }
    function makeString(object) {
      if (object == null) return "";
      return "" + object;
    }
    function copy(a, s, t2) {
      a.forEach((m2) => {
        if (s[m2]) t2[m2] = s[m2];
      });
    }
    const lastOfPathSeparatorRegExp = /###/g;
    function getLastOfPath(object, path, Empty) {
      function cleanKey(key) {
        return key && key.indexOf("###") > -1 ? key.replace(lastOfPathSeparatorRegExp, ".") : key;
      }
      function canNotTraverseDeeper() {
        return !object || typeof object === "string";
      }
      const stack = typeof path !== "string" ? path : path.split(".");
      let stackIndex = 0;
      while (stackIndex < stack.length - 1) {
        if (canNotTraverseDeeper()) return {};
        const key = cleanKey(stack[stackIndex]);
        if (!object[key] && Empty) object[key] = new Empty();
        if (Object.prototype.hasOwnProperty.call(object, key)) {
          object = object[key];
        } else {
          object = {};
        }
        ++stackIndex;
      }
      if (canNotTraverseDeeper()) return {};
      return {
        obj: object,
        k: cleanKey(stack[stackIndex])
      };
    }
    function setPath(object, path, newValue) {
      const {
        obj,
        k: k2
      } = getLastOfPath(object, path, Object);
      if (obj !== void 0 || path.length === 1) {
        obj[k2] = newValue;
        return;
      }
      let e2 = path[path.length - 1];
      let p2 = path.slice(0, path.length - 1);
      let last2 = getLastOfPath(object, p2, Object);
      while (last2.obj === void 0 && p2.length) {
        e2 = `${p2[p2.length - 1]}.${e2}`;
        p2 = p2.slice(0, p2.length - 1);
        last2 = getLastOfPath(object, p2, Object);
        if (last2 && last2.obj && typeof last2.obj[`${last2.k}.${e2}`] !== "undefined") {
          last2.obj = void 0;
        }
      }
      last2.obj[`${last2.k}.${e2}`] = newValue;
    }
    function pushPath(object, path, newValue, concat) {
      const {
        obj,
        k: k2
      } = getLastOfPath(object, path, Object);
      obj[k2] = obj[k2] || [];
      obj[k2].push(newValue);
    }
    function getPath(object, path) {
      const {
        obj,
        k: k2
      } = getLastOfPath(object, path);
      if (!obj) return void 0;
      return obj[k2];
    }
    function getPathWithDefaults(data, defaultData, key) {
      const value2 = getPath(data, key);
      if (value2 !== void 0) {
        return value2;
      }
      return getPath(defaultData, key);
    }
    function deepExtend(target, source, overwrite) {
      for (const prop in source) {
        if (prop !== "__proto__" && prop !== "constructor") {
          if (prop in target) {
            if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
              if (overwrite) target[prop] = source[prop];
            } else {
              deepExtend(target[prop], source[prop], overwrite);
            }
          } else {
            target[prop] = source[prop];
          }
        }
      }
      return target;
    }
    function regexEscape(str) {
      return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    }
    var _entityMap = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;",
      "/": "&#x2F;"
    };
    function escape(data) {
      if (typeof data === "string") {
        return data.replace(/[&<>"'\/]/g, (s) => _entityMap[s]);
      }
      return data;
    }
    class RegExpCache {
      constructor(capacity) {
        this.capacity = capacity;
        this.regExpMap = /* @__PURE__ */ new Map();
        this.regExpQueue = [];
      }
      getRegExp(pattern) {
        const regExpFromCache = this.regExpMap.get(pattern);
        if (regExpFromCache !== void 0) {
          return regExpFromCache;
        }
        const regExpNew = new RegExp(pattern);
        if (this.regExpQueue.length === this.capacity) {
          this.regExpMap.delete(this.regExpQueue.shift());
        }
        this.regExpMap.set(pattern, regExpNew);
        this.regExpQueue.push(pattern);
        return regExpNew;
      }
    }
    const chars = [" ", ",", "?", "!", ";"];
    const looksLikeObjectPathRegExpCache = new RegExpCache(20);
    function looksLikeObjectPath(key, nsSeparator, keySeparator) {
      nsSeparator = nsSeparator || "";
      keySeparator = keySeparator || "";
      const possibleChars = chars.filter((c2) => nsSeparator.indexOf(c2) < 0 && keySeparator.indexOf(c2) < 0);
      if (possibleChars.length === 0) return true;
      const r2 = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map((c2) => c2 === "?" ? "\\?" : c2).join("|")})`);
      let matched = !r2.test(key);
      if (!matched) {
        const ki2 = key.indexOf(keySeparator);
        if (ki2 > 0 && !r2.test(key.substring(0, ki2))) {
          matched = true;
        }
      }
      return matched;
    }
    function deepFind(obj, path) {
      let keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
      if (!obj) return void 0;
      if (obj[path]) return obj[path];
      const tokens2 = path.split(keySeparator);
      let current = obj;
      for (let i = 0; i < tokens2.length; ) {
        if (!current || typeof current !== "object") {
          return void 0;
        }
        let next;
        let nextPath = "";
        for (let j = i; j < tokens2.length; ++j) {
          if (j !== i) {
            nextPath += keySeparator;
          }
          nextPath += tokens2[j];
          next = current[nextPath];
          if (next !== void 0) {
            if (["string", "number", "boolean"].indexOf(typeof next) > -1 && j < tokens2.length - 1) {
              continue;
            }
            i += j - i + 1;
            break;
          }
        }
        current = next;
      }
      return current;
    }
    function getCleanedCode(code) {
      if (code && code.indexOf("_") > 0) return code.replace("_", "-");
      return code;
    }
    class ResourceStore extends EventEmitter {
      constructor(data) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
          ns: ["translation"],
          defaultNS: "translation"
        };
        super();
        this.data = data || {};
        this.options = options;
        if (this.options.keySeparator === void 0) {
          this.options.keySeparator = ".";
        }
        if (this.options.ignoreJSONStructure === void 0) {
          this.options.ignoreJSONStructure = true;
        }
      }
      addNamespaces(ns) {
        if (this.options.ns.indexOf(ns) < 0) {
          this.options.ns.push(ns);
        }
      }
      removeNamespaces(ns) {
        const index = this.options.ns.indexOf(ns);
        if (index > -1) {
          this.options.ns.splice(index, 1);
        }
      }
      getResource(lng, ns, key) {
        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        const ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
        let path;
        if (lng.indexOf(".") > -1) {
          path = lng.split(".");
        } else {
          path = [lng, ns];
          if (key) {
            if (Array.isArray(key)) {
              path.push(...key);
            } else if (typeof key === "string" && keySeparator) {
              path.push(...key.split(keySeparator));
            } else {
              path.push(key);
            }
          }
        }
        const result = getPath(this.data, path);
        if (!result && !ns && !key && lng.indexOf(".") > -1) {
          lng = path[0];
          ns = path[1];
          key = path.slice(2).join(".");
        }
        if (result || !ignoreJSONStructure || typeof key !== "string") return result;
        return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
      }
      addResource(lng, ns, key, value2) {
        let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
          silent: false
        };
        const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        let path = [lng, ns];
        if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
        if (lng.indexOf(".") > -1) {
          path = lng.split(".");
          value2 = ns;
          ns = path[1];
        }
        this.addNamespaces(ns);
        setPath(this.data, path, value2);
        if (!options.silent) this.emit("added", lng, ns, key, value2);
      }
      addResources(lng, ns, resources) {
        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
          silent: false
        };
        for (const m2 in resources) {
          if (typeof resources[m2] === "string" || Array.isArray(resources[m2])) this.addResource(lng, ns, m2, resources[m2], {
            silent: true
          });
        }
        if (!options.silent) this.emit("added", lng, ns, resources);
      }
      addResourceBundle(lng, ns, resources, deep, overwrite) {
        let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
          silent: false,
          skipCopy: false
        };
        let path = [lng, ns];
        if (lng.indexOf(".") > -1) {
          path = lng.split(".");
          deep = resources;
          resources = ns;
          ns = path[1];
        }
        this.addNamespaces(ns);
        let pack = getPath(this.data, path) || {};
        if (!options.skipCopy) resources = JSON.parse(JSON.stringify(resources));
        if (deep) {
          deepExtend(pack, resources, overwrite);
        } else {
          pack = {
            ...pack,
            ...resources
          };
        }
        setPath(this.data, path, pack);
        if (!options.silent) this.emit("added", lng, ns, resources);
      }
      removeResourceBundle(lng, ns) {
        if (this.hasResourceBundle(lng, ns)) {
          delete this.data[lng][ns];
        }
        this.removeNamespaces(ns);
        this.emit("removed", lng, ns);
      }
      hasResourceBundle(lng, ns) {
        return this.getResource(lng, ns) !== void 0;
      }
      getResourceBundle(lng, ns) {
        if (!ns) ns = this.options.defaultNS;
        if (this.options.compatibilityAPI === "v1") return {
          ...{},
          ...this.getResource(lng, ns)
        };
        return this.getResource(lng, ns);
      }
      getDataByLanguage(lng) {
        return this.data[lng];
      }
      hasLanguageSomeTranslations(lng) {
        const data = this.getDataByLanguage(lng);
        const n2 = data && Object.keys(data) || [];
        return !!n2.find((v2) => data[v2] && Object.keys(data[v2]).length > 0);
      }
      toJSON() {
        return this.data;
      }
    }
    var postProcessor = {
      processors: {},
      addPostProcessor(module2) {
        this.processors[module2.name] = module2;
      },
      handle(processors, value2, key, options, translator) {
        processors.forEach((processor) => {
          if (this.processors[processor]) value2 = this.processors[processor].process(value2, key, options, translator);
        });
        return value2;
      }
    };
    const checkedLoadedFor = {};
    class Translator extends EventEmitter {
      constructor(services) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        super();
        copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, this);
        this.options = options;
        if (this.options.keySeparator === void 0) {
          this.options.keySeparator = ".";
        }
        this.logger = baseLogger.create("translator");
      }
      changeLanguage(lng) {
        if (lng) this.language = lng;
      }
      exists(key) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
          interpolation: {}
        };
        if (key === void 0 || key === null) {
          return false;
        }
        const resolved = this.resolve(key, options);
        return resolved && resolved.res !== void 0;
      }
      extractFromKey(key, options) {
        let nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;
        if (nsSeparator === void 0) nsSeparator = ":";
        const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        let namespaces = options.ns || this.options.defaultNS || [];
        const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
        const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
        if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
          const m2 = key.match(this.interpolator.nestingRegexp);
          if (m2 && m2.length > 0) {
            return {
              key,
              namespaces
            };
          }
          const parts = key.split(nsSeparator);
          if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
          key = parts.join(keySeparator);
        }
        if (typeof namespaces === "string") namespaces = [namespaces];
        return {
          key,
          namespaces
        };
      }
      translate(keys2, options, lastKey) {
        if (typeof options !== "object" && this.options.overloadTranslationOptionHandler) {
          options = this.options.overloadTranslationOptionHandler(arguments);
        }
        if (typeof options === "object") options = {
          ...options
        };
        if (!options) options = {};
        if (keys2 === void 0 || keys2 === null) return "";
        if (!Array.isArray(keys2)) keys2 = [String(keys2)];
        const returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;
        const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        const {
          key,
          namespaces
        } = this.extractFromKey(keys2[keys2.length - 1], options);
        const namespace = namespaces[namespaces.length - 1];
        const lng = options.lng || this.language;
        const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
        if (lng && lng.toLowerCase() === "cimode") {
          if (appendNamespaceToCIMode) {
            const nsSeparator = options.nsSeparator || this.options.nsSeparator;
            if (returnDetails) {
              return {
                res: `${namespace}${nsSeparator}${key}`,
                usedKey: key,
                exactUsedKey: key,
                usedLng: lng,
                usedNS: namespace,
                usedParams: this.getUsedParamsDetails(options)
              };
            }
            return `${namespace}${nsSeparator}${key}`;
          }
          if (returnDetails) {
            return {
              res: key,
              usedKey: key,
              exactUsedKey: key,
              usedLng: lng,
              usedNS: namespace,
              usedParams: this.getUsedParamsDetails(options)
            };
          }
          return key;
        }
        const resolved = this.resolve(keys2, options);
        let res = resolved && resolved.res;
        const resUsedKey = resolved && resolved.usedKey || key;
        const resExactUsedKey = resolved && resolved.exactUsedKey || key;
        const resType = Object.prototype.toString.apply(res);
        const noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
        const joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
        const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
        const handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
        if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && Array.isArray(res))) {
          if (!options.returnObjects && !this.options.returnObjects) {
            if (!this.options.returnedObjectHandler) {
              this.logger.warn("accessing an object - but returnObjects options is not enabled!");
            }
            const r2 = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {
              ...options,
              ns: namespaces
            }) : `key '${key} (${this.language})' returned an object instead of string.`;
            if (returnDetails) {
              resolved.res = r2;
              resolved.usedParams = this.getUsedParamsDetails(options);
              return resolved;
            }
            return r2;
          }
          if (keySeparator) {
            const resTypeIsArray = Array.isArray(res);
            const copy2 = resTypeIsArray ? [] : {};
            const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
            for (const m2 in res) {
              if (Object.prototype.hasOwnProperty.call(res, m2)) {
                const deepKey = `${newKeyToUse}${keySeparator}${m2}`;
                copy2[m2] = this.translate(deepKey, {
                  ...options,
                  ...{
                    joinArrays: false,
                    ns: namespaces
                  }
                });
                if (copy2[m2] === deepKey) copy2[m2] = res[m2];
              }
            }
            res = copy2;
          }
        } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && Array.isArray(res)) {
          res = res.join(joinArrays);
          if (res) res = this.extendTranslation(res, keys2, options, lastKey);
        } else {
          let usedDefault = false;
          let usedKey = false;
          const needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
          const hasDefaultValue = Translator.hasDefaultValue(options);
          const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : "";
          const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {
            ordinal: false
          }) : "";
          const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
          const defaultValue = needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] || options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;
          if (!this.isValidLookup(res) && hasDefaultValue) {
            usedDefault = true;
            res = defaultValue;
          }
          if (!this.isValidLookup(res)) {
            usedKey = true;
            res = key;
          }
          const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
          const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
          const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
          if (usedKey || usedDefault || updateMissing) {
            this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
            if (keySeparator) {
              const fk2 = this.resolve(key, {
                ...options,
                keySeparator: false
              });
              if (fk2 && fk2.res) this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
            }
            let lngs = [];
            const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
            if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
              for (let i = 0; i < fallbackLngs.length; i++) {
                lngs.push(fallbackLngs[i]);
              }
            } else if (this.options.saveMissingTo === "all") {
              lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
            } else {
              lngs.push(options.lng || this.language);
            }
            const send = (l2, k2, specificDefaultValue) => {
              const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
              if (this.options.missingKeyHandler) {
                this.options.missingKeyHandler(l2, namespace, k2, defaultForMissing, updateMissing, options);
              } else if (this.backendConnector && this.backendConnector.saveMissing) {
                this.backendConnector.saveMissing(l2, namespace, k2, defaultForMissing, updateMissing, options);
              }
              this.emit("missingKey", l2, namespace, k2, res);
            };
            if (this.options.saveMissing) {
              if (this.options.saveMissingPlurals && needsPluralHandling) {
                lngs.forEach((language) => {
                  const suffixes = this.pluralResolver.getSuffixes(language, options);
                  if (needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                    suffixes.push(`${this.options.pluralSeparator}zero`);
                  }
                  suffixes.forEach((suffix) => {
                    send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);
                  });
                });
              } else {
                send(lngs, key, defaultValue);
              }
            }
          }
          res = this.extendTranslation(res, keys2, options, resolved, lastKey);
          if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = `${namespace}:${key}`;
          if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
            if (this.options.compatibilityAPI !== "v1") {
              res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : void 0);
            } else {
              res = this.options.parseMissingKeyHandler(res);
            }
          }
        }
        if (returnDetails) {
          resolved.res = res;
          resolved.usedParams = this.getUsedParamsDetails(options);
          return resolved;
        }
        return res;
      }
      extendTranslation(res, key, options, resolved, lastKey) {
        var _this = this;
        if (this.i18nFormat && this.i18nFormat.parse) {
          res = this.i18nFormat.parse(res, {
            ...this.options.interpolation.defaultVariables,
            ...options
          }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
            resolved
          });
        } else if (!options.skipInterpolation) {
          if (options.interpolation) this.interpolator.init({
            ...options,
            ...{
              interpolation: {
                ...this.options.interpolation,
                ...options.interpolation
              }
            }
          });
          const skipOnVariables = typeof res === "string" && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
          let nestBef;
          if (skipOnVariables) {
            const nb2 = res.match(this.interpolator.nestingRegexp);
            nestBef = nb2 && nb2.length;
          }
          let data = options.replace && typeof options.replace !== "string" ? options.replace : options;
          if (this.options.interpolation.defaultVariables) data = {
            ...this.options.interpolation.defaultVariables,
            ...data
          };
          res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
          if (skipOnVariables) {
            const na2 = res.match(this.interpolator.nestingRegexp);
            const nestAft = na2 && na2.length;
            if (nestBef < nestAft) options.nest = false;
          }
          if (!options.lng && this.options.compatibilityAPI !== "v1" && resolved && resolved.res) options.lng = resolved.usedLng;
          if (options.nest !== false) res = this.interpolator.nest(res, function() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            if (lastKey && lastKey[0] === args[0] && !options.context) {
              _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
              return null;
            }
            return _this.translate(...args, key);
          }, options);
          if (options.interpolation) this.interpolator.reset();
        }
        const postProcess = options.postProcess || this.options.postProcess;
        const postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
        if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
          res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
            i18nResolved: {
              ...resolved,
              usedParams: this.getUsedParamsDetails(options)
            },
            ...options
          } : options, this);
        }
        return res;
      }
      resolve(keys2) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let found;
        let usedKey;
        let exactUsedKey;
        let usedLng;
        let usedNS;
        if (typeof keys2 === "string") keys2 = [keys2];
        keys2.forEach((k2) => {
          if (this.isValidLookup(found)) return;
          const extracted = this.extractFromKey(k2, options);
          const key = extracted.key;
          usedKey = key;
          let namespaces = extracted.namespaces;
          if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
          const needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
          const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
          const needsContextHandling = options.context !== void 0 && (typeof options.context === "string" || typeof options.context === "number") && options.context !== "";
          const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);
          namespaces.forEach((ns) => {
            if (this.isValidLookup(found)) return;
            usedNS = ns;
            if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {
              checkedLoadedFor[`${codes[0]}-${ns}`] = true;
              this.logger.warn(`key "${usedKey}" for languages "${codes.join(", ")}" won't get resolved as namespace "${usedNS}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
            }
            codes.forEach((code) => {
              if (this.isValidLookup(found)) return;
              usedLng = code;
              const finalKeys = [key];
              if (this.i18nFormat && this.i18nFormat.addLookupKeys) {
                this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
              } else {
                let pluralSuffix;
                if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);
                const zeroSuffix = `${this.options.pluralSeparator}zero`;
                const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
                if (needsPluralHandling) {
                  finalKeys.push(key + pluralSuffix);
                  if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                    finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                  }
                  if (needsZeroSuffixLookup) {
                    finalKeys.push(key + zeroSuffix);
                  }
                }
                if (needsContextHandling) {
                  const contextKey = `${key}${this.options.contextSeparator}${options.context}`;
                  finalKeys.push(contextKey);
                  if (needsPluralHandling) {
                    finalKeys.push(contextKey + pluralSuffix);
                    if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                      finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                    }
                    if (needsZeroSuffixLookup) {
                      finalKeys.push(contextKey + zeroSuffix);
                    }
                  }
                }
              }
              let possibleKey;
              while (possibleKey = finalKeys.pop()) {
                if (!this.isValidLookup(found)) {
                  exactUsedKey = possibleKey;
                  found = this.getResource(code, ns, possibleKey, options);
                }
              }
            });
          });
        });
        return {
          res: found,
          usedKey,
          exactUsedKey,
          usedLng,
          usedNS
        };
      }
      isValidLookup(res) {
        return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
      }
      getResource(code, ns, key) {
        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
        return this.resourceStore.getResource(code, ns, key, options);
      }
      getUsedParamsDetails() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        const optionsKeys = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"];
        const useOptionsReplaceForData = options.replace && typeof options.replace !== "string";
        let data = useOptionsReplaceForData ? options.replace : options;
        if (useOptionsReplaceForData && typeof options.count !== "undefined") {
          data.count = options.count;
        }
        if (this.options.interpolation.defaultVariables) {
          data = {
            ...this.options.interpolation.defaultVariables,
            ...data
          };
        }
        if (!useOptionsReplaceForData) {
          data = {
            ...data
          };
          for (const key of optionsKeys) {
            delete data[key];
          }
        }
        return data;
      }
      static hasDefaultValue(options) {
        const prefix = "defaultValue";
        for (const option in options) {
          if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && void 0 !== options[option]) {
            return true;
          }
        }
        return false;
      }
    }
    function capitalize(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    class LanguageUtil {
      constructor(options) {
        this.options = options;
        this.supportedLngs = this.options.supportedLngs || false;
        this.logger = baseLogger.create("languageUtils");
      }
      getScriptPartFromCode(code) {
        code = getCleanedCode(code);
        if (!code || code.indexOf("-") < 0) return null;
        const p2 = code.split("-");
        if (p2.length === 2) return null;
        p2.pop();
        if (p2[p2.length - 1].toLowerCase() === "x") return null;
        return this.formatLanguageCode(p2.join("-"));
      }
      getLanguagePartFromCode(code) {
        code = getCleanedCode(code);
        if (!code || code.indexOf("-") < 0) return code;
        const p2 = code.split("-");
        return this.formatLanguageCode(p2[0]);
      }
      formatLanguageCode(code) {
        if (typeof code === "string" && code.indexOf("-") > -1) {
          const specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
          let p2 = code.split("-");
          if (this.options.lowerCaseLng) {
            p2 = p2.map((part) => part.toLowerCase());
          } else if (p2.length === 2) {
            p2[0] = p2[0].toLowerCase();
            p2[1] = p2[1].toUpperCase();
            if (specialCases.indexOf(p2[1].toLowerCase()) > -1) p2[1] = capitalize(p2[1].toLowerCase());
          } else if (p2.length === 3) {
            p2[0] = p2[0].toLowerCase();
            if (p2[1].length === 2) p2[1] = p2[1].toUpperCase();
            if (p2[0] !== "sgn" && p2[2].length === 2) p2[2] = p2[2].toUpperCase();
            if (specialCases.indexOf(p2[1].toLowerCase()) > -1) p2[1] = capitalize(p2[1].toLowerCase());
            if (specialCases.indexOf(p2[2].toLowerCase()) > -1) p2[2] = capitalize(p2[2].toLowerCase());
          }
          return p2.join("-");
        }
        return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
      }
      isSupportedCode(code) {
        if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
          code = this.getLanguagePartFromCode(code);
        }
        return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
      }
      getBestMatchFromCodes(codes) {
        if (!codes) return null;
        let found;
        codes.forEach((code) => {
          if (found) return;
          const cleanedLng = this.formatLanguageCode(code);
          if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
        });
        if (!found && this.options.supportedLngs) {
          codes.forEach((code) => {
            if (found) return;
            const lngOnly = this.getLanguagePartFromCode(code);
            if (this.isSupportedCode(lngOnly)) return found = lngOnly;
            found = this.options.supportedLngs.find((supportedLng) => {
              if (supportedLng === lngOnly) return supportedLng;
              if (supportedLng.indexOf("-") < 0 && lngOnly.indexOf("-") < 0) return;
              if (supportedLng.indexOf("-") > 0 && lngOnly.indexOf("-") < 0 && supportedLng.substring(0, supportedLng.indexOf("-")) === lngOnly) return supportedLng;
              if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1) return supportedLng;
            });
          });
        }
        if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
        return found;
      }
      getFallbackCodes(fallbacks, code) {
        if (!fallbacks) return [];
        if (typeof fallbacks === "function") fallbacks = fallbacks(code);
        if (typeof fallbacks === "string") fallbacks = [fallbacks];
        if (Array.isArray(fallbacks)) return fallbacks;
        if (!code) return fallbacks.default || [];
        let found = fallbacks[code];
        if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
        if (!found) found = fallbacks[this.formatLanguageCode(code)];
        if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
        if (!found) found = fallbacks.default;
        return found || [];
      }
      toResolveHierarchy(code, fallbackCode) {
        const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
        const codes = [];
        const addCode = (c2) => {
          if (!c2) return;
          if (this.isSupportedCode(c2)) {
            codes.push(c2);
          } else {
            this.logger.warn(`rejecting language code not found in supportedLngs: ${c2}`);
          }
        };
        if (typeof code === "string" && (code.indexOf("-") > -1 || code.indexOf("_") > -1)) {
          if (this.options.load !== "languageOnly") addCode(this.formatLanguageCode(code));
          if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly") addCode(this.getScriptPartFromCode(code));
          if (this.options.load !== "currentOnly") addCode(this.getLanguagePartFromCode(code));
        } else if (typeof code === "string") {
          addCode(this.formatLanguageCode(code));
        }
        fallbackCodes.forEach((fc2) => {
          if (codes.indexOf(fc2) < 0) addCode(this.formatLanguageCode(fc2));
        });
        return codes;
      }
    }
    let sets = [{
      lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
      nr: [1, 2],
      fc: 1
    }, {
      lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
      nr: [1, 2],
      fc: 2
    }, {
      lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
      nr: [1],
      fc: 3
    }, {
      lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
      nr: [1, 2, 5],
      fc: 4
    }, {
      lngs: ["ar"],
      nr: [0, 1, 2, 3, 11, 100],
      fc: 5
    }, {
      lngs: ["cs", "sk"],
      nr: [1, 2, 5],
      fc: 6
    }, {
      lngs: ["csb", "pl"],
      nr: [1, 2, 5],
      fc: 7
    }, {
      lngs: ["cy"],
      nr: [1, 2, 3, 8],
      fc: 8
    }, {
      lngs: ["fr"],
      nr: [1, 2],
      fc: 9
    }, {
      lngs: ["ga"],
      nr: [1, 2, 3, 7, 11],
      fc: 10
    }, {
      lngs: ["gd"],
      nr: [1, 2, 3, 20],
      fc: 11
    }, {
      lngs: ["is"],
      nr: [1, 2],
      fc: 12
    }, {
      lngs: ["jv"],
      nr: [0, 1],
      fc: 13
    }, {
      lngs: ["kw"],
      nr: [1, 2, 3, 4],
      fc: 14
    }, {
      lngs: ["lt"],
      nr: [1, 2, 10],
      fc: 15
    }, {
      lngs: ["lv"],
      nr: [1, 2, 0],
      fc: 16
    }, {
      lngs: ["mk"],
      nr: [1, 2],
      fc: 17
    }, {
      lngs: ["mnk"],
      nr: [0, 1, 2],
      fc: 18
    }, {
      lngs: ["mt"],
      nr: [1, 2, 11, 20],
      fc: 19
    }, {
      lngs: ["or"],
      nr: [2, 1],
      fc: 2
    }, {
      lngs: ["ro"],
      nr: [1, 2, 20],
      fc: 20
    }, {
      lngs: ["sl"],
      nr: [5, 1, 2, 3],
      fc: 21
    }, {
      lngs: ["he", "iw"],
      nr: [1, 2, 20, 21],
      fc: 22
    }];
    let _rulesPluralsTypes = {
      1: function(n2) {
        return Number(n2 > 1);
      },
      2: function(n2) {
        return Number(n2 != 1);
      },
      3: function(n2) {
        return 0;
      },
      4: function(n2) {
        return Number(n2 % 10 == 1 && n2 % 100 != 11 ? 0 : n2 % 10 >= 2 && n2 % 10 <= 4 && (n2 % 100 < 10 || n2 % 100 >= 20) ? 1 : 2);
      },
      5: function(n2) {
        return Number(n2 == 0 ? 0 : n2 == 1 ? 1 : n2 == 2 ? 2 : n2 % 100 >= 3 && n2 % 100 <= 10 ? 3 : n2 % 100 >= 11 ? 4 : 5);
      },
      6: function(n2) {
        return Number(n2 == 1 ? 0 : n2 >= 2 && n2 <= 4 ? 1 : 2);
      },
      7: function(n2) {
        return Number(n2 == 1 ? 0 : n2 % 10 >= 2 && n2 % 10 <= 4 && (n2 % 100 < 10 || n2 % 100 >= 20) ? 1 : 2);
      },
      8: function(n2) {
        return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : n2 != 8 && n2 != 11 ? 2 : 3);
      },
      9: function(n2) {
        return Number(n2 >= 2);
      },
      10: function(n2) {
        return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : n2 < 7 ? 2 : n2 < 11 ? 3 : 4);
      },
      11: function(n2) {
        return Number(n2 == 1 || n2 == 11 ? 0 : n2 == 2 || n2 == 12 ? 1 : n2 > 2 && n2 < 20 ? 2 : 3);
      },
      12: function(n2) {
        return Number(n2 % 10 != 1 || n2 % 100 == 11);
      },
      13: function(n2) {
        return Number(n2 !== 0);
      },
      14: function(n2) {
        return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : n2 == 3 ? 2 : 3);
      },
      15: function(n2) {
        return Number(n2 % 10 == 1 && n2 % 100 != 11 ? 0 : n2 % 10 >= 2 && (n2 % 100 < 10 || n2 % 100 >= 20) ? 1 : 2);
      },
      16: function(n2) {
        return Number(n2 % 10 == 1 && n2 % 100 != 11 ? 0 : n2 !== 0 ? 1 : 2);
      },
      17: function(n2) {
        return Number(n2 == 1 || n2 % 10 == 1 && n2 % 100 != 11 ? 0 : 1);
      },
      18: function(n2) {
        return Number(n2 == 0 ? 0 : n2 == 1 ? 1 : 2);
      },
      19: function(n2) {
        return Number(n2 == 1 ? 0 : n2 == 0 || n2 % 100 > 1 && n2 % 100 < 11 ? 1 : n2 % 100 > 10 && n2 % 100 < 20 ? 2 : 3);
      },
      20: function(n2) {
        return Number(n2 == 1 ? 0 : n2 == 0 || n2 % 100 > 0 && n2 % 100 < 20 ? 1 : 2);
      },
      21: function(n2) {
        return Number(n2 % 100 == 1 ? 1 : n2 % 100 == 2 ? 2 : n2 % 100 == 3 || n2 % 100 == 4 ? 3 : 0);
      },
      22: function(n2) {
        return Number(n2 == 1 ? 0 : n2 == 2 ? 1 : (n2 < 0 || n2 > 10) && n2 % 10 == 0 ? 2 : 3);
      }
    };
    const nonIntlVersions = ["v1", "v2", "v3"];
    const intlVersions = ["v4"];
    const suffixesOrder = {
      zero: 0,
      one: 1,
      two: 2,
      few: 3,
      many: 4,
      other: 5
    };
    function createRules() {
      const rules = {};
      sets.forEach((set2) => {
        set2.lngs.forEach((l2) => {
          rules[l2] = {
            numbers: set2.nr,
            plurals: _rulesPluralsTypes[set2.fc]
          };
        });
      });
      return rules;
    }
    class PluralResolver {
      constructor(languageUtils) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.languageUtils = languageUtils;
        this.options = options;
        this.logger = baseLogger.create("pluralResolver");
        if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === "undefined" || !Intl.PluralRules)) {
          this.options.compatibilityJSON = "v3";
          this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
        }
        this.rules = createRules();
      }
      addRule(lng, obj) {
        this.rules[lng] = obj;
      }
      getRule(code) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (this.shouldUseIntlApi()) {
          try {
            return new Intl.PluralRules(getCleanedCode(code === "dev" ? "en" : code), {
              type: options.ordinal ? "ordinal" : "cardinal"
            });
          } catch (err) {
            return;
          }
        }
        return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
      }
      needsPlural(code) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        const rule2 = this.getRule(code, options);
        if (this.shouldUseIntlApi()) {
          return rule2 && rule2.resolvedOptions().pluralCategories.length > 1;
        }
        return rule2 && rule2.numbers.length > 1;
      }
      getPluralFormsOfKey(code, key) {
        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return this.getSuffixes(code, options).map((suffix) => `${key}${suffix}`);
      }
      getSuffixes(code) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        const rule2 = this.getRule(code, options);
        if (!rule2) {
          return [];
        }
        if (this.shouldUseIntlApi()) {
          return rule2.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory) => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ""}${pluralCategory}`);
        }
        return rule2.numbers.map((number) => this.getSuffix(code, number, options));
      }
      getSuffix(code, count) {
        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        const rule2 = this.getRule(code, options);
        if (rule2) {
          if (this.shouldUseIntlApi()) {
            return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ""}${rule2.select(count)}`;
          }
          return this.getSuffixRetroCompatible(rule2, count);
        }
        this.logger.warn(`no plural rule found for: ${code}`);
        return "";
      }
      getSuffixRetroCompatible(rule2, count) {
        const idx = rule2.noAbs ? rule2.plurals(count) : rule2.plurals(Math.abs(count));
        let suffix = rule2.numbers[idx];
        if (this.options.simplifyPluralSuffix && rule2.numbers.length === 2 && rule2.numbers[0] === 1) {
          if (suffix === 2) {
            suffix = "plural";
          } else if (suffix === 1) {
            suffix = "";
          }
        }
        const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();
        if (this.options.compatibilityJSON === "v1") {
          if (suffix === 1) return "";
          if (typeof suffix === "number") return `_plural_${suffix.toString()}`;
          return returnSuffix();
        } else if (this.options.compatibilityJSON === "v2") {
          return returnSuffix();
        } else if (this.options.simplifyPluralSuffix && rule2.numbers.length === 2 && rule2.numbers[0] === 1) {
          return returnSuffix();
        }
        return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
      }
      shouldUseIntlApi() {
        return !nonIntlVersions.includes(this.options.compatibilityJSON);
      }
    }
    function deepFindWithDefaults(data, defaultData, key) {
      let keySeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".";
      let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
      let path = getPathWithDefaults(data, defaultData, key);
      if (!path && ignoreJSONStructure && typeof key === "string") {
        path = deepFind(data, key, keySeparator);
        if (path === void 0) path = deepFind(defaultData, key, keySeparator);
      }
      return path;
    }
    class Interpolator {
      constructor() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        this.logger = baseLogger.create("interpolator");
        this.options = options;
        this.format = options.interpolation && options.interpolation.format || ((value2) => value2);
        this.init(options);
      }
      init() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        if (!options.interpolation) options.interpolation = {
          escapeValue: true
        };
        const {
          escape: escape$12,
          escapeValue,
          useRawValueToEscape,
          prefix,
          prefixEscaped,
          suffix,
          suffixEscaped,
          formatSeparator,
          unescapeSuffix,
          unescapePrefix,
          nestingPrefix,
          nestingPrefixEscaped,
          nestingSuffix,
          nestingSuffixEscaped,
          nestingOptionsSeparator,
          maxReplaces,
          alwaysFormat
        } = options.interpolation;
        this.escape = escape$12 !== void 0 ? escape$12 : escape;
        this.escapeValue = escapeValue !== void 0 ? escapeValue : true;
        this.useRawValueToEscape = useRawValueToEscape !== void 0 ? useRawValueToEscape : false;
        this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || "{{";
        this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || "}}";
        this.formatSeparator = formatSeparator || ",";
        this.unescapePrefix = unescapeSuffix ? "" : unescapePrefix || "-";
        this.unescapeSuffix = this.unescapePrefix ? "" : unescapeSuffix || "";
        this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape("$t(");
        this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(")");
        this.nestingOptionsSeparator = nestingOptionsSeparator || ",";
        this.maxReplaces = maxReplaces || 1e3;
        this.alwaysFormat = alwaysFormat !== void 0 ? alwaysFormat : false;
        this.resetRegExp();
      }
      reset() {
        if (this.options) this.init(this.options);
      }
      resetRegExp() {
        const getOrResetRegExp = (existingRegExp, pattern) => {
          if (existingRegExp && existingRegExp.source === pattern) {
            existingRegExp.lastIndex = 0;
            return existingRegExp;
          }
          return new RegExp(pattern, "g");
        };
        this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
        this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
        this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
      }
      interpolate(str, data, lng, options) {
        let match;
        let value2;
        let replaces;
        const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
        function regexSafe(val) {
          return val.replace(/\$/g, "$$$$");
        }
        const handleFormat = (key) => {
          if (key.indexOf(this.formatSeparator) < 0) {
            const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
            return this.alwaysFormat ? this.format(path, void 0, lng, {
              ...options,
              ...data,
              interpolationkey: key
            }) : path;
          }
          const p2 = key.split(this.formatSeparator);
          const k2 = p2.shift().trim();
          const f2 = p2.join(this.formatSeparator).trim();
          return this.format(deepFindWithDefaults(data, defaultData, k2, this.options.keySeparator, this.options.ignoreJSONStructure), f2, lng, {
            ...options,
            ...data,
            interpolationkey: k2
          });
        };
        this.resetRegExp();
        const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
        const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
        const todos = [{
          regex: this.regexpUnescape,
          safeValue: (val) => regexSafe(val)
        }, {
          regex: this.regexp,
          safeValue: (val) => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
        }];
        todos.forEach((todo) => {
          replaces = 0;
          while (match = todo.regex.exec(str)) {
            const matchedVar = match[1].trim();
            value2 = handleFormat(matchedVar);
            if (value2 === void 0) {
              if (typeof missingInterpolationHandler === "function") {
                const temp = missingInterpolationHandler(str, match, options);
                value2 = typeof temp === "string" ? temp : "";
              } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
                value2 = "";
              } else if (skipOnVariables) {
                value2 = match[0];
                continue;
              } else {
                this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
                value2 = "";
              }
            } else if (typeof value2 !== "string" && !this.useRawValueToEscape) {
              value2 = makeString(value2);
            }
            const safeValue = todo.safeValue(value2);
            str = str.replace(match[0], safeValue);
            if (skipOnVariables) {
              todo.regex.lastIndex += value2.length;
              todo.regex.lastIndex -= match[0].length;
            } else {
              todo.regex.lastIndex = 0;
            }
            replaces++;
            if (replaces >= this.maxReplaces) {
              break;
            }
          }
        });
        return str;
      }
      nest(str, fc2) {
        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        let match;
        let value2;
        let clonedOptions;
        function handleHasOptions(key, inheritedOptions) {
          const sep = this.nestingOptionsSeparator;
          if (key.indexOf(sep) < 0) return key;
          const c2 = key.split(new RegExp(`${sep}[ ]*{`));
          let optionsString = `{${c2[1]}`;
          key = c2[0];
          optionsString = this.interpolate(optionsString, clonedOptions);
          const matchedSingleQuotes = optionsString.match(/'/g);
          const matchedDoubleQuotes = optionsString.match(/"/g);
          if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
            optionsString = optionsString.replace(/'/g, '"');
          }
          try {
            clonedOptions = JSON.parse(optionsString);
            if (inheritedOptions) clonedOptions = {
              ...inheritedOptions,
              ...clonedOptions
            };
          } catch (e2) {
            this.logger.warn(`failed parsing options string in nesting for key ${key}`, e2);
            return `${key}${sep}${optionsString}`;
          }
          if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1) delete clonedOptions.defaultValue;
          return key;
        }
        while (match = this.nestingRegexp.exec(str)) {
          let formatters = [];
          clonedOptions = {
            ...options
          };
          clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== "string" ? clonedOptions.replace : clonedOptions;
          clonedOptions.applyPostProcessor = false;
          delete clonedOptions.defaultValue;
          let doReduce = false;
          if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
            const r2 = match[1].split(this.formatSeparator).map((elem) => elem.trim());
            match[1] = r2.shift();
            formatters = r2;
            doReduce = true;
          }
          value2 = fc2(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
          if (value2 && match[0] === str && typeof value2 !== "string") return value2;
          if (typeof value2 !== "string") value2 = makeString(value2);
          if (!value2) {
            this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
            value2 = "";
          }
          if (doReduce) {
            value2 = formatters.reduce((v2, f2) => this.format(v2, f2, options.lng, {
              ...options,
              interpolationkey: match[1].trim()
            }), value2.trim());
          }
          str = str.replace(match[0], value2);
          this.regexp.lastIndex = 0;
        }
        return str;
      }
    }
    function parseFormatStr(formatStr) {
      let formatName = formatStr.toLowerCase().trim();
      const formatOptions = {};
      if (formatStr.indexOf("(") > -1) {
        const p2 = formatStr.split("(");
        formatName = p2[0].toLowerCase().trim();
        const optStr = p2[1].substring(0, p2[1].length - 1);
        if (formatName === "currency" && optStr.indexOf(":") < 0) {
          if (!formatOptions.currency) formatOptions.currency = optStr.trim();
        } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
          if (!formatOptions.range) formatOptions.range = optStr.trim();
        } else {
          const opts = optStr.split(";");
          opts.forEach((opt) => {
            if (opt) {
              const [key, ...rest] = opt.split(":");
              const val = rest.join(":").trim().replace(/^'+|'+$/g, "");
              const trimmedKey = key.trim();
              if (!formatOptions[trimmedKey]) formatOptions[trimmedKey] = val;
              if (val === "false") formatOptions[trimmedKey] = false;
              if (val === "true") formatOptions[trimmedKey] = true;
              if (!isNaN(val)) formatOptions[trimmedKey] = parseInt(val, 10);
            }
          });
        }
      }
      return {
        formatName,
        formatOptions
      };
    }
    function createCachedFormatter(fn) {
      const cache = {};
      return function invokeFormatter(val, lng, options) {
        const key = lng + JSON.stringify(options);
        let formatter = cache[key];
        if (!formatter) {
          formatter = fn(getCleanedCode(lng), options);
          cache[key] = formatter;
        }
        return formatter(val);
      };
    }
    class Formatter {
      constructor() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        this.logger = baseLogger.create("formatter");
        this.options = options;
        this.formats = {
          number: createCachedFormatter((lng, opt) => {
            const formatter = new Intl.NumberFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val);
          }),
          currency: createCachedFormatter((lng, opt) => {
            const formatter = new Intl.NumberFormat(lng, {
              ...opt,
              style: "currency"
            });
            return (val) => formatter.format(val);
          }),
          datetime: createCachedFormatter((lng, opt) => {
            const formatter = new Intl.DateTimeFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val);
          }),
          relativetime: createCachedFormatter((lng, opt) => {
            const formatter = new Intl.RelativeTimeFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val, opt.range || "day");
          }),
          list: createCachedFormatter((lng, opt) => {
            const formatter = new Intl.ListFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val);
          })
        };
        this.init(options);
      }
      init(services) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
          interpolation: {}
        };
        const iOpts = options.interpolation;
        this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
      }
      add(name, fc2) {
        this.formats[name.toLowerCase().trim()] = fc2;
      }
      addCached(name, fc2) {
        this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc2);
      }
      format(value2, format2, lng) {
        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        const formats = format2.split(this.formatSeparator);
        const result = formats.reduce((mem, f2) => {
          const {
            formatName,
            formatOptions
          } = parseFormatStr(f2);
          if (this.formats[formatName]) {
            let formatted = mem;
            try {
              const valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
              const l2 = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
              formatted = this.formats[formatName](mem, l2, {
                ...formatOptions,
                ...options,
                ...valOptions
              });
            } catch (error) {
              this.logger.warn(error);
            }
            return formatted;
          } else {
            this.logger.warn(`there was no format function for ${formatName}`);
          }
          return mem;
        }, value2);
        return result;
      }
    }
    function removePending(q2, name) {
      if (q2.pending[name] !== void 0) {
        delete q2.pending[name];
        q2.pendingCount--;
      }
    }
    class Connector extends EventEmitter {
      constructor(backend, store, services) {
        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        super();
        this.backend = backend;
        this.store = store;
        this.services = services;
        this.languageUtils = services.languageUtils;
        this.options = options;
        this.logger = baseLogger.create("backendConnector");
        this.waitingReads = [];
        this.maxParallelReads = options.maxParallelReads || 10;
        this.readingCalls = 0;
        this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
        this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
        this.state = {};
        this.queue = [];
        if (this.backend && this.backend.init) {
          this.backend.init(services, options.backend, options);
        }
      }
      queueLoad(languages, namespaces, options, callback) {
        const toLoad = {};
        const pending = {};
        const toLoadLanguages = {};
        const toLoadNamespaces = {};
        languages.forEach((lng) => {
          let hasAllNamespaces = true;
          namespaces.forEach((ns) => {
            const name = `${lng}|${ns}`;
            if (!options.reload && this.store.hasResourceBundle(lng, ns)) {
              this.state[name] = 2;
            } else if (this.state[name] < 0) ;
            else if (this.state[name] === 1) {
              if (pending[name] === void 0) pending[name] = true;
            } else {
              this.state[name] = 1;
              hasAllNamespaces = false;
              if (pending[name] === void 0) pending[name] = true;
              if (toLoad[name] === void 0) toLoad[name] = true;
              if (toLoadNamespaces[ns] === void 0) toLoadNamespaces[ns] = true;
            }
          });
          if (!hasAllNamespaces) toLoadLanguages[lng] = true;
        });
        if (Object.keys(toLoad).length || Object.keys(pending).length) {
          this.queue.push({
            pending,
            pendingCount: Object.keys(pending).length,
            loaded: {},
            errors: [],
            callback
          });
        }
        return {
          toLoad: Object.keys(toLoad),
          pending: Object.keys(pending),
          toLoadLanguages: Object.keys(toLoadLanguages),
          toLoadNamespaces: Object.keys(toLoadNamespaces)
        };
      }
      loaded(name, err, data) {
        const s = name.split("|");
        const lng = s[0];
        const ns = s[1];
        if (err) this.emit("failedLoading", lng, ns, err);
        if (data) {
          this.store.addResourceBundle(lng, ns, data, void 0, void 0, {
            skipCopy: true
          });
        }
        this.state[name] = err ? -1 : 2;
        const loaded = {};
        this.queue.forEach((q2) => {
          pushPath(q2.loaded, [lng], ns);
          removePending(q2, name);
          if (err) q2.errors.push(err);
          if (q2.pendingCount === 0 && !q2.done) {
            Object.keys(q2.loaded).forEach((l2) => {
              if (!loaded[l2]) loaded[l2] = {};
              const loadedKeys = q2.loaded[l2];
              if (loadedKeys.length) {
                loadedKeys.forEach((n2) => {
                  if (loaded[l2][n2] === void 0) loaded[l2][n2] = true;
                });
              }
            });
            q2.done = true;
            if (q2.errors.length) {
              q2.callback(q2.errors);
            } else {
              q2.callback();
            }
          }
        });
        this.emit("loaded", loaded);
        this.queue = this.queue.filter((q2) => !q2.done);
      }
      read(lng, ns, fcName) {
        let tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
        let wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
        let callback = arguments.length > 5 ? arguments[5] : void 0;
        if (!lng.length) return callback(null, {});
        if (this.readingCalls >= this.maxParallelReads) {
          this.waitingReads.push({
            lng,
            ns,
            fcName,
            tried,
            wait,
            callback
          });
          return;
        }
        this.readingCalls++;
        const resolver = (err, data) => {
          this.readingCalls--;
          if (this.waitingReads.length > 0) {
            const next = this.waitingReads.shift();
            this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
          }
          if (err && data && tried < this.maxRetries) {
            setTimeout(() => {
              this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
            }, wait);
            return;
          }
          callback(err, data);
        };
        const fc2 = this.backend[fcName].bind(this.backend);
        if (fc2.length === 2) {
          try {
            const r2 = fc2(lng, ns);
            if (r2 && typeof r2.then === "function") {
              r2.then((data) => resolver(null, data)).catch(resolver);
            } else {
              resolver(null, r2);
            }
          } catch (err) {
            resolver(err);
          }
          return;
        }
        return fc2(lng, ns, resolver);
      }
      prepareLoading(languages, namespaces) {
        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        let callback = arguments.length > 3 ? arguments[3] : void 0;
        if (!this.backend) {
          this.logger.warn("No backend was added via i18next.use. Will not load resources.");
          return callback && callback();
        }
        if (typeof languages === "string") languages = this.languageUtils.toResolveHierarchy(languages);
        if (typeof namespaces === "string") namespaces = [namespaces];
        const toLoad = this.queueLoad(languages, namespaces, options, callback);
        if (!toLoad.toLoad.length) {
          if (!toLoad.pending.length) callback();
          return null;
        }
        toLoad.toLoad.forEach((name) => {
          this.loadOne(name);
        });
      }
      load(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {}, callback);
      }
      reload(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {
          reload: true
        }, callback);
      }
      loadOne(name) {
        let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        const s = name.split("|");
        const lng = s[0];
        const ns = s[1];
        this.read(lng, ns, "read", void 0, void 0, (err, data) => {
          if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
          if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
          this.loaded(name, err, data);
        });
      }
      saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
        let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
        let clb = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
        };
        if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
          this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
          return;
        }
        if (key === void 0 || key === null || key === "") return;
        if (this.backend && this.backend.create) {
          const opts = {
            ...options,
            isUpdate
          };
          const fc2 = this.backend.create.bind(this.backend);
          if (fc2.length < 6) {
            try {
              let r2;
              if (fc2.length === 5) {
                r2 = fc2(languages, namespace, key, fallbackValue, opts);
              } else {
                r2 = fc2(languages, namespace, key, fallbackValue);
              }
              if (r2 && typeof r2.then === "function") {
                r2.then((data) => clb(null, data)).catch(clb);
              } else {
                clb(null, r2);
              }
            } catch (err) {
              clb(err);
            }
          } else {
            fc2(languages, namespace, key, fallbackValue, clb, opts);
          }
        }
        if (!languages || !languages[0]) return;
        this.store.addResource(languages[0], namespace, key, fallbackValue);
      }
    }
    function get$2() {
      return {
        debug: false,
        initImmediate: true,
        ns: ["translation"],
        defaultNS: ["translation"],
        fallbackLng: ["dev"],
        fallbackNS: false,
        supportedLngs: false,
        nonExplicitSupportedLngs: false,
        load: "all",
        preload: false,
        simplifyPluralSuffix: true,
        keySeparator: ".",
        nsSeparator: ":",
        pluralSeparator: "_",
        contextSeparator: "_",
        partialBundledLanguages: false,
        saveMissing: false,
        updateMissing: false,
        saveMissingTo: "fallback",
        saveMissingPlurals: true,
        missingKeyHandler: false,
        missingInterpolationHandler: false,
        postProcess: false,
        postProcessPassResolved: false,
        returnNull: false,
        returnEmptyString: true,
        returnObjects: false,
        joinArrays: false,
        returnedObjectHandler: false,
        parseMissingKeyHandler: false,
        appendNamespaceToMissingKey: false,
        appendNamespaceToCIMode: false,
        overloadTranslationOptionHandler: function handle(args) {
          let ret = {};
          if (typeof args[1] === "object") ret = args[1];
          if (typeof args[1] === "string") ret.defaultValue = args[1];
          if (typeof args[2] === "string") ret.tDescription = args[2];
          if (typeof args[2] === "object" || typeof args[3] === "object") {
            const options = args[3] || args[2];
            Object.keys(options).forEach((key) => {
              ret[key] = options[key];
            });
          }
          return ret;
        },
        interpolation: {
          escapeValue: true,
          format: (value2) => value2,
          prefix: "{{",
          suffix: "}}",
          formatSeparator: ",",
          unescapePrefix: "-",
          nestingPrefix: "$t(",
          nestingSuffix: ")",
          nestingOptionsSeparator: ",",
          maxReplaces: 1e3,
          skipOnVariables: true
        }
      };
    }
    function transformOptions(options) {
      if (typeof options.ns === "string") options.ns = [options.ns];
      if (typeof options.fallbackLng === "string") options.fallbackLng = [options.fallbackLng];
      if (typeof options.fallbackNS === "string") options.fallbackNS = [options.fallbackNS];
      if (options.supportedLngs && options.supportedLngs.indexOf("cimode") < 0) {
        options.supportedLngs = options.supportedLngs.concat(["cimode"]);
      }
      return options;
    }
    function noop() {
    }
    function bindMemberFunctions(inst) {
      const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
      mems.forEach((mem) => {
        if (typeof inst[mem] === "function") {
          inst[mem] = inst[mem].bind(inst);
        }
      });
    }
    class I18n extends EventEmitter {
      constructor() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        let callback = arguments.length > 1 ? arguments[1] : void 0;
        super();
        this.options = transformOptions(options);
        this.services = {};
        this.logger = baseLogger;
        this.modules = {
          external: []
        };
        bindMemberFunctions(this);
        if (callback && !this.isInitialized && !options.isClone) {
          if (!this.options.initImmediate) {
            this.init(options, callback);
            return this;
          }
          setTimeout(() => {
            this.init(options, callback);
          }, 0);
        }
      }
      init() {
        var _this = this;
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        let callback = arguments.length > 1 ? arguments[1] : void 0;
        this.isInitializing = true;
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        if (!options.defaultNS && options.defaultNS !== false && options.ns) {
          if (typeof options.ns === "string") {
            options.defaultNS = options.ns;
          } else if (options.ns.indexOf("translation") < 0) {
            options.defaultNS = options.ns[0];
          }
        }
        const defOpts = get$2();
        this.options = {
          ...defOpts,
          ...this.options,
          ...transformOptions(options)
        };
        if (this.options.compatibilityAPI !== "v1") {
          this.options.interpolation = {
            ...defOpts.interpolation,
            ...this.options.interpolation
          };
        }
        if (options.keySeparator !== void 0) {
          this.options.userDefinedKeySeparator = options.keySeparator;
        }
        if (options.nsSeparator !== void 0) {
          this.options.userDefinedNsSeparator = options.nsSeparator;
        }
        function createClassOnDemand(ClassOrObject) {
          if (!ClassOrObject) return null;
          if (typeof ClassOrObject === "function") return new ClassOrObject();
          return ClassOrObject;
        }
        if (!this.options.isClone) {
          if (this.modules.logger) {
            baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
          } else {
            baseLogger.init(null, this.options);
          }
          let formatter;
          if (this.modules.formatter) {
            formatter = this.modules.formatter;
          } else if (typeof Intl !== "undefined") {
            formatter = Formatter;
          }
          const lu = new LanguageUtil(this.options);
          this.store = new ResourceStore(this.options.resources, this.options);
          const s = this.services;
          s.logger = baseLogger;
          s.resourceStore = this.store;
          s.languageUtils = lu;
          s.pluralResolver = new PluralResolver(lu, {
            prepend: this.options.pluralSeparator,
            compatibilityJSON: this.options.compatibilityJSON,
            simplifyPluralSuffix: this.options.simplifyPluralSuffix
          });
          if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
            s.formatter = createClassOnDemand(formatter);
            s.formatter.init(s, this.options);
            this.options.interpolation.format = s.formatter.format.bind(s.formatter);
          }
          s.interpolator = new Interpolator(this.options);
          s.utils = {
            hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
          };
          s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
          s.backendConnector.on("*", function(event) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            _this.emit(event, ...args);
          });
          if (this.modules.languageDetector) {
            s.languageDetector = createClassOnDemand(this.modules.languageDetector);
            if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
          }
          if (this.modules.i18nFormat) {
            s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
            if (s.i18nFormat.init) s.i18nFormat.init(this);
          }
          this.translator = new Translator(this.services, this.options);
          this.translator.on("*", function(event) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            _this.emit(event, ...args);
          });
          this.modules.external.forEach((m2) => {
            if (m2.init) m2.init(this);
          });
        }
        this.format = this.options.interpolation.format;
        if (!callback) callback = noop;
        if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
          const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          if (codes.length > 0 && codes[0] !== "dev") this.options.lng = codes[0];
        }
        if (!this.services.languageDetector && !this.options.lng) {
          this.logger.warn("init: no languageDetector is used and no lng is defined");
        }
        const storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
        storeApi.forEach((fcName) => {
          this[fcName] = function() {
            return _this.store[fcName](...arguments);
          };
        });
        const storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
        storeApiChained.forEach((fcName) => {
          this[fcName] = function() {
            _this.store[fcName](...arguments);
            return _this;
          };
        });
        const deferred = defer();
        const load = () => {
          const finish = (err, t2) => {
            this.isInitializing = false;
            if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn("init: i18next is already initialized. You should call init just once!");
            this.isInitialized = true;
            if (!this.options.isClone) this.logger.log("initialized", this.options);
            this.emit("initialized", this.options);
            deferred.resolve(t2);
            callback(err, t2);
          };
          if (this.languages && this.options.compatibilityAPI !== "v1" && !this.isInitialized) return finish(null, this.t.bind(this));
          this.changeLanguage(this.options.lng, finish);
        };
        if (this.options.resources || !this.options.initImmediate) {
          load();
        } else {
          setTimeout(load, 0);
        }
        return deferred;
      }
      loadResources(language) {
        let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
        let usedCallback = callback;
        const usedLng = typeof language === "string" ? language : this.language;
        if (typeof language === "function") usedCallback = language;
        if (!this.options.resources || this.options.partialBundledLanguages) {
          if (usedLng && usedLng.toLowerCase() === "cimode" && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
          const toLoad = [];
          const append = (lng) => {
            if (!lng) return;
            if (lng === "cimode") return;
            const lngs = this.services.languageUtils.toResolveHierarchy(lng);
            lngs.forEach((l2) => {
              if (l2 === "cimode") return;
              if (toLoad.indexOf(l2) < 0) toLoad.push(l2);
            });
          };
          if (!usedLng) {
            const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
            fallbacks.forEach((l2) => append(l2));
          } else {
            append(usedLng);
          }
          if (this.options.preload) {
            this.options.preload.forEach((l2) => append(l2));
          }
          this.services.backendConnector.load(toLoad, this.options.ns, (e2) => {
            if (!e2 && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
            usedCallback(e2);
          });
        } else {
          usedCallback(null);
        }
      }
      reloadResources(lngs, ns, callback) {
        const deferred = defer();
        if (!lngs) lngs = this.languages;
        if (!ns) ns = this.options.ns;
        if (!callback) callback = noop;
        this.services.backendConnector.reload(lngs, ns, (err) => {
          deferred.resolve();
          callback(err);
        });
        return deferred;
      }
      use(module2) {
        if (!module2) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
        if (!module2.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
        if (module2.type === "backend") {
          this.modules.backend = module2;
        }
        if (module2.type === "logger" || module2.log && module2.warn && module2.error) {
          this.modules.logger = module2;
        }
        if (module2.type === "languageDetector") {
          this.modules.languageDetector = module2;
        }
        if (module2.type === "i18nFormat") {
          this.modules.i18nFormat = module2;
        }
        if (module2.type === "postProcessor") {
          postProcessor.addPostProcessor(module2);
        }
        if (module2.type === "formatter") {
          this.modules.formatter = module2;
        }
        if (module2.type === "3rdParty") {
          this.modules.external.push(module2);
        }
        return this;
      }
      setResolvedLanguage(l2) {
        if (!l2 || !this.languages) return;
        if (["cimode", "dev"].indexOf(l2) > -1) return;
        for (let li2 = 0; li2 < this.languages.length; li2++) {
          const lngInLngs = this.languages[li2];
          if (["cimode", "dev"].indexOf(lngInLngs) > -1) continue;
          if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
            this.resolvedLanguage = lngInLngs;
            break;
          }
        }
      }
      changeLanguage(lng, callback) {
        var _this2 = this;
        this.isLanguageChangingTo = lng;
        const deferred = defer();
        this.emit("languageChanging", lng);
        const setLngProps = (l2) => {
          this.language = l2;
          this.languages = this.services.languageUtils.toResolveHierarchy(l2);
          this.resolvedLanguage = void 0;
          this.setResolvedLanguage(l2);
        };
        const done = (err, l2) => {
          if (l2) {
            setLngProps(l2);
            this.translator.changeLanguage(l2);
            this.isLanguageChangingTo = void 0;
            this.emit("languageChanged", l2);
            this.logger.log("languageChanged", l2);
          } else {
            this.isLanguageChangingTo = void 0;
          }
          deferred.resolve(function() {
            return _this2.t(...arguments);
          });
          if (callback) callback(err, function() {
            return _this2.t(...arguments);
          });
        };
        const setLng = (lngs) => {
          if (!lng && !lngs && this.services.languageDetector) lngs = [];
          const l2 = typeof lngs === "string" ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
          if (l2) {
            if (!this.language) {
              setLngProps(l2);
            }
            if (!this.translator.language) this.translator.changeLanguage(l2);
            if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage) this.services.languageDetector.cacheUserLanguage(l2);
          }
          this.loadResources(l2, (err) => {
            done(err, l2);
          });
        };
        if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
          setLng(this.services.languageDetector.detect());
        } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
          if (this.services.languageDetector.detect.length === 0) {
            this.services.languageDetector.detect().then(setLng);
          } else {
            this.services.languageDetector.detect(setLng);
          }
        } else {
          setLng(lng);
        }
        return deferred;
      }
      getFixedT(lng, ns, keyPrefix) {
        var _this3 = this;
        const fixedT = function(key, opts) {
          let options;
          if (typeof opts !== "object") {
            for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
              rest[_key3 - 2] = arguments[_key3];
            }
            options = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));
          } else {
            options = {
              ...opts
            };
          }
          options.lng = options.lng || fixedT.lng;
          options.lngs = options.lngs || fixedT.lngs;
          options.ns = options.ns || fixedT.ns;
          options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
          const keySeparator = _this3.options.keySeparator || ".";
          let resultKey;
          if (options.keyPrefix && Array.isArray(key)) {
            resultKey = key.map((k2) => `${options.keyPrefix}${keySeparator}${k2}`);
          } else {
            resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;
          }
          return _this3.t(resultKey, options);
        };
        if (typeof lng === "string") {
          fixedT.lng = lng;
        } else {
          fixedT.lngs = lng;
        }
        fixedT.ns = ns;
        fixedT.keyPrefix = keyPrefix;
        return fixedT;
      }
      t() {
        return this.translator && this.translator.translate(...arguments);
      }
      exists() {
        return this.translator && this.translator.exists(...arguments);
      }
      setDefaultNamespace(ns) {
        this.options.defaultNS = ns;
      }
      hasLoadedNamespace(ns) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (!this.isInitialized) {
          this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
          return false;
        }
        if (!this.languages || !this.languages.length) {
          this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
          return false;
        }
        const lng = options.lng || this.resolvedLanguage || this.languages[0];
        const fallbackLng = this.options ? this.options.fallbackLng : false;
        const lastLng = this.languages[this.languages.length - 1];
        if (lng.toLowerCase() === "cimode") return true;
        const loadNotPending = (l2, n2) => {
          const loadState = this.services.backendConnector.state[`${l2}|${n2}`];
          return loadState === -1 || loadState === 2;
        };
        if (options.precheck) {
          const preResult = options.precheck(this, loadNotPending);
          if (preResult !== void 0) return preResult;
        }
        if (this.hasResourceBundle(lng, ns)) return true;
        if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
        if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
        return false;
      }
      loadNamespaces(ns, callback) {
        const deferred = defer();
        if (!this.options.ns) {
          if (callback) callback();
          return Promise.resolve();
        }
        if (typeof ns === "string") ns = [ns];
        ns.forEach((n2) => {
          if (this.options.ns.indexOf(n2) < 0) this.options.ns.push(n2);
        });
        this.loadResources((err) => {
          deferred.resolve();
          if (callback) callback(err);
        });
        return deferred;
      }
      loadLanguages(lngs, callback) {
        const deferred = defer();
        if (typeof lngs === "string") lngs = [lngs];
        const preloaded = this.options.preload || [];
        const newLngs = lngs.filter((lng) => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
        if (!newLngs.length) {
          if (callback) callback();
          return Promise.resolve();
        }
        this.options.preload = preloaded.concat(newLngs);
        this.loadResources((err) => {
          deferred.resolve();
          if (callback) callback(err);
        });
        return deferred;
      }
      dir(lng) {
        if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
        if (!lng) return "rtl";
        const rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
        const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get$2());
        return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
      }
      static createInstance() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        let callback = arguments.length > 1 ? arguments[1] : void 0;
        return new I18n(options, callback);
      }
      cloneInstance() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
        const forkResourceStore = options.forkResourceStore;
        if (forkResourceStore) delete options.forkResourceStore;
        const mergedOptions = {
          ...this.options,
          ...options,
          ...{
            isClone: true
          }
        };
        const clone2 = new I18n(mergedOptions);
        if (options.debug !== void 0 || options.prefix !== void 0) {
          clone2.logger = clone2.logger.clone(options);
        }
        const membersToCopy = ["store", "services", "language"];
        membersToCopy.forEach((m2) => {
          clone2[m2] = this[m2];
        });
        clone2.services = {
          ...this.services
        };
        clone2.services.utils = {
          hasLoadedNamespace: clone2.hasLoadedNamespace.bind(clone2)
        };
        if (forkResourceStore) {
          clone2.store = new ResourceStore(this.store.data, mergedOptions);
          clone2.services.resourceStore = clone2.store;
        }
        clone2.translator = new Translator(clone2.services, mergedOptions);
        clone2.translator.on("*", function(event) {
          for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
            args[_key4 - 1] = arguments[_key4];
          }
          clone2.emit(event, ...args);
        });
        clone2.init(mergedOptions, callback);
        clone2.translator.options = mergedOptions;
        clone2.translator.backendConnector.services.utils = {
          hasLoadedNamespace: clone2.hasLoadedNamespace.bind(clone2)
        };
        return clone2;
      }
      toJSON() {
        return {
          options: this.options,
          store: this.store,
          language: this.language,
          languages: this.languages,
          resolvedLanguage: this.resolvedLanguage
        };
      }
    }
    const instance = I18n.createInstance();
    instance.createInstance = I18n.createInstance;
    instance.createInstance;
    instance.dir;
    instance.init;
    instance.loadResources;
    instance.reloadResources;
    instance.use;
    instance.changeLanguage;
    instance.getFixedT;
    instance.t;
    instance.exists;
    instance.setDefaultNamespace;
    instance.hasLoadedNamespace;
    instance.loadNamespaces;
    instance.loadLanguages;
    var _translations;
    var translations = (_translations = {}, _defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_translations, EMPTY_GROUP, "Empty group"), EMPTY_RULE_GROUP, "No conditions for group field {{field}}"), EMPTY_QUERY, "Empty query"), EMPTY_CASE, "Empty case"), NO_CONFIG_FOR_FIELD, "No config for field {{field}}"), FIXED_OPERATOR, "Fixed operator {{from}} to {{to}} for field {{field}}"), NO_CONFIG_FOR_OPERATOR, "No config for operator {{operator}}"), NO_CONFIG_FOR_FUNCTION, "No config for function {{funcKey}}"), INVALID_VALUE, "Invalid value"), INVALID_FUNC_ARG_VALUE, "Invalid value of arg {{argName}} for func {{funcName}}: {{argValidationError}}"), _defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_translations, UNSUPPORTED_FIELD_TYPE, "Type of field {{field}} is not supported"), UNSUPPORTED_OPERATOR_FOR_FIELD, "Operator {{operator}} is not supported for field {{field}}"), INCOMPLETE_RULE, "Incomplete rule"), INCOMPLETE_LHS, "Incomplete LHS"), INCOMPLETE_RHS, "Incomplete RHS"), INVALID_VALUE_SRC, "Invalid value src {{valueSrcs, list}}"), BAD_MULTISELECT_VALUES + "_one", "Value {{badValues, list}} is not in the list of allowed values"), BAD_MULTISELECT_VALUES + "_other", "Values {{badValues, list}} are not in the list of allowed values"), BAD_SELECT_VALUE, "Value {{value}} is not in the list of allowed values"), INCORRECT_VALUE_TYPE, "Value should have type {{wType}}, but got value of type {{valueType}}"), _defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_translations, INCORRECT_VALUE_JS_TYPE, "Value should have JS type {{jsType}}, but got value of type {{valueTypeof}}"), VALUE_LENGTH_CONSTRAINT_FAIL, "Value {{value}} should have max length {{fieldSettings.maxLength}} but got {{length}}"), VALUE_MIN_CONSTRAINT_FAIL, "Value {{value}} should be greater than or equal to {{fieldSettings.min}}"), VALUE_MIN_CONSTRAINT_FAIL + "_" + _CONTEXT_MIN_MAX, "Value {{value}} should be from {{fieldSettings.min}} to {{fieldSettings.max}}"), VALUE_MAX_CONSTRAINT_FAIL, "Value {{value}} should be less than or equal to {{fieldSettings.max}}"), VALUE_MAX_CONSTRAINT_FAIL + "_" + _CONTEXT_MIN_MAX, "Value {{value}} should be from {{fieldSettings.min}} to {{fieldSettings.max}}"), NO_CONFIG_FOR_FIELD_VALUE, "No config for field {{field}}"), CANT_COMPARE_FIELD_WITH_ITSELF, "Can't compare field {{field}} with itself"), CANT_COMPARE_FIELD_WITH_FIELD, "Can't compare field {{leftField}} with {{rightField}}"), INCORRECT_FIELD_TYPE, "Field {{field}} is of type {{type}}, but expected {{expected}}"), _defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_translations, UNSUPPORTED_FUNCTION_FOR_FIELD, "Unsupported function {{funcKey}} for field {{field}}"), REQUIRED_FUNCTION_ARG, "Value of arg {{argName}} for func {{funcName}} is required"), INCORRECT_FUNCTION_RETURN_TYPE, "Function {{funcKey}} should return value of type {{returnType}}, but got {{valueType}}"), INVALID_RANGE, "Invalid range"), ITEM_POSITION_ROOT, "Root"), ITEM_POSITION + "__rule", "Leaf #{{globalLeafNo}}"), ITEM_POSITION + "__group", "Group #{{globalGroupNo}}"), ITEM_POSITION + "__rule_group", "Rule-group #{{globalNoByType}}"), ITEM_POSITION + "__case_group", "Case #{{globalNoByType}}"), ITEM_POSITION + "__rule__deleted", "Deleted leaf #{{globalLeafNo}}"), _defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_defineProperty$1(_translations, ITEM_POSITION + "__group__deleted", "Deleted group #{{globalGroupNo}}"), ITEM_POSITION + "__rule_group__deleted", "Deleted rule-group #{{globalNoByType}}"), ITEM_POSITION + "__case_group__deleted", "Deleted case #{{globalNoByType}}"), ITEM_POSITION_IN_CASE, "{{str}} in case #{{caseNo}}"), ITEM_POSITION_WITH_INDEX_PATH, "{{str}} (index path: {{indexPath, list}})"));
    var NSV = "raqbvalidation";
    var NSVP = "".concat(NSV, ":");
    var i18n = instance.createInstance();
    i18n.init({
      fallbackLng: "en"
    });
    i18n.addResources("en", NSV, translations);
    var translateValidation = function translateValidation2(key, args) {
      if (key !== null && key !== void 0 && key.str) {
        return key.str;
      }
      if (key !== null && key !== void 0 && key.key) {
        return translateValidation2(key.key, key.args);
      }
      if (args === null) {
        return key;
      }
      return i18n.t(key.includes(":") ? key : NSVP + key, args);
    };
    function ownKeys$s(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$s(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$s(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$s(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var typeOf = function typeOf2(v2) {
      if (_typeof$1(v2) === "object" && v2 !== null && Array.isArray(v2)) return "array";
      else return _typeof$1(v2);
    };
    var isTypeOf = function isTypeOf2(v2, type) {
      if (typeOf(v2) === type) return true;
      if (type === "number" && !isNaN(v2)) return true;
      return false;
    };
    var isValidTree = function isValidTree2(tree2, config2) {
      return getTreeBadFields(tree2, config2).length === 0;
    };
    var getTreeBadFields = function getTreeBadFields2(tree2, config2) {
      var showErrorMessage = config2.settings.showErrorMessage;
      var badFields = [];
      function _processNode(item, path, lev) {
        var _field$get, _field$get2;
        var id2 = item.get("id");
        var children = item.get("children1");
        var valueError = item.getIn(["properties", "valueError"]);
        var fieldError = item.getIn(["properties", "fieldError"]);
        var field = item.getIn(["properties", "field"]);
        var fieldStr = (_field$get = field === null || field === void 0 || (_field$get2 = field.get) === null || _field$get2 === void 0 ? void 0 : _field$get2.call(field, "func")) !== null && _field$get !== void 0 ? _field$get : field;
        var hasValueError = (valueError === null || valueError === void 0 ? void 0 : valueError.size) > 0 && valueError.filter(function(v2) {
          return v2 != null;
        }).size > 0;
        var isBad = hasValueError || !!fieldError;
        if (isBad && showErrorMessage) {
          badFields.push(fieldStr);
        }
        if (children) {
          children.map(function(child, _childId) {
            if (child) {
              _processNode(child, path.concat(id2));
            }
          });
        }
      }
      if (tree2) _processNode(tree2, []);
      return Array.from(new Set(badFields));
    };
    var checkTree = function checkTree2(tree2, config2) {
      var extendedConfig = extendConfig(config2, void 0, true);
      var options = {
        removeEmptyGroups: config2.settings.removeEmptyGroupsOnLoad,
        removeIncompleteRules: config2.settings.removeIncompleteRulesOnLoad,
        removeEmptyRules: config2.settings.removeEmptyRulesOnLoad,
        forceFix: false
      };
      var _validateTree2 = _validateTree(tree2, null, extendedConfig, extendedConfig, options), fixedTree = _validateTree2.fixedTree, allErrors = _validateTree2.allErrors, isSanitized = _validateTree2.isSanitized;
      if (isSanitized && allErrors.length) {
        console.warn("Tree check errors: ", allErrors);
      }
      return fixedTree;
    };
    var validateTree = function validateTree2(tree2, config2) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var extendedConfig = extendConfig(config2, void 0, true);
      var finalOptions = _objectSpread$s(_objectSpread$s({}, options), {}, {
        // disbale sanitize options, just validate
        removeEmptyGroups: false,
        removeEmptyRules: false,
        removeIncompleteRules: false,
        forceFix: false
      });
      var _validateTree3 = _validateTree(tree2, null, extendedConfig, extendedConfig, finalOptions), allErrors = _validateTree3.allErrors;
      return allErrors;
    };
    var sanitizeTree$1 = function sanitizeTree2(tree2, config2) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var extendedConfig = extendConfig(config2, void 0, true);
      var finalOptions = _objectSpread$s({
        // defaults
        removeEmptyGroups: true,
        removeEmptyRules: true,
        removeIncompleteRules: true,
        forceFix: false
      }, options);
      var _validateTree4 = _validateTree(tree2, null, extendedConfig, extendedConfig, finalOptions), fixedTree = _validateTree4.fixedTree, fixedErrors = _validateTree4.fixedErrors, nonFixedErrors = _validateTree4.nonFixedErrors, allErrors = _validateTree4.allErrors;
      return {
        fixedTree,
        fixedErrors,
        nonFixedErrors,
        allErrors
      };
    };
    var validateAndFixTree$1 = function validateAndFixTree2(newTree, _oldTree, newConfig, oldConfig, removeEmptyGroups, removeEmptyRules, removeIncompleteRules) {
      if (removeEmptyGroups === void 0) {
        removeEmptyGroups = newConfig.settings.removeEmptyGroupsOnLoad;
      }
      if (removeEmptyRules === void 0) {
        removeEmptyRules = newConfig.settings.removeEmptyRulesOnLoad;
      }
      if (removeIncompleteRules === void 0) {
        removeIncompleteRules = newConfig.settings.removeIncompleteRulesOnLoad;
      }
      var options = {
        // sanitize options
        removeEmptyGroups,
        removeEmptyRules,
        removeIncompleteRules,
        forceFix: false
      };
      var _validateTree5 = _validateTree(newTree, _oldTree, newConfig, oldConfig, options), fixedTree = _validateTree5.fixedTree;
      _validateTree5.allErrors;
      var fixedErrors = _validateTree5.fixedErrors;
      _validateTree5.nonFixedErrors;
      var isSanitized = _validateTree5.isSanitized;
      if (isSanitized && fixedErrors.length) {
        console.warn("Fixed tree errors: ", fixedErrors);
      }
      fixedTree = fixPathsInTree(fixedTree);
      return fixedTree;
    };
    var _validateTree = function _validateTree2(tree2, _oldTree, config2, oldConfig, options) {
      if (!tree2) {
        return {
          fixedTree: tree2,
          allErrors: [],
          fixedErrors: [],
          nonFixedErrors: [],
          isSanitized: false
        };
      }
      var _ref = options || {}, removeEmptyGroups = _ref.removeEmptyGroups, removeEmptyRules = _ref.removeEmptyRules, removeIncompleteRules = _ref.removeIncompleteRules, forceFix = _ref.forceFix, _ref$translateErrors = _ref.translateErrors, translateErrors = _ref$translateErrors === void 0 ? true : _ref$translateErrors, _ref$includeStringifi = _ref.includeStringifiedItems, includeStringifiedItems = _ref$includeStringifi === void 0 ? true : _ref$includeStringifi, _ref$stringifyFixedIt = _ref.stringifyFixedItems, stringifyFixedItems = _ref$stringifyFixedIt === void 0 ? false : _ref$stringifyFixedIt, _ref$stringifyItemsUs = _ref.stringifyItemsUserFriendly, stringifyItemsUserFriendly = _ref$stringifyItemsUs === void 0 ? true : _ref$stringifyItemsUs, _ref$includeItemsPosi = _ref.includeItemsPositions, includeItemsPositions = _ref$includeItemsPosi === void 0 ? true : _ref$includeItemsPosi;
      var c2 = {
        config: config2,
        oldConfig,
        removeEmptyGroups,
        removeEmptyRules,
        removeIncompleteRules,
        forceFix
      };
      var meta = {
        errors: {}
      };
      var fixedTree = validateItem(tree2, [], null, meta, c2);
      var isSanitized = meta.sanitized;
      var allErrors = [];
      var flatItems, oldFlatItems;
      if (includeItemsPositions) {
        flatItems = getFlatTree$1(fixedTree, config2).items;
      }
      for (var id2 in meta.errors) {
        var _meta$errors$id = meta.errors[id2], path = _meta$errors$id.path, errors = _meta$errors$id.errors;
        if (translateErrors) {
          errors = errors.map(function(e2) {
            return _objectSpread$s(_objectSpread$s({}, e2), {}, {
              str: translateValidation(e2)
            });
          });
        }
        var errorItem = {
          path,
          errors
        };
        if (includeStringifiedItems) {
          var item = getItemByPath(stringifyFixedItems ? fixedTree : tree2, path);
          var isRoot = path.length === 1;
          if (!isRoot && item.get("type") !== "group") {
            var isDebugMode = true;
            var isForDisplay = stringifyItemsUserFriendly;
            var itemStr = queryString$1(item, config2, isForDisplay, isDebugMode);
            errorItem.itemStr = itemStr;
          }
        }
        if (includeItemsPositions) {
          var flatItem = flatItems[id2];
          var isDeleted = !flatItem;
          if (isDeleted) {
            if (!oldFlatItems) {
              oldFlatItems = getFlatTree$1(tree2, config2).items;
            }
            flatItem = oldFlatItems[id2];
          }
          if (flatItem) {
            var itemPosition = _objectSpread$s(_objectSpread$s({}, flatItem.position), {}, {
              index: flatItem.index,
              type: flatItem.type,
              isDeleted
            });
            errorItem.itemPosition = itemPosition;
            var trKey = !flatItem.index ? ITEM_POSITION_ROOT : ITEM_POSITION + "__" + flatItem.type + (isDeleted ? "__deleted" : "");
            var trArgs = _objectSpread$s({}, itemPosition);
            if (stringifyItemsUserFriendly) {
              var _itemPosition$indexPa;
              for (var _i = 0, _arr = ["caseNo", "globalLeafNo", "globalGroupNo", "globalNoByType"]; _i < _arr.length; _i++) {
                var k2 = _arr[_i];
                if (trArgs[k2] != void 0) {
                  trArgs[k2] = trArgs[k2] + 1;
                }
              }
              trArgs.indexPath = (_itemPosition$indexPa = itemPosition.indexPath) === null || _itemPosition$indexPa === void 0 ? void 0 : _itemPosition$indexPa.map(function(ind) {
                return ind + 1;
              });
            }
            errorItem.itemPositionStr = translateValidation(trKey, trArgs);
            if (flatItem.index) {
              if (flatItem.caseId && flatItem.type !== "case_group") {
                errorItem.itemPositionStr = translateValidation(ITEM_POSITION_IN_CASE, _objectSpread$s(_objectSpread$s({}, trArgs), {}, {
                  str: errorItem.itemPositionStr
                }));
              }
              if (flatItem.type !== "case_group") {
                errorItem.itemPositionStr = translateValidation(ITEM_POSITION_WITH_INDEX_PATH, _objectSpread$s(_objectSpread$s({}, trArgs), {}, {
                  str: errorItem.itemPositionStr
                }));
              }
            }
          }
        }
        allErrors.push(errorItem);
      }
      var fixedErrors = [];
      var nonFixedErrors = [];
      for (var _i2 = 0, _allErrors = allErrors; _i2 < _allErrors.length; _i2++) {
        var itemErrors = _allErrors[_i2];
        var fixedItemErrors = itemErrors.errors.filter(function(e2) {
          return !!e2.fixed;
        });
        var nonFixedItemErrors = itemErrors.errors.filter(function(e2) {
          return !e2.fixed && e2.key !== "EMPTY_QUERY";
        });
        if (fixedItemErrors.length) {
          fixedErrors.push(_objectSpread$s(_objectSpread$s({}, itemErrors), {}, {
            errors: fixedItemErrors
          }));
        }
        if (nonFixedItemErrors.length) {
          nonFixedErrors.push(_objectSpread$s(_objectSpread$s({}, itemErrors), {}, {
            errors: nonFixedItemErrors
          }));
        }
      }
      return {
        fixedTree,
        allErrors,
        fixedErrors,
        nonFixedErrors,
        isSanitized
      };
    };
    function _addError(meta, item, path, err) {
      var id2 = item.get("id");
      if (!meta.errors[id2]) {
        meta.errors[id2] = {
          path: [].concat(_toConsumableArray(path), [id2]),
          errors: []
        };
      }
      meta.errors[id2].errors.push(err);
    }
    function _setErrorsAsFixed(meta, item) {
      var id2 = item.get("id");
      if (meta.errors[id2]) {
        meta.errors[id2].errors.map(function(e2) {
          e2.fixed = true;
        });
      }
    }
    function validateItem(item, path, itemId, meta, c2) {
      var type = item === null || item === void 0 ? void 0 : item.get("type");
      if (type === "group" || type === "rule_group" || type == "case_group" || type == "switch_group") {
        return validateGroup(item, path, itemId, meta, c2);
      } else if (type === "rule") {
        return validateRule(item, path, itemId, meta, c2);
      } else {
        return item;
      }
    }
    function validateGroup(item, path, itemId, meta, c2) {
      var _properties$get, _config$operators$ope, _config$operators$ope2, _children, _children2, _children3;
      var removeEmptyGroups = c2.removeEmptyGroups, removeIncompleteRules = c2.removeIncompleteRules;
      c2.forceFix;
      var config2 = c2.config;
      config2.settings.showErrorMessage;
      var id2 = item.get("id");
      var children = item.get("children1");
      var isRoot = !path.length;
      var oldChildren = children;
      var type = item.get("type");
      var properties = item.get("properties");
      var field = properties === null || properties === void 0 ? void 0 : properties.get("field");
      var mode = properties === null || properties === void 0 ? void 0 : properties.get("mode");
      var operator = properties === null || properties === void 0 || (_properties$get = properties.get) === null || _properties$get === void 0 ? void 0 : _properties$get.call(properties, "operator");
      var isGroupExt = type === "rule_group" && mode === "array";
      var isCase = type === "case_group";
      var isDefaultCase = isCase && children == void 0;
      var cardinality = operator ? (_config$operators$ope = (_config$operators$ope2 = config2.operators[operator]) === null || _config$operators$ope2 === void 0 ? void 0 : _config$operators$ope2.cardinality) !== null && _config$operators$ope !== void 0 ? _config$operators$ope : 1 : void 0;
      var childrenAreRequired = isCase ? !isDefaultCase : isGroupExt ? cardinality == 0 : removeEmptyGroups;
      var canHaveValue = isGroupExt || isCase;
      if (!id2 && itemId) {
        id2 = itemId;
        item = item.set("id", id2);
        meta.sanitized = true;
      }
      if (canHaveValue) {
        item = validateRule(item, path, itemId, meta, c2);
      }
      var submeta = {
        errors: {}
      };
      children = (_children = children) === null || _children === void 0 ? void 0 : _children.map(function(currentChild, childId) {
        return validateItem(currentChild, path.concat(id2), childId, submeta, c2);
      });
      var nonEmptyChildren = (_children2 = children) === null || _children2 === void 0 ? void 0 : _children2.filter(function(currentChild) {
        return currentChild != void 0;
      });
      if (removeEmptyGroups) {
        children = nonEmptyChildren;
      }
      var sanitized = submeta.sanitized || (oldChildren === null || oldChildren === void 0 ? void 0 : oldChildren.size) != ((_children3 = children) === null || _children3 === void 0 ? void 0 : _children3.size);
      var isEmptyChildren = !(nonEmptyChildren !== null && nonEmptyChildren !== void 0 && nonEmptyChildren.size);
      var canDrop = removeEmptyGroups && !isRoot;
      if (isGroupExt && field) {
        canDrop = removeIncompleteRules;
      }
      if (isEmptyChildren && childrenAreRequired) {
        _addError(meta, item, path, {
          key: isRoot ? EMPTY_QUERY : isCase ? EMPTY_CASE : isGroupExt ? EMPTY_RULE_GROUP : EMPTY_GROUP,
          args: {
            field
          },
          fixed: canDrop
        });
        if (canDrop) {
          _setErrorsAsFixed(meta, item);
          item = void 0;
        }
      }
      if (sanitized) meta.sanitized = true;
      if (sanitized && item) item = item.set("children1", children);
      meta.errors = _objectSpread$s(_objectSpread$s({}, meta.errors), (submeta === null || submeta === void 0 ? void 0 : submeta.errors) || {});
      return item;
    }
    function validateRule(item, path, itemId, meta, c2) {
      var removeIncompleteRules = c2.removeIncompleteRules, removeEmptyRules = c2.removeEmptyRules, forceFix = c2.forceFix, config2 = c2.config, oldConfig = c2.oldConfig;
      var showErrorMessage = config2.settings.showErrorMessage;
      var canFix = !showErrorMessage || forceFix;
      var id2 = item.get("id");
      var type = item.get("type");
      var isCase = type === "case_group";
      var properties = item.get("properties");
      if (!properties) {
        if (isCase) {
          properties = new Immutable.Map();
        } else {
          var err = {
            key: INCOMPLETE_RULE,
            args: {},
            fixed: removeIncompleteRules || removeEmptyRules
          };
          _addError(meta, item, path, err);
          return void 0;
        }
      }
      var field = properties.get("field") || null;
      if (isCase) {
        field = "!case_value";
      }
      var fieldSrc = properties.get("fieldSrc") || null;
      var operator = properties.get("operator") || null;
      var operatorOptions = properties.get("operatorOptions");
      var valueSrc = properties.get("valueSrc");
      var value2 = properties.get("value");
      var valueError = properties.get("valueError");
      var fieldError = properties.get("fieldError");
      var serializeRule = function serializeRule2() {
        var _field, _field$toJS;
        return {
          field: ((_field = field) === null || _field === void 0 || (_field$toJS = _field.toJS) === null || _field$toJS === void 0 ? void 0 : _field$toJS.call(_field)) || field,
          fieldSrc,
          operator,
          operatorOptions: operatorOptions ? operatorOptions.toJS() : {},
          valueSrc: valueSrc ? valueSrc.toJS() : null,
          value: value2 ? value2.toJS() : null,
          valueError: valueError ? valueError.toJS() : null,
          fieldError: fieldError ? fieldError : null
        };
      };
      var oldSerialized = serializeRule();
      if (!id2 && itemId) {
        id2 = itemId;
        item = item.set("id", id2);
        meta.sanitized = true;
      }
      var fieldDefinition = field ? getFieldConfig$b(config2, field) : null;
      if (field && !fieldDefinition) {
        _addError(meta, item, path, {
          key: NO_CONFIG_FOR_FIELD,
          args: {
            field
          },
          side: "lhs",
          fixed: removeIncompleteRules || removeEmptyRules
        });
        field = null;
      }
      if (field == null && !isCase) {
        properties = ["operator", "operatorOptions", "valueSrc", "value", "valueError", "fieldError", "field"].reduce(function(map2, key) {
          return map2["delete"](key);
        }, properties);
        operator = null;
      }
      if (!fieldSrc && field && !isCase) {
        fieldSrc = getFieldSrc(field);
        properties = properties.set("fieldSrc", fieldSrc);
      }
      if (operator === "range_between" || operator === "range_not_between") {
        operator = operator === "range_between" ? "between" : "not_between";
        properties = properties.set("operator", operator);
      }
      var operatorDefinition = operator ? getOperatorConfig$4(config2, operator, field) : null;
      if (operator && !operatorDefinition) {
        _addError(meta, item, path, {
          key: NO_CONFIG_FOR_OPERATOR,
          args: {
            operator
          },
          side: "op",
          fixed: removeIncompleteRules || removeEmptyRules
        });
        operator = null;
      }
      var availOps = field ? getOperatorsForField(config2, field) : [];
      if (field && !isCase) {
        if (!(availOps !== null && availOps !== void 0 && availOps.length)) {
          _addError(meta, item, path, {
            key: UNSUPPORTED_FIELD_TYPE,
            args: {
              field
            },
            side: "lhs",
            fixed: removeIncompleteRules || removeEmptyRules
          });
          operator = null;
        } else if (operator && availOps.indexOf(operator) == -1) {
          if (operator === "is_empty" || operator === "is_not_empty") {
            operator = operator === "is_empty" ? "is_null" : "is_not_null";
            properties = properties.set("operator", operator);
          } else {
            _addError(meta, item, path, {
              key: UNSUPPORTED_OPERATOR_FOR_FIELD,
              args: {
                operator,
                field
              },
              side: "lhs",
              fixed: removeIncompleteRules || removeEmptyRules
            });
            operator = null;
          }
        }
      }
      if (operator == null && !isCase) {
        properties = ["operatorOptions", "valueSrc", "value", "valueError"].reduce(function(map2, key) {
          return map2["delete"](key);
        }, properties);
      }
      operatorOptions = properties.get("operatorOptions");
      if (!operator || operatorOptions && !operatorDefinition.options) {
        operatorOptions = null;
        properties = properties["delete"]("operatorOptions");
      } else if (operator && !operatorOptions && operatorDefinition.options) {
        operatorOptions = defaultOperatorOptions(config2, operator, field);
        properties = properties.set("operatorOptions", operatorOptions);
      }
      valueSrc = properties.get("valueSrc");
      value2 = properties.get("value");
      var isEndValue = true;
      var _getNewValueForFieldO = getNewValueForFieldOp(config2, oldConfig, properties, field, operator, null, canFix, isEndValue), newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueError = _getNewValueForFieldO.newValueError, validationErrors = _getNewValueForFieldO.validationErrors, newFieldError = _getNewValueForFieldO.newFieldError, fixedField = _getNewValueForFieldO.fixedField;
      value2 = newValue;
      valueSrc = newValueSrc;
      valueError = newValueError;
      fieldError = newFieldError;
      field = fixedField;
      properties = properties.set("field", field);
      properties = properties.set("value", value2);
      properties = properties.set("valueSrc", valueSrc);
      if (showErrorMessage) {
        properties = properties.set("valueError", valueError).set("fieldError", fieldError);
      } else {
        properties = properties["delete"]("valueError")["delete"]("fieldError");
      }
      var newSerialized = serializeRule();
      var hasBeenSanitized = !deepEqual(oldSerialized, newSerialized);
      var compl = whatRulePropertiesAreCompleted(properties.toObject(), config2);
      var isCompleted = isCase ? compl.parts.value : compl.score >= 3;
      if (hasBeenSanitized) {
        meta.sanitized = true;
        item = item.set("properties", properties);
      }
      validationErrors === null || validationErrors === void 0 || validationErrors.map(function(e2) {
        return _addError(meta, item, path, e2);
      });
      if (!isCompleted) {
        if (isCase) ;
        else {
          var shoudlRemoveRule = !compl.score ? removeEmptyRules : removeIncompleteRules;
          var incError = {
            key: INCOMPLETE_RULE,
            args: {}
          };
          if (!compl.parts.field) {
            incError.key = INCOMPLETE_LHS;
            incError.side = "lhs";
          } else if (!compl.parts.value) {
            var _newSerialized$valueS, _newSerialized$valueS2, _oldSerialized$valueS, _newSerialized$value;
            incError.key = INCOMPLETE_RHS;
            incError.side = "rhs";
            if ((_newSerialized$valueS = newSerialized.valueSrc) !== null && _newSerialized$valueS !== void 0 && _newSerialized$valueS[0] && ((_newSerialized$valueS2 = newSerialized.valueSrc) === null || _newSerialized$valueS2 === void 0 ? void 0 : _newSerialized$valueS2[0]) != ((_oldSerialized$valueS = oldSerialized.valueSrc) === null || _oldSerialized$valueS === void 0 ? void 0 : _oldSerialized$valueS[0]) && ((_newSerialized$value = newSerialized.value) === null || _newSerialized$value === void 0 ? void 0 : _newSerialized$value[0]) != void 0) {
              incError.key = INVALID_VALUE_SRC;
              incError.args = {
                valueSrcs: newSerialized.valueSrc
              };
            }
          }
          incError.fixed = shoudlRemoveRule;
          _addError(meta, item, path, incError);
          if (shoudlRemoveRule) {
            _setErrorsAsFixed(meta, item);
            item = void 0;
          }
        }
      }
      return item;
    }
    var validateValue = function validateValue2(config2, leftField, field, operator, value2, valueType, valueSrc, asyncListValues) {
      var canFix = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var isEndValue = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      var canDropArgs = arguments.length > 10 && arguments[10] !== void 0 ? arguments[10] : false;
      var allErrors = [];
      var fixedValue = value2;
      if (value2 != null) {
        var _allErrors2, _allErrors3, _allErrors4, _allErrors5;
        if (valueSrc === "field") {
          var _validateFieldValue = validateFieldValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2, operator, canFix, isEndValue);
          var _validateFieldValue2 = _slicedToArray(_validateFieldValue, 2);
          fixedValue = _validateFieldValue2[0];
          allErrors = _validateFieldValue2[1];
        } else if (valueSrc === "func") {
          var _validateFuncValue = validateFuncValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2, operator, canFix, isEndValue, canDropArgs);
          var _validateFuncValue2 = _slicedToArray(_validateFuncValue, 2);
          fixedValue = _validateFuncValue2[0];
          allErrors = _validateFuncValue2[1];
        } else if (valueSrc === "value" || !valueSrc) {
          var _validateNormalValue = validateNormalValue(field, value2, valueSrc, valueType, asyncListValues, config2, operator, canFix, isEndValue);
          var _validateNormalValue2 = _slicedToArray(_validateNormalValue, 2);
          fixedValue = _validateNormalValue2[0];
          allErrors = _validateNormalValue2[1];
        }
        var fixedAllErrors = !((_allErrors2 = allErrors) !== null && _allErrors2 !== void 0 && _allErrors2.find(function(e2) {
          return !e2.fixed;
        }));
        var shouldCallValidateFn = !!field && !["field", "func"].includes(valueSrc) && (!((_allErrors3 = allErrors) !== null && _allErrors3 !== void 0 && _allErrors3.length) || fixedAllErrors);
        if (shouldCallValidateFn) {
          var w2 = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var operatorDefinition = operator ? getOperatorConfig$4(config2, operator, field) : null;
          var fieldWidgetDefinition = getFieldWidgetConfig$3(config2, field, operator, w2, valueSrc, {
            forExport: true
          });
          var rightFieldDefinition = valueSrc === "field" ? getFieldConfig$b(config2, value2) : null;
          var fieldSettings = fieldWidgetDefinition;
          var fn = fieldWidgetDefinition.validateValue;
          if (typeof fn === "function") {
            var args = [fixedValue, fieldSettings, operator, operatorDefinition];
            if (valueSrc === "field") args.push(rightFieldDefinition);
            var validResult = fn.call.apply(fn, [config2.ctx].concat(args));
            if (_typeof$1(validResult) === "object" && validResult !== null && !Array.isArray(validResult)) {
              var _validResult$error;
              var newError;
              if ((_validResult$error = validResult.error) !== null && _validResult$error !== void 0 && _validResult$error.key) {
                newError = _objectSpread$s({}, validResult.error);
              } else {
                newError = {
                  key: validResult.error,
                  args: null
                };
              }
              if (validResult.fixedValue !== void 0 && canFix) {
                newError.fixed = true;
                newError.fixedFrom = fixedValue;
                newError.fixedTo = validResult.fixedValue;
                fixedValue = validResult.fixedValue;
              }
              allErrors.push(newError);
            } else if (typeof validResult === "boolean") {
              if (validResult == false) {
                allErrors.push({
                  key: INVALID_VALUE,
                  args: {}
                });
              }
            } else if (typeof validResult === "string") {
              allErrors.push({
                key: validResult,
                args: null
              });
            }
          }
        }
        fixedAllErrors = !((_allErrors4 = allErrors) !== null && _allErrors4 !== void 0 && _allErrors4.find(function(e2) {
          return !e2.fixed;
        }));
        if ((_allErrors5 = allErrors) !== null && _allErrors5 !== void 0 && _allErrors5.length && !fixedAllErrors && canFix) {
          var fieldConfig = getFieldConfig$b(config2, field);
          var _fieldSettings = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.fieldSettings;
          var defaultValue = _fieldSettings === null || _fieldSettings === void 0 ? void 0 : _fieldSettings.defaultValue;
          if (defaultValue !== void 0) {
            var lastError = allErrors[allErrors.length - 1];
            lastError.fixed = true;
            lastError.fixedFrom = fixedValue;
            lastError.fixedTo = defaultValue;
            fixedValue = defaultValue;
            allErrors.map(function(e2) {
              e2.fixed = true;
            });
          }
        }
      }
      return [fixedValue, allErrors];
    };
    var validateValueInList = function validateValueInList2(value2, listValues2, canFix, isEndValue, removeInvalidMultiSelectValuesOnLoad) {
      var values = Immutable.List.isList(value2) ? value2.toJS() : value2 instanceof Array ? _toConsumableArray(value2) : void 0;
      var fixedValue = value2;
      var allErrors = [];
      if (values) {
        var _values$reduce = values.reduce(function(_ref2, val) {
          var _ref3 = _slicedToArray(_ref2, 2), goodVals = _ref3[0], badVals = _ref3[1];
          var vv2 = getItemInListValues(listValues2, val);
          if (vv2 == void 0) {
            return [goodVals, [].concat(_toConsumableArray(badVals), [val])];
          } else {
            return [[].concat(_toConsumableArray(goodVals), [vv2.value]), badVals];
          }
        }, [[], []]), _values$reduce2 = _slicedToArray(_values$reduce, 2), goodValues = _values$reduce2[0], badValues = _values$reduce2[1];
        var needFix = badValues.length > 0;
        canFix = canFix || removeInvalidMultiSelectValuesOnLoad === true;
        fixedValue = canFix && needFix ? goodValues : value2;
        if (badValues.length) {
          var fixed = canFix && needFix;
          allErrors.push({
            key: BAD_MULTISELECT_VALUES,
            args: {
              badValues,
              count: badValues.length
            },
            fixed,
            fixedFrom: fixed ? values : void 0,
            fixedTo: fixed ? fixedValue : void 0
          });
        }
        return [fixedValue, allErrors];
      } else {
        var vv = getItemInListValues(listValues2, value2);
        if (vv == void 0) {
          fixedValue = canFix ? null : value2;
          allErrors.push({
            key: BAD_SELECT_VALUE,
            args: {
              value: value2
            },
            fixed: canFix,
            fixedFrom: canFix ? value2 : void 0,
            fixedTo: canFix ? fixedValue : void 0
          });
        } else {
          fixedValue = vv.value;
        }
        return [fixedValue, allErrors];
      }
    };
    var validateNormalValue = function validateNormalValue2(field, value2, valueSrc, valueType, asyncListValues, config2) {
      var operator = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var canFix = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      var isEndValue = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var allErrors = [];
      var fixedValue = value2;
      if (field) {
        var fieldConfig = getFieldConfig$b(config2, field);
        var w2 = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var wConfig = config2.widgets[w2];
        var wType = wConfig === null || wConfig === void 0 ? void 0 : wConfig.type;
        var jsType = wConfig === null || wConfig === void 0 ? void 0 : wConfig.jsType;
        var fieldSettings = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.fieldSettings;
        var listValues2 = (fieldSettings === null || fieldSettings === void 0 ? void 0 : fieldSettings.treeValues) || (fieldSettings === null || fieldSettings === void 0 ? void 0 : fieldSettings.listValues);
        var isAsyncListValues = !!(fieldSettings !== null && fieldSettings !== void 0 && fieldSettings.asyncFetch);
        var canSkipTypeCheck = listValues2 || isAsyncListValues;
        if (valueType && wType && valueType != wType) {
          allErrors.push({
            key: INCORRECT_VALUE_TYPE,
            args: {
              wType,
              valueType
            }
          });
          return [value2, allErrors];
        }
        if (jsType && !isTypeOf(value2, jsType) && !canSkipTypeCheck) {
          allErrors.push({
            key: INCORRECT_VALUE_JS_TYPE,
            args: {
              jsType,
              valueTypeof: typeOf(value2)
            }
          });
          return [value2, allErrors];
        }
        if (fieldSettings) {
          var realListValues = asyncListValues || listValues2;
          if (realListValues && !fieldSettings.allowCustomValues && w2 !== "case_value") {
            var _validateValueInList = validateValueInList(value2, realListValues, canFix, isEndValue, config2.settings.removeInvalidMultiSelectValuesOnLoad);
            var _validateValueInList2 = _slicedToArray(_validateValueInList, 2);
            fixedValue = _validateValueInList2[0];
            allErrors = _validateValueInList2[1];
          }
          if (fieldSettings.maxLength > 0 && value2 != null && String(value2).length > fieldSettings.maxLength) {
            fixedValue = canFix ? String(value2).substring(0, fieldSettings.maxLength) : value2;
            allErrors.push({
              key: VALUE_LENGTH_CONSTRAINT_FAIL,
              args: {
                value: value2,
                length: String(value2).length,
                fieldSettings
              },
              fixed: canFix,
              fixedFrom: canFix ? value2 : void 0,
              fixedTo: canFix ? fixedValue : void 0
            });
          }
          var minMaxContext = fieldSettings.min != void 0 && fieldSettings.max != void 0 ? _CONTEXT_MIN_MAX : void 0;
          if (fieldSettings.min != null && value2 < fieldSettings.min) {
            fixedValue = canFix ? fieldSettings.min : value2;
            allErrors.push({
              key: VALUE_MIN_CONSTRAINT_FAIL,
              args: {
                value: value2,
                fieldSettings,
                context: minMaxContext
              },
              fixed: canFix,
              fixedFrom: canFix ? value2 : void 0,
              fixedTo: canFix ? fixedValue : void 0
            });
          }
          if (fieldSettings.max != null && value2 > fieldSettings.max) {
            fixedValue = canFix ? fieldSettings.max : value2;
            allErrors.push({
              key: VALUE_MAX_CONSTRAINT_FAIL,
              args: {
                value: value2,
                fieldSettings,
                context: minMaxContext
              },
              fixed: canFix,
              fixedFrom: canFix ? value2 : void 0,
              fixedTo: canFix ? fixedValue : void 0
            });
          }
        }
      }
      return [fixedValue, allErrors];
    };
    var validateFieldValue = function validateFieldValue2(leftField, field, value2, _valueSrc, valueType, asyncListValues, config2) {
      var operator = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      var allErrors = [];
      var _config$settings = config2.settings, fieldSeparator = _config$settings.fieldSeparator, canCompareFieldWithField = _config$settings.canCompareFieldWithField;
      var isFuncArg = _typeof$1(field) == "object" && (field === null || field === void 0 ? void 0 : field._isFuncArg);
      var leftFieldStr = Array.isArray(leftField) ? leftField.join(fieldSeparator) : leftField;
      var leftFieldConfig = getFieldConfig$b(config2, leftField);
      var rightFieldStr = Array.isArray(value2) ? value2.join(fieldSeparator) : value2;
      var rightFieldConfig = getFieldConfig$b(config2, value2);
      if (!rightFieldConfig) {
        allErrors.push({
          key: NO_CONFIG_FOR_FIELD_VALUE,
          args: {
            field: rightFieldStr
          }
        });
        return [value2, allErrors];
      }
      if (leftField && rightFieldStr === leftFieldStr && !isFuncArg) {
        allErrors.push({
          key: CANT_COMPARE_FIELD_WITH_ITSELF,
          args: {
            field: leftFieldStr
          }
        });
        return [value2, allErrors];
      }
      if (valueType && valueType != rightFieldConfig.type) {
        allErrors.push({
          key: INCORRECT_FIELD_TYPE,
          args: {
            field: rightFieldStr,
            type: rightFieldConfig.type,
            expected: valueType
          }
        });
        return [value2, allErrors];
      }
      if (leftField && !isFuncArg && canCompareFieldWithField) {
        var canUse = canCompareFieldWithField(leftFieldStr, leftFieldConfig, rightFieldStr, rightFieldConfig, operator);
        if (!canUse) {
          allErrors.push({
            key: CANT_COMPARE_FIELD_WITH_FIELD,
            args: {
              leftField: leftFieldStr,
              rightField: rightFieldStr
            }
          });
          return [value2, allErrors];
        }
      }
      return [value2];
    };
    var validateFuncValue = function validateFuncValue2(leftField, field, value2, _valueSrc, valueType, asyncListValues, config2) {
      var _value$get, _funcConfig$label;
      var operator = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      var canFix = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var isEndValue = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      var canDropArgs = arguments.length > 10 && arguments[10] !== void 0 ? arguments[10] : false;
      var fixedValue = value2;
      var allErrors = [];
      if (!value2) {
        return [value2];
      }
      var funcKey = (_value$get = value2.get) === null || _value$get === void 0 ? void 0 : _value$get.call(value2, "func");
      if (!funcKey) {
        return [value2];
      }
      var fieldDef = getFieldConfig$b(config2, field);
      if (fieldDef !== null && fieldDef !== void 0 && fieldDef.funcs && !fieldDef.funcs.includes(funcKey)) {
        allErrors.push({
          key: UNSUPPORTED_FUNCTION_FOR_FIELD,
          args: {
            funcKey,
            field
          }
        });
        return [value2, allErrors];
      }
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) {
        allErrors.push({
          key: NO_CONFIG_FOR_FUNCTION,
          args: {
            funcKey
          }
        });
        return [value2, allErrors];
      }
      var funcName = (_funcConfig$label = funcConfig.label) !== null && _funcConfig$label !== void 0 ? _funcConfig$label : funcKey;
      if (valueType && funcConfig.returnType != valueType) {
        allErrors.push({
          key: INCORRECT_FUNCTION_RETURN_TYPE,
          args: {
            funcKey,
            funcName,
            returnType: funcConfig.returnType,
            valueType
          }
        });
        return [value2, allErrors];
      }
      canFix = canFix || canDropArgs;
      for (var argKey in funcConfig.args) {
        var _argDef$label;
        var argConfig = funcConfig.args[argKey];
        var args = fixedValue.get("args");
        var argVal = args ? args.get(argKey) : void 0;
        var argDef = getFieldConfig$b(config2, argConfig);
        var argName = (_argDef$label = argDef === null || argDef === void 0 ? void 0 : argDef.label) !== null && _argDef$label !== void 0 ? _argDef$label : argKey;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        if (argValue !== void 0) {
          var _validateValue = validateValue(config2, leftField, argDef, operator, argValue, argConfig.type, argValueSrc, asyncListValues, canFix, isEndValue, canDropArgs), _validateValue2 = _slicedToArray(_validateValue, 2), fixedArgVal = _validateValue2[0], argErrors = _validateValue2[1];
          var isValid2 = !(argErrors !== null && argErrors !== void 0 && argErrors.length);
          var willFix = canFix && fixedArgVal !== argValue;
          var canDropOrReset = canFix && !isValid2 && !willFix && (isEndValue || canDropArgs);
          if (willFix) {
            fixedValue = fixedValue.setIn(["args", argKey, "value"], fixedArgVal);
          }
          if (canDropOrReset) {
            fixedValue = fixedValue.deleteIn(["args", argKey]);
            fixedValue = setFuncDefaultArg(config2, fixedValue, funcConfig, argKey);
          }
          if (!isValid2) {
            var _ref4, _argErrors$find;
            var firstError = (_ref4 = (_argErrors$find = argErrors.find(function(e2) {
              return !e2.fixed && !e2.ignore;
            })) !== null && _argErrors$find !== void 0 ? _argErrors$find : argErrors.find(function(e2) {
              return !e2.fixed;
            })) !== null && _ref4 !== void 0 ? _ref4 : argErrors[0];
            var fixed = willFix || canDropOrReset;
            var ignore = argErrors.filter(function(e2) {
              return !e2.ignore;
            }).length === 0;
            if (firstError) {
              var argValidationError = translateValidation(firstError);
              allErrors.push({
                key: INVALID_FUNC_ARG_VALUE,
                args: {
                  funcKey,
                  funcName,
                  argKey,
                  argName,
                  argValidationError,
                  // more meta
                  argErrors
                },
                ignore,
                fixed,
                fixedFrom: fixed ? argValue : void 0,
                fixedTo: fixed ? willFix ? fixedArgVal : argConfig.defaultValue : void 0
              });
            }
          }
        } else if (!argConfig.isOptional && (isEndValue || canDropArgs)) {
          var canReset = canFix && argConfig.defaultValue !== void 0 && (isEndValue || canDropArgs);
          var canAddError = isEndValue;
          if (canAddError) {
            allErrors.push({
              key: REQUIRED_FUNCTION_ARG,
              args: {
                funcKey,
                funcName,
                argKey,
                argName
              },
              fixed: canReset,
              fixedTo: canReset ? argConfig.defaultValue : void 0,
              ignore: !canReset
              // tip: don't show error message in UI about missing arg after validation API call
            });
          }
          if (canReset) {
            fixedValue = fixedValue.deleteIn(["args", argKey]);
            fixedValue = setFuncDefaultArg(config2, fixedValue, funcConfig, argKey);
          }
        }
      }
      return [fixedValue, allErrors];
    };
    var validateRange = function validateRange2(config2, field, operator, values, valueSrcs) {
      var operatorConfig = getOperatorConfig$4(config2, operator, field);
      var operatorCardinality = operator ? getOpCardinality$1(operatorConfig) : null;
      var valueSrcsArr = valueSrcs.toJS ? valueSrcs.toJS() : valueSrcs;
      var valuesArr = values.toJS ? values.toJS() : values;
      var areValueSrcsPureValues = valueSrcsArr.filter(function(vs) {
        return vs == "value" || vs == null;
      }).length == operatorCardinality;
      var rangeError;
      if (operatorConfig !== null && operatorConfig !== void 0 && operatorConfig.validateValues && areValueSrcsPureValues) {
        var valueSrc = valueSrcsArr[0];
        var w2 = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDefinition = getFieldWidgetConfig$3(config2, field, operator, w2, valueSrc);
        var jsValues = fieldWidgetDefinition !== null && fieldWidgetDefinition !== void 0 && fieldWidgetDefinition.toJS ? valuesArr.map(function(v2) {
          var jsVal = fieldWidgetDefinition.toJS.call(config2.ctx, v2, fieldWidgetDefinition);
          if (jsVal instanceof Date) {
            jsVal = jsVal.getTime();
          }
          return jsVal;
        }) : valuesArr;
        var validResult = operatorConfig.validateValues(jsValues);
        if (typeof validResult === "boolean") {
          if (validResult == false) {
            rangeError = {
              key: INVALID_RANGE,
              args: {
                jsValues,
                values: valuesArr
              }
            };
          }
        }
      }
      return rangeError;
    };
    var getNewValueForFieldOp = function getNewValueForFieldOp2(config2) {
      var _currentField, _currentField$get, _newField, _newField$get;
      var oldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var current = arguments.length > 2 ? arguments[2] : void 0;
      var newField = arguments.length > 3 ? arguments[3] : void 0;
      var newOperator = arguments.length > 4 ? arguments[4] : void 0;
      var changedProp = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var canFix = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : false;
      var isEndValue = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      var canDropArgs = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      if (!oldConfig) oldConfig = config2;
      var _config$settings2 = config2.settings, keepInputOnChangeFieldSrc = _config$settings2.keepInputOnChangeFieldSrc, convertableWidgets = _config$settings2.convertableWidgets, clearValueOnChangeField = _config$settings2.clearValueOnChangeField, clearValueOnChangeOp = _config$settings2.clearValueOnChangeOp;
      var isCase = newField == "!case_value";
      var currentField = current.get("field");
      if (!currentField && isCase) {
        currentField = newField;
      }
      var currentFieldType = current.get("fieldType");
      var currentFieldSrc = current.get("fieldSrc");
      var currentOperator = current.get("operator");
      var currentValue = current.get("value");
      var currentValueSrc = current.get("valueSrc", new Immutable.List());
      var currentValueType = current.get("valueType", new Immutable.List());
      var currentValueError = current.get("valueError", new Immutable.List());
      var asyncListValues = current.get("asyncListValues");
      var isOkWithoutOperator = isCase;
      var currentOperatorConfig = getOperatorConfig$4(oldConfig, currentOperator);
      var newOperatorConfig = getOperatorConfig$4(config2, newOperator, newField);
      var currentOperatorCardinality = isCase ? 1 : currentOperator ? getOpCardinality$1(currentOperatorConfig) : null;
      var operatorCardinality = isCase ? 1 : newOperator ? getOpCardinality$1(newOperatorConfig) : null;
      var currentFieldConfig = getFieldConfig$b(oldConfig, currentField);
      var newFieldConfig = getFieldConfig$b(config2, newField);
      var isOkWithoutField = !currentField && currentFieldType && keepInputOnChangeFieldSrc;
      var currentType = (currentFieldConfig === null || currentFieldConfig === void 0 ? void 0 : currentFieldConfig.type) || currentFieldType;
      var newType = (newFieldConfig === null || newFieldConfig === void 0 ? void 0 : newFieldConfig.type) || !newField && isOkWithoutField && currentType;
      var currentListValuesType = currentFieldConfig === null || currentFieldConfig === void 0 ? void 0 : currentFieldConfig.listValuesType;
      var newListValuesType = newFieldConfig === null || newFieldConfig === void 0 ? void 0 : newFieldConfig.listValuesType;
      var currentFieldSimpleValue = ((_currentField = currentField) === null || _currentField === void 0 || (_currentField$get = _currentField.get) === null || _currentField$get === void 0 ? void 0 : _currentField$get.call(_currentField, "func")) || currentField;
      var newFieldSimpleValue = ((_newField = newField) === null || _newField === void 0 || (_newField$get = _newField.get) === null || _newField$get === void 0 ? void 0 : _newField$get.call(_newField, "func")) || newField;
      var hasFieldChanged = newFieldSimpleValue != currentFieldSimpleValue;
      var validationErrors = [];
      var canReuseValue = (currentField || isOkWithoutField) && (currentOperator && newOperator || isOkWithoutOperator) && currentValue != void 0;
      if (!(currentType && newType && currentType == newType) || changedProp === "field" && hasFieldChanged && clearValueOnChangeField || changedProp === "operator" && clearValueOnChangeOp) {
        canReuseValue = false;
      }
      if (hasFieldChanged && selectTypes.includes(newType)) {
        if (newListValuesType && newListValuesType === currentListValuesType) ;
        else {
          canReuseValue = false;
        }
      }
      if (!isOkWithoutOperator && (!(currentValue !== null && currentValue !== void 0 && currentValue.size) && operatorCardinality || currentValue !== null && currentValue !== void 0 && currentValue.size && !operatorCardinality)) {
        canReuseValue = false;
      }
      var newFieldError;
      if (currentFieldSrc === "func" && newField) {
        var _validateValue3 = validateValue(config2, null, null, newOperator, newField, newType, currentFieldSrc, asyncListValues, canFix, isEndValue, canDropArgs), _validateValue4 = _slicedToArray(_validateValue3, 2), fixedField = _validateValue4[0], fieldErrors = _validateValue4[1];
        var isValid2 = !(fieldErrors !== null && fieldErrors !== void 0 && fieldErrors.length);
        var willFix = fixedField !== newField;
        var willFixAllErrors = !isValid2 && willFix && !fieldErrors.find(function(e2) {
          return !e2.fixed;
        });
        var willRevert = canFix && !isValid2 && !willFixAllErrors && !!changedProp && newField !== currentField;
        var willDrop = false;
        if (willDrop) {
          newField = null;
        } else if (willRevert) {
          newField = currentField;
        } else if (willFix) {
          newField = fixedField;
        }
        if (!isValid2) {
          var showError = !isValid2 && !willFixAllErrors && !willDrop && !willRevert;
          var firstError = fieldErrors.find(function(e2) {
            return !e2.fixed && !e2.ignore;
          });
          if (showError && firstError) {
            newFieldError = translateValidation(firstError);
          }
          fieldErrors.map(function(e2) {
            return validationErrors.push(_objectSpread$s(_objectSpread$s({
              side: "lhs"
            }, e2), {}, {
              fixed: e2.fixed || willRevert || willDrop
            }));
          });
        }
      }
      for (var i = 0; i < operatorCardinality; i++) {
        var vs = currentValueSrc.get(i) || null;
        var currentWidget = getWidgetForFieldOp$3(oldConfig, currentField, currentOperator, vs);
        var newWidget = getWidgetForFieldOp$3(config2, newField, newOperator, vs);
        var currentValueWidget = vs === "value" ? currentWidget : getWidgetForFieldOp$3(oldConfig, currentField, currentOperator, "value");
        var newValueWidget = vs === "value" ? newWidget : getWidgetForFieldOp$3(config2, newField, newOperator, "value");
        var canReuseWidget = newValueWidget == currentValueWidget || (convertableWidgets[currentValueWidget] || []).includes(newValueWidget) || !currentValueWidget && isOkWithoutField;
        if (!canReuseWidget) {
          canReuseValue = false;
        }
      }
      if (currentOperator != newOperator && [currentOperator, newOperator].includes("proximity")) {
        canReuseValue = false;
      }
      var firstValueSrc = currentValueSrc.first();
      var firstWidgetConfig = getFieldWidgetConfig$3(config2, newField, newOperator, null, firstValueSrc);
      var valueSources = getValueSourcesForFieldOp$1(config2, newField, newOperator, null);
      if (!newField && isOkWithoutField) {
        valueSources = Object.keys(config2.settings.valueSourcesInfo);
      }
      var defaultValueSrc = valueSources[0];
      var defaultValueType;
      if (operatorCardinality === 1 && firstWidgetConfig && firstWidgetConfig.type !== void 0) {
        defaultValueType = firstWidgetConfig.type;
      } else if (operatorCardinality === 1 && newFieldConfig && newFieldConfig.type !== void 0) {
        defaultValueType = newFieldConfig.type === "!group" ? "number" : newFieldConfig.type;
      }
      var canExtendValueToRange = canReuseValue && changedProp === "operator" && currentOperatorCardinality === 1 && operatorCardinality === 2;
      var valueFixes = [];
      var valueSrcFixes = [];
      var valueTypeFixes = [];
      var valueErrors = Array.from({
        length: operatorCardinality
      }, function() {
        return null;
      });
      if (canReuseValue) {
        var _loop = function _loop2(_i32) {
          var v2 = currentValue.get(_i32);
          var vType = currentValueType.get(_i32) || null;
          var vSrc = currentValueSrc.get(_i32) || null;
          if (canExtendValueToRange && _i32 === 1) {
            v2 = valueFixes[0] !== void 0 ? valueFixes[0] : currentValue.get(0);
            valueFixes[_i32] = v2;
            vType = currentValueType.get(0) || null;
            vSrc = currentValueSrc.get(0) || null;
          }
          var isValidSrc2 = vSrc ? valueSources.find(function(v3) {
            return v3 == vSrc;
          }) !== void 0 : true;
          var _validateValue5 = validateValue(config2, newField, newField, newOperator, v2, vType, vSrc, asyncListValues, canFix, isEndValue, canDropArgs), _validateValue6 = _slicedToArray(_validateValue5, 2), fixedValue = _validateValue6[0], allErrors = _validateValue6[1];
          var isValid3 = !(allErrors !== null && allErrors !== void 0 && allErrors.length);
          var willFix2 = fixedValue !== v2;
          var willFixAllErrors2 = !isValid3 && willFix2 && !(allErrors !== null && allErrors !== void 0 && allErrors.find(function(e2) {
            return !e2.fixed;
          }));
          var allErrorsHandled = !(allErrors !== null && allErrors !== void 0 && allErrors.find(function(e2) {
            return !e2.fixed && !e2.ignore;
          }));
          var willDrop2 = !isValidSrc2 || canFix && !isValid3 && !willFixAllErrors2 && (!allErrorsHandled || hasFieldChanged);
          if (!isValid3) {
            allErrors === null || allErrors === void 0 || allErrors.map(function(e2) {
              return validationErrors.push(_objectSpread$s(_objectSpread$s({
                side: "rhs",
                delta: _i32
              }, e2), {}, {
                fixed: e2.fixed || willDrop2
              }));
            });
          }
          if (willDrop2) {
            valueFixes[_i32] = null;
            if (_i32 === 0) {
              delete valueFixes[1];
            }
          }
          var showError2 = !isValid3 && !willFix2;
          var firstError2 = allErrors === null || allErrors === void 0 ? void 0 : allErrors.find(function(e2) {
            return !e2.fixed && !e2.ignore;
          });
          if (showError2 && firstError2) {
            valueErrors[_i32] = translateValidation(firstError2);
          }
          if (willFix2) {
            valueFixes[_i32] = fixedValue;
          }
          if (canExtendValueToRange && _i32 === 0 && !isValid3 && !willFix2) {
            canExtendValueToRange = false;
          }
          if (canExtendValueToRange && _i32 === 0 && ["func", "field"].includes(vSrc)) {
            canExtendValueToRange = false;
          }
        };
        for (var _i3 = 0; _i3 < operatorCardinality; _i3++) {
          _loop(_i3);
        }
      }
      if (!canReuseValue) {
        for (var _i4 = 0; _i4 < operatorCardinality; _i4++) {
          if (operatorCardinality === 1) {
            var _newFieldConfig$field;
            var dv = getFirstDefined([newFieldConfig === null || newFieldConfig === void 0 ? void 0 : newFieldConfig.defaultValue, newFieldConfig === null || newFieldConfig === void 0 || (_newFieldConfig$field = newFieldConfig.fieldSettings) === null || _newFieldConfig$field === void 0 ? void 0 : _newFieldConfig$field.defaultValue, firstWidgetConfig === null || firstWidgetConfig === void 0 ? void 0 : firstWidgetConfig.defaultValue]);
            valueFixes[_i4] = dv;
            if (dv !== null && dv !== void 0 && dv.func) {
              valueSrcFixes[_i4] = "func";
            }
          }
        }
      }
      for (var _i5 = 0; _i5 < operatorCardinality; _i5++) {
        var _vs = canReuseValue && currentValueSrc.get(_i5) || null;
        var vt = canReuseValue && currentValueType.get(_i5) || null;
        if (canReuseValue && canExtendValueToRange && _i5 === 1) {
          var _valueSrcFixes$_i, _valueTypeFixes$_i;
          _vs = (_valueSrcFixes$_i = valueSrcFixes[_i5]) !== null && _valueSrcFixes$_i !== void 0 ? _valueSrcFixes$_i : currentValueSrc.get(0);
          vt = (_valueTypeFixes$_i = valueTypeFixes[_i5]) !== null && _valueTypeFixes$_i !== void 0 ? _valueTypeFixes$_i : currentValueType.get(0);
          valueSrcFixes[_i5] = _vs;
          valueTypeFixes[_i5] = vt;
        }
        var isValidSrc = valueSources.includes(_vs);
        if (!isValidSrc) {
          valueSrcFixes[_i5] = defaultValueSrc;
        }
        if (!vt) {
          valueTypeFixes[_i5] = defaultValueType;
        }
      }
      var newValue = currentValue;
      if (valueFixes.length > 0 || !canReuseValue || operatorCardinality < currentOperatorCardinality) {
        newValue = new Immutable.List(Array.from({
          length: operatorCardinality
        }, function(_ignore, i2) {
          return valueFixes[i2] !== void 0 ? valueFixes[i2] : canReuseValue ? currentValue.get(i2) : void 0;
        }));
      }
      var newValueSrc = currentValueSrc;
      if (valueSrcFixes.length > 0 || !canReuseValue || operatorCardinality < currentOperatorCardinality) {
        newValueSrc = new Immutable.List(Array.from({
          length: operatorCardinality
        }, function(_ignore, i2) {
          var _valueSrcFixes$i;
          return (_valueSrcFixes$i = valueSrcFixes[i2]) !== null && _valueSrcFixes$i !== void 0 ? _valueSrcFixes$i : canReuseValue && currentValueSrc.get(i2) || null;
        }));
      }
      var newValueType = currentValueType;
      if (valueTypeFixes.length > 0 || !canReuseValue || operatorCardinality < currentOperatorCardinality) {
        newValueType = new Immutable.List(Array.from({
          length: operatorCardinality
        }, function(_ignore, i2) {
          var _valueTypeFixes$i;
          return (_valueTypeFixes$i = valueTypeFixes[i2]) !== null && _valueTypeFixes$i !== void 0 ? _valueTypeFixes$i : canReuseValue && currentValueType.get(i2) || null;
        }));
      }
      var rangeErrorObj = validateRange(config2, newField, newOperator, newValue, newValueSrc);
      if (rangeErrorObj) {
        var rangeValidationError = translateValidation(rangeErrorObj);
        var _willFix = canFix && operatorCardinality >= 2;
        var badValue = newValue;
        if (_willFix) {
          valueFixes[1] = newValue.get(0);
          newValue = newValue.set(1, valueFixes[1]);
          valueErrors[1] = valueErrors[0];
        }
        var _showError = !_willFix;
        if (_showError) {
          valueErrors.push(rangeValidationError);
        }
        validationErrors.push(_objectSpread$s(_objectSpread$s({
          side: "rhs",
          delta: -1
        }, rangeErrorObj), {}, {
          fixed: _willFix,
          fixedFrom: _willFix ? [badValue.get(0), badValue.get(1)] : void 0,
          fixedTo: _willFix ? [newValue.get(0), newValue.get(1)] : void 0
        }));
      }
      var newValueError = currentValueError;
      var hasValueErrorChanged = (currentValueError === null || currentValueError === void 0 ? void 0 : currentValueError.size) !== valueErrors.length || valueErrors.filter(function(v2, i2) {
        return v2 != currentValueError.get(i2);
      }).length > 0;
      if (hasValueErrorChanged) {
        newValueError = new Immutable.List(valueErrors);
      }
      return {
        canReuseValue,
        newValue,
        newValueSrc,
        newValueType,
        operatorCardinality,
        fixedField: newField,
        newValueError,
        newFieldError,
        validationErrors
      };
    };
    const validation = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      _validateTree,
      checkTree,
      getNewValueForFieldOp,
      getTreeBadFields,
      isValidTree,
      sanitizeTree: sanitizeTree$1,
      translateValidation,
      validateAndFixTree: validateAndFixTree$1,
      validateRange,
      validateTree,
      validateValue
    }, Symbol.toStringTag, { value: "Module" }));
    var isObject$7 = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var completeFuncValue = function completeFuncValue2(value2, config2) {
      if (!value2) return void 0;
      var funcKey = value2.get("func");
      var funcConfig = funcKey && getFuncConfig$2(config2, funcKey);
      if (!funcConfig) return void 0;
      var complValue = value2;
      var tmpHasOptional = false;
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var valueSources = argConfig.valueSources, isOptional = argConfig.isOptional, defaultValue = argConfig.defaultValue;
        var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
        var args = complValue.get("args");
        var argDefaultValueSrc = filteredValueSources.length == 1 ? filteredValueSources[0] : void 0;
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = (argVal ? argVal.get("valueSrc") : void 0) || argDefaultValueSrc;
        if (argValue !== void 0) {
          var completeArgValue = completeValue(argValue, argValueSrc, config2);
          if (completeArgValue === void 0) {
            return void 0;
          } else if (completeArgValue !== argValue) {
            complValue = complValue.setIn(["args", argKey, "value"], completeArgValue);
          }
          if (tmpHasOptional) {
            return void 0;
          }
        } else if (defaultValue !== void 0 && !isObject$7(defaultValue)) {
          complValue = complValue.setIn(["args", argKey, "value"], getDefaultArgValue(argConfig));
          complValue = complValue.setIn(["args", argKey, "valueSrc"], "value");
        } else if (isOptional) {
          tmpHasOptional = true;
        } else {
          return void 0;
        }
      }
      return complValue;
    };
    var setFunc = function setFunc2(value2, funcKey, config2, canFixArgs) {
      var fieldSeparator = config2.settings.fieldSeparator;
      value2 = value2 || new Immutable.Map();
      if (Array.isArray(funcKey)) {
        funcKey = funcKey.join(fieldSeparator);
      }
      var oldFuncKey = value2.get("func");
      var oldArgs = value2.get("args");
      value2 = value2.set("func", funcKey);
      var funcConfig = funcKey && getFuncConfig$2(config2, funcKey);
      var newFuncSignature = funcKey && getFuncSignature(config2, funcKey);
      var oldFuncSignature = oldFuncKey && getFuncSignature(config2, oldFuncKey);
      var keepArgsKeys = getCompatibleArgsOnFuncChange(oldFuncSignature, newFuncSignature, oldArgs, config2, canFixArgs);
      if (keepArgsKeys.length) {
        var argsKeys = Object.keys(newFuncSignature.args);
        var deleteArgsKeys = argsKeys.filter(function(k2) {
          return !keepArgsKeys.includes(k2);
        });
        value2 = deleteArgsKeys.reduce(function(value3, k2) {
          return value3.deleteIn(["args", k2]);
        }, value2);
      } else {
        value2 = value2.set("args", new Immutable.Map());
      }
      value2 = setFuncDefaultArgs(config2, value2, funcConfig);
      return value2;
    };
    var setFuncDefaultArgs = function setFuncDefaultArgs2(config2, funcValue, funcConfig) {
      if (funcConfig) {
        for (var argKey in funcConfig.args) {
          funcValue = setFuncDefaultArg(config2, funcValue, funcConfig, argKey);
        }
      }
      return funcValue;
    };
    var setFuncDefaultArg = function setFuncDefaultArg2(config2, funcValue, funcConfig, argKey) {
      var argConfig = funcConfig.args[argKey];
      var valueSources = argConfig.valueSources, defaultValue = argConfig.defaultValue;
      var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
      var firstValueSrc = filteredValueSources.length ? filteredValueSources[0] : void 0;
      var defaultValueSrc = defaultValue ? isObject$7(defaultValue) && !!defaultValue.func ? "func" : "value" : void 0;
      var argDefaultValueSrc = defaultValueSrc || firstValueSrc;
      var hasValue = funcValue.getIn(["args", argKey]);
      if (!hasValue) {
        if (defaultValue !== void 0) {
          funcValue = funcValue.setIn(["args", argKey, "value"], getDefaultArgValue(argConfig));
        }
        if (argDefaultValueSrc) {
          funcValue = funcValue.setIn(["args", argKey, "valueSrc"], argDefaultValueSrc);
        }
      }
      return funcValue;
    };
    var getDefaultArgValue = function getDefaultArgValue2(_ref) {
      var value2 = _ref.defaultValue;
      if (isObject$7(value2) && !Immutable.Map.isMap(value2) && value2.func) {
        return Immutable.fromJS(value2, function(k2, v2) {
          return Immutable.Iterable.isIndexed(v2) ? v2.toList() : v2.toOrderedMap();
        });
      }
      return value2;
    };
    var setArgValue = function setArgValue2(value2, argKey, argVal, argConfig, config2) {
      if (value2 && value2.get("func")) {
        value2 = value2.setIn(["args", argKey, "value"], argVal);
        var valueSrc = value2.getIn(["args", argKey, "valueSrc"]);
        var valueSources = argConfig.valueSources;
        var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
        var argDefaultValueSrc = filteredValueSources.length == 1 ? filteredValueSources[0] : void 0;
        if (!argDefaultValueSrc && filteredValueSources.includes("value")) {
          argDefaultValueSrc = "value";
        }
        if (!valueSrc && argDefaultValueSrc) {
          value2 = value2.setIn(["args", argKey, "valueSrc"], argDefaultValueSrc);
        }
      }
      return value2;
    };
    var setArgValueSrc = function setArgValueSrc2(value2, argKey, argValSrc, _argConfig, _config) {
      if (value2 && value2.get("func")) {
        value2 = value2.setIn(["args", argKey], new Immutable.Map({
          valueSrc: argValSrc
        }));
      }
      return value2;
    };
    var getCompatibleArgsOnFuncChange = function getCompatibleArgsOnFuncChange2(s1, s2, argVals, config2) {
      var canFixArgs = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      if ((s1 === null || s1 === void 0 ? void 0 : s1.returnType) != (s2 === null || s2 === void 0 ? void 0 : s2.returnType)) return [];
      var keys2 = Object.keys(s2.args);
      var compatibleKeys = keys2.filter(function(k2, i) {
        var arg2 = s2.args[k2];
        var arg1 = s1.args[k2];
        Object.keys(s1.args).indexOf(k2);
        if (!arg1 && (arg2.defaultValue !== void 0 || arg2.isOptional)) {
          return true;
        }
        if ((arg1 === null || arg1 === void 0 ? void 0 : arg1.type) != arg2.type) return false;
        if (selectTypes.includes(arg2.type)) {
          if (!arg1.listValuesType || arg1.listValuesType !== arg2.listValuesType) return false;
        }
        if (argVals) {
          var _argValidErrors$filte;
          var argVal = argVals.get(k2);
          var argValue = argVal === null || argVal === void 0 ? void 0 : argVal.get("value");
          var argValueSrc = argVal === null || argVal === void 0 ? void 0 : argVal.get("valueSrc");
          if (argValueSrc && arg2.valueSources && !arg2.valueSources.includes(argValueSrc)) return false;
          var leftField = null, operator = null, argDef = arg2, asyncListValues = null, isEndValue = true;
          var _validateValue = validateValue(config2, leftField, argDef, operator, argValue, argDef.type, argValueSrc, asyncListValues, canFixArgs, isEndValue), _validateValue2 = _slicedToArray(_validateValue, 2);
          _validateValue2[0];
          var argValidErrors = _validateValue2[1];
          if (argValidErrors !== null && argValidErrors !== void 0 && (_argValidErrors$filte = argValidErrors.filter(function(e2) {
            return !e2.fixed;
          })) !== null && _argValidErrors$filte !== void 0 && _argValidErrors$filte.length) return false;
        }
        return true;
      });
      return compatibleKeys;
    };
    const funcUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      completeFuncValue,
      getCompatibleArgsOnFuncChange,
      setArgValue,
      setArgValueSrc,
      setFunc,
      setFuncDefaultArg
    }, Symbol.toStringTag, { value: "Module" }));
    var selectTypes = ["select", "multiselect", "treeselect", "treemultiselect"];
    var getOperatorsForType = function getOperatorsForType2(config2, fieldType) {
      var _config$types$fieldTy;
      return ((_config$types$fieldTy = config2.types[fieldType]) === null || _config$types$fieldTy === void 0 ? void 0 : _config$types$fieldTy.operators) || null;
    };
    var getOperatorsForField = function getOperatorsForField2(config2, field) {
      var fieldConfig = getFieldConfig$b(config2, field);
      var fieldOps = fieldConfig ? fieldConfig.operators : [];
      return fieldOps;
    };
    var getFirstOperator = function getFirstOperator2(config2, field) {
      var _fieldOps$;
      var fieldOps = getOperatorsForField(config2, field);
      return (_fieldOps$ = fieldOps === null || fieldOps === void 0 ? void 0 : fieldOps[0]) !== null && _fieldOps$ !== void 0 ? _fieldOps$ : null;
    };
    var calculateValueType = function calculateValueType2(value2, valueSrc, config2) {
      var calculatedValueType = null;
      if (value2) {
        if (valueSrc === "field") {
          var fieldConfig = getFieldConfig$b(config2, value2);
          if (fieldConfig) {
            calculatedValueType = fieldConfig.type;
          }
        } else if (valueSrc === "func") {
          var funcKey = value2.get("func");
          if (funcKey) {
            var funcConfig = getFuncConfig$2(config2, funcKey);
            if (funcConfig) {
              calculatedValueType = funcConfig.returnType || funcConfig.type;
            }
          }
        }
      }
      return calculatedValueType;
    };
    var getFuncPathLabels$1 = function getFuncPathLabels2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      return getFieldPathLabels$2(field, config2, parentField, "funcs", "subfields");
    };
    var getFieldPathLabels$2 = function getFieldPathLabels2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var fieldsKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "fields";
      var subfieldsKey = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "subfields";
      if (!field) return null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = getFieldParts$3(field, config2);
      var parentParts = getFieldParts$3(parentField, config2);
      var res = parts.slice(parentParts.length).map(function(_curr, ind, arr) {
        return arr.slice(0, ind + 1);
      }).map(function(parts2) {
        return [].concat(_toConsumableArray(parentParts), _toConsumableArray(parts2)).join(fieldSeparator);
      }).map(function(part) {
        var cnf = getFieldRawConfig(config2, part, fieldsKey, subfieldsKey);
        return cnf && cnf.label || last$2(part.split(fieldSeparator));
      }).filter(function(label) {
        return label != null;
      });
      return res;
    };
    var getFieldPartsConfigs = function getFieldPartsConfigs2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!field) return null;
      var parentFieldDef = parentField && getFieldRawConfig(config2, parentField) || null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = getFieldParts$3(field, config2);
      var isDescendant = isFieldDescendantOfField(field, parentField, config2);
      var parentParts = !isDescendant ? [] : getFieldParts$3(parentField, config2);
      return parts.slice(parentParts.length).map(function(_curr, ind, arr) {
        return arr.slice(0, ind + 1);
      }).map(function(parts2) {
        return {
          part: [].concat(_toConsumableArray(parentParts), _toConsumableArray(parts2)).join(fieldSeparator),
          key: parts2[parts2.length - 1]
        };
      }).map(function(_ref) {
        var part = _ref.part, key = _ref.key;
        var cnf = getFieldRawConfig(config2, part);
        return {
          key,
          cnf
        };
      }).map(function(_ref2, ind, arr) {
        var key = _ref2.key, cnf = _ref2.cnf;
        var parentCnf = ind > 0 ? arr[ind - 1].cnf : parentFieldDef;
        return [key, cnf, parentCnf];
      });
    };
    var getValueLabel$1 = function getValueLabel2(config2, field, operator, delta) {
      var valueSrc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var isSpecialRange = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var fieldWidgetConfig = getFieldWidgetConfig$3(config2, field, operator, null, valueSrc) || {};
      var mergedOpConfig = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = isSpecialRange ? 1 : mergedOpConfig.cardinality;
      var ret = null;
      if (cardinality > 1) {
        var valueLabels = fieldWidgetConfig.valueLabels || mergedOpConfig.valueLabels;
        if (valueLabels) ret = valueLabels[delta];
        if (ret && _typeof$1(ret) !== "object") {
          ret = {
            label: ret,
            placeholder: ret
          };
        }
        if (!ret) {
          ret = {
            label: config2.settings.valueLabel + " " + (delta + 1),
            placeholder: config2.settings.valuePlaceholder + " " + (delta + 1)
          };
        }
      } else {
        var label = fieldWidgetConfig.valueLabel;
        var placeholder = fieldWidgetConfig.valuePlaceholder;
        ret = {
          label: label || config2.settings.valueLabel,
          placeholder: placeholder || config2.settings.valuePlaceholder
        };
      }
      return ret;
    };
    function _getWidgetsAndSrcsForFieldOp(config2, field) {
      var operator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var widgets2 = [];
      var valueSrcs = [];
      if (!field) return {
        widgets: widgets2,
        valueSrcs
      };
      var fieldCacheKey = getFieldId$1(field);
      var cacheKey = fieldCacheKey ? "".concat(fieldCacheKey, "__").concat(operator, "__").concat(valueSrc) : null;
      var cached = _getFromConfigCache(config2, "_getWidgetsAndSrcsForFieldOp", cacheKey);
      if (cached) return cached;
      var isFuncArg = _typeof$1(field) === "object" && (!!field.func && !!field.arg || field._isFuncArg);
      var fieldConfig = getFieldConfig$b(config2, field);
      var opConfig = operator ? config2.operators[operator] : null;
      if (fieldConfig !== null && fieldConfig !== void 0 && fieldConfig.widgets) {
        var _loop = function _loop2() {
          var widgetConfig = fieldConfig.widgets[widget];
          if (!config2.widgets[widget]) {
            return 1;
          }
          var widgetValueSrc = config2.widgets[widget].valueSrc || "value";
          var canAdd = true;
          if (widget === "field") {
            canAdd = canAdd && filterValueSourcesForField(config2, ["field"], fieldConfig).length > 0;
          }
          if (widget === "func") {
            canAdd = canAdd && filterValueSourcesForField(config2, ["func"], fieldConfig).length > 0;
          }
          if (valueSrc === "value" && !widgetConfig.operators && !isFuncArg && field !== "!case_value") canAdd = false;
          if (widgetConfig.operators && operator) canAdd = canAdd && widgetConfig.operators.indexOf(operator) != -1;
          if (valueSrc && valueSrc != widgetValueSrc && valueSrc !== "const") canAdd = false;
          if (opConfig && opConfig.cardinality == 0 && widgetValueSrc !== "value") canAdd = false;
          if (canAdd) {
            var _fieldConfig$valueSou, _opConfig$valueSource;
            widgets2.push(widget);
            var canAddValueSrc = ((_fieldConfig$valueSou = fieldConfig.valueSources) === null || _fieldConfig$valueSou === void 0 ? void 0 : _fieldConfig$valueSou.indexOf(widgetValueSrc)) != -1;
            if ((opConfig === null || opConfig === void 0 || (_opConfig$valueSource = opConfig.valueSources) === null || _opConfig$valueSource === void 0 ? void 0 : _opConfig$valueSource.indexOf(widgetValueSrc)) == -1) canAddValueSrc = false;
            if (canAddValueSrc && !valueSrcs.find(function(v2) {
              return v2 == widgetValueSrc;
            })) valueSrcs.push(widgetValueSrc);
          }
        };
        for (var widget in fieldConfig.widgets) {
          if (_loop()) continue;
        }
      }
      var widgetWeight = function widgetWeight2(w2) {
        var wg2 = 0;
        if (fieldConfig.preferWidgets) {
          if (fieldConfig.preferWidgets.includes(w2)) wg2 += 10 - fieldConfig.preferWidgets.indexOf(w2);
        } else if (w2 == fieldConfig.mainWidget) {
          wg2 += 100;
        }
        if (w2 === "field") {
          wg2 -= 1;
        }
        if (w2 === "func") {
          wg2 -= 2;
        }
        return wg2;
      };
      widgets2.sort(function(w1, w2) {
        return widgetWeight(w2) - widgetWeight(w1);
      });
      var res = {
        widgets: widgets2,
        valueSrcs
      };
      _saveToConfigCache(config2, "_getWidgetsAndSrcsForFieldOp", cacheKey, res);
      return res;
    }
    var getWidgetsForFieldOp = function getWidgetsForFieldOp2(config2, field, operator) {
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor = _getWidgetsAndSrcsForFieldOp(config2, field, operator, valueSrc), widgets2 = _getWidgetsAndSrcsFor.widgets;
      return widgets2;
    };
    var filterValueSourcesForField = function filterValueSourcesForField2(config2, valueSrcs, fieldDefinition) {
      var _fieldDefinition$type;
      if (!fieldDefinition) return valueSrcs;
      var fieldType = (_fieldDefinition$type = fieldDefinition.type) !== null && _fieldDefinition$type !== void 0 ? _fieldDefinition$type : fieldDefinition.returnType;
      if (fieldType === "!group") {
        fieldType = "number";
      }
      if (!valueSrcs) valueSrcs = Object.keys(config2.settings.valueSourcesInfo);
      return valueSrcs.filter(function(vs) {
        var canAdd = true;
        if (vs === "field") {
          if (config2.__fieldsCntByType) {
            var minCnt = fieldDefinition._isFuncArg ? 0 : 1;
            canAdd = canAdd && config2.__fieldsCntByType[fieldType] > minCnt;
          }
        }
        if (vs === "func") {
          if (fieldDefinition.funcs) {
            canAdd = canAdd && fieldDefinition.funcs.length > 0;
          }
          if (config2.__funcsCntByType) {
            canAdd = canAdd && config2.__funcsCntByType[fieldType] > 0;
          }
        }
        return canAdd;
      });
    };
    var getValueSourcesForFieldOp$1 = function getValueSourcesForFieldOp2(config2, field, operator) {
      var fieldDefinition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor2 = _getWidgetsAndSrcsForFieldOp(config2, field, operator, null), valueSrcs = _getWidgetsAndSrcsFor2.valueSrcs;
      var filteredValueSrcs = filterValueSourcesForField(config2, valueSrcs, fieldDefinition);
      return filteredValueSrcs;
    };
    var getWidgetForFieldOp$3 = function getWidgetForFieldOp2(config2, field, operator) {
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor3 = _getWidgetsAndSrcsForFieldOp(config2, field, operator, valueSrc), widgets2 = _getWidgetsAndSrcsFor3.widgets;
      var widget = null;
      if (widgets2.length) widget = widgets2[0];
      return widget;
    };
    var formatFieldName = function formatFieldName2(field, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
      if (!field) return;
      var fieldDef = getFieldConfig$b(config2, field) || {};
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldParts = getFieldParts$3(field, config2);
      var fieldName = Array.isArray(field) ? field.join(fieldSeparator) : field;
      if (options !== null && options !== void 0 && options.useTableName && fieldDef.tableName) {
        var fieldPartsCopy = _toConsumableArray(fieldParts);
        fieldPartsCopy[0] = fieldDef.tableName;
        fieldName = fieldPartsCopy.join(fieldSeparator);
      }
      if (fieldDef.fieldName) {
        fieldName = fieldDef.fieldName;
      }
      if (parentField) {
        getFieldConfig$b(config2, parentField) || {};
        var parentFieldName = parentField;
        if (fieldName.indexOf(parentFieldName + fieldSeparator) == 0) {
          fieldName = fieldName.slice((parentFieldName + fieldSeparator).length);
        } else {
          if (fieldDef.fieldName) ;
          else {
            meta.errors.push("Can't cut group ".concat(parentFieldName, " from field ").concat(fieldName));
          }
        }
      }
      return fieldName;
    };
    var isEmptyItem = function isEmptyItem2(item, config2) {
      var type = item.get("type");
      var mode = item.getIn(["properties", "mode"]);
      if (type == "rule_group" && mode == "array") {
        return isEmptyRuleGroupExt(item, config2);
      } else if (type == "group" || type == "rule_group") {
        return isEmptyGroup(item, config2);
      } else {
        return isEmptyRule(item, config2);
      }
    };
    var isEmptyRuleGroupExt = function isEmptyRuleGroupExt2(item, config2) {
      var children = item.get("children1");
      var properties = item.get("properties");
      return isEmptyRuleGroupExtPropertiesAndChildren$1(properties.toObject(), children, config2);
    };
    var isEmptyRuleGroupExtPropertiesAndChildren$1 = function isEmptyRuleGroupExtPropertiesAndChildren2(properties, children, config2) {
      var _config$operators$ope, _config$operators$ope2;
      var operator = properties.operator;
      var cardinality = (_config$operators$ope = (_config$operators$ope2 = config2.operators[operator]) === null || _config$operators$ope2 === void 0 ? void 0 : _config$operators$ope2.cardinality) !== null && _config$operators$ope !== void 0 ? _config$operators$ope : 1;
      var childrenAreRequired = cardinality == 0;
      var filledParts = {
        group: !isEmptyRuleProperties$1(properties, config2),
        children: !isEmptyGroupChildren$1(children, config2)
      };
      var hasEnough = filledParts.group && (childrenAreRequired ? filledParts.children : true);
      return !hasEnough;
    };
    var isEmptyGroup = function isEmptyGroup2(group2, config2) {
      var children = group2.get("children1");
      return isEmptyGroupChildren$1(children, config2);
    };
    var isEmptyGroupChildren$1 = function isEmptyGroupChildren2(children, config2) {
      var hasEnough = (children === null || children === void 0 ? void 0 : children.size) > 0 && children.filter(function(ch2) {
        return !isEmptyItem(ch2, config2);
      }).size > 0;
      return !hasEnough;
    };
    var isEmptyRule = function isEmptyRule2(rule2, config2) {
      var properties = rule2.get("properties");
      return isEmptyRuleProperties$1((properties === null || properties === void 0 ? void 0 : properties.toObject()) || {}, config2);
    };
    var isEmptyRuleProperties$1 = function isEmptyRuleProperties2(properties, config2) {
      var liteCheck = true;
      var scoreThreshold = 3;
      var compl = whatRulePropertiesAreCompleted(properties, config2, liteCheck);
      var hasEnough = compl.score >= scoreThreshold;
      return !hasEnough;
    };
    var whatRulePropertiesAreCompleted = function whatRulePropertiesAreCompleted2(_ref3, config2) {
      var _config$operators$ope3, _config$operators$ope4, _value$filter;
      var field = _ref3.field, fieldSrc = _ref3.fieldSrc;
      _ref3.fieldType;
      var operator = _ref3.operator, value2 = _ref3.value, valueSrc = _ref3.valueSrc;
      _ref3.valueType;
      var liteCheck = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var cardinality = (_config$operators$ope3 = (_config$operators$ope4 = config2.operators[operator]) === null || _config$operators$ope4 === void 0 ? void 0 : _config$operators$ope4.cardinality) !== null && _config$operators$ope3 !== void 0 ? _config$operators$ope3 : 1;
      var valueSrcs = valueSrc !== null && valueSrc !== void 0 && valueSrc.get ? valueSrc.toJS() : valueSrc;
      var res = {
        parts: {},
        score: 0
      };
      res.parts.field = liteCheck ? field != null : isCompletedValue(field, fieldSrc, config2);
      res.parts.operator = !!operator;
      res.parts.value = (value2 === null || value2 === void 0 || (_value$filter = value2.filter(function(val, delta) {
        return isCompletedValue(val, valueSrcs === null || valueSrcs === void 0 ? void 0 : valueSrcs[delta], config2, liteCheck);
      })) === null || _value$filter === void 0 ? void 0 : _value$filter.size) >= (liteCheck ? Math.min(cardinality, 1) : cardinality);
      res.score = Object.keys(res.parts).filter(function(k2) {
        return !!res.parts[k2];
      }).length;
      if (liteCheck && res.score < 3) {
        var deepCheck = true;
        if (!res.parts.value && fieldSrc === "func" && isCompletedValue(field, fieldSrc, config2, false, deepCheck)) {
          res.score++;
        }
        if (!res.parts.field) {
          value2 === null || value2 === void 0 || value2.map(function(val, delta) {
            if ((valueSrcs === null || valueSrcs === void 0 ? void 0 : valueSrcs[delta]) === "func" && isCompletedValue(val, valueSrcs === null || valueSrcs === void 0 ? void 0 : valueSrcs[delta], config2, false, deepCheck)) {
              res.score++;
            }
          });
        }
      }
      return res;
    };
    var isCompletedValue = function isCompletedValue2(value2, valueSrc, config2) {
      var liteCheck = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var deepCheck = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
      if (!liteCheck && valueSrc == "func" && value2) {
        var _value$get;
        var funcKey = (_value$get = value2.get) === null || _value$get === void 0 ? void 0 : _value$get.call(value2, "func");
        var funcConfig = getFuncConfig$2(config2, funcKey);
        if (funcConfig) {
          var args = value2.get("args");
          for (var argKey in funcConfig.args) {
            var argConfig = funcConfig.args[argKey];
            var argVal = args ? args.get(argKey) : void 0;
            var argValue = argVal ? argVal.get("value") : void 0;
            var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
            if (argValue == void 0 && (argConfig === null || argConfig === void 0 ? void 0 : argConfig.defaultValue) === void 0 && !(argConfig !== null && argConfig !== void 0 && argConfig.isOptional)) {
              return false;
            }
            if (argValue != void 0) {
              if (!isCompletedValue2(argValue, argValueSrc, config2, deepCheck ? liteCheck : true)) {
                return false;
              }
            }
          }
          return true;
        }
      }
      return value2 != void 0;
    };
    var completeValue = function completeValue2(value2, valueSrc, config2) {
      if (valueSrc == "func") return completeFuncValue(value2, config2);
      else return value2;
    };
    var getOneChildOrDescendant = function getOneChildOrDescendant2(item) {
      var children = item.get("children1");
      if ((children === null || children === void 0 ? void 0 : children.size) == 1) {
        var child = children.first();
        var childType = child.get("type");
        if (childType === "group") {
          return getOneChildOrDescendant2(child);
        }
        return child;
      }
      return null;
    };
    const ruleUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      calculateValueType,
      completeValue,
      filterValueSourcesForField,
      formatFieldName,
      getFieldPartsConfigs,
      getFieldPathLabels: getFieldPathLabels$2,
      getFirstOperator,
      getFuncPathLabels: getFuncPathLabels$1,
      getOneChildOrDescendant,
      getOperatorsForField,
      getOperatorsForType,
      getValueLabel: getValueLabel$1,
      getValueSourcesForFieldOp: getValueSourcesForFieldOp$1,
      getWidgetForFieldOp: getWidgetForFieldOp$3,
      getWidgetsForFieldOp,
      isEmptyGroupChildren: isEmptyGroupChildren$1,
      isEmptyItem,
      isEmptyRuleGroupExtPropertiesAndChildren: isEmptyRuleGroupExtPropertiesAndChildren$1,
      isEmptyRuleProperties: isEmptyRuleProperties$1,
      selectTypes,
      whatRulePropertiesAreCompleted
    }, Symbol.toStringTag, { value: "Module" }));
    var baseAssignValue$1 = _baseAssignValue, eq$2 = eq_1;
    function assignMergeValue$2(object, key, value2) {
      if (value2 !== void 0 && !eq$2(object[key], value2) || value2 === void 0 && !(key in object)) {
        baseAssignValue$1(object, key, value2);
      }
    }
    var _assignMergeValue = assignMergeValue$2;
    function createBaseFor$1(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    var _createBaseFor = createBaseFor$1;
    var createBaseFor = _createBaseFor;
    var baseFor$2 = createBaseFor();
    var _baseFor = baseFor$2;
    var isArrayLike$1 = isArrayLike_1, isObjectLike$1 = isObjectLike_1;
    function isArrayLikeObject$1(value2) {
      return isObjectLike$1(value2) && isArrayLike$1(value2);
    }
    var isArrayLikeObject_1 = isArrayLikeObject$1;
    function safeGet$2(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var _safeGet = safeGet$2;
    var copyObject = _copyObject, keysIn$1 = keysIn_1;
    function toPlainObject$1(value2) {
      return copyObject(value2, keysIn$1(value2));
    }
    var toPlainObject_1 = toPlainObject$1;
    var assignMergeValue$1 = _assignMergeValue, cloneBuffer = _cloneBufferExports, cloneTypedArray = _cloneTypedArray, copyArray = _copyArray, initCloneObject = _initCloneObject, isArguments = isArguments_1, isArray$2 = isArray_1, isArrayLikeObject = isArrayLikeObject_1, isBuffer$1 = isBufferExports, isFunction = isFunction_1, isObject$6 = isObject_1, isPlainObject$1 = isPlainObject_1, isTypedArray$1 = isTypedArray_1, safeGet$1 = _safeGet, toPlainObject = toPlainObject_1;
    function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet$1(object, key), srcValue = safeGet$1(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue$1(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray$2(srcValue), isBuff = !isArr && isBuffer$1(srcValue), isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray$2(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject$1(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject$6(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue$1(object, key, newValue);
    }
    var _baseMergeDeep = baseMergeDeep$1;
    var Stack$2 = _Stack, assignMergeValue = _assignMergeValue, baseFor$1 = _baseFor, baseMergeDeep = _baseMergeDeep, isObject$5 = isObject_1, keysIn = keysIn_1, safeGet = _safeGet;
    function baseMerge$2(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor$1(source, function(srcValue, key) {
        stack || (stack = new Stack$2());
        if (isObject$5(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    var _baseMerge = baseMerge$2;
    var identity$1 = identity_1, overRest = _overRest, setToString = _setToString;
    function baseRest$1(func, start) {
      return setToString(overRest(func, start, identity$1), func + "");
    }
    var _baseRest = baseRest$1;
    var eq$1 = eq_1, isArrayLike = isArrayLike_1, isIndex = _isIndex, isObject$4 = isObject_1;
    function isIterateeCall$2(value2, index, object) {
      if (!isObject$4(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq$1(object[index], value2);
      }
      return false;
    }
    var _isIterateeCall = isIterateeCall$2;
    var baseRest = _baseRest, isIterateeCall$1 = _isIterateeCall;
    function createAssigner$2(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall$1(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    var _createAssigner = createAssigner$2;
    var baseMerge$1 = _baseMerge, createAssigner$1 = _createAssigner;
    var merge = createAssigner$1(function(object, source, srcIndex) {
      baseMerge$1(object, source, srcIndex);
    });
    var merge_1 = merge;
    const merge$1 = /* @__PURE__ */ getDefaultExportFromCjs(merge_1);
    var clone$4 = { exports: {} };
    (function(module2) {
      var clone2 = function() {
        function _instanceof(obj, type) {
          return type != null && obj instanceof type;
        }
        var nativeMap;
        try {
          nativeMap = Map;
        } catch (_) {
          nativeMap = function() {
          };
        }
        var nativeSet;
        try {
          nativeSet = Set;
        } catch (_) {
          nativeSet = function() {
          };
        }
        var nativePromise;
        try {
          nativePromise = Promise;
        } catch (_) {
          nativePromise = function() {
          };
        }
        function clone3(parent2, circular, depth, prototype, includeNonEnumerable) {
          if (typeof circular === "object") {
            depth = circular.depth;
            prototype = circular.prototype;
            includeNonEnumerable = circular.includeNonEnumerable;
            circular = circular.circular;
          }
          var allParents = [];
          var allChildren = [];
          var useBuffer = typeof Buffer != "undefined";
          if (typeof circular == "undefined")
            circular = true;
          if (typeof depth == "undefined")
            depth = Infinity;
          function _clone(parent3, depth2) {
            if (parent3 === null)
              return null;
            if (depth2 === 0)
              return parent3;
            var child;
            var proto2;
            if (typeof parent3 != "object") {
              return parent3;
            }
            if (_instanceof(parent3, nativeMap)) {
              child = new nativeMap();
            } else if (_instanceof(parent3, nativeSet)) {
              child = new nativeSet();
            } else if (_instanceof(parent3, nativePromise)) {
              child = new nativePromise(function(resolve, reject) {
                parent3.then(function(value2) {
                  resolve(_clone(value2, depth2 - 1));
                }, function(err) {
                  reject(_clone(err, depth2 - 1));
                });
              });
            } else if (clone3.__isArray(parent3)) {
              child = [];
            } else if (clone3.__isRegExp(parent3)) {
              child = new RegExp(parent3.source, __getRegExpFlags(parent3));
              if (parent3.lastIndex) child.lastIndex = parent3.lastIndex;
            } else if (clone3.__isDate(parent3)) {
              child = new Date(parent3.getTime());
            } else if (useBuffer && Buffer.isBuffer(parent3)) {
              if (Buffer.allocUnsafe) {
                child = Buffer.allocUnsafe(parent3.length);
              } else {
                child = new Buffer(parent3.length);
              }
              parent3.copy(child);
              return child;
            } else if (_instanceof(parent3, Error)) {
              child = Object.create(parent3);
            } else {
              if (typeof prototype == "undefined") {
                proto2 = Object.getPrototypeOf(parent3);
                child = Object.create(proto2);
              } else {
                child = Object.create(prototype);
                proto2 = prototype;
              }
            }
            if (circular) {
              var index = allParents.indexOf(parent3);
              if (index != -1) {
                return allChildren[index];
              }
              allParents.push(parent3);
              allChildren.push(child);
            }
            if (_instanceof(parent3, nativeMap)) {
              parent3.forEach(function(value2, key) {
                var keyChild = _clone(key, depth2 - 1);
                var valueChild = _clone(value2, depth2 - 1);
                child.set(keyChild, valueChild);
              });
            }
            if (_instanceof(parent3, nativeSet)) {
              parent3.forEach(function(value2) {
                var entryChild = _clone(value2, depth2 - 1);
                child.add(entryChild);
              });
            }
            for (var i in parent3) {
              var attrs;
              if (proto2) {
                attrs = Object.getOwnPropertyDescriptor(proto2, i);
              }
              if (attrs && attrs.set == null) {
                continue;
              }
              child[i] = _clone(parent3[i], depth2 - 1);
            }
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(parent3);
              for (var i = 0; i < symbols.length; i++) {
                var symbol = symbols[i];
                var descriptor = Object.getOwnPropertyDescriptor(parent3, symbol);
                if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                  continue;
                }
                child[symbol] = _clone(parent3[symbol], depth2 - 1);
                if (!descriptor.enumerable) {
                  Object.defineProperty(child, symbol, {
                    enumerable: false
                  });
                }
              }
            }
            if (includeNonEnumerable) {
              var allPropertyNames = Object.getOwnPropertyNames(parent3);
              for (var i = 0; i < allPropertyNames.length; i++) {
                var propertyName = allPropertyNames[i];
                var descriptor = Object.getOwnPropertyDescriptor(parent3, propertyName);
                if (descriptor && descriptor.enumerable) {
                  continue;
                }
                child[propertyName] = _clone(parent3[propertyName], depth2 - 1);
                Object.defineProperty(child, propertyName, {
                  enumerable: false
                });
              }
            }
            return child;
          }
          return _clone(parent2, depth);
        }
        clone3.clonePrototype = function clonePrototype(parent2) {
          if (parent2 === null)
            return null;
          var c2 = function() {
          };
          c2.prototype = parent2;
          return new c2();
        };
        function __objToStr(o) {
          return Object.prototype.toString.call(o);
        }
        clone3.__objToStr = __objToStr;
        function __isDate(o) {
          return typeof o === "object" && __objToStr(o) === "[object Date]";
        }
        clone3.__isDate = __isDate;
        function __isArray(o) {
          return typeof o === "object" && __objToStr(o) === "[object Array]";
        }
        clone3.__isArray = __isArray;
        function __isRegExp(o) {
          return typeof o === "object" && __objToStr(o) === "[object RegExp]";
        }
        clone3.__isRegExp = __isRegExp;
        function __getRegExpFlags(re2) {
          var flags = "";
          if (re2.global) flags += "g";
          if (re2.ignoreCase) flags += "i";
          if (re2.multiline) flags += "m";
          return flags;
        }
        clone3.__getRegExpFlags = __getRegExpFlags;
        return clone3;
      }();
      if (module2.exports) {
        module2.exports = clone2;
      }
    })(clone$4);
    var cloneExports = clone$4.exports;
    const clone$3 = /* @__PURE__ */ getDefaultExportFromCjs(cloneExports);
    var logic = { exports: {} };
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory();
        }
      })(commonjsGlobal, function() {
        if (!Array.isArray) {
          Array.isArray = function(arg) {
            return Object.prototype.toString.call(arg) === "[object Array]";
          };
        }
        function arrayUnique(array) {
          var a = [];
          for (var i = 0, l2 = array.length; i < l2; i++) {
            if (a.indexOf(array[i]) === -1) {
              a.push(array[i]);
            }
          }
          return a;
        }
        var jsonLogic = {};
        var operations = {
          "==": function(a, b2) {
            return a == b2;
          },
          "===": function(a, b2) {
            return a === b2;
          },
          "!=": function(a, b2) {
            return a != b2;
          },
          "!==": function(a, b2) {
            return a !== b2;
          },
          ">": function(a, b2) {
            return a > b2;
          },
          ">=": function(a, b2) {
            return a >= b2;
          },
          "<": function(a, b2, c2) {
            return c2 === void 0 ? a < b2 : a < b2 && b2 < c2;
          },
          "<=": function(a, b2, c2) {
            return c2 === void 0 ? a <= b2 : a <= b2 && b2 <= c2;
          },
          "!!": function(a) {
            return jsonLogic.truthy(a);
          },
          "!": function(a) {
            return !jsonLogic.truthy(a);
          },
          "%": function(a, b2) {
            return a % b2;
          },
          "log": function(a) {
            console.log(a);
            return a;
          },
          "in": function(a, b2) {
            if (!b2 || typeof b2.indexOf === "undefined") return false;
            return b2.indexOf(a) !== -1;
          },
          "cat": function() {
            return Array.prototype.join.call(arguments, "");
          },
          "substr": function(source, start, end) {
            if (end < 0) {
              var temp = String(source).substr(start);
              return temp.substr(0, temp.length + end);
            }
            return String(source).substr(start, end);
          },
          "+": function() {
            return Array.prototype.reduce.call(arguments, function(a, b2) {
              return parseFloat(a, 10) + parseFloat(b2, 10);
            }, 0);
          },
          "*": function() {
            return Array.prototype.reduce.call(arguments, function(a, b2) {
              return parseFloat(a, 10) * parseFloat(b2, 10);
            });
          },
          "-": function(a, b2) {
            if (b2 === void 0) {
              return -a;
            } else {
              return a - b2;
            }
          },
          "/": function(a, b2) {
            return a / b2;
          },
          "min": function() {
            return Math.min.apply(this, arguments);
          },
          "max": function() {
            return Math.max.apply(this, arguments);
          },
          "merge": function() {
            return Array.prototype.reduce.call(arguments, function(a, b2) {
              return a.concat(b2);
            }, []);
          },
          "var": function(a, b2) {
            var not_found = b2 === void 0 ? null : b2;
            var data = this;
            if (typeof a === "undefined" || a === "" || a === null) {
              return data;
            }
            var sub_props = String(a).split(".");
            for (var i = 0; i < sub_props.length; i++) {
              if (data === null || data === void 0) {
                return not_found;
              }
              data = data[sub_props[i]];
              if (data === void 0) {
                return not_found;
              }
            }
            return data;
          },
          "missing": function() {
            var missing = [];
            var keys2 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
            for (var i = 0; i < keys2.length; i++) {
              var key = keys2[i];
              var value2 = jsonLogic.apply({ "var": key }, this);
              if (value2 === null || value2 === "") {
                missing.push(key);
              }
            }
            return missing;
          },
          "missing_some": function(need_count, options) {
            var are_missing = jsonLogic.apply({ "missing": options }, this);
            if (options.length - are_missing.length >= need_count) {
              return [];
            } else {
              return are_missing;
            }
          }
        };
        jsonLogic.is_logic = function(logic2) {
          return typeof logic2 === "object" && // An object
          logic2 !== null && // but not null
          !Array.isArray(logic2) && // and not an array
          Object.keys(logic2).length === 1;
        };
        jsonLogic.truthy = function(value2) {
          if (Array.isArray(value2) && value2.length === 0) {
            return false;
          }
          return !!value2;
        };
        jsonLogic.get_operator = function(logic2) {
          return Object.keys(logic2)[0];
        };
        jsonLogic.get_values = function(logic2) {
          return logic2[jsonLogic.get_operator(logic2)];
        };
        jsonLogic.apply = function(logic2, data) {
          if (Array.isArray(logic2)) {
            return logic2.map(function(l2) {
              return jsonLogic.apply(l2, data);
            });
          }
          if (!jsonLogic.is_logic(logic2)) {
            return logic2;
          }
          var op = jsonLogic.get_operator(logic2);
          var values = logic2[op];
          var i;
          var current;
          var scopedLogic;
          var scopedData;
          var initial;
          if (!Array.isArray(values)) {
            values = [values];
          }
          if (op === "if" || op == "?:") {
            for (i = 0; i < values.length - 1; i += 2) {
              if (jsonLogic.truthy(jsonLogic.apply(values[i], data))) {
                return jsonLogic.apply(values[i + 1], data);
              }
            }
            if (values.length === i + 1) {
              return jsonLogic.apply(values[i], data);
            }
            return null;
          } else if (op === "and") {
            for (i = 0; i < values.length; i += 1) {
              current = jsonLogic.apply(values[i], data);
              if (!jsonLogic.truthy(current)) {
                return current;
              }
            }
            return current;
          } else if (op === "or") {
            for (i = 0; i < values.length; i += 1) {
              current = jsonLogic.apply(values[i], data);
              if (jsonLogic.truthy(current)) {
                return current;
              }
            }
            return current;
          } else if (op === "filter") {
            scopedData = jsonLogic.apply(values[0], data);
            scopedLogic = values[1];
            if (!Array.isArray(scopedData)) {
              return [];
            }
            return scopedData.filter(function(datum) {
              return jsonLogic.truthy(jsonLogic.apply(scopedLogic, datum));
            });
          } else if (op === "map") {
            scopedData = jsonLogic.apply(values[0], data);
            scopedLogic = values[1];
            if (!Array.isArray(scopedData)) {
              return [];
            }
            return scopedData.map(function(datum) {
              return jsonLogic.apply(scopedLogic, datum);
            });
          } else if (op === "reduce") {
            scopedData = jsonLogic.apply(values[0], data);
            scopedLogic = values[1];
            initial = typeof values[2] !== "undefined" ? values[2] : null;
            if (!Array.isArray(scopedData)) {
              return initial;
            }
            return scopedData.reduce(
              function(accumulator, current2) {
                return jsonLogic.apply(
                  scopedLogic,
                  { current: current2, accumulator }
                );
              },
              initial
            );
          } else if (op === "all") {
            scopedData = jsonLogic.apply(values[0], data);
            scopedLogic = values[1];
            if (!Array.isArray(scopedData) || !scopedData.length) {
              return false;
            }
            for (i = 0; i < scopedData.length; i += 1) {
              if (!jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
                return false;
              }
            }
            return true;
          } else if (op === "none") {
            scopedData = jsonLogic.apply(values[0], data);
            scopedLogic = values[1];
            if (!Array.isArray(scopedData) || !scopedData.length) {
              return true;
            }
            for (i = 0; i < scopedData.length; i += 1) {
              if (jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
                return false;
              }
            }
            return true;
          } else if (op === "some") {
            scopedData = jsonLogic.apply(values[0], data);
            scopedLogic = values[1];
            if (!Array.isArray(scopedData) || !scopedData.length) {
              return false;
            }
            for (i = 0; i < scopedData.length; i += 1) {
              if (jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
                return true;
              }
            }
            return false;
          }
          values = values.map(function(val) {
            return jsonLogic.apply(val, data);
          });
          if (operations.hasOwnProperty(op) && typeof operations[op] === "function") {
            return operations[op].apply(data, values);
          } else if (op.indexOf(".") > 0) {
            var sub_ops = String(op).split(".");
            var operation = operations;
            for (i = 0; i < sub_ops.length; i++) {
              if (!operation.hasOwnProperty(sub_ops[i])) {
                throw new Error("Unrecognized operation " + op + " (failed at " + sub_ops.slice(0, i + 1).join(".") + ")");
              }
              operation = operation[sub_ops[i]];
            }
            return operation.apply(data, values);
          }
          throw new Error("Unrecognized operation " + op);
        };
        jsonLogic.uses_data = function(logic2) {
          var collection = [];
          if (jsonLogic.is_logic(logic2)) {
            var op = jsonLogic.get_operator(logic2);
            var values = logic2[op];
            if (!Array.isArray(values)) {
              values = [values];
            }
            if (op === "var") {
              collection.push(values[0]);
            } else {
              values.forEach(function(val) {
                collection.push.apply(collection, jsonLogic.uses_data(val));
              });
            }
          }
          return arrayUnique(collection);
        };
        jsonLogic.add_operation = function(name, code) {
          operations[name] = code;
        };
        jsonLogic.rm_operation = function(name) {
          delete operations[name];
        };
        jsonLogic.rule_like = function(rule2, pattern) {
          if (pattern === rule2) {
            return true;
          }
          if (pattern === "@") {
            return true;
          }
          if (pattern === "number") {
            return typeof rule2 === "number";
          }
          if (pattern === "string") {
            return typeof rule2 === "string";
          }
          if (pattern === "array") {
            return Array.isArray(rule2) && !jsonLogic.is_logic(rule2);
          }
          if (jsonLogic.is_logic(pattern)) {
            if (jsonLogic.is_logic(rule2)) {
              var pattern_op = jsonLogic.get_operator(pattern);
              var rule_op = jsonLogic.get_operator(rule2);
              if (pattern_op === "@" || pattern_op === rule_op) {
                return jsonLogic.rule_like(
                  jsonLogic.get_values(rule2, false),
                  jsonLogic.get_values(pattern, false)
                );
              }
            }
            return false;
          }
          if (Array.isArray(pattern)) {
            if (Array.isArray(rule2)) {
              if (pattern.length !== rule2.length) {
                return false;
              }
              for (var i = 0; i < pattern.length; i += 1) {
                if (!jsonLogic.rule_like(rule2[i], pattern[i])) {
                  return false;
                }
              }
              return true;
            } else {
              return false;
            }
          }
          return false;
        };
        return jsonLogic;
      });
    })(logic);
    var logicExports = logic.exports;
    const JL = /* @__PURE__ */ getDefaultExportFromCjs(logicExports);
    function ownKeys$r(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$r(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$r(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$r(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function applyJsonLogic(logic2, data) {
      return JL.apply(logic2, data);
    }
    function addJsonLogicOperation(name, op) {
      return JL.add_operation(name, op);
    }
    var customJsonLogicOperations = {
      CALL: function CALL(fn, ctx2) {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        return fn.call.apply(fn, [ctx2].concat(args));
      },
      JSX: function JSX(type, props) {
        return {
          type,
          props
        };
      },
      mergeObjects: function mergeObjects(obj1, obj2) {
        return _objectSpread$r(_objectSpread$r({}, obj1), obj2);
      },
      fromEntries: function fromEntries(entries) {
        return Object.fromEntries(entries);
      },
      strlen: function strlen(str) {
        return (str === null || str === void 0 ? void 0 : str.length) || 0;
      },
      regexTest: function regexTest(str, pattern, flags) {
        return (str === null || str === void 0 ? void 0 : str.match(new RegExp(pattern, flags))) != null;
      },
      now: function now2() {
        return /* @__PURE__ */ new Date();
      },
      date_add: function date_add(date, val, dim) {
        return hooks(date).add(val, dim).toDate();
      },
      toLowerCase: function toLowerCase(str) {
        return str.toLowerCase();
      },
      toUpperCase: function toUpperCase(str) {
        return str.toUpperCase();
      }
    };
    function addRequiredJsonLogicOperations() {
      for (var k2 in customJsonLogicOperations) {
        addJsonLogicOperation(k2, customJsonLogicOperations[k2]);
      }
    }
    function _createForOfIteratorHelper$9(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$9(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$9(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$9(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$9(o, minLen);
    }
    function _arrayLikeToArray$9(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$q(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$q(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$q(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$q(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    addRequiredJsonLogicOperations();
    function applyJsonLogicWithPath(logic2, data, path) {
      var ret;
      try {
        ret = JL.apply(logic2, data);
      } catch (e2) {
        e2.message = "".concat(path.join("."), " :: ").concat(e2.message);
        throw e2;
      }
      return ret;
    }
    function callContextFn(_this, fn, args, path) {
      var ret;
      try {
        ret = fn.call.apply(fn, [_this].concat(_toConsumableArray(args)));
      } catch (e2) {
        e2.message = "".concat(path.join("."), " :: ").concat(e2.message);
        throw e2;
      }
      return ret;
    }
    var configKeys = ["conjunctions", "fields", "types", "operators", "widgets", "settings", "funcs", "ctx"];
    var compileMetaFieldSettings = {
      asyncFetch: {
        type: "f",
        args: ["search", "offset"]
      },
      labelYes: {
        type: "r"
      },
      labelNo: {
        type: "r"
      },
      marks: {
        type: "r",
        isArr: true
      },
      validateValue: {
        type: "f",
        args: ["val", "fieldSettings", "op", "opDef", "rightFieldDef"]
      }
    };
    var compileMetaWidget = _objectSpread$q(_objectSpread$q({}, compileMetaFieldSettings), {}, {
      factory: {
        type: "rf"
      },
      formatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "isForDisplay", "op", "opDef", "rightFieldDef"]
      },
      sqlFormatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef", "rightFieldDef"]
      },
      spelFormatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef", "rightFieldDef"]
      },
      spelImportValue: {
        type: "f",
        args: ["val", "wgtDef", "args"]
      },
      mongoFormatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef"]
      },
      elasticSearchFormatValue: {
        type: "f",
        args: ["queryType", "val", "op", "field", "config"]
      },
      jsonLogic: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef"]
      },
      jsonLogicImport: {
        type: "f",
        args: ["val"]
      },
      validateValue: {
        type: "f",
        args: ["val", "fieldSettings", "op", "opDef", "rightFieldDef"]
      },
      // obsolete
      toJS: {
        type: "f",
        args: ["val"]
      }
    });
    var compileMetaOperator = {
      options: {
        // proximity
        factory: {
          type: "rf"
        }
      },
      formatOp: {
        type: "f",
        args: ["field", "op", "vals", "valueSrc", "valueType", "opDef", "operatorOptions", "isForDisplay", "fieldDef"]
      },
      mongoFormatOp: {
        type: "f",
        args: ["field", "op", "vals", "useExpr", "valueSrc", "valueType", "opDef", "operatorOptions", "fieldDef"]
      },
      sqlFormatOp: {
        type: "f",
        args: ["field", "op", "vals", "valueSrc", "valueType", "opDef", "operatorOptions", "fieldDef"]
      },
      spelFormatOp: {
        type: "f",
        args: ["field", "op", "vals", "valueSrc", "valueType", "opDef", "operatorOptions", "fieldDef"]
      },
      jsonLogic: {
        type: "f",
        ignore: "string",
        args: ["field", "op", "vals", "opDef", "operatorOptions", "fieldDef"]
      },
      elasticSearchQueryType: {
        type: "f",
        ignore: "string",
        args: ["valueType"]
      },
      textSeparators: {
        type: "r",
        isArr: true
      }
    };
    var compileMetaConjunction = {
      formatConj: {
        type: "f",
        args: ["children", "conj", "not", "isForDisplay"]
      },
      sqlFormatConj: {
        type: "f",
        args: ["children", "conj", "not"]
      },
      spelFormatConj: {
        type: "f",
        args: ["children", "conj", "not", "omitBrackets"]
      }
    };
    var compileMetaWidgetForType = {
      widgetProps: compileMetaWidget,
      opProps: compileMetaOperator
    };
    var compileMetaFunc = {
      renderBrackets: {
        type: "r",
        isArr: true
      },
      renderSeps: {
        type: "r",
        isArr: true
      },
      jsonLogic: {
        type: "f",
        ignore: "string",
        args: ["formattedArgs"]
      },
      jsonLogicImport: {
        type: "f",
        args: ["val"]
      },
      spelImport: {
        type: "f",
        args: ["spel"]
      },
      formatFunc: {
        type: "f",
        args: ["formattedArgs", "isForDisplay"]
      },
      sqlFormatFunc: {
        type: "f",
        args: ["formattedArgs"]
      },
      mongoFormatFunc: {
        type: "f",
        args: ["formattedArgs"]
      },
      spelFormatFunc: {
        type: "f",
        args: ["formattedArgs"]
      }
    };
    var compileMetaFieldLike = _objectSpread$q(_objectSpread$q({}, compileMetaFieldSettings), {}, {
      fieldSettings: compileMetaFieldSettings
    });
    var compileMetaField = _objectSpread$q(_objectSpread$q({}, compileMetaFieldSettings), {}, {
      fieldSettings: compileMetaFieldSettings,
      widgets: {
        x: compileMetaWidgetForType
      },
      mainWidgetProps: compileMetaWidget
    });
    var compileMetaSettings = {
      locale: {
        mui: {
          type: "f",
          args: [],
          invokeWith: [],
          ignore: "jl"
        }
      },
      caseValueField: compileMetaField,
      canCompareFieldWithField: {
        type: "f",
        args: ["leftField", "leftFieldConfig", "rightField", "rightFieldConfig", "op"]
      },
      formatReverse: {
        type: "f",
        args: ["q", "op", "reversedOp", "operatorDefinition", "revOperatorDefinition", "isForDisplay"]
      },
      sqlFormatReverse: {
        type: "f",
        args: ["q"]
      },
      spelFormatReverse: {
        type: "f",
        args: ["q"]
      },
      formatField: {
        type: "f",
        args: ["field", "parts", "label2", "fieldDefinition", "config", "isForDisplay"]
      },
      formatSpelField: {
        type: "f",
        args: ["field", "parentField", "parts", "partsExt", "fieldDefinition", "config"]
      },
      formatAggr: {
        type: "f",
        args: ["whereStr", "aggrField", "operator", "value", "valueSrc", "valueType", "opDef", "operatorOptions", "isForDisplay", "aggrFieldDef"]
      },
      normalizeListValues: {
        type: "f",
        args: ["listValues", "type", "fieldSettings"]
      },
      renderConfirm: {
        type: "f",
        args: ["props"]
      },
      useConfirm: {
        type: "f",
        args: []
      },
      renderField: {
        type: "rf"
      },
      renderOperator: {
        type: "rf"
      },
      renderFunc: {
        type: "rf"
      },
      renderConjs: {
        type: "rf"
      },
      renderButton: {
        type: "rf"
      },
      renderIcon: {
        type: "rf"
      },
      renderButtonGroup: {
        type: "rf"
      },
      renderValueSources: {
        type: "rf"
      },
      renderFieldSources: {
        type: "rf"
      },
      renderProvider: {
        type: "rf"
      },
      renderSwitch: {
        type: "rf"
      },
      renderSwitchPrefix: {
        type: "r"
      },
      renderItem: {
        type: "rf"
      },
      renderBeforeWidget: {
        type: "rf"
      },
      renderAfterWidget: {
        type: "rf"
      },
      renderBeforeActions: {
        type: "rf"
      },
      renderAfterActions: {
        type: "rf"
      },
      renderBeforeCaseValue: {
        type: "rf"
      },
      renderAfterCaseValue: {
        type: "rf"
      },
      renderRuleError: {
        type: "rf"
      }
    };
    var compileMeta = {
      fields: {
        x: compileMetaField
      },
      widgets: {
        x: compileMetaWidget
      },
      conjunctions: {
        x: compileMetaConjunction
      },
      operators: {
        x: compileMetaOperator
      },
      types: {
        x: {
          widgets: {
            x: compileMetaWidgetForType
          }
        }
      },
      funcs: {
        x: _objectSpread$q(_objectSpread$q(_objectSpread$q({}, compileMetaFieldLike), compileMetaFunc), {}, {
          args: {
            x: _objectSpread$q({}, compileMetaFieldLike)
          }
        })
      },
      settings: compileMetaSettings
    };
    var isObject$3 = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var compressConfig = function compressConfig2(config2, baseConfig2) {
      if (config2.__fieldNames) {
        throw new Error("Don't apply `compressConfig()` to extended config");
      }
      var zipConfig = pick$1(config2, configKeys);
      delete zipConfig.ctx;
      var _clean = function _clean2(target, base, path, meta) {
        if (isObject$3(target)) {
          if (isDirtyJSX(target)) {
            target = cleanJSX(target);
          }
          if (path[0] === "funcs" && !base) {
            var funcKey = path[path.length - 1];
            base = getFieldRawConfig({
              funcs: meta.BasicFuncs
            }, funcKey, "funcs", "subfields") || void 0;
            if (base) {
              target["$$key"] = funcKey;
            }
          }
          if (base !== void 0 && isObject$3(base)) {
            for (var k3 in base) {
              if (Object.prototype.hasOwnProperty.call(base, k3)) {
                if (!Object.keys(target).includes(k3) || target[k3] === void 0 && base[k3] !== void 0) {
                  target[k3] = "$$deleted";
                } else {
                  target[k3] = _clean2(target[k3], base[k3], [].concat(_toConsumableArray(path), [k3]), meta);
                  if (target[k3] === void 0) {
                    delete target[k3];
                  }
                }
              }
            }
          }
          for (var _k in target) {
            if (Object.prototype.hasOwnProperty.call(target, _k)) {
              if (!base || !Object.keys(base).includes(_k)) {
                var _base;
                target[_k] = _clean2(target[_k], (_base = base) === null || _base === void 0 ? void 0 : _base[_k], [].concat(_toConsumableArray(path), [_k]), meta);
              }
              if (target[_k] === void 0) {
                delete target[_k];
              }
            }
          }
          if (Object.keys(target).length === 0) {
            target = void 0;
          }
        } else if (Array.isArray(target)) {
          target.forEach(function(val, ind) {
            target[ind] = _clean2(target[ind], void 0, [].concat(_toConsumableArray(path), [ind]), meta);
          });
        }
        if (base !== void 0 && shallowEqual$5(target, base, true)) {
          return void 0;
        }
        if (typeof target === "function") {
          throw new Error("compressConfig: function at ".concat(path.join("."), " should be converted to JsonLogic"));
        }
        return target;
      };
      for (var _i = 0, _configKeys = configKeys; _i < _configKeys.length; _i++) {
        var rootKey = _configKeys[_i];
        if (rootKey === "ctx") ;
        else if (rootKey === "fields") {
          zipConfig[rootKey] = clone$3(zipConfig[rootKey]);
          _clean(zipConfig[rootKey], {}, [rootKey]);
        } else if (rootKey === "funcs") {
          zipConfig[rootKey] = clone$3(zipConfig[rootKey] || {});
          for (var k2 in zipConfig[rootKey]) {
            _clean(zipConfig[rootKey][k2], null, [rootKey, k2], {
              BasicFuncs
            });
          }
        } else {
          zipConfig[rootKey] = clone$3(zipConfig[rootKey]);
          _clean(zipConfig[rootKey], baseConfig2[rootKey], [rootKey]);
        }
      }
      return zipConfig;
    };
    var decompressConfig = function decompressConfig2(zipConfig, baseConfig2, ctx2) {
      if (!zipConfig.settings.useConfigCompress) {
        throw new Error("Please enable `useConfigCompress` in config settings to use decompressConfig()");
      }
      var unzipConfig = {};
      var _mergeDeep = function _mergeDeep2(target, mixin2, path) {
        if (isObject$3(mixin2)) {
          if (!isObject$3(target)) {
            target = {};
          }
          for (var k2 in mixin2) {
            if (Object.prototype.hasOwnProperty.call(mixin2, k2)) {
              if (mixin2[k2] === "$$deleted") {
                delete target[k2];
              } else {
                target[k2] = _mergeDeep2(target[k2], mixin2[k2], [].concat(_toConsumableArray(path), [k2]));
              }
            }
          }
        } else if (Array.isArray(mixin2)) {
          target = clone$3(mixin2);
        } else {
          target = mixin2;
        }
        return target;
      };
      var _resolveAndMergeDeep = function _resolveAndMergeDeep2(target, path, meta) {
        var resolved = false;
        if (isObject$3(target) && Object.prototype.hasOwnProperty.call(target, "$$key") && target["$$key"]) {
          var func = getFieldRawConfig({
            funcs: meta.BasicFuncs
          }, target["$$key"], "funcs", "subfields");
          if (func) {
            delete target["$$key"];
            target = _mergeDeep(clone$3(func), target, path);
            resolved = true;
          } else {
            throw new Error("decompressConfig: basic function not found by key ".concat(target["$$key"], " at ").concat(path.join(".")));
          }
        }
        if (!resolved) {
          if (isObject$3(target)) {
            for (var k2 in target) {
              if (Object.prototype.hasOwnProperty.call(target, k2)) {
                target[k2] = _resolveAndMergeDeep2(target[k2], [].concat(_toConsumableArray(path), [k2]), meta);
              }
            }
          } else if (Array.isArray(target)) {
            var _iterator = _createForOfIteratorHelper$9(target), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var _k2 = _step.value;
                target[_k2] = _resolveAndMergeDeep2(target[_k2], [].concat(_toConsumableArray(path), [_k2]), meta);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }
        return target;
      };
      for (var _i2 = 0, _configKeys2 = configKeys; _i2 < _configKeys2.length; _i2++) {
        var rootKey = _configKeys2[_i2];
        if (rootKey === "ctx") {
          unzipConfig[rootKey] = merge$1({}, baseConfig2.ctx || {}, ctx2 || {});
        } else if (rootKey === "funcs") {
          unzipConfig[rootKey] = clone$3(zipConfig[rootKey] || {});
          _resolveAndMergeDeep(unzipConfig[rootKey], [rootKey], {
            BasicFuncs
          });
        } else if (rootKey === "fields") {
          unzipConfig[rootKey] = clone$3(zipConfig[rootKey] || {});
        } else {
          unzipConfig[rootKey] = clone$3(baseConfig2[rootKey] || {});
          _mergeDeep(unzipConfig[rootKey], zipConfig[rootKey] || {}, [rootKey]);
        }
      }
      return unzipConfig;
    };
    var compileConfig = function compileConfig2(config2) {
      if (config2.__compliled) {
        return config2;
      }
      config2 = clone$3(config2);
      var opts = {
        ctx: config2.ctx
      };
      var logs = [];
      _compileConfigParts(config2, config2, opts, compileMeta, logs);
      Object.defineProperty(config2, "__compliled", {
        enumerable: false,
        writable: false,
        value: true
      });
      return config2;
    };
    function _compileConfigParts(config2, subconfig, opts, meta, logs) {
      var path = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : [];
      if (!subconfig) return;
      !path.length;
      for (var k2 in meta) {
        var submeta = meta[k2];
        var newPath = k2 === "x" ? path : [].concat(_toConsumableArray(path), [k2]);
        if (submeta.type === "r") {
          var targetObj = subconfig;
          var val = targetObj[k2];
          if (submeta.isArr) {
            for (var ind in val) {
              var newVal = renderReactElement(val[ind], opts, [].concat(_toConsumableArray(newPath), [ind]));
              if (newVal !== val[ind]) {
                logs.push("Compiled ".concat(newPath.join("."), "[").concat(ind, "]"));
                val[ind] = newVal;
              }
            }
          } else {
            var _newVal = renderReactElement(val, opts, newPath, void 0);
            if (_newVal !== val) {
              logs.push("Compiled R ".concat(newPath.join(".")));
              targetObj[k2] = _newVal;
            }
          }
        } else if (submeta.type === "rf") {
          var _targetObj = subconfig;
          var _val = _targetObj[k2];
          var _newVal2 = compileJsonLogicReact(_val, opts, newPath, submeta.ignore);
          if (_newVal2 !== _val) {
            logs.push("Compiled JL-RF ".concat(newPath.join(".")));
            _targetObj[k2] = _newVal2;
          }
        } else if (submeta.type === "f") {
          var _targetObj2 = subconfig;
          var _val2 = _targetObj2[k2];
          var _newVal3 = compileJsonLogic(_val2, opts, newPath, submeta.args, submeta.ignore);
          if (submeta.invokeWith && _newVal3 && typeof _newVal3 === "function") {
            var _newVal4;
            _newVal3 = (_newVal4 = _newVal3).call.apply(_newVal4, [null].concat(_toConsumableArray(submeta.invokeWith)));
          }
          if (_newVal3 !== _val2) {
            logs.push("Compiled JL-F ".concat(newPath.join(".")));
            _targetObj2[k2] = _newVal3;
          }
        } else if (k2 === "x") {
          for (var field in subconfig) {
            newPath = [].concat(_toConsumableArray(path), [field]);
            var def = subconfig[field];
            _compileConfigParts(config2, def, opts, submeta, logs, newPath);
            if (def.subfields) {
              _compileConfigParts(config2, def.subfields, opts, meta, logs, newPath);
            }
          }
        } else {
          var _def = subconfig[k2];
          _compileConfigParts(config2, _def, opts, submeta, logs, newPath);
        }
      }
    }
    function compileJsonLogicReact(jl, opts, path) {
      if (isJsonLogic(jl)) {
        return function(props, ctx2) {
          ctx2 = ctx2 || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var data = {
            props,
            ctx: ctx2
          };
          var re2 = applyJsonLogicWithPath(jl, data, path);
          if (typeof re2 === "string") {
            re2 = {
              type: re2,
              props
            };
          }
          var ret = renderReactElement(re2, {
            ctx: ctx2
          }, path);
          return ret;
        };
      } else if (typeof jl === "string") {
        return function(props, ctx2) {
          ctx2 = ctx2 || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var fn = jl.split(".").reduce(function(o, k2) {
            return o === null || o === void 0 ? void 0 : o[k2];
          }, ctx2);
          if (fn) {
            return callContextFn(this, fn, [props, ctx2], path);
          } else {
            var re2 = {
              type: jl,
              props
            };
            var ret = renderReactElement(re2, {
              ctx: ctx2
            }, path);
            return ret;
          }
        };
      }
      return jl;
    }
    function compileJsonLogic(jl, opts, path, argNames) {
      var ignore = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : void 0;
      if (isJsonLogic(jl) && ignore !== "jl") {
        return (function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var ctx2 = this || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var data = (argNames || []).reduce(function(acc, k2, i) {
            return _objectSpread$q(_objectSpread$q({}, acc), {}, _defineProperty$1({}, k2, args[i]));
          }, {
            args,
            ctx: ctx2
          });
          var ret = applyJsonLogicWithPath(jl, data, path);
          return ret;
        }).bind(opts === null || opts === void 0 ? void 0 : opts.ctx);
      } else if (typeof jl === "string" && ignore !== "string") {
        return (function() {
          var ctx2 = this || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var fn = jl.split(".").reduce(function(o, k2) {
            return o === null || o === void 0 ? void 0 : o[k2];
          }, ctx2);
          if (fn) {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            return callContextFn(this, fn, args, path);
          } else {
            throw new Error("".concat(path.join("."), " :: Function ").concat(jl, " is not found in ctx"));
          }
        }).bind(opts === null || opts === void 0 ? void 0 : opts.ctx);
      }
      return jl;
    }
    function getReactComponentFromCtx(name, ctx2) {
      var _ctx$components;
      return (ctx2 === null || ctx2 === void 0 || (_ctx$components = ctx2.components) === null || _ctx$components === void 0 ? void 0 : _ctx$components[name]) || ctx2.W[name] || ctx2.O[name];
    }
    function renderReactElement(jsx, opts, path) {
      var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
      if (isJSX(jsx)) {
        var _props;
        var type = jsx.type, props = jsx.props;
        if (typeof type !== "string") {
          throw new Error("renderReactElement for ".concat(path.join("."), ": type should be string"));
        }
        var Cmp = getReactComponentFromCtx(type, opts.ctx) || type.toLowerCase();
        var children;
        if (key !== void 0) {
          props = _objectSpread$q(_objectSpread$q({}, props), {}, {
            key
          });
        }
        if ((_props = props) !== null && _props !== void 0 && _props.children) {
          children = renderReactElement(props.children, opts, path);
          props = _objectSpread$q(_objectSpread$q({}, props), {}, {
            children
          });
        }
        var res = opts.ctx.RCE(Cmp, props);
        return res;
      } else if (jsx instanceof Array) {
        return jsx.map(function(el, i) {
          return renderReactElement(el, opts, path, "" + i);
        });
      }
      return jsx;
    }
    var baseMerge = _baseMerge, createAssigner = _createAssigner;
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    var mergeWith_1 = mergeWith;
    const mergeWith$1 = /* @__PURE__ */ getDefaultExportFromCjs(mergeWith_1);
    var settings$3 = {
      reverseOperatorsForNot: false,
      canShortMongoQuery: true,
      formatField: function formatField2(field, parts, label2, fieldDefinition, config2, isForDisplay) {
        if (isForDisplay) return label2;
        else return field;
      },
      caseValueField: {
        type: "case_value"
      },
      fieldSources: ["field"],
      keepInputOnChangeFieldSrc: true,
      fieldItemKeysForSearch: ["label", "path", "altLabel", "grouplabel"],
      listKeysForSearch: ["title", "value"],
      valueSourcesInfo: {
        value: {}
      },
      fieldSeparator: ".",
      fieldSeparatorDisplay: ".",
      canReorder: true,
      canRegroup: true,
      canDeleteLocked: false,
      canLeaveEmptyGroup: true,
      shouldCreateEmptyGroup: false,
      exportPreserveGroups: false,
      removeEmptyGroupsOnLoad: true,
      removeEmptyRulesOnLoad: true,
      removeIncompleteRulesOnLoad: false,
      removeInvalidMultiSelectValuesOnLoad: true,
      showErrorMessage: false,
      setOpOnChangeField: ["keep", "default"],
      // 'default' (default if present), 'keep' (keep prev from last field), 'first', 'none'
      groupOperators: ["some", "all", "none"],
      defaultConjunction: "AND",
      // todo: deprecated, remove this in favour of defaultConjunction
      defaultGroupConjunction: "AND",
      // localization
      locale: {
        moment: "en"
      },
      valueLabel: "Value",
      valuePlaceholder: "Value",
      fieldLabel: "Field",
      operatorLabel: "Operator",
      funcLabel: "Function",
      fieldPlaceholder: "Select field",
      funcPlaceholder: "Select function",
      operatorPlaceholder: "Select operator",
      lockLabel: "Lock",
      lockedLabel: "Locked",
      deleteLabel: "Delete",
      addGroupLabel: "Add group",
      addCaseLabel: "Add condition",
      addDefaultCaseLabel: "Add default condition",
      defaultCaseLabel: "Default:",
      addRuleLabel: "Add rule",
      addSubRuleLabel: "Add sub rule",
      addSubGroupLabel: "Add sub group",
      delGroupLabel: "Delete",
      notLabel: "Not",
      fieldSourcesPopupTitle: "Select source",
      valueSourcesPopupTitle: "Select value source",
      removeRuleConfirmOptions: null,
      removeGroupConfirmOptions: null
    };
    function _createForOfIteratorHelper$8(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$8(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$8(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$8(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$8(o, minLen);
    }
    function _arrayLikeToArray$8(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var memoId = 0;
    var configId = 0;
    var commonMemo;
    var memos = {};
    var getCommonMemo = function getCommonMemo2() {
      if (!commonMemo) {
        commonMemo = createConfigMemo$1({
          reactIndex: void 0,
          maxSize: 3,
          canCompile: void 0
          // default is true
        });
      }
      return commonMemo;
    };
    var findExtendedConfigInAllMemos = function findExtendedConfigInAllMemos2(config2, needsToBeCompiled) {
      var foundExtConfig;
      for (var k2 in memos) {
        var found = memos[k2].findExtendedConfig(config2, needsToBeCompiled);
        if (found) {
          foundExtConfig = found;
          break;
        }
      }
      return foundExtConfig;
    };
    var createConfigMemo$1 = function createConfigMemo2() {
      var meta = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        reactIndex: void 0,
        maxSize: 2,
        // current and prev
        canCompile: true
      };
      var configStore = /* @__PURE__ */ new Map();
      var maxSize = meta.maxSize || 2;
      var currentMemoId = ++memoId;
      var currentMemo;
      var pickConfig = function pickConfig2(props) {
        return pick$1(props, configKeys);
      };
      var extendAndStore = function extendAndStore2(config2) {
        var extendedConfig = extendConfig(config2, ++configId, meta.canCompile);
        storeConfigPair(config2, extendedConfig);
        return extendedConfig;
      };
      var getSize = function getSize2() {
        return configStore.size;
      };
      var storeConfigPair = function storeConfigPair2(config2, extendedConfig) {
        if (configStore.size + 1 > maxSize) {
          configStore["delete"](configStore.keys().next().value);
        }
        configStore.set(config2, extendedConfig);
      };
      var findBasic = function findBasic2(findConfig) {
        var _iterator = _createForOfIteratorHelper$8(configStore.keys()), _step;
        try {
          var _loop = function _loop2() {
            var basicConfig = _step.value;
            var extConfig = configStore.get(basicConfig);
            var found = configKeys.map(function(k2) {
              return extConfig[k2] === findConfig[k2];
            }).filter(function(v2) {
              return !v2;
            }).length === 0;
            if (found) {
              return {
                v: basicConfig
              };
            }
          }, _ret;
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            _ret = _loop();
            if (_ret) return _ret.v;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return findConfig;
      };
      var findExtended = function findExtended2(findConfig, needsToBeCompiled) {
        var _iterator2 = _createForOfIteratorHelper$8(configStore.keys()), _step2;
        try {
          var _loop2 = function _loop22() {
            var savedConfig = _step2.value;
            var foundParts = configKeys.filter(function(k2) {
              return savedConfig[k2] === findConfig[k2];
            });
            var found = foundParts.length === configKeys.length && (needsToBeCompiled ? savedConfig.__compliled : true);
            if (found) {
              return {
                v: configStore.get(savedConfig)
              };
            }
          }, _ret2;
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            _ret2 = _loop2();
            if (_ret2) return _ret2.v;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        var _iterator3 = _createForOfIteratorHelper$8(configStore.values()), _step3;
        try {
          var _loop3 = function _loop32() {
            var extendedConfig = _step3.value;
            var foundParts = configKeys.filter(function(k2) {
              return extendedConfig[k2] === findConfig[k2];
            });
            var found = foundParts.length === configKeys.length && (needsToBeCompiled ? extendedConfig.__compliled : true);
            if (found) {
              return {
                v: extendedConfig
              };
            }
          }, _ret3;
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            _ret3 = _loop3();
            if (_ret3) return _ret3.v;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        return null;
      };
      var findOrExtend = function findOrExtend2(config2) {
        return findExtended(config2) || extendAndStore(config2);
      };
      var clearConfigMemo = function clearConfigMemo2() {
        configStore.clear();
        delete memos[currentMemoId];
        if (commonMemo === currentMemo) {
          commonMemo = void 0;
        }
      };
      currentMemo = {
        getExtendedConfig: function getExtendedConfig(props) {
          return findOrExtend(pickConfig(props));
        },
        findExtendedConfig: findExtended,
        getBasicConfig: findBasic,
        clearConfigMemo,
        configId,
        storeConfigPair,
        getSize,
        configStore,
        memoId: currentMemoId,
        meta
      };
      if (meta.reactIndex === void 0) {
        commonMemo = currentMemo;
      }
      memos[currentMemoId] = currentMemo;
      return currentMemo;
    };
    function _createForOfIteratorHelper$7(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$7(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$7(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$7(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$7(o, minLen);
    }
    function _arrayLikeToArray$7(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$p(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$p(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$p(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$p(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var extendConfig = function extendConfig2(config2, configId2) {
      var canCompile = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      canCompile = canCompile && config2.settings.useConfigCompress;
      if (config2.__configId) {
        return config2;
      }
      var cachedExtConfig = findExtendedConfigInAllMemos(config2, canCompile);
      if (cachedExtConfig) {
        return cachedExtConfig;
      }
      var origConfig = config2;
      if (canCompile) {
        if (config2.__compliled) {
          config2 = clone$3(config2);
        } else {
          config2 = compileConfig(config2);
        }
      } else {
        config2 = clone$3(config2);
      }
      config2.settings = mergeWith$1({}, settings$3, config2.settings, mergeCustomizerNoArrays);
      config2.__fieldsCntByType = {};
      config2.__funcsCntByType = {};
      config2.__fieldNames = {};
      extendTypesConfig(config2.types, config2);
      extendFieldsConfig(config2.fields, config2);
      extendFuncsConfig(config2.funcs, config2);
      var caseValueField = config2.settings.caseValueField;
      if (caseValueField) {
        extendFieldConfig(caseValueField, config2, [], false, true);
      }
      var momentLocale = config2.settings.locale.moment;
      if (momentLocale) {
        hooks.locale(momentLocale);
      }
      Object.defineProperty(config2, "__configId", {
        enumerable: false,
        writable: false,
        value: configId2 || uuid$1()
      });
      config2.__cache = {};
      deepFreeze(config2);
      var memo = getCommonMemo();
      memo.storeConfigPair(origConfig, config2);
      return config2;
    };
    function extendTypesConfig(typesConfig, config2) {
      for (var type in typesConfig) {
        var typeConfig = typesConfig[type];
        extendTypeConfig(type, typeConfig, config2);
      }
    }
    function extendTypeConfig(type, typeConfig, config2) {
      var operators2 = null, defaultOperator = null;
      typeConfig.mainWidget = typeConfig.mainWidget || Object.keys(typeConfig.widgets).filter(function(w2) {
        return w2 != "field" && w2 != "func";
      })[0];
      var excludeOperators = typeConfig.excludeOperators || [];
      for (var widget in typeConfig.widgets) {
        var typeWidgetConfig = typeConfig.widgets[widget];
        var defOp = typeWidgetConfig.defaultOperator;
        if (typeWidgetConfig.operators) {
          var typeWidgetOperators = typeWidgetConfig.operators.filter(function(op) {
            return !excludeOperators.includes(op);
          });
          operators2 = mergeArraysSmart(operators2, typeWidgetOperators);
        }
        if (defOp && !excludeOperators.includes(defOp)) {
          if (!defaultOperator || widget === typeConfig.mainWidget) {
            defaultOperator = defOp;
          }
        }
        if (widget == typeConfig.mainWidget) {
          typeWidgetConfig.widgetProps = _objectSpread$p(_objectSpread$p({}, typeConfig.mainWidgetProps || {}), typeWidgetConfig.widgetProps || {});
        }
        typeConfig.widgets[widget] = typeWidgetConfig;
      }
      if (!typeConfig.valueSources) typeConfig.valueSources = Object.keys(config2.settings.valueSourcesInfo);
      var _iterator = _createForOfIteratorHelper$7(typeConfig.valueSources), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var valueSrc = _step.value;
          if (valueSrc != "value" && !typeConfig.widgets[valueSrc]) {
            typeConfig.widgets[valueSrc] = {};
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (!typeConfig.operators && operators2) typeConfig.operators = Array.from(new Set(operators2));
      if (!typeConfig.defaultOperator && defaultOperator) typeConfig.defaultOperator = defaultOperator;
    }
    function extendFieldsConfig(subconfig, config2) {
      var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      for (var field in subconfig) {
        var fieldPathArr = [].concat(_toConsumableArray(path), [field]);
        extendFieldConfig(subconfig[field], config2, fieldPathArr);
        if (subconfig[field].subfields) {
          extendFieldsConfig(subconfig[field].subfields, config2, fieldPathArr);
        }
      }
    }
    function extendFuncsConfig(subconfig, config2) {
      var _config$settings;
      var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      if (!subconfig) return;
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings = config2.settings) === null || _config$settings === void 0 ? void 0 : _config$settings.fieldSeparator) || ".";
      for (var funcKey in subconfig) {
        var funcPathArr = [].concat(_toConsumableArray(path), [funcKey]);
        var funcPathStr = funcPathArr.join(fieldSeparator);
        var funcDef = subconfig[funcKey];
        if (funcDef.returnType) {
          funcDef.type = funcDef.returnType;
          if (!config2.__funcsCntByType[funcDef.returnType]) config2.__funcsCntByType[funcDef.returnType] = 0;
          config2.__funcsCntByType[funcDef.returnType]++;
        }
        extendFieldConfig(funcDef, config2, funcPathArr, false);
        if (funcDef.args) {
          for (var argKey in funcDef.args) {
            extendFieldConfig(funcDef.args[argKey], config2, [].concat(_toConsumableArray(funcPathArr), [argKey]), true);
          }
          var argKeys = Object.keys(funcDef.args);
          var tmpIsOptional = true;
          var _iterator2 = _createForOfIteratorHelper$7(argKeys.reverse()), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var _argKey = _step2.value;
              var argDef = funcDef.args[_argKey];
              if (!tmpIsOptional && argDef.isOptional) {
                logger$1.info("Arg ".concat(_argKey, " for func ").concat(funcPathStr, " can't be optional"));
                delete argDef.isOptional;
              }
              if (!argDef.isOptional) tmpIsOptional = false;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        if (funcDef.subfields) {
          extendFuncsConfig(funcDef.subfields, config2, [].concat(_toConsumableArray(path), [funcKey]));
        }
      }
    }
    function normalizeFieldSettings(fieldConfig, config2, type) {
      var _fieldConfig$fieldSet, _fieldConfig$fieldSet2;
      var keysToPutInFieldSettings = ["listValues", "treeValues", "allowCustomValues", "validateValue"];
      for (var _i = 0, _keysToPutInFieldSett = keysToPutInFieldSettings; _i < _keysToPutInFieldSett.length; _i++) {
        var k2 = _keysToPutInFieldSett[_i];
        if (fieldConfig[k2]) {
          if (!fieldConfig.fieldSettings) fieldConfig.fieldSettings = {};
          fieldConfig.fieldSettings[k2] = fieldConfig[k2];
          delete fieldConfig[k2];
        }
      }
      if ((_fieldConfig$fieldSet = fieldConfig.fieldSettings) !== null && _fieldConfig$fieldSet !== void 0 && _fieldConfig$fieldSet.listValues) {
        if (config2.settings.normalizeListValues) {
          fieldConfig.fieldSettings.listValues = config2.settings.normalizeListValues.call(config2.ctx, fieldConfig.fieldSettings.listValues, type, fieldConfig.fieldSettings);
        }
      }
      if ((_fieldConfig$fieldSet2 = fieldConfig.fieldSettings) !== null && _fieldConfig$fieldSet2 !== void 0 && _fieldConfig$fieldSet2.treeValues) {
        if (config2.settings.normalizeListValues) {
          fieldConfig.fieldSettings.treeValues = config2.settings.normalizeListValues.call(config2.ctx, fieldConfig.fieldSettings.treeValues, type, fieldConfig.fieldSettings);
        }
      }
    }
    function extendFieldConfig(fieldConfig, config2) {
      var _fieldSeparator;
      var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      var isFuncArg = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var isCaseValue = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var _config$settings2 = config2.settings, showLabels = _config$settings2.showLabels, fieldSeparator = _config$settings2.fieldSeparator;
      fieldSeparator = (_fieldSeparator = fieldSeparator) !== null && _fieldSeparator !== void 0 ? _fieldSeparator : ".";
      var argKey = path[path.length - 1];
      var funcKey = isFuncArg ? path.slice(0, path.length - 1).join(fieldSeparator) : path.join(fieldSeparator);
      var isFunc = !!fieldConfig.returnType;
      var type = fieldConfig.type || fieldConfig.returnType;
      var typeConfig = config2.types[type];
      var excludeOperatorsForField = fieldConfig.excludeOperators || [];
      var operators2 = (fieldConfig.operators || (typeConfig === null || typeConfig === void 0 ? void 0 : typeConfig.operators) || []).filter(function(op) {
        return !excludeOperatorsForField.includes(op);
      });
      var defaultOperator = fieldConfig.defaultOperator || (typeConfig === null || typeConfig === void 0 ? void 0 : typeConfig.defaultOperator);
      if (excludeOperatorsForField.includes(defaultOperator)) defaultOperator = void 0;
      var hasOwnDefaultOperator = !!defaultOperator && defaultOperator == fieldConfig.defaultOperator;
      if (hasOwnDefaultOperator) {
        fieldConfig.ownDefaultOperator = fieldConfig.defaultOperator;
      }
      if (!typeConfig) {
        fieldConfig.disabled = true;
        return;
      }
      if (!isFuncArg && !isFunc && !isCaseValue) {
        if (!config2.__fieldsCntByType[type]) config2.__fieldsCntByType[type] = 0;
        config2.__fieldsCntByType[type]++;
      }
      if (isFuncArg) {
        fieldConfig._isFuncArg = true;
        fieldConfig._argKey = argKey;
        fieldConfig._funcKey = funcKey;
      }
      if (isFunc) {
        fieldConfig._isFunc = true;
        fieldConfig._funcKey = funcKey;
      }
      if (isCaseValue) {
        fieldConfig._isCaseValue = true;
      }
      normalizeFieldSettings(fieldConfig, config2, type);
      var excludeKeysFromType = ["widgets", "operators", "defaultOperator"];
      Object.keys(typeConfig).filter(function(k2) {
        return !excludeKeysFromType.includes(k2);
      }).map(function(k2) {
        if (!fieldConfig[k2]) {
          fieldConfig[k2] = shallowCopy(typeConfig[k2]);
        }
      });
      var excludeOperatorsForType = typeConfig.excludeOperators || [];
      if (fieldConfig.operators) {
        excludeOperatorsForType = excludeOperatorsForType.filter(function(op) {
          return !fieldConfig.operators.includes(op);
        });
      }
      if (!fieldConfig.widgets) fieldConfig.widgets = {};
      var _loop = function _loop2() {
        var fieldWidgetConfig = _objectSpread$p({}, fieldConfig.widgets[widget] || {});
        var typeWidgetConfig = typeConfig.widgets[widget] || {};
        if (!isFuncArg) {
          var defOp = fieldWidgetConfig.defaultOperator;
          var excludeOperators = [].concat(_toConsumableArray(excludeOperatorsForField), _toConsumableArray(excludeOperatorsForType));
          var shouldIncludeOperators = fieldConfig.preferWidgets && (widget === "field" || fieldConfig.preferWidgets.includes(widget)) || excludeOperators.length > 0;
          if (fieldWidgetConfig.operators) {
            var addOperators = fieldWidgetConfig.operators.filter(function(op2) {
              return !excludeOperators.includes(op2);
            });
            fieldWidgetConfig.operators = addOperators;
            operators2 = mergeArraysSmart(operators2, addOperators);
          } else if (shouldIncludeOperators && typeWidgetConfig.operators) {
            var _addOperators = typeWidgetConfig.operators.filter(function(op2) {
              return !excludeOperators.includes(op2);
            });
            fieldWidgetConfig.operators = _addOperators;
            operators2 = mergeArraysSmart(operators2, _addOperators);
          }
          if (defOp && !excludeOperators.includes(defOp)) {
            if (!defaultOperator || !hasOwnDefaultOperator && widget === fieldConfig.mainWidget) {
              defaultOperator = defOp;
            }
          }
        }
        if (widget === fieldConfig.mainWidget) {
          fieldWidgetConfig.widgetProps = _objectSpread$p(_objectSpread$p(_objectSpread$p({}, typeWidgetConfig.widgetProps || {}), fieldConfig.mainWidgetProps || {}), fieldWidgetConfig.widgetProps || {});
        } else {
          fieldWidgetConfig.widgetProps = _objectSpread$p(_objectSpread$p({}, typeWidgetConfig.widgetProps || {}), fieldWidgetConfig.widgetProps || {});
        }
        var opKeys = Array.from(new Set([].concat(_toConsumableArray(Object.keys(typeWidgetConfig.opProps || {})), _toConsumableArray(Object.keys(fieldWidgetConfig.opProps || {})))));
        if (opKeys.length) {
          var opProps = {};
          var _iterator3 = _createForOfIteratorHelper$7(opKeys), _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
              var _typeWidgetConfig$opP, _fieldWidgetConfig$op;
              var op = _step3.value;
              opProps[op] = _objectSpread$p(_objectSpread$p({}, ((_typeWidgetConfig$opP = typeWidgetConfig.opProps) === null || _typeWidgetConfig$opP === void 0 ? void 0 : _typeWidgetConfig$opP[op]) || {}), ((_fieldWidgetConfig$op = fieldWidgetConfig.opProps) === null || _fieldWidgetConfig$op === void 0 ? void 0 : _fieldWidgetConfig$op[op]) || {});
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          fieldWidgetConfig.opProps = opProps;
        }
        var _fieldWidgetConfig = fieldWidgetConfig, valueLabel = _fieldWidgetConfig.valueLabel, valuePlaceholder = _fieldWidgetConfig.valuePlaceholder;
        if (isFuncArg) {
          if (!valueLabel) fieldWidgetConfig.valueLabel = fieldConfig.label || argKey;
          if (!valuePlaceholder && !showLabels) fieldWidgetConfig.valuePlaceholder = fieldConfig.label || argKey;
        }
        fieldWidgetConfig = _objectSpread$p(_objectSpread$p({}, typeWidgetConfig), fieldWidgetConfig);
        fieldConfig.widgets[widget] = fieldWidgetConfig;
      };
      for (var widget in typeConfig.widgets) {
        _loop();
      }
      if (!isFuncArg) {
        if (!fieldConfig.operators) {
          fieldConfig.operators = Array.from(new Set(operators2));
        }
        if (!fieldConfig.defaultOperator) {
          fieldConfig.defaultOperator = defaultOperator;
        }
      }
      if (!isFuncArg && !isFunc && !isCaseValue) {
        var _computeFieldName = computeFieldName(config2, path), fieldName = _computeFieldName.fieldName, inGroup = _computeFieldName.inGroup;
        if (fieldName) {
          fieldConfig.fieldName = fieldName;
          if (!config2.__fieldNames[fieldName]) config2.__fieldNames[fieldName] = [];
          config2.__fieldNames[fieldName].push({
            fullPath: path,
            inGroup
          });
        }
      }
    }
    function computeFieldName(config2, path) {
      if (!path) return {};
      var fieldSeparator = config2.settings.fieldSeparator;
      var _reduce = _toConsumableArray(path).reduce(function(_ref, f2, i, arr) {
        var computedPath2 = _ref.computedPath, computed2 = _ref.computed, inGroup2 = _ref.inGroup;
        var fullPath = [].concat(_toConsumableArray(arr.slice(0, i)), [f2]);
        var fConfig = getFieldRawConfig(config2, fullPath);
        if ((fConfig === null || fConfig === void 0 ? void 0 : fConfig.type) === "!group" && i < arr.length - 1) {
          inGroup2 = fullPath.join(fieldSeparator);
          computedPath2 = [];
        } else if (fConfig !== null && fConfig !== void 0 && fConfig.fieldName) {
          computed2 = true;
          computedPath2 = [fConfig.fieldName];
        } else {
          computedPath2 = [].concat(_toConsumableArray(computedPath2), [f2]);
        }
        return {
          computedPath: computedPath2,
          computed: computed2,
          inGroup: inGroup2
        };
      }, {
        computedPath: [],
        computed: false,
        inGroup: void 0
      }), computedPath = _reduce.computedPath, computed = _reduce.computed, inGroup = _reduce.inGroup;
      return computed ? {
        fieldName: computedPath.join(fieldSeparator),
        inGroup
      } : {};
    }
    function ownKeys$o(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$o(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$o(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$o(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var _marked = /* @__PURE__ */ _regeneratorRuntime.mark(iterateFuncs), _marked2 = /* @__PURE__ */ _regeneratorRuntime.mark(iterateFields);
    var _widgetDefKeysToOmit$1 = widgetDefKeysToOmit;
    function iterateFuncs(config2) {
      return _regeneratorRuntime.wrap(function iterateFuncs$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            return _context.delegateYield(_iterateFields(config2, config2.funcs || {}, []), "t0", 1);
          case 1:
          case "end":
            return _context.stop();
        }
      }, _marked);
    }
    function iterateFields(config2) {
      return _regeneratorRuntime.wrap(function iterateFields$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.delegateYield(_iterateFields(config2, config2.fields || {}, []), "t0", 1);
          case 1:
          case "end":
            return _context2.stop();
        }
      }, _marked2);
    }
    function _iterateFields(config2, subfields, path) {
      var subfieldsKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "subfields";
      return /* @__PURE__ */ _regeneratorRuntime.mark(function _callee(_config$settings) {
        var fieldSeparator, fieldKey, fieldConfig;
        return _regeneratorRuntime.wrap(function _callee$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings = config2.settings) === null || _config$settings === void 0 ? void 0 : _config$settings.fieldSeparator) || ".";
              _context3.t0 = _regeneratorRuntime.keys(subfields);
            case 2:
              if ((_context3.t1 = _context3.t0()).done) {
                _context3.next = 13;
                break;
              }
              fieldKey = _context3.t1.value;
              fieldConfig = subfields[fieldKey];
              if (!fieldConfig[subfieldsKey]) {
                _context3.next = 9;
                break;
              }
              return _context3.delegateYield(_iterateFields(config2, fieldConfig[subfieldsKey], [].concat(_toConsumableArray(path), [fieldKey]), subfieldsKey), "t2", 7);
            case 7:
              _context3.next = 11;
              break;
            case 9:
              _context3.next = 11;
              return [[].concat(_toConsumableArray(path), [fieldKey]).join(fieldSeparator), fieldConfig];
            case 11:
              _context3.next = 2;
              break;
            case 13:
            case "end":
              return _context3.stop();
          }
        }, _callee);
      })();
    }
    var getFieldRawConfig = function getFieldRawConfig2(config2, field) {
      var _config$settings3;
      var fieldsKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "fields";
      var subfieldsKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "subfields";
      if (!field) return null;
      if (field === "!case_value") {
        var _config$settings2;
        return config2 === null || config2 === void 0 || (_config$settings2 = config2.settings) === null || _config$settings2 === void 0 ? void 0 : _config$settings2.caseValueField;
      }
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings3 = config2.settings) === null || _config$settings3 === void 0 ? void 0 : _config$settings3.fieldSeparator) || ".";
      var parts = getFieldParts$3(field, config2);
      var targetFields = config2[fieldsKey];
      if (!targetFields) return null;
      var fields2 = targetFields;
      var fieldConfig = null;
      var path = [];
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        path.push(part);
        var pathKey = path.join(fieldSeparator);
        fieldConfig = fields2[pathKey];
        if (i < parts.length - 1) {
          if (fieldConfig && fieldConfig[subfieldsKey]) {
            fields2 = fieldConfig[subfieldsKey];
            path = [];
          } else {
            fieldConfig = null;
          }
        }
      }
      return fieldConfig;
    };
    var normalizeField = function normalizeField2(config2, field) {
      var _config$__fieldNames$, _config$__fieldNames$2;
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var path = [parentField].concat(_toConsumableArray(field.split(fieldSeparator))).filter(function(f2) {
        return f2 != null;
      });
      var findStr = field;
      var normalizedPath = (_config$__fieldNames$ = config2.__fieldNames[findStr]) === null || _config$__fieldNames$ === void 0 || (_config$__fieldNames$2 = _config$__fieldNames$.find) === null || _config$__fieldNames$2 === void 0 || (_config$__fieldNames$2 = _config$__fieldNames$2.call(_config$__fieldNames$, function(_ref) {
        var inGroup = _ref.inGroup;
        if (inGroup) return parentField === null || parentField === void 0 ? void 0 : parentField.startsWith(inGroup);
        return true;
      })) === null || _config$__fieldNames$2 === void 0 ? void 0 : _config$__fieldNames$2.fullPath;
      return (normalizedPath || path).join(fieldSeparator);
    };
    var getFuncSignature = function getFuncSignature2(config2, func) {
      if (!func) return null;
      var funcConfig = getFieldRawConfig(config2, func, "funcs", "subfields");
      if (!funcConfig) return null;
      var returnType = funcConfig.returnType, args = funcConfig.args;
      var argsSignature = Object.fromEntries(Object.entries(args || {}).map(function(_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2), k2 = _ref3[0], v2 = _ref3[1];
        var argSignature = pick$1(v2, [
          "type",
          "valueSources",
          "defaultValue",
          "fieldSettings",
          // "asyncListValues", // not supported
          "isOptional",
          // to get proper caching key
          "_funcKey",
          "_argKey",
          "_isFuncArg"
        ]);
        return [k2, argSignature];
      }));
      var signature = {
        returnType,
        args: argsSignature
      };
      return signature;
    };
    var getFuncConfig$2 = function getFuncConfig2(config2, func) {
      if (!func) return null;
      var funcConfig = getFieldRawConfig(config2, func, "funcs", "subfields");
      if (!funcConfig) return null;
      return funcConfig;
    };
    var getFuncArgConfig = function getFuncArgConfig2(config2, funcKey, argKey) {
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) return null;
      var argConfig = funcConfig.args && funcConfig.args[argKey] || null;
      if (!argConfig) return null;
      return argConfig;
    };
    var isFieldDescendantOfField = function isFieldDescendantOfField2(field, parentField) {
      var _config$settings4;
      var config2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!parentField) return false;
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings4 = config2.settings) === null || _config$settings4 === void 0 ? void 0 : _config$settings4.fieldSeparator) || ".";
      var path = getFieldPath(field, config2);
      var parentPath = getFieldPath(parentField, config2);
      return path.startsWith(parentPath + fieldSeparator);
    };
    var getFieldPath = function getFieldPath2(field) {
      var _config$settings5;
      var config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      if (typeof field === "string") return field;
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings5 = config2.settings) === null || _config$settings5 === void 0 ? void 0 : _config$settings5.fieldSeparator) || ".";
      return getFieldParts$3(field, config2).join(fieldSeparator);
    };
    var getFieldParts$3 = function getFieldParts2(field) {
      var _config$settings6, _field$get, _field$split;
      var config2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      if (!field) return [];
      if (Array.isArray(field)) return field;
      var fieldSeparator = (config2 === null || config2 === void 0 || (_config$settings6 = config2.settings) === null || _config$settings6 === void 0 ? void 0 : _config$settings6.fieldSeparator) || ".";
      if (field !== null && field !== void 0 && field.func) {
        return Array.isArray(field.func) ? field.func : field.func.split(fieldSeparator);
      }
      if (field !== null && field !== void 0 && (_field$get = field.get) !== null && _field$get !== void 0 && _field$get.call(field, "func")) {
        var _field$get2;
        return field === null || field === void 0 || (_field$get2 = field.get) === null || _field$get2 === void 0 ? void 0 : _field$get2.call(field, "func").split(fieldSeparator);
      }
      return (field === null || field === void 0 || (_field$split = field.split) === null || _field$split === void 0 ? void 0 : _field$split.call(field, fieldSeparator)) || [];
    };
    var getFieldPathParts$3 = function getFieldPathParts2(field, config2) {
      var onlyKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (!field) return null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = getFieldParts$3(field, config2);
      if (onlyKeys) return parts;
      else return parts.map(function(_curr, ind, arr) {
        return arr.slice(0, ind + 1);
      }).map(function(parts2) {
        return parts2.join(fieldSeparator);
      });
    };
    var getFieldId$1 = function getFieldId2(field) {
      var _field$get3;
      if (typeof field === "string" || Array.isArray(field)) {
        return "field:".concat(getFieldPath(field));
      }
      if (_typeof$1(field) === "object" && field) {
        if (field._funcKey && field._argKey) {
          return "arg:".concat(getFieldPath(field._funcKey), "__").concat(field._argKey);
        }
        if (field._funcKey) {
          return "func:".concat(getFieldPath(field._funcKey));
        }
        if (field.func && field.arg) {
          return "arg:".concat(getFieldPath(field.func), "__").concat(field.arg);
        }
        if (field.func) {
          return "func:".concat(getFieldPath(field.func));
        }
        if (field.type) {
          return null;
        }
      }
      if (field !== null && field !== void 0 && (_field$get3 = field.get) !== null && _field$get3 !== void 0 && _field$get3.call(field, "func")) {
        if (field !== null && field !== void 0 && field.get("arg")) {
          return "arg:".concat(getFieldPath(field.get("func")), "__").concat(field.get("arg"));
        } else {
          return "func:".concat(getFieldPath(field.get("func")));
        }
      }
      return null;
    };
    var _getFromConfigCache = function _getFromConfigCache2(config2, bucketKey, cacheKey) {
      var _config$__cache;
      return (_config$__cache = config2.__cache) === null || _config$__cache === void 0 || (_config$__cache = _config$__cache[bucketKey]) === null || _config$__cache === void 0 ? void 0 : _config$__cache[cacheKey];
    };
    var _saveToConfigCache = function _saveToConfigCache2(config2, bucketKey, cacheKey, value2) {
      if (!config2.__cache || !cacheKey) {
        return;
      }
      if (!config2.__cache[bucketKey]) {
        config2.__cache[bucketKey] = {};
      }
      config2.__cache[bucketKey][cacheKey] = value2;
    };
    var getFieldSrc = function getFieldSrc2(field) {
      var _field$get4;
      if (!field) return null;
      if (_typeof$1(field) === "object") {
        if (!field.func && !!field.type) {
          return "field";
        }
        if (field.func) {
          if (field.func && field.arg) {
            return null;
          } else {
            return "func";
          }
        }
      }
      if (field !== null && field !== void 0 && (_field$get4 = field.get) !== null && _field$get4 !== void 0 && _field$get4.call(field, "func")) {
        if (field !== null && field !== void 0 && field.get("arg")) {
          return null;
        } else {
          return "func";
        }
      }
      return "field";
    };
    var getFieldConfig$b = function getFieldConfig2(config2, field) {
      var _field$get5;
      if (!field) return null;
      if (_typeof$1(field) == "object") {
        if (!field.func && !!field.type) {
          return field;
        }
        if (field.func) {
          if (field.func && field.arg) {
            return getFuncArgConfig(config2, field.func, field.arg);
          } else {
            return getFuncConfig$2(config2, field.func);
          }
        }
      }
      if (field !== null && field !== void 0 && (_field$get5 = field.get) !== null && _field$get5 !== void 0 && _field$get5.call(field, "func")) {
        if (field !== null && field !== void 0 && field.get("arg")) {
          return getFuncArgConfig(config2, field.get("func"), field.get("arg"));
        } else {
          return getFuncConfig$2(config2, field.get("func"));
        }
      }
      var fieldConfig = getFieldRawConfig(config2, field);
      if (!fieldConfig) return null;
      return fieldConfig;
    };
    var getOperatorConfig$4 = function getOperatorConfig2(config2, operator) {
      var field = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!operator) return null;
      var opConfig = config2.operators[operator];
      if (field) {
        var _widgetConfig$opProps, _fieldWidgetConfig$op;
        var fieldCacheKey = getFieldId$1(field);
        var cacheKey = fieldCacheKey ? "".concat(fieldCacheKey, "__").concat(operator) : null;
        var cached = _getFromConfigCache(config2, "getOperatorConfig", cacheKey);
        if (cached) return cached;
        var fieldConfig = getFieldConfig$b(config2, field);
        var widget = getWidgetForFieldOp$3(config2, field, operator, null);
        var widgetConfig = config2.widgets[widget] || {};
        var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};
        var widgetOpProps = ((_widgetConfig$opProps = widgetConfig.opProps) === null || _widgetConfig$opProps === void 0 ? void 0 : _widgetConfig$opProps[operator]) || {};
        var fieldWidgetOpProps = ((_fieldWidgetConfig$op = fieldWidgetConfig.opProps) === null || _fieldWidgetConfig$op === void 0 ? void 0 : _fieldWidgetConfig$op[operator]) || {};
        var mergedConfig = _objectSpread$o(_objectSpread$o(_objectSpread$o({}, opConfig), widgetOpProps), fieldWidgetOpProps);
        _saveToConfigCache(config2, "getOperatorConfig", cacheKey, mergedConfig);
        return mergedConfig;
      } else {
        return opConfig;
      }
    };
    var getFieldWidgetConfig$3 = function getFieldWidgetConfig2(config2, field) {
      var _fieldConfig$widgets;
      var operator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var widget = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var valueSrc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var meta = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
      if (!field) return null;
      var fieldConfig = getFieldConfig$b(config2, field);
      var fieldCacheKey = getFieldId$1(field);
      if (!widget) {
        widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
      }
      var cacheKey = fieldCacheKey ? "".concat(fieldCacheKey, "__").concat(operator, "__").concat(widget, "__").concat(valueSrc) : null;
      var cached = _getFromConfigCache(config2, "getFieldWidgetConfig", cacheKey);
      if (cached) return cached;
      var widgetConfig = config2.widgets[widget] || {};
      var fieldWidgetConfig = (fieldConfig === null || fieldConfig === void 0 || (_fieldConfig$widgets = fieldConfig.widgets) === null || _fieldConfig$widgets === void 0 ? void 0 : _fieldConfig$widgets[widget]) || {};
      var fieldWidgetProps = fieldWidgetConfig.widgetProps || {};
      var valueFieldSettings = valueSrc === "value" || !valueSrc ? fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.fieldSettings : {};
      var mergedConfig = _objectSpread$o(_objectSpread$o(_objectSpread$o(_objectSpread$o({}, widgetConfig), fieldWidgetConfig), fieldWidgetProps), valueFieldSettings);
      _saveToConfigCache(config2, "getFieldWidgetConfig", cacheKey, mergedConfig);
      if (meta.forExport) {
        mergedConfig = omit$2(mergedConfig, "factory");
      }
      return mergedConfig;
    };
    var getFirstField = function getFirstField2(config2) {
      var parentRuleGroupField = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parentPathArr = getFieldParts$3(parentRuleGroupField, config2);
      var parentField = parentRuleGroupField ? getFieldRawConfig(config2, parentRuleGroupField) : config2;
      var firstField = parentField, key = null, keysPath = [];
      do {
        var _firstField;
        var subfields = firstField === config2 ? config2.fields : (_firstField = firstField) === null || _firstField === void 0 ? void 0 : _firstField.subfields;
        if (!subfields || !Object.keys(subfields).length) {
          firstField = key = null;
          break;
        }
        key = Object.keys(subfields)[0];
        keysPath.push(key);
        firstField = subfields[key];
      } while (firstField.type == "!struct" || firstField.type == "!group");
      return (parentPathArr || []).concat(keysPath).join(fieldSeparator);
    };
    const configUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      _getFromConfigCache,
      _saveToConfigCache,
      _widgetDefKeysToOmit: _widgetDefKeysToOmit$1,
      applyJsonLogic,
      cleanJSX,
      compileConfig,
      compressConfig,
      configKeys,
      createConfigMemo: createConfigMemo$1,
      decompressConfig,
      extendConfig,
      findExtendedConfigInAllMemos,
      getCommonMemo,
      getFieldConfig: getFieldConfig$b,
      getFieldId: getFieldId$1,
      getFieldParts: getFieldParts$3,
      getFieldPath,
      getFieldPathParts: getFieldPathParts$3,
      getFieldRawConfig,
      getFieldSrc,
      getFieldWidgetConfig: getFieldWidgetConfig$3,
      getFirstField,
      getFuncArgConfig,
      getFuncConfig: getFuncConfig$2,
      getFuncSignature,
      getOperatorConfig: getOperatorConfig$4,
      isDirtyJSX,
      isFieldDescendantOfField,
      isJSX,
      iterateFields,
      iterateFuncs,
      normalizeField
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$n(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$n(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$n(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$n(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var queryBuilderFormat = function queryBuilderFormat2(item, config2) {
      var meta = {
        usedFields: []
      };
      var res = formatItem$3(item, config2, meta);
      if (!res) return void 0;
      return _objectSpread$n(_objectSpread$n({}, res), meta);
    };
    var formatItem$3 = function formatItem2(item, config2, meta) {
      if (!item) return void 0;
      var type = item.get("type");
      var children = item.get("children1");
      if ((type === "group" || type === "rule_group") && children && children.size) {
        return formatGroup$3(item, config2, meta);
      } else if (type === "rule") {
        return formatRule$3(item, config2, meta);
      }
      return void 0;
    };
    var formatGroup$3 = function formatGroup2(item, config2, meta) {
      var properties = item.get("properties") || new Map$5();
      var children = item.get("children1");
      var id2 = item.get("id");
      var list = children.map(function(currentChild) {
        return formatItem$3(currentChild, config2, meta);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!list.size) return void 0;
      var conjunction = properties.get("conjunction");
      if (!conjunction) conjunction = defaultConjunction(config2);
      var not2 = properties.get("not");
      var resultQuery = {
        id: id2,
        rules: list.toList(),
        condition: conjunction.toUpperCase(),
        not: not2
      };
      return resultQuery;
    };
    var formatRule$3 = function formatRule2(item, config2, meta) {
      var _valueType;
      var properties = item.get("properties") || new Map$5();
      var id2 = item.get("id");
      var operator = properties.get("operator");
      var options = properties.get("operatorOptions");
      var field = properties.get("field");
      var value2 = properties.get("value");
      var valueSrc = properties.get("valueSrc");
      var valueType = properties.get("valueType");
      var hasUndefinedValues = value2.filter(function(v2) {
        return v2 === void 0;
      }).size > 0;
      if (field == null || operator == null || hasUndefinedValues) return void 0;
      var fieldDefinition = getFieldConfig$b(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var fieldType = fieldDefinition.type || "undefined";
      var cardinality = getOpCardinality$1(operatorDefinition);
      var typeConfig = config2.types[fieldDefinition.type] || {};
      var fieldName = formatFieldName(field, config2, meta);
      if (value2.size < cardinality) return void 0;
      if (meta.usedFields.indexOf(field) == -1) meta.usedFields.push(field);
      value2 = value2.toArray();
      valueSrc = valueSrc.toArray();
      valueType = ((_valueType = valueType) === null || _valueType === void 0 ? void 0 : _valueType.toArray()) || [];
      var values = [];
      for (var i = 0; i < value2.length; i++) {
        var val = {
          type: valueType[i],
          value: value2[i]
        };
        values.push(val);
        if (valueSrc[i] == "field") {
          var secondField = value2[i];
          if (meta.usedFields.indexOf(secondField) == -1) meta.usedFields.push(secondField);
        }
      }
      var operatorOptions = options ? options.toJS() : null;
      if (operatorOptions && !Object.keys(operatorOptions).length) operatorOptions = null;
      var ruleQuery = {
        id: id2,
        fieldName,
        type: fieldType,
        input: typeConfig.mainWidget,
        operator
      };
      if (operatorOptions) ruleQuery.operatorOptions = operatorOptions;
      ruleQuery.values = values;
      return ruleQuery;
    };
    function ownKeys$m(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$m(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$m(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$m(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _createForOfIteratorHelper$6(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$6(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$6(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$6(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$6(o, minLen);
    }
    function _arrayLikeToArray$6(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var jsonLogicFormat$1 = function jsonLogicFormat2(item, config2) {
      var meta = {
        usedFields: [],
        errors: []
      };
      var extendedConfig = extendConfig(config2, void 0, false);
      var logic2 = formatItem$2(item, extendedConfig, meta, false, true);
      var errors = meta.errors, usedFields = meta.usedFields;
      extendedConfig.settings.fieldSeparator;
      var data = {};
      var _iterator = _createForOfIteratorHelper$6(usedFields), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var ff2 = _step.value;
          var parts = getFieldParts$3(ff2, config2);
          var def = getFieldConfig$b(extendedConfig, ff2) || {};
          var tmp = data;
          for (var i = 0; i < parts.length; i++) {
            var p2 = parts[i];
            var pdef = getFieldConfig$b(extendedConfig, parts.slice(0, i + 1)) || {};
            if (i != parts.length - 1) {
              if (pdef.type == "!group" && pdef.mode != "struct") {
                if (!tmp[p2]) tmp[p2] = [{}];
                tmp = tmp[p2][0];
              } else {
                if (!tmp[p2]) tmp[p2] = {};
                tmp = tmp[p2];
              }
            } else {
              if (!tmp[p2]) tmp[p2] = null;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return {
        errors,
        logic: logic2,
        data
      };
    };
    var formatItem$2 = function formatItem2(item, config2, meta) {
      var _not = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var isRoot = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var parentField = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      if (!item) return void 0;
      var type = item.get("type");
      var properties = item.get("properties") || new Map$5();
      var isLocked = properties.get("isLocked");
      var lockedOp = config2.settings.jsonLogic.lockedOp;
      var ret;
      if (type === "group" || type === "rule_group") {
        ret = formatGroup$2(item, config2, meta, _not, isRoot, parentField);
      } else if (type === "rule") {
        ret = formatRule$2(item, config2, meta, _not, parentField);
      } else if (type == "switch_group") {
        ret = formatSwitch(item, config2, meta, _not);
      } else if (type == "case_group") {
        ret = formatCase(item, config2, meta, _not, parentField);
      }
      if (isLocked && ret && lockedOp) {
        ret = _defineProperty$1({}, lockedOp, ret);
      }
      return ret;
    };
    var formatGroup$2 = function formatGroup2(item, config2, meta) {
      var _groupOperatorDef, _groupOperatorDef2, _groupOperatorDef3, _reversedGroupOpDef, _reversedGroupOpDef2, _getOneChildOrDescend;
      var _not = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var isRoot = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var parentField = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var type = item.get("type");
      var properties = item.get("properties") || new Map$5();
      var mode = properties.get("mode");
      var children = item.get("children1") || new List();
      var field = properties.get("field");
      var fieldDefinition = getFieldConfig$b(config2, field);
      var conjunction = properties.get("conjunction");
      if (!conjunction) conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var conj = (conjunctionDefinition === null || conjunctionDefinition === void 0 ? void 0 : conjunctionDefinition.jsonLogicConj) || conjunction.toLowerCase();
      var origNot = !!properties.get("not");
      var isRuleGroup = type === "rule_group" && !isRoot;
      var isRuleGroupArray = isRuleGroup && mode != "struct";
      var groupField = isRuleGroupArray ? field : parentField;
      var groupOperator = properties.get("operator");
      var groupOperatorDef = groupOperator && getOperatorConfig$4(config2, groupOperator, field) || null;
      var formattedValue = formatItemValue(config2, properties, meta, groupOperator, parentField);
      var isGroup0 = isRuleGroup && (!groupOperator || ((_groupOperatorDef = groupOperatorDef) === null || _groupOperatorDef === void 0 ? void 0 : _groupOperatorDef.cardinality) == 0);
      var isRuleGroupWithChildren = isRuleGroup && (children === null || children === void 0 ? void 0 : children.size) > 0;
      isRuleGroup && !(children !== null && children !== void 0 && children.size);
      var not2 = origNot;
      var filterNot = false;
      if (isRuleGroupWithChildren) {
        filterNot = origNot;
        not2 = _not;
      } else {
        if (_not) {
          not2 = !not2;
        }
      }
      var revChildren = false;
      var reversedGroupOp = (_groupOperatorDef2 = groupOperatorDef) === null || _groupOperatorDef2 === void 0 ? void 0 : _groupOperatorDef2.reversedOp;
      var reversedGroupOpDef = getOperatorConfig$4(config2, reversedGroupOp, field);
      var groupOpNeedsReverse = !((_groupOperatorDef3 = groupOperatorDef) !== null && _groupOperatorDef3 !== void 0 && _groupOperatorDef3.jsonLogic) && !!((_reversedGroupOpDef = reversedGroupOpDef) !== null && _reversedGroupOpDef !== void 0 && _reversedGroupOpDef.jsonLogic);
      var groupOpCanReverse = !!((_reversedGroupOpDef2 = reversedGroupOpDef) !== null && _reversedGroupOpDef2 !== void 0 && _reversedGroupOpDef2.jsonLogic);
      var oneChildType = (_getOneChildOrDescend = getOneChildOrDescendant(item)) === null || _getOneChildOrDescend === void 0 ? void 0 : _getOneChildOrDescend.get("type");
      var canRevChildren = !!config2.settings.reverseOperatorsForNot && (!isRuleGroup && not2 && oneChildType === "rule" || filterNot && (children === null || children === void 0 ? void 0 : children.size) === 1);
      if (canRevChildren) {
        if (isRuleGroupWithChildren) {
          filterNot = !filterNot;
        } else {
          not2 = !not2;
        }
        revChildren = true;
      }
      var canRevGroupOp = not2 && isRuleGroup && groupOpCanReverse && (!!config2.settings.reverseOperatorsForNot || groupOpNeedsReverse);
      if (canRevGroupOp) {
        not2 = !not2;
        var _ref = [reversedGroupOp, groupOperator];
        groupOperator = _ref[0];
        reversedGroupOp = _ref[1];
        var _ref2 = [reversedGroupOpDef, groupOperatorDef];
        groupOperatorDef = _ref2[0];
        reversedGroupOpDef = _ref2[1];
      }
      var list = children.map(function(currentChild) {
        return formatItem$2(currentChild, config2, meta, revChildren, false, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      var shouldPreserveGroups = !!config2.settings.exportPreserveGroups;
      if (isRuleGroupArray && !isGroup0) {
        if (formattedValue == void 0) return void 0;
      } else {
        if (!list.size && !shouldPreserveGroups) return void 0;
      }
      var preserveSingleRuleGroup = isRoot || shouldPreserveGroups || list.size != 1;
      if (!preserveSingleRuleGroup && origNot && !revChildren) {
        preserveSingleRuleGroup = children.some(function(currentChild) {
          var _currentChild$get, _config$operators, _config$operators$rev, _config$operators2;
          var op2 = (_currentChild$get = currentChild.get("properties")) === null || _currentChild$get === void 0 ? void 0 : _currentChild$get.get("operator");
          var revOp = (_config$operators = config2["operators"]) === null || _config$operators === void 0 || (_config$operators = _config$operators[op2]) === null || _config$operators === void 0 ? void 0 : _config$operators.reversedOp;
          return (_config$operators$rev = (_config$operators2 = config2.operators) === null || _config$operators2 === void 0 || (_config$operators2 = _config$operators2[revOp]) === null || _config$operators2 === void 0 ? void 0 : _config$operators2._jsonLogicIsExclamationOp) !== null && _config$operators$rev !== void 0 ? _config$operators$rev : false;
        });
      }
      var resultQuery = {};
      if (preserveSingleRuleGroup) resultQuery[conj] = list.toList().toJS();
      else resultQuery = list.first();
      if (filterNot) {
        resultQuery = {
          "!": resultQuery
        };
      }
      if (isRuleGroupArray) {
        var formattedField = formatField$1(meta, config2, field, parentField);
        if (isGroup0) {
          var op = groupOperator || "some";
          resultQuery = _defineProperty$1({}, op, [formattedField, resultQuery]);
        } else {
          var filter = !list.size ? formattedField : {
            "filter": [formattedField, resultQuery]
          };
          var count = {
            "reduce": [filter, {
              "+": [1, {
                "var": "accumulator"
              }]
            }, 0]
          };
          resultQuery = formatLogic(config2, properties, count, formattedValue, groupOperator, null, fieldDefinition);
        }
      }
      if (not2) {
        resultQuery = {
          "!": resultQuery
        };
      }
      return resultQuery;
    };
    var formatRule$2 = function formatRule2(item, config2, meta) {
      var _operatorDefinition, _operatorDefinition2, _revOperatorDefinitio, _operatorDefinition3, _revOperatorDefinitio2, _revOperatorDefinitio3;
      var _not = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var properties = item.get("properties") || new Map$5();
      var field = properties.get("field");
      var fieldSrc = properties.get("fieldSrc");
      var operator = properties.get("operator");
      var operatorOptions = properties.get("operatorOptions");
      operatorOptions = operatorOptions ? operatorOptions.toJS() : null;
      if (operatorOptions && !Object.keys(operatorOptions).length) operatorOptions = null;
      if (field == null || operator == null) return void 0;
      var fieldDefinition = getFieldConfig$b(config2, field);
      var operatorDefinition = getOperatorConfig$4(config2, operator, field);
      var reversedOp = (_operatorDefinition = operatorDefinition) === null || _operatorDefinition === void 0 ? void 0 : _operatorDefinition.reversedOp;
      var revOperatorDefinition = getOperatorConfig$4(config2, reversedOp, field);
      if (!((_operatorDefinition2 = operatorDefinition) !== null && _operatorDefinition2 !== void 0 && _operatorDefinition2.jsonLogic) && !((_revOperatorDefinitio = revOperatorDefinition) !== null && _revOperatorDefinitio !== void 0 && _revOperatorDefinitio.jsonLogic)) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var not2 = _not;
      var opNeedsReverse = !((_operatorDefinition3 = operatorDefinition) !== null && _operatorDefinition3 !== void 0 && _operatorDefinition3.jsonLogic) && !!((_revOperatorDefinitio2 = revOperatorDefinition) !== null && _revOperatorDefinitio2 !== void 0 && _revOperatorDefinitio2.jsonLogic);
      var opCanReverse = !!((_revOperatorDefinitio3 = revOperatorDefinition) !== null && _revOperatorDefinitio3 !== void 0 && _revOperatorDefinitio3.jsonLogic);
      var canRev = opCanReverse && (!!config2.settings.reverseOperatorsForNot || opNeedsReverse);
      var needRev = not2 && canRev || opNeedsReverse;
      if (needRev) {
        not2 = !not2;
        var _ref3 = [reversedOp, operator];
        operator = _ref3[0];
        reversedOp = _ref3[1];
        var _ref4 = [revOperatorDefinition, operatorDefinition];
        operatorDefinition = _ref4[0];
        revOperatorDefinition = _ref4[1];
      }
      var formattedValue = formatItemValue(config2, properties, meta, operator, parentField);
      if (formattedValue === void 0) return void 0;
      var formattedField = fieldSrc === "func" ? formatFunc$2(meta, config2, field, parentField) : formatField$1(meta, config2, field, parentField);
      if (formattedField === void 0) return void 0;
      return formatLogic(config2, properties, formattedField, formattedValue, operator, operatorOptions, fieldDefinition, not2);
    };
    var formatSwitch = function formatSwitch2(item, config2, meta) {
      var _not = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var children = item.get("children1");
      if (!children) return void 0;
      var cases = children.map(function(currentChild) {
        return formatCase(currentChild, config2, meta, _not, null);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      }).valueSeq().toArray();
      var filteredCases = [];
      for (var i = 0; i < cases.length; i++) {
        if (i !== cases.length - 1 && !cases[i][0]) {
          meta.errors.push("No condition for case ".concat(i));
        } else {
          filteredCases.push(cases[i]);
          if (i === cases.length - 1 && cases[i][0]) {
            filteredCases.push([void 0, null]);
          }
        }
      }
      if (!filteredCases.length) return void 0;
      if (filteredCases.length === 1) {
        var _filteredCases$ = _slicedToArray(filteredCases[0], 2);
        _filteredCases$[0];
        var _defVal = _filteredCases$[1];
        if (_defVal == void 0) _defVal = null;
        return _defVal;
      }
      var ret = {
        "if": []
      };
      var ifArgs = ret["if"];
      var _filteredCases = _slicedToArray(filteredCases[filteredCases.length - 1], 2);
      _filteredCases[0];
      var defVal = _filteredCases[1];
      for (var _i = 0; _i < filteredCases.length - 1; _i++) {
        var isLastIf = _i === filteredCases.length - 2;
        var _filteredCases$_i = _slicedToArray(filteredCases[_i], 2), cond = _filteredCases$_i[0], value2 = _filteredCases$_i[1];
        if (value2 == void 0) value2 = null;
        if (cond == void 0) cond = true;
        ifArgs.push(cond);
        ifArgs.push(value2);
        if (isLastIf) {
          ifArgs.push(defVal);
        } else {
          ifArgs.push({
            "if": []
          });
          ifArgs = ifArgs[ifArgs.length - 1]["if"];
        }
      }
      return ret;
    };
    var formatCase = function formatCase2(item, config2, meta) {
      var _not = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var type = item.get("type");
      if (type != "case_group") {
        meta.errors.push("Unexpected child of type ".concat(type, " inside switch"));
        return void 0;
      }
      var properties = item.get("properties") || new Map$5();
      var cond = formatGroup$2(item, config2, meta, _not, parentField);
      var formattedItem = formatItemValue(config2, properties, meta, null, parentField, "!case_value");
      return [cond, formattedItem];
    };
    var formatItemValue = function formatItemValue2(config2, properties, meta, operator, parentField) {
      var expectedValueType = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var field = properties.get("field");
      var iValueSrc = properties.get("valueSrc");
      var iValueType = properties.get("valueType");
      if (expectedValueType == "!case_value" || iValueType && iValueType.get(0) == "case_value") {
        field = "!case_value";
      }
      var fieldDefinition = getFieldConfig$b(config2, field);
      var operatorDefinition = getOperatorConfig$4(config2, operator, field);
      var cardinality = getOpCardinality$1(operatorDefinition);
      var iValue = properties.get("value");
      var asyncListValues = properties.get("asyncListValues");
      if (iValue == void 0) return void 0;
      var oldUsedFields = meta.usedFields;
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDef = getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc, {
          forExport: true
        });
        var fv = formatValue$2(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDefinition, operator, operatorDefinition, parentField, asyncListValues);
        return fv;
      });
      var hasUndefinedValues = fvalue.filter(function(v2) {
        return v2 === void 0;
      }).size > 0;
      if (fvalue.size < cardinality || hasUndefinedValues) {
        meta.usedFields = oldUsedFields;
        return void 0;
      }
      return cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
    };
    var formatValue$2 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef) {
      var parentField = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : null;
      var asyncListValues = arguments.length > 10 ? arguments[10] : void 0;
      if (currentValue === void 0) return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$1(meta, config2, currentValue, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc$2(meta, config2, currentValue, parentField);
      } else if (typeof (fieldWidgetDef === null || fieldWidgetDef === void 0 ? void 0 : fieldWidgetDef.jsonLogic) === "function") {
        var fn = fieldWidgetDef.jsonLogic;
        var args = [
          currentValue,
          _objectSpread$m(_objectSpread$m({}, fieldDef ? pick$1(fieldDef, ["fieldSettings", "listValues"]) : {}), {}, {
            asyncListValues
          }),
          //useful options: valueFormat for date/time
          omit$2(fieldWidgetDef, widgetDefKeysToOmit)
        ];
        if (operator) {
          args.push(operator);
          args.push(operatorDef);
        }
        ret = fn.call.apply(fn, [config2.ctx].concat(args));
      } else {
        ret = currentValue;
      }
      return ret;
    };
    var formatFunc$2 = function formatFunc2(meta, config2, currentValue) {
      var _currentValue$get, _currentValue$get2;
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var funcKey = (_currentValue$get = currentValue.get) === null || _currentValue$get === void 0 ? void 0 : _currentValue$get.call(currentValue, "func");
      var args = (_currentValue$get2 = currentValue.get) === null || _currentValue$get2 === void 0 ? void 0 : _currentValue$get2.call(currentValue, "args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      var funcParts = getFieldParts$3(funcKey, config2);
      var funcLastKey = funcParts[funcParts.length - 1];
      if (!funcConfig) {
        meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
        return void 0;
      }
      if (!(funcConfig !== null && funcConfig !== void 0 && funcConfig.jsonLogic)) {
        meta.errors.push("Func ".concat(funcKey, " is not supported"));
        return void 0;
      }
      var formattedArgs = {};
      var gaps = [];
      var missingArgKeys = [];
      for (var argKey in funcConfig.args) {
        var _argValue;
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$b(config2, argConfig);
        var defaultValue = argConfig.defaultValue, isOptional = argConfig.isOptional;
        var defaultValueSrc = defaultValue !== null && defaultValue !== void 0 && defaultValue.func ? "func" : "value";
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        if (argValueSrc !== "func" && (_argValue = argValue) !== null && _argValue !== void 0 && _argValue.toJS) {
          argValue = argValue.toJS();
        }
        var operator = null;
        var widget = getWidgetForFieldOp$3(config2, argConfig, operator, argValueSrc);
        var fieldWidgetDef = getFieldWidgetConfig$3(config2, argConfig, operator, widget, argValueSrc, {
          forExport: true
        });
        var formattedArgVal = formatValue$2(meta, config2, argValue, argValueSrc, argConfig.type, fieldWidgetDef, fieldDef, null, null, parentField);
        if (argValue != void 0 && formattedArgVal === void 0) {
          if (argValueSrc != "func")
            meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        var formattedDefaultVal = void 0;
        if (formattedArgVal === void 0 && !isOptional && defaultValue != void 0) {
          var defaultWidget = getWidgetForFieldOp$3(config2, argConfig, operator, defaultValueSrc);
          var defaultFieldWidgetDef = getFieldWidgetConfig$3(config2, argConfig, operator, defaultWidget, defaultValueSrc, {
            forExport: true
          });
          formattedDefaultVal = formatValue$2(meta, config2, defaultValue, defaultValueSrc, argConfig.type, defaultFieldWidgetDef, fieldDef, null, null, parentField);
          if (formattedDefaultVal === void 0) {
            if (defaultValueSrc != "func")
              meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
            return void 0;
          }
        }
        var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
        if (finalFormattedVal !== void 0) {
          if (gaps.length) {
            var _iterator2 = _createForOfIteratorHelper$6(gaps), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                var missedArgKey = _step2.value;
                formattedArgs[missedArgKey] = void 0;
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
            gaps = [];
          }
          formattedArgs[argKey] = finalFormattedVal;
        } else {
          if (!isOptional) missingArgKeys.push(argKey);
          gaps.push(argKey);
        }
      }
      if (missingArgKeys.length) {
        return void 0;
      }
      var formattedArgsArr = Object.values(formattedArgs);
      var ret;
      if (typeof funcConfig.jsonLogic === "function") {
        var fn = funcConfig.jsonLogic;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var funcName = funcConfig.jsonLogic || funcLastKey;
        var isMethod = !!funcConfig.jsonLogicIsMethod;
        if (isMethod) {
          var obj = formattedArgsArr[0], params = formattedArgsArr.slice(1);
          if (params.length) {
            ret = {
              "method": [obj, funcName, params]
            };
          } else {
            ret = {
              "method": [obj, funcName]
            };
          }
        } else {
          ret = _defineProperty$1({}, funcName, formattedArgsArr);
        }
      }
      return ret;
    };
    var formatField$1 = function formatField2(meta, config2, field) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _config$settings = config2.settings, fieldSeparator = _config$settings.fieldSeparator, jsonLogic = _config$settings.jsonLogic;
      var ret;
      if (field) {
        if (Array.isArray(field)) field = field.join(fieldSeparator);
        var fieldDef = getFieldConfig$b(config2, field) || {};
        var fieldName = formatFieldName(field, config2, meta, parentField);
        var varName = fieldDef.jsonLogicVar || (fieldDef.type == "!group" ? jsonLogic.groupVarKey : "var");
        ret = _defineProperty$1({}, varName, fieldName);
        if (meta.usedFields.indexOf(field) == -1) meta.usedFields.push(field);
      }
      return ret;
    };
    var buildFnToFormatOp$1 = function buildFnToFormatOp2(operator, operatorDefinition, formattedField, formattedValue) {
      var formatteOp = operator;
      var cardinality = getOpCardinality$1(operatorDefinition);
      if (typeof operatorDefinition.jsonLogic == "string") formatteOp = operatorDefinition.jsonLogic;
      var rangeOps = ["<", "<=", ">", ">="];
      var eqOps = ["==", "!="];
      var fn = function fn2(field, op, val, opDef, opOpts) {
        if (cardinality == 0 && eqOps.includes(formatteOp)) return _defineProperty$1({}, formatteOp, [formattedField, null]);
        else if (cardinality == 0) return _defineProperty$1({}, formatteOp, formattedField);
        else if (cardinality == 1) return _defineProperty$1({}, formatteOp, [formattedField, formattedValue]);
        else if (cardinality == 2 && rangeOps.includes(formatteOp)) return _defineProperty$1({}, formatteOp, [formattedValue[0], formattedField, formattedValue[1]]);
        else return _defineProperty$1({}, formatteOp, [formattedField].concat(_toConsumableArray(formattedValue)));
      };
      return fn;
    };
    var formatLogic = function formatLogic2(config2, properties, formattedField, formattedValue, operator) {
      var operatorOptions = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var fieldDefinition = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var isRev = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      var field = properties.get("field");
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var fn = typeof operatorDefinition.jsonLogic == "function" ? operatorDefinition.jsonLogic : buildFnToFormatOp$1(operator, operatorDefinition, formattedField, formattedValue);
      var args = [formattedField, operator, formattedValue, omit$2(operatorDefinition, opDefKeysToOmit), operatorOptions, fieldDefinition];
      var ruleQuery = fn.call.apply(fn, [config2.ctx].concat(args));
      if (isRev) {
        ruleQuery = {
          "!": ruleQuery
        };
      }
      return ruleQuery;
    };
    function _createForOfIteratorHelper$5(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$5(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$5(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$5(o, minLen);
    }
    function _arrayLikeToArray$5(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$l(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$l(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$l(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$l(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var isObject$2 = function isObject2(v2) {
      return _typeof$1(v2) == "object" && v2 !== null && !Array.isArray(v2);
    };
    var mongodbFormat$1 = function mongodbFormat2(tree2, config2) {
      return _mongodbFormat(tree2, config2, false);
    };
    var _mongodbFormat = function _mongodbFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig(config2, void 0, false);
      var res = formatItem$1([], tree2, extendedConfig, meta);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length) console.warn("Errors while exporting to MongoDb:", meta.errors);
        return res;
      }
    };
    var formatItem$1 = function formatItem2(parents, item, config2, meta) {
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var _canWrapExpr = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _formatFieldName = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : void 0;
      var _value = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : void 0;
      if (!item) return void 0;
      var type = item.get("type");
      if (type === "group" || type === "rule_group") {
        return formatGroup$1(parents, item, config2, meta, _not, _canWrapExpr, _formatFieldName, _value);
      } else if (type === "rule") {
        return formatRule$1(parents, item, config2, meta, _not, _canWrapExpr, _formatFieldName, _value);
      }
      return void 0;
    };
    var formatGroup$1 = function formatGroup2(parents, item, config2, meta) {
      var _groupOperatorDef$car, _groupOperatorDef, _groupOperatorDef2, _groupOperatorDef3, _reversedGroupOpDef, _reversedGroupOpDef2, _getOneChildOrDescend, _conjunction;
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var type = item.get("type");
      var properties = item.get("properties") || new Map$5();
      var origNot = !!properties.get("not");
      var children = item.get("children1") || new List();
      var _config$settings = config2.settings, canShortMongoQuery = _config$settings.canShortMongoQuery, fieldSeparator = _config$settings.fieldSeparator;
      var sep = fieldSeparator;
      var hasParentRuleGroup = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).length > 0;
      var parentPath = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).map(function(it) {
        return it.get("properties").get("field");
      }).slice(-1).pop();
      var realParentPath = hasParentRuleGroup && parentPath;
      var isRuleGroup = type === "rule_group";
      var groupField = isRuleGroup ? properties.get("field") : null;
      var groupOperator = isRuleGroup ? properties.get("operator") : null;
      var groupOperatorDef = groupOperator && getOperatorConfig$4(config2, groupOperator, groupField) || null;
      var groupOperatorCardinality = groupOperator ? (_groupOperatorDef$car = (_groupOperatorDef = groupOperatorDef) === null || _groupOperatorDef === void 0 ? void 0 : _groupOperatorDef.cardinality) !== null && _groupOperatorDef$car !== void 0 ? _groupOperatorDef$car : 1 : void 0;
      var groupFieldName = formatFieldName(groupField, config2, meta, realParentPath);
      var groupFieldDef = getFieldConfig$b(config2, groupField) || {};
      var mode = groupFieldDef.mode;
      var canHaveEmptyChildren = groupField && mode === "array" && groupOperatorCardinality >= 1;
      var isRuleGroupWithChildren = isRuleGroup && (children === null || children === void 0 ? void 0 : children.size) > 0;
      isRuleGroup && !(children !== null && children !== void 0 && children.size);
      var revChildren = false;
      var not2 = origNot;
      var filterNot = false;
      if (isRuleGroupWithChildren) {
        filterNot = origNot;
        not2 = _not;
      } else {
        if (_not) {
          not2 = !not2;
        }
      }
      var reversedGroupOp = (_groupOperatorDef2 = groupOperatorDef) === null || _groupOperatorDef2 === void 0 ? void 0 : _groupOperatorDef2.reversedOp;
      var reversedGroupOpDef = getOperatorConfig$4(config2, reversedGroupOp, groupField);
      var groupOpNeedsReverse = !((_groupOperatorDef3 = groupOperatorDef) !== null && _groupOperatorDef3 !== void 0 && _groupOperatorDef3.mongoFormatOp) && !!((_reversedGroupOpDef = reversedGroupOpDef) !== null && _reversedGroupOpDef !== void 0 && _reversedGroupOpDef.mongoFormatOp);
      var groupOpCanReverse = !!((_reversedGroupOpDef2 = reversedGroupOpDef) !== null && _reversedGroupOpDef2 !== void 0 && _reversedGroupOpDef2.mongoFormatOp);
      var oneChildType = (_getOneChildOrDescend = getOneChildOrDescendant(item)) === null || _getOneChildOrDescend === void 0 ? void 0 : _getOneChildOrDescend.get("type");
      var canRevChildren = !!config2.settings.reverseOperatorsForNot && (!isRuleGroup && not2 && oneChildType === "rule" || filterNot && (children === null || children === void 0 ? void 0 : children.size) === 1);
      if (canRevChildren) {
        if (isRuleGroupWithChildren) {
          filterNot = !filterNot;
        } else {
          not2 = !not2;
        }
        revChildren = true;
      }
      var canRevGroupOp = not2 && isRuleGroup && groupOpCanReverse && (!!config2.settings.reverseOperatorsForNot || groupOpNeedsReverse);
      if (canRevGroupOp) {
        not2 = !not2;
        var _ref = [reversedGroupOp, groupOperator];
        groupOperator = _ref[0];
        reversedGroupOp = _ref[1];
        var _ref2 = [reversedGroupOpDef, groupOperatorDef];
        groupOperatorDef = _ref2[0];
        reversedGroupOpDef = _ref2[1];
      }
      var conjunction = properties.get("conjunction");
      if (!conjunction) conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      if (!conjunctionDefinition) return void 0;
      var reversedConj = conjunctionDefinition.reversedConj;
      var canRev = not2 && ((_conjunction = conjunction) === null || _conjunction === void 0 ? void 0 : _conjunction.toLowerCase()) === "or" && reversedConj && !isRuleGroup && !!config2.settings.canShortMongoQuery && !!config2.settings.reverseOperatorsForNot;
      if (canRev) {
        conjunction = reversedConj;
        conjunctionDefinition = config2.conjunctions[conjunction];
        not2 = !not2;
        revChildren = true;
      }
      var mongoConj = conjunctionDefinition.mongoConj;
      var list = children.map(function(currentChild) {
        return formatItem$1([].concat(_toConsumableArray(parents), [item]), currentChild, config2, meta, revChildren, mode != "array", mode == "array" ? function(f2) {
          return "$$el".concat(sep).concat(f2);
        } : void 0);
      }).filter(function(formattedChild) {
        return typeof formattedChild !== "undefined";
      });
      if (!canHaveEmptyChildren && !list.size) {
        return void 0;
      }
      var resultQuery;
      if (list.size == 1) {
        resultQuery = list.first();
      } else if (list.size > 1) {
        var rules = list.toList().toJS();
        var canShort = canShortMongoQuery && mongoConj == "$and";
        if (canShort) {
          resultQuery = rules.reduce(function(acc, rule2) {
            if (!acc) return void 0;
            for (var k2 in rule2) {
              if (k2[0] == "$") {
                acc = void 0;
                break;
              }
              if (acc[k2] == void 0) {
                acc[k2] = rule2[k2];
              } else {
                var prev = acc[k2], next = rule2[k2];
                if (!isObject$2(prev)) {
                  prev = {
                    "$eq": prev
                  };
                }
                if (!isObject$2(next)) {
                  next = {
                    "$eq": next
                  };
                }
                var prevOp = Object.keys(prev)[0], nextOp = Object.keys(next)[0];
                if (prevOp == nextOp) {
                  acc = void 0;
                  break;
                }
                acc[k2] = Object.assign({}, prev, next);
              }
            }
            return acc;
          }, {});
        }
        if (!resultQuery) {
          resultQuery = _defineProperty$1({}, mongoConj, rules);
        }
      }
      if (groupField) {
        if (mode == "array") {
          var totalQuery = {
            "$size": {
              "$ifNull": ["$" + groupFieldName, []]
            }
          };
          var filterQuery = resultQuery ? {
            "$size": {
              "$ifNull": [{
                "$filter": {
                  input: "$" + groupFieldName,
                  as: "el",
                  cond: resultQuery
                }
              }, []]
            }
          } : totalQuery;
          resultQuery = formatItem$1(parents, item.set("type", "rule"), config2, meta, filterNot, false, function(_f) {
            return filterQuery;
          }, totalQuery);
          resultQuery = {
            "$expr": resultQuery
          };
        } else {
          resultQuery = _defineProperty$1({}, groupFieldName, {
            "$elemMatch": resultQuery
          });
        }
      }
      if (not2) {
        resultQuery = {
          "$not": resultQuery
        };
      }
      return resultQuery;
    };
    var formatRule$1 = function formatRule2(parents, item, config2, meta) {
      var _operatorDefinition, _operatorDefinition2, _revOperatorDefinitio, _operatorDefinition3, _revOperatorDefinitio2, _revOperatorDefinitio3, _operatorDefinition4;
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var _canWrapExpr = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _formatFieldName = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : void 0;
      var _value = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : void 0;
      var properties = item.get("properties") || new Map$5();
      var hasParentRuleGroup = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).length > 0;
      var parentPath = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).map(function(it) {
        return it.get("properties").get("field");
      }).slice(-1).pop();
      var realParentPath = hasParentRuleGroup && parentPath;
      var operator = properties.get("operator");
      var operatorOptions = properties.get("operatorOptions");
      var field = properties.get("field");
      var fieldSrc = properties.get("fieldSrc");
      var iValue = properties.get("value");
      var iValueSrc = properties.get("valueSrc");
      var iValueType = properties.get("valueType");
      var asyncListValues = properties.get("asyncListValues");
      if (field == null || operator == null || iValue === void 0) return void 0;
      var fieldDef = getFieldConfig$b(config2, field);
      var operatorDefinition = getOperatorConfig$4(config2, operator, field);
      var reversedOp = (_operatorDefinition = operatorDefinition) === null || _operatorDefinition === void 0 ? void 0 : _operatorDefinition.reversedOp;
      var revOperatorDefinition = getOperatorConfig$4(config2, reversedOp, field);
      var cardinality = getOpCardinality$1(operatorDefinition);
      if (!((_operatorDefinition2 = operatorDefinition) !== null && _operatorDefinition2 !== void 0 && _operatorDefinition2.mongoFormatOp) && !((_revOperatorDefinitio = revOperatorDefinition) !== null && _revOperatorDefinitio !== void 0 && _revOperatorDefinitio.mongoFormatOp)) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var not2 = _not;
      var opNeedsReverse = !((_operatorDefinition3 = operatorDefinition) !== null && _operatorDefinition3 !== void 0 && _operatorDefinition3.mongoFormatOp) && !!((_revOperatorDefinitio2 = revOperatorDefinition) !== null && _revOperatorDefinitio2 !== void 0 && _revOperatorDefinitio2.mongoFormatOp);
      var opCanReverse = !!((_revOperatorDefinitio3 = revOperatorDefinition) !== null && _revOperatorDefinitio3 !== void 0 && _revOperatorDefinitio3.mongoFormatOp);
      var canRev = opCanReverse && (!!config2.settings.reverseOperatorsForNot || opNeedsReverse);
      var needRev = canRev && not2 || opNeedsReverse;
      if (needRev) {
        var _ref3 = [reversedOp, operator];
        operator = _ref3[0];
        reversedOp = _ref3[1];
        var _ref4 = [revOperatorDefinition, operatorDefinition];
        operatorDefinition = _ref4[0];
        revOperatorDefinition = _ref4[1];
        not2 = !not2;
      }
      var formattedField;
      var useExpr = false;
      if (fieldSrc == "func") {
        var _formatFunc = formatFunc$1(meta, config2, field, realParentPath);
        var _formatFunc2 = _slicedToArray(_formatFunc, 2);
        formattedField = _formatFunc2[0];
        useExpr = _formatFunc2[1];
      } else {
        formattedField = formatFieldName(field, config2, meta, realParentPath);
        if (_formatFieldName) {
          useExpr = true;
          formattedField = _formatFieldName(formattedField);
        }
      }
      if (formattedField == void 0) return void 0;
      var valueSrcs = [];
      var valueTypes = [];
      var formattedValue;
      if (iValue != void 0) {
        var fvalue = iValue.map(function(currentValue, ind) {
          var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
          var valueType = iValueType ? iValueType.get(ind) : null;
          var cValue = completeValue(currentValue, valueSrc, config2);
          var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var fieldWidgetDef = getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc, {
            forExport: true
          });
          var _formatValue = formatValue$1(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, realParentPath, operator, operatorDefinition, asyncListValues), _formatValue2 = _slicedToArray(_formatValue, 2), fv = _formatValue2[0], fvUseExpr = _formatValue2[1];
          if (fv !== void 0) {
            useExpr = useExpr || fvUseExpr;
            valueSrcs.push(valueSrc);
            valueTypes.push(valueType);
          }
          return fv;
        });
        var hasUndefinedValues = fvalue.filter(function(v2) {
          return v2 === void 0;
        }).size > 0;
        if (fvalue.size < cardinality || hasUndefinedValues) return void 0;
        formattedValue = cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
      }
      var wrapExpr = useExpr && _canWrapExpr;
      var fn = (_operatorDefinition4 = operatorDefinition) === null || _operatorDefinition4 === void 0 ? void 0 : _operatorDefinition4.mongoFormatOp;
      var args = [formattedField, operator, _value !== void 0 && formattedValue == null ? _value : formattedValue, useExpr, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0], omit$2(operatorDefinition, opDefKeysToOmit), operatorOptions, fieldDef];
      var ruleQuery = fn.call.apply(fn, [config2.ctx].concat(args));
      if (wrapExpr) {
        ruleQuery = {
          "$expr": ruleQuery
        };
      }
      if (not2) {
        ruleQuery = {
          "$not": ruleQuery
        };
      }
      return ruleQuery;
    };
    var formatValue$1 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, parentPath, operator, operatorDef, asyncListValues) {
      if (currentValue === void 0) return [void 0, false];
      var ret;
      var useExpr = false;
      if (valueSrc == "field") {
        var _formatRightField = formatRightField(meta, config2, currentValue, parentPath);
        var _formatRightField2 = _slicedToArray(_formatRightField, 2);
        ret = _formatRightField2[0];
        useExpr = _formatRightField2[1];
      } else if (valueSrc == "func") {
        var _formatFunc3 = formatFunc$1(meta, config2, currentValue, parentPath);
        var _formatFunc4 = _slicedToArray(_formatFunc3, 2);
        ret = _formatFunc4[0];
        useExpr = _formatFunc4[1];
      } else {
        if (typeof (fieldWidgetDef === null || fieldWidgetDef === void 0 ? void 0 : fieldWidgetDef.mongoFormatValue) === "function") {
          var fn = fieldWidgetDef.mongoFormatValue;
          var args = [
            currentValue,
            _objectSpread$l(_objectSpread$l({}, fieldDef ? pick$1(fieldDef, ["fieldSettings", "listValues"]) : {}), {}, {
              asyncListValues
            }),
            //useful options: valueFormat for date/time
            omit$2(fieldWidgetDef, widgetDefKeysToOmit)
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          ret = currentValue;
        }
      }
      return [ret, useExpr];
    };
    var formatRightField = function formatRightField2(meta, config2, rightField, parentPath) {
      var fieldSeparator = config2.settings.fieldSeparator;
      var ret;
      var useExpr = true;
      if (rightField) {
        var rightFieldDefinition = getFieldConfig$b(config2, rightField) || {};
        var fieldParts = getFieldParts$3(rightField, config2);
        var fieldPartsLabels = getFieldPathLabels$2(rightField, config2);
        var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparator) : null;
        var formatFieldFn = config2.settings.formatField;
        var rightFieldName = formatFieldName(rightField, config2, meta, parentPath);
        var formattedField = formatFieldFn(rightFieldName, fieldParts, fieldFullLabel, rightFieldDefinition, config2, false);
        ret = "$" + formattedField;
      }
      return [ret, useExpr];
    };
    var formatFunc$1 = function formatFunc2(meta, config2, currentValue, parentPath) {
      var _currentValue$get, _currentValue$get2;
      var useExpr = true;
      var ret;
      var funcKey = (_currentValue$get = currentValue.get) === null || _currentValue$get === void 0 ? void 0 : _currentValue$get.call(currentValue, "func");
      var args = (_currentValue$get2 = currentValue.get) === null || _currentValue$get2 === void 0 ? void 0 : _currentValue$get2.call(currentValue, "args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) {
        meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
        return [void 0, false];
      }
      var funcParts = getFieldParts$3(funcKey, config2);
      var funcLastKey = funcParts[funcParts.length - 1];
      var funcName = funcConfig.mongoFunc || funcLastKey;
      var mongoArgsAsObject = funcConfig.mongoArgsAsObject;
      var formattedArgs = {};
      var argsCnt = 0;
      var lastArg = void 0;
      var gaps = [];
      var missingArgKeys = [];
      for (var argKey in funcConfig.args) {
        var _argValue;
        argsCnt++;
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$b(config2, argConfig);
        var defaultValue = argConfig.defaultValue, isOptional = argConfig.isOptional;
        var defaultValueSrc = defaultValue !== null && defaultValue !== void 0 && defaultValue.func ? "func" : "value";
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        if (argValueSrc !== "func" && (_argValue = argValue) !== null && _argValue !== void 0 && _argValue.toJS) {
          argValue = argValue.toJS();
        }
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var operator = null;
        var widget = getWidgetForFieldOp$3(config2, argConfig, operator, argValueSrc);
        var fieldWidgetDef = getFieldWidgetConfig$3(config2, argConfig, operator, widget, argValueSrc, {
          forExport: true
        });
        var _formatValue3 = formatValue$1(meta, config2, argValue, argValueSrc, argConfig.type, fieldWidgetDef, fieldDef, parentPath, null, null, argAsyncListValues), _formatValue4 = _slicedToArray(_formatValue3, 2), formattedArgVal = _formatValue4[0];
        _formatValue4[1];
        if (argValue != void 0 && formattedArgVal === void 0) {
          if (argValueSrc != "func")
            meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return [void 0, false];
        }
        var formattedDefaultVal = void 0;
        if (formattedArgVal === void 0 && !isOptional && defaultValue != void 0) {
          var defaultWidget = getWidgetForFieldOp$3(config2, argConfig, operator, defaultValueSrc);
          var defaultFieldWidgetDef = getFieldWidgetConfig$3(config2, argConfig, operator, defaultWidget, defaultValueSrc, {
            forExport: true
          });
          var _formatValue5 = formatValue$1(meta, config2, defaultValue, defaultValueSrc, argConfig.type, defaultFieldWidgetDef, fieldDef, parentPath, null, null, argAsyncListValues);
          var _formatValue6 = _slicedToArray(_formatValue5, 2);
          formattedDefaultVal = _formatValue6[0];
          _formatValue6[1];
          if (formattedDefaultVal === void 0) {
            if (defaultValueSrc != "func")
              meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
            return [void 0, false];
          }
        }
        var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
        if (finalFormattedVal !== void 0) {
          if (gaps.length) {
            var _iterator = _createForOfIteratorHelper$5(gaps), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var missedArgKey = _step.value;
                formattedArgs[missedArgKey] = void 0;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            gaps = [];
          }
          formattedArgs[argKey] = finalFormattedVal;
          lastArg = finalFormattedVal;
        } else {
          if (!isOptional) missingArgKeys.push(argKey);
          gaps.push(argKey);
        }
      }
      if (missingArgKeys.length) {
        return [void 0, false];
      }
      if (typeof funcConfig.mongoFormatFunc === "function") {
        var fn = funcConfig.mongoFormatFunc;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else if (funcConfig.mongoFormatFunc === null) {
        meta.errors.push("Functon ".concat(funcName, " is not supported"));
        return [void 0, false];
      } else {
        if (mongoArgsAsObject) ret = _defineProperty$1({}, funcName, formattedArgs);
        else if (argsCnt == 1 && lastArg !== void 0) ret = _defineProperty$1({}, funcName, lastArg);
        else ret = _defineProperty$1({}, funcName, Object.values(formattedArgs));
      }
      return [ret, useExpr];
    };
    function _createForOfIteratorHelper$4(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$4(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$4(o, minLen);
    }
    function _arrayLikeToArray$4(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$k(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$k(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$k(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$k(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var sqlFormat$1 = function sqlFormat2(tree2, config2) {
      return _sqlFormat(tree2, config2, false);
    };
    var _sqlFormat = function _sqlFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig(config2, void 0, false);
      var res = formatItem(tree2, extendedConfig, meta);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length) console.warn("Errors while exporting to SQL:", meta.errors);
        return res;
      }
    };
    var formatItem = function formatItem2(item, config2, meta) {
      if (!item) return void 0;
      var type = item.get("type");
      item.get("children1");
      if (type === "group" || type === "rule_group") {
        return formatGroup(item, config2, meta);
      } else if (type === "rule") {
        return formatRule(item, config2, meta);
      }
      return void 0;
    };
    var formatGroup = function formatGroup2(item, config2, meta) {
      var type = item.get("type");
      var properties = item.get("properties") || new Map$5();
      var children = item.get("children1") || new List();
      var isRuleGroup = type === "rule_group";
      var groupField = isRuleGroup ? properties.get("field") : null;
      var groupFieldDef = getFieldConfig$b(config2, groupField) || {};
      var mode = groupFieldDef.mode;
      if (mode == "array") {
        meta.errors.push("Aggregation is not supported for ".concat(groupField));
      }
      var not2 = properties.get("not");
      var list = children.map(function(currentChild) {
        return formatItem(currentChild, config2, meta);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!list.size) return void 0;
      var conjunction = properties.get("conjunction");
      if (!conjunction) conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      return conjunctionDefinition.sqlFormatConj.call(config2.ctx, list, conjunction, not2);
    };
    var buildFnToFormatOp = function buildFnToFormatOp2(operator, operatorDefinition) {
      var sqlOp = operatorDefinition.sqlOp || operator;
      var cardinality = getOpCardinality$1(operatorDefinition);
      var fn;
      if (cardinality == 0) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sqlOp);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, value2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sqlOp, " ").concat(value2);
        };
      } else if (cardinality == 2) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var _values$first, _values$get;
          var valFrom = values === null || values === void 0 || (_values$first = values.first) === null || _values$first === void 0 ? void 0 : _values$first.call(values);
          var valTo = values === null || values === void 0 || (_values$get = values.get) === null || _values$get === void 0 ? void 0 : _values$get.call(values, 1);
          return "".concat(field, " ").concat(sqlOp, " ").concat(valFrom, " AND ").concat(valTo);
        };
      }
      return fn;
    };
    var formatRule = function formatRule2(item, config2, meta) {
      var properties = item.get("properties") || new Map$5();
      var field = properties.get("field");
      var fieldSrc = properties.get("fieldSrc");
      var operator = properties.get("operator");
      var operatorOptions = properties.get("operatorOptions");
      var iValueSrc = properties.get("valueSrc");
      var iValueType = properties.get("valueType");
      var iValue = properties.get("value");
      var asyncListValues = properties.get("asyncListValues");
      if (field == null || operator == null) return void 0;
      var fieldDefinition = getFieldConfig$b(config2, field) || {};
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = opDef.reversedOp;
      var revOpDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var cardinality = getOpCardinality$1(opDef);
      var isRev = false;
      var canFormatOp = opDef.sqlOp || opDef.sqlFormatOp;
      var canFormatRevOp = revOpDef.sqlOp || revOpDef.sqlFormatOp;
      if (!canFormatOp && !canFormatRevOp) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      if (!canFormatOp && canFormatRevOp) {
        isRev = true;
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOpDef, opDef];
        opDef = _ref2[0];
        revOpDef = _ref2[1];
      }
      var valueSrcs = [];
      var valueTypes = [];
      var formattedValue;
      if (iValue != void 0) {
        var fvalue = iValue.map(function(currentValue, ind) {
          var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
          var valueType = iValueType ? iValueType.get(ind) : null;
          var cValue = completeValue(currentValue, valueSrc, config2);
          var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var fieldWidgetDefinition = getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc, {
            forExport: true
          });
          var fv = formatValue(meta, config2, cValue, valueSrc, valueType, fieldWidgetDefinition, fieldDefinition, operator, opDef, asyncListValues);
          if (fv !== void 0) {
            valueSrcs.push(valueSrc);
            valueTypes.push(valueType);
          }
          return fv;
        });
        var hasUndefinedValues = fvalue.filter(function(v2) {
          return v2 === void 0;
        }).size > 0;
        if (hasUndefinedValues || fvalue.size < cardinality) return void 0;
        formattedValue = cardinality == 1 ? fvalue.first() : fvalue;
      }
      var fn = opDef.sqlFormatOp || buildFnToFormatOp(operator, opDef);
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var formattedField = fieldSrc == "func" ? formatFunc(meta, config2, field) : formatField(meta, config2, field);
      if (formattedField == void 0) return void 0;
      var args = [formattedField, operator, formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0], omit$2(opDef, opDefKeysToOmit), operatorOptions, fieldDefinition];
      var ret;
      ret = fn.call.apply(fn, [config2.ctx].concat(args));
      if (isRev) {
        ret = config2.settings.sqlFormatReverse.call(config2.ctx, ret);
      }
      if (ret === void 0) {
        meta.errors.push("Operator ".concat(operator, " is not supported for value source ").concat(valueSrcs.join(", ")));
        return void 0;
      }
      return ret;
    };
    var formatValue = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef, asyncListValues) {
      if (currentValue === void 0) return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField(meta, config2, currentValue);
      } else if (valueSrc == "func") {
        ret = formatFunc(meta, config2, currentValue);
      } else {
        if (typeof (fieldWidgetDef === null || fieldWidgetDef === void 0 ? void 0 : fieldWidgetDef.sqlFormatValue) === "function") {
          var fn = fieldWidgetDef.sqlFormatValue;
          var args = [
            currentValue,
            _objectSpread$k(_objectSpread$k({}, pick$1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            //useful options: valueFormat for date/time
            omit$2(fieldWidgetDef, widgetDefKeysToOmit)
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$b(config2, currentValue) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          if (Array.isArray(currentValue)) {
            ret = currentValue.map(function(v2) {
              return SqlString.escape(v2);
            });
          } else {
            ret = SqlString.escape(currentValue);
          }
        }
      }
      return ret;
    };
    var formatField = function formatField2(meta, config2, field) {
      if (!field) return;
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldDefinition = getFieldConfig$b(config2, field) || {};
      var fieldParts = getFieldParts$3(field, config2);
      var fieldPartsLabels = getFieldPathLabels$2(field, config2);
      var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparator) : null;
      var formatFieldFn = config2.settings.formatField;
      var fieldName = formatFieldName(field, config2, meta, null, {
        useTableName: true
      });
      var formattedField = formatFieldFn(fieldName, fieldParts, fieldFullLabel, fieldDefinition, config2);
      return formattedField;
    };
    var formatFunc = function formatFunc2(meta, config2, currentValue) {
      var _currentValue$get, _currentValue$get2;
      var funcKey = (_currentValue$get = currentValue.get) === null || _currentValue$get === void 0 ? void 0 : _currentValue$get.call(currentValue, "func");
      var args = (_currentValue$get2 = currentValue.get) === null || _currentValue$get2 === void 0 ? void 0 : _currentValue$get2.call(currentValue, "args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig) {
        meta.errors.push("Func ".concat(funcKey, " is not defined in config"));
        return void 0;
      }
      var funcParts = getFieldParts$3(funcKey, config2);
      var funcLastKey = funcParts[funcParts.length - 1];
      var funcName = funcConfig.sqlFunc || funcLastKey;
      var formattedArgs = {};
      var gaps = [];
      var missingArgKeys = [];
      for (var argKey in funcConfig.args) {
        var _argValue;
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$b(config2, argConfig);
        var defaultValue = argConfig.defaultValue, isOptional = argConfig.isOptional;
        var defaultValueSrc = defaultValue !== null && defaultValue !== void 0 && defaultValue.func ? "func" : "value";
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        if (argValueSrc !== "func" && (_argValue = argValue) !== null && _argValue !== void 0 && _argValue.toJS) {
          argValue = argValue.toJS();
        }
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var formattedArgVal = formatValue(meta, config2, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, argAsyncListValues);
        if (argValue != void 0 && formattedArgVal === void 0) {
          if (argValueSrc != "func")
            meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        var formattedDefaultVal = void 0;
        if (formattedArgVal === void 0 && !isOptional && defaultValue != void 0) {
          formattedDefaultVal = formatValue(meta, config2, defaultValue, defaultValueSrc, argConfig.type, fieldDef, argConfig, null, null, argAsyncListValues);
          if (formattedDefaultVal === void 0) {
            if (defaultValueSrc != "func")
              meta.errors.push("Can't format default value of arg ".concat(argKey, " for func ").concat(funcKey));
            return void 0;
          }
        }
        var finalFormattedVal = formattedArgVal !== null && formattedArgVal !== void 0 ? formattedArgVal : formattedDefaultVal;
        if (finalFormattedVal !== void 0) {
          if (gaps.length) {
            var _iterator = _createForOfIteratorHelper$4(argKey), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var missedArgKey = _step.value;
                formattedArgs[missedArgKey] = void 0;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            gaps = [];
          }
          formattedArgs[argKey] = finalFormattedVal;
        } else {
          if (!isOptional) missingArgKeys.push(argKey);
          gaps.push(argKey);
        }
      }
      if (missingArgKeys.length) {
        return void 0;
      }
      var ret;
      if (typeof funcConfig.sqlFormatFunc === "function") {
        var fn = funcConfig.sqlFormatFunc;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var argsStr = Object.entries(formattedArgs).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2);
          _ref4[0];
          var v2 = _ref4[1];
          return v2;
        }).join(", ");
        ret = "".concat(funcName, "(").concat(argsStr, ")");
      }
      return ret;
    };
    function ownKeys$j(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$j(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$j(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$j(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function buildEsGeoPoint(geoPointString) {
      if (geoPointString == null) {
        return null;
      }
      var coordsNumberArray = geoPointString.split(",").map(Number);
      return {
        top_left: {
          lat: coordsNumberArray[0],
          lon: coordsNumberArray[1]
        },
        bottom_right: {
          lat: coordsNumberArray[2],
          lon: coordsNumberArray[3]
        }
      };
    }
    function buildEsRangeParameters(value2, operator) {
      if (value2.length > 1) {
        return {
          gte: "".concat(value2[0]),
          lte: "".concat(value2[1])
        };
      }
      var dateTime = value2[0];
      switch (operator) {
        case "on_date":
        case "not_on_date":
        case "equal":
        case "select_equals":
        case "not_equal":
          return {
            gte: "".concat(dateTime, "||/d"),
            lte: "".concat(dateTime, "||+1d")
          };
        case "less_or_equal":
          return {
            lte: "".concat(dateTime)
          };
        case "greater_or_equal":
          return {
            gte: "".concat(dateTime)
          };
        case "less":
          return {
            lt: "".concat(dateTime)
          };
        case "greater":
          return {
            gt: "".concat(dateTime)
          };
        default:
          return void 0;
      }
    }
    function buildEsWildcardParameters(value2) {
      return {
        value: "*" + value2 + "*"
      };
    }
    function determineOccurrence(combinator, not2) {
      switch (combinator) {
        case "AND":
          return not2 ? "must_not" : "must";
        case "OR":
          return not2 ? "should_not" : "should";
        case "NOT":
          return not2 ? "must" : "must_not";
        default:
          return void 0;
      }
    }
    function buildRegexpParameters(value2) {
      return {
        value: value2
      };
    }
    function determineField(fieldName, config2) {
      return fieldName;
    }
    function buildParameters(queryType, value2, operator, fieldName, config2, syntax) {
      var textField = determineField(fieldName);
      switch (queryType) {
        case "filter":
          return {
            script: config2.operators[operator].elasticSearchScript(fieldName, value2)
          };
        case "exists":
          return {
            field: fieldName
          };
        case "match":
          return _defineProperty$1({}, textField, value2[0]);
        case "term":
          return syntax === ES_7_SYNTAX ? _defineProperty$1({}, fieldName, {
            value: value2[0]
          }) : _defineProperty$1({}, fieldName, value2[0]);
        case "geo_bounding_box":
          return _defineProperty$1({}, fieldName, buildEsGeoPoint(value2[0]));
        case "range":
          return _defineProperty$1({}, fieldName, buildEsRangeParameters(value2, operator));
        case "wildcard":
          return _defineProperty$1({}, fieldName, buildEsWildcardParameters(value2[0]));
        case "regexp":
          return _defineProperty$1({}, fieldName, buildRegexpParameters(value2[0]));
        default:
          return void 0;
      }
    }
    function buildEsRule(fieldName, value2, operator, config2, valueSrc, syntax) {
      if (!fieldName || !operator || value2 == void 0) return void 0;
      var op = operator;
      var opConfig = config2.operators[op];
      if (!opConfig) return void 0;
      var _opConfig = opConfig, elasticSearchQueryType = _opConfig.elasticSearchQueryType;
      var not2 = false;
      if (!elasticSearchQueryType && opConfig.reversedOp) {
        not2 = true;
        op = opConfig.reversedOp;
        opConfig = config2.operators[op];
        var _opConfig2 = opConfig;
        elasticSearchQueryType = _opConfig2.elasticSearchQueryType;
      }
      var widget = getWidgetForFieldOp$3(config2, fieldName, op, valueSrc);
      var widgetConfig = config2.widgets[widget];
      if (!widgetConfig) return void 0;
      var elasticSearchFormatValue = widgetConfig.elasticSearchFormatValue;
      var queryType;
      if (typeof elasticSearchQueryType === "function") {
        queryType = elasticSearchQueryType(widget);
      } else {
        queryType = elasticSearchQueryType;
      }
      if (!queryType) {
        return void 0;
      }
      var parameters;
      if (typeof elasticSearchFormatValue === "function") {
        parameters = elasticSearchFormatValue(queryType, value2, op, fieldName, config2);
      } else {
        parameters = buildParameters(queryType, value2, op, fieldName, config2, syntax);
      }
      if (not2) {
        return {
          bool: {
            must_not: _defineProperty$1({}, queryType, _objectSpread$j({}, parameters))
          }
        };
      } else {
        return _defineProperty$1({}, queryType, _objectSpread$j({}, parameters));
      }
    }
    function buildEsGroup(children, conjunction, not2, recursiveFxn, config2, syntax) {
      if (!children || !children.size) return void 0;
      var childrenArray = children.valueSeq().toArray();
      var occurrence = determineOccurrence(conjunction, not2);
      var result = childrenArray.map(function(c2) {
        return recursiveFxn(c2, config2, syntax);
      }).filter(function(v2) {
        return v2 !== void 0;
      });
      if (!result.length) return void 0;
      var resultFlat = result.flat(Infinity);
      return {
        bool: _defineProperty$1({}, occurrence, resultFlat)
      };
    }
    var ES_7_SYNTAX = "ES_7_SYNTAX";
    var ES_6_SYNTAX = "ES_6_SYNTAX";
    function elasticSearchFormat(tree2, config2) {
      var syntax = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ES_6_SYNTAX;
      var extendedConfig = extendConfig(config2, void 0, false);
      if (!tree2) return void 0;
      var type = tree2.get("type");
      var properties = tree2.get("properties") || /* @__PURE__ */ new Map();
      if (type === "rule" && properties.get("field")) {
        var _properties$get, _properties$get2, _properties$get3;
        var operator = properties.get("operator");
        var field = properties.get("field");
        var fieldSrc = properties.get("fieldSrc");
        var value2 = (_properties$get = properties.get("value")) === null || _properties$get === void 0 ? void 0 : _properties$get.toJS();
        (_properties$get2 = properties.get("valueType")) === null || _properties$get2 === void 0 ? void 0 : _properties$get2.get(0);
        var valueSrc = (_properties$get3 = properties.get("valueSrc")) === null || _properties$get3 === void 0 ? void 0 : _properties$get3.get(0);
        if (valueSrc === "func" || fieldSrc == "func") {
          return;
        }
        if (value2 && Array.isArray(value2[0])) {
          return value2[0].map(function(val) {
            return buildEsRule(field, [val], operator, extendedConfig, valueSrc, syntax);
          });
        } else {
          return buildEsRule(field, value2, operator, extendedConfig, valueSrc, syntax);
        }
      }
      if (type === "group" || type === "rule_group") {
        var not2 = properties.get("not");
        var conjunction = properties.get("conjunction");
        if (!conjunction) conjunction = defaultConjunction(extendedConfig);
        var children = tree2.get("children1");
        return buildEsGroup(children, conjunction, not2, elasticSearchFormat, extendedConfig, syntax);
      }
    }
    const Export = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      _mongodbFormat,
      _spelFormat,
      _sqlFormat,
      elasticSearchFormat,
      jsonLogicFormat: jsonLogicFormat$1,
      mongodbFormat: mongodbFormat$1,
      queryBuilderFormat,
      queryString: queryString$1,
      spelFormat,
      sqlFormat: sqlFormat$1
    }, Symbol.toStringTag, { value: "Module" }));
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value2 = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value2);
      } else {
        Promise.resolve(value2).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value2) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value2);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    var _excluded$7 = ["title", "value", "disabled", "groupTitle", "grouplabel", "renderTitle", "children", "label", "isCustom", "isHidden"];
    function _createForOfIteratorHelper$3(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$3(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$3(o, minLen);
    }
    function _arrayLikeToArray$3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$i(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$i(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$i(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$i(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var findLastIndex = function findLastIndex2(arr, fn) {
      if (arr.findLastIndex) {
        return arr.findLastIndex(fn);
      } else {
        var ind = _toConsumableArray(arr).reverse().findIndex(fn);
        return ind == -1 ? -1 : arr.length - 1 - ind;
      }
    };
    var simulateAsyncFetch = function simulateAsyncFetch2(all) {
      var cPageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var delay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1e3;
      return /* @__PURE__ */ function() {
        var _ref = _asyncToGenerator(/* @__PURE__ */ _regeneratorRuntime.mark(function _callee(search, offset2, meta) {
          var pageSize, filtered, currentOffset, values, newOffset, hasMore;
          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                pageSize = (meta === null || meta === void 0 ? void 0 : meta.pageSize) != void 0 ? meta.pageSize : cPageSize;
                filtered = listValuesToArray(all).filter(function(_ref2) {
                  var title = _ref2.title, value2 = _ref2.value;
                  return search == null ? true : title.toUpperCase().indexOf(search.toUpperCase()) != -1 || "".concat(value2).toUpperCase().indexOf(search.toUpperCase()) != -1;
                });
                pageSize ? Math.ceil(filtered.length / pageSize) : 0;
                currentOffset = offset2 || 0;
                values = pageSize ? filtered.slice(currentOffset, currentOffset + pageSize) : filtered;
                newOffset = pageSize ? currentOffset + values.length : null;
                hasMore = pageSize ? newOffset < filtered.length : false;
                if (!delay) {
                  _context.next = 11;
                  break;
                }
                _context.next = 11;
                return sleep(delay);
              case 11:
                return _context.abrupt("return", {
                  values,
                  hasMore
                });
              case 12:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function(_x, _x2, _x3) {
          return _ref.apply(this, arguments);
        };
      }();
    };
    var mergeListValues = function mergeListValues2(values, newValues) {
      var toStart = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var hideNewValues = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (!newValues) return values;
      var old = values || [];
      var newFiltered = newValues.filter(function(v2) {
        return old.find(function(av) {
          return "" + av.value == "" + v2.value;
        }) == void 0;
      }).map(function(v2) {
        return hideNewValues ? _objectSpread$i(_objectSpread$i({}, v2), {}, {
          isHidden: true
        }) : v2;
      });
      var merged = toStart ? [].concat(_toConsumableArray(newFiltered), _toConsumableArray(old)) : [].concat(_toConsumableArray(old), _toConsumableArray(newFiltered));
      return merged;
    };
    var optionToListValue = function optionToListValue2(val, listValues2, allowCustomValues) {
      var _val$value;
      var v2 = val == null || val == "" ? void 0 : (_val$value = val === null || val === void 0 ? void 0 : val.value) !== null && _val$value !== void 0 ? _val$value : val;
      var item = getListValue(v2, listValues2);
      var customItem = allowCustomValues && !item ? makeCustomListValue(v2) : void 0;
      var listValue = item || customItem;
      var lvs = listValue ? [listValue] : void 0;
      return [v2, lvs];
    };
    var optionsToListValues = function optionsToListValues2(vals, listValues2, allowCustomValues) {
      var newSelectedListValues = vals.map(function(val, _i) {
        var _val$value2;
        var v2 = val == null || val == "" ? void 0 : (_val$value2 = val === null || val === void 0 ? void 0 : val.value) !== null && _val$value2 !== void 0 ? _val$value2 : val;
        var item = getListValue(v2, listValues2);
        var customItem = allowCustomValues && !item ? makeCustomListValue(v2) : void 0;
        var listValue = item || customItem;
        return listValue;
      }).filter(function(o) {
        return o != void 0;
      });
      var newSelectedValues = newSelectedListValues.map(function(o) {
        var _o$value;
        return (_o$value = o === null || o === void 0 ? void 0 : o.value) !== null && _o$value !== void 0 ? _o$value : o;
      });
      if (!newSelectedValues.length) newSelectedValues = void 0;
      return [newSelectedValues, newSelectedListValues];
    };
    var listValueToOption = function listValueToOption2(lv) {
      if (lv == null) return null;
      var title = lv.title, value2 = lv.value, disabled = lv.disabled, groupTitle = lv.groupTitle, grouplabel = lv.grouplabel, renderTitle = lv.renderTitle, children = lv.children, label = lv.label, isCustom = lv.isCustom, isHidden = lv.isHidden, rest = _objectWithoutProperties(lv, _excluded$7);
      var option = {
        value: value2,
        title: title || label || children
        // fix issue #930 for AntD
      };
      if (disabled) option.disabled = disabled;
      if (isCustom) option.isCustom = isCustom;
      if (isHidden) option.isHidden = isHidden;
      if (groupTitle || grouplabel) option.groupTitle = groupTitle || grouplabel;
      if (renderTitle) option.renderTitle = renderTitle;
      option = _objectSpread$i(_objectSpread$i({}, option), rest);
      return option;
    };
    var fixListValuesGroupOrder = function fixListValuesGroupOrder2(listValues2) {
      var newValues = [];
      var groupTitles = [];
      var _iterator = _createForOfIteratorHelper$3(listValues2), _step;
      try {
        var _loop = function _loop2() {
          var lv = _step.value;
          var i = findLastIndex(newValues, function(lv1) {
            var _lv1$groupTitle, _lv$groupTitle;
            return ((_lv1$groupTitle = lv1.groupTitle) !== null && _lv1$groupTitle !== void 0 ? _lv1$groupTitle : "") == ((_lv$groupTitle = lv.groupTitle) !== null && _lv$groupTitle !== void 0 ? _lv$groupTitle : "");
          });
          if (lv.groupTitle != void 0 && !groupTitles.includes(lv.groupTitle)) {
            groupTitles.push(lv.groupTitle);
            if (groupTitles.length === 1) {
              newValues = newValues.map(function(nv) {
                return _objectSpread$i(_objectSpread$i({}, nv), {}, {
                  groupTitle: ""
                });
              });
            }
          }
          if (lv.groupTitle == void 0 && groupTitles.length) {
            lv = _objectSpread$i(_objectSpread$i({}, lv), {}, {
              groupTitle: ""
            });
          }
          if (i != -1) {
            newValues.splice(i + 1, 0, lv);
          } else {
            newValues.push(lv);
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return newValues;
    };
    const autocomplete = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      fixListValuesGroupOrder,
      getListValue,
      listValueToOption,
      mergeListValues,
      optionToListValue,
      optionsToListValues,
      simulateAsyncFetch
    }, Symbol.toStringTag, { value: "Module" }));
    const BasicUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      Autocomplete: autocomplete,
      ConfigUtils: configUtils,
      DefaultUtils: defaultUtils,
      ExportUtils: _export,
      FuncUtils: funcUtils,
      ListUtils: listValues,
      OtherUtils: stuff,
      RuleUtils: ruleUtils,
      TreeUtils: treeUtils,
      Validation: validation,
      checkTree,
      clone: clone$3,
      compressConfig,
      decompressConfig,
      getSwitchValues,
      i18n,
      isValidTree,
      moment: hooks,
      sanitizeTree: sanitizeTree$1,
      uuid: uuid$1,
      validateAndFixTree: validateAndFixTree$1,
      validateTree
    }, Symbol.toStringTag, { value: "Module" }));
    var NOW = {
      label: "Now",
      returnType: "datetime",
      jsonLogic: "now",
      jsonLogicCustomOps: {
        now: {}
      },
      //spelFunc: "new java.util.Date()",
      spelFunc: "T(java.time.LocalDateTime).now()",
      sqlFormatFunc: function sqlFormatFunc() {
        return "NOW()";
      },
      mongoFormatFunc: function mongoFormatFunc() {
        return /* @__PURE__ */ new Date();
      },
      formatFunc: function formatFunc2() {
        return "NOW";
      }
    };
    var RELATIVE_DATETIME = {
      label: "Relative",
      returnType: "datetime",
      renderBrackets: ["", ""],
      renderSeps: ["", "", ""],
      spelFormatFunc: function spelFormatFunc(_ref) {
        var date = _ref.date, op = _ref.op, val = _ref.val, dim = _ref.dim;
        var dimPlural = dim.charAt(0).toUpperCase() + dim.slice(1) + "s";
        var method = op + dimPlural;
        return "".concat(date, ".").concat(method, "(").concat(val, ")");
      },
      spelImport: function spelImport(spel) {
        var _spel$methodName;
        var date, op, val, dim;
        var matchRes = (_spel$methodName = spel.methodName) === null || _spel$methodName === void 0 ? void 0 : _spel$methodName.match(/^(minus|plus)(\w+)s$/);
        if (matchRes) {
          dim = matchRes[2].toLowerCase();
          op = matchRes[1];
          if (["minus", "plus"].includes(op)) {
            if (["day", "week", "month", "year"].includes(dim)) {
              op = {
                type: "string",
                val: op
              };
              dim = {
                type: "string",
                val: dim
              };
              val = spel.args[0];
              date = spel.obj;
              return {
                date,
                op,
                val,
                dim
              };
            }
          }
        }
      },
      jsonLogic: function jsonLogic(_ref2) {
        var date = _ref2.date, op = _ref2.op, val = _ref2.val, dim = _ref2.dim;
        return {
          "date_add": [date, val * (op == "minus" ? -1 : 1), dim]
        };
      },
      jsonLogicImport: function jsonLogicImport(v2) {
        var date = v2["date_add"][0];
        var val = Math.abs(v2["date_add"][1]);
        var op = v2["date_add"][1] >= 0 ? "plus" : "minus";
        var dim = v2["date_add"][2];
        return [date, op, val, dim];
      },
      jsonLogicCustomOps: {
        date_add: {}
      },
      // MySQL
      //todo: other SQL dialects?
      sqlFormatFunc: function sqlFormatFunc(_ref3) {
        var date = _ref3.date, op = _ref3.op, val = _ref3.val, dim = _ref3.dim;
        return "DATE_ADD(".concat(date, ", INTERVAL ").concat(parseInt(val) * (op == "minus" ? -1 : 1), " ").concat(dim.replace(/^'|'$/g, ""), ")");
      },
      mongoFormatFunc: null,
      //todo: support?
      formatFunc: function formatFunc2(_ref4) {
        var date = _ref4.date, op = _ref4.op, val = _ref4.val, dim = _ref4.dim;
        return !val ? date : "".concat(date, " ").concat(op == "minus" ? "-" : "+", " ").concat(val, " ").concat(dim);
      },
      args: {
        date: {
          label: "Date",
          type: "datetime",
          defaultValue: {
            func: "NOW",
            args: []
          },
          valueSources: ["func", "field", "value"],
          spelEscapeForFormat: true
        },
        op: {
          label: "Op",
          type: "select",
          defaultValue: "plus",
          valueSources: ["value"],
          mainWidgetProps: {
            customProps: {
              showSearch: false
            }
          },
          fieldSettings: {
            listValues: {
              plus: "+",
              minus: "-"
            }
          },
          spelEscapeForFormat: false
        },
        val: {
          label: "Value",
          type: "number",
          fieldSettings: {
            min: 0
          },
          defaultValue: 0,
          valueSources: ["value"],
          spelEscapeForFormat: false
        },
        dim: {
          label: "Dimension",
          type: "select",
          defaultValue: "day",
          valueSources: ["value"],
          mainWidgetProps: {
            customProps: {
              showSearch: false
            }
          },
          fieldSettings: {
            listValues: {
              day: "day",
              week: "week",
              month: "month",
              year: "year"
            }
          },
          spelEscapeForFormat: false
        }
      }
    };
    var LOWER = {
      label: "Lowercase",
      mongoFunc: "$toLower",
      jsonLogic: "toLowerCase",
      spelFunc: "${str}.toLowerCase()",
      //jsonLogicIsMethod: true, // Removed in JsonLogic 2.x due to Prototype Pollution
      jsonLogicCustomOps: {
        toLowerCase: {}
      },
      returnType: "text",
      args: {
        str: {
          label: "String",
          type: "text",
          valueSources: ["value", "field", "func"]
        }
      }
    };
    var UPPER = {
      label: "Uppercase",
      mongoFunc: "$toUpper",
      jsonLogic: "toUpperCase",
      spelFunc: "${str}.toUpperCase()",
      //jsonLogicIsMethod: true, // Removed in JsonLogic 2.x due to Prototype Pollution
      jsonLogicCustomOps: {
        toUpperCase: {}
      },
      returnType: "text",
      args: {
        str: {
          label: "String",
          type: "text",
          valueSources: ["value", "field", "func"]
        }
      }
    };
    var LINEAR_REGRESSION = {
      label: "Linear regression",
      returnType: "number",
      formatFunc: function formatFunc2(_ref5, _) {
        var coef = _ref5.coef, bias = _ref5.bias, val = _ref5.val;
        return "(".concat(coef, " * ").concat(val, " + ").concat(bias, ")");
      },
      sqlFormatFunc: function sqlFormatFunc(_ref6) {
        var coef = _ref6.coef, bias = _ref6.bias, val = _ref6.val;
        return "(".concat(coef, " * ").concat(val, " + ").concat(bias, ")");
      },
      spelFormatFunc: function spelFormatFunc(_ref7) {
        var coef = _ref7.coef, bias = _ref7.bias, val = _ref7.val;
        return "(".concat(coef, " * ").concat(val, " + ").concat(bias, ")");
      },
      spelImport: function spelImport(spel) {
        var coef, val, bias, a;
        if (spel.type === "op-plus") {
          var _spel$children = _slicedToArray(spel.children, 2);
          a = _spel$children[0];
          bias = _spel$children[1];
          if (a.type === "op-multiply") {
            var _a$children = _slicedToArray(a.children, 2);
            coef = _a$children[0];
            val = _a$children[1];
            return {
              coef,
              val,
              bias
            };
          }
        }
      },
      mongoFormatFunc: function mongoFormatFunc(_ref8) {
        var coef = _ref8.coef, bias = _ref8.bias, val = _ref8.val;
        return {
          "$sum": [{
            "$multiply": [coef, val]
          }, bias]
        };
      },
      jsonLogic: function jsonLogic(_ref9) {
        var coef = _ref9.coef, bias = _ref9.bias, val = _ref9.val;
        return {
          "+": [{
            "*": [coef, val]
          }, bias]
        };
      },
      jsonLogicImport: function jsonLogicImport(v2) {
        var coef = v2["+"][0]["*"][0];
        var val = v2["+"][0]["*"][1];
        var bias = v2["+"][1];
        return [coef, val, bias];
      },
      renderBrackets: ["", ""],
      renderSeps: [" * ", " + "],
      args: {
        coef: {
          label: "Coef",
          type: "number",
          defaultValue: 1,
          valueSources: ["value"]
        },
        val: {
          label: "Value",
          type: "number",
          valueSources: ["value", "field"]
        },
        bias: {
          label: "Bias",
          type: "number",
          defaultValue: 0,
          valueSources: ["value"]
        }
      }
    };
    var mongoFormatOp1 = function mongoFormatOp12(mop, mc2, not2, field, _op, value2, useExpr, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
      var $field = typeof field == "string" && !field.startsWith("$") ? "$" + field : field;
      var mv = mc2(value2, fieldDef);
      if (mv === void 0) return void 0;
      if (not2) {
        if (!useExpr && (!mop || mop == "$eq")) return _defineProperty$1({}, field, {
          "$ne": mv
        });
        return !useExpr ? _defineProperty$1({}, field, {
          "$not": _defineProperty$1({}, mop, mv)
        }) : {
          "$not": _defineProperty$1({}, mop, [$field, mv])
        };
      } else {
        if (!useExpr && (!mop || mop == "$eq")) return _defineProperty$1({}, field, mv);
        return !useExpr ? _defineProperty$1({}, field, _defineProperty$1({}, mop, mv)) : _defineProperty$1({}, mop, [$field, mv]);
      }
    };
    var mongoFormatOp2 = function mongoFormatOp22(mops, not2, field, _op, values, useExpr, valueSrcs, valueTypes, opDef, operatorOptions, fieldDef) {
      var $field = typeof field == "string" && !field.startsWith("$") ? "$" + field : field;
      if (not2) {
        return !useExpr ? _defineProperty$1({}, field, {
          "$not": _defineProperty$1(_defineProperty$1({}, mops[0], values[0]), mops[1], values[1])
        }) : {
          "$not": {
            "$and": [_defineProperty$1({}, mops[0], [$field, values[0]]), _defineProperty$1({}, mops[1], [$field, values[1]])]
          }
        };
      } else {
        return !useExpr ? _defineProperty$1({}, field, _defineProperty$1(_defineProperty$1({}, mops[0], values[0]), mops[1], values[1])) : {
          "$and": [_defineProperty$1({}, mops[0], [$field, values[0]]), _defineProperty$1({}, mops[1], [$field, values[1]])]
        };
      }
    };
    var ctx$2 = {
      utils: {
        SqlString,
        moment: hooks,
        mongoFormatOp1,
        mongoFormatOp2,
        mongoEmptyValue,
        escapeRegExp,
        sqlEmptyValue,
        stringifyForDisplay,
        getTitleInListValues: getTitleInListValues$1,
        spelEscape,
        spelFixList,
        wrapWithBrackets
      }
    };
    function _createForOfIteratorHelper$2(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$2(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$2(o, minLen);
    }
    function _arrayLikeToArray$2(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$h(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$h(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$h(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$h(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var conjunctions$2 = {
      AND: {
        label: "And",
        mongoConj: "$and",
        jsonLogicConj: "and",
        sqlConj: "AND",
        spelConj: "and",
        spelConjs: ["and", "&&"],
        reversedConj: "OR",
        formatConj: function formatConj(children, conj, not2, isForDisplay) {
          var ret = children.size > 1 ? children.join(" " + (isForDisplay ? "AND" : "&&") + " ") : children.first();
          if (children.size > 1 || not2) {
            ret = this.utils.wrapWithBrackets(ret);
          }
          if (not2) {
            ret = "NOT " + ret;
          }
          return ret;
        },
        sqlFormatConj: function sqlFormatConj(children, conj, not2) {
          var ret = children.size > 1 ? children.join(" AND ") : children.first();
          if (children.size > 1 || not2) {
            ret = this.utils.wrapWithBrackets(ret);
          }
          if (not2) {
            ret = "NOT " + ret;
          }
          return ret;
        },
        spelFormatConj: function spelFormatConj(children, conj, not2, omitBrackets) {
          if (not2) omitBrackets = false;
          var ret = children.size > 1 ? children.join(" && ") : children.first();
          if ((children.size > 1 || not2) && !omitBrackets) {
            ret = this.utils.wrapWithBrackets(ret);
          }
          if (not2) {
            ret = "!" + ret;
          }
          return ret;
        }
      },
      OR: {
        label: "Or",
        mongoConj: "$or",
        jsonLogicConj: "or",
        sqlConj: "OR",
        spelConj: "or",
        spelConjs: ["or", "||"],
        reversedConj: "AND",
        formatConj: function formatConj(children, conj, not2, isForDisplay) {
          return children.size > 1 ? (not2 ? "NOT " : "") + "(" + children.join(" " + (isForDisplay ? "OR" : "||") + " ") + ")" : (not2 ? "NOT (" : "") + children.first() + (not2 ? ")" : "");
        },
        sqlFormatConj: function sqlFormatConj(children, conj, not2) {
          return children.size > 1 ? (not2 ? "NOT " : "") + "(" + children.join(" OR ") + ")" : (not2 ? "NOT (" : "") + children.first() + (not2 ? ")" : "");
        },
        spelFormatConj: function spelFormatConj(children, conj, not2, omitBrackets) {
          if (not2) omitBrackets = false;
          return children.size > 1 ? (not2 ? "!" : "") + (omitBrackets ? "" : "(") + children.join(" || ") + (omitBrackets ? "" : ")") : (not2 ? "!(" : "") + children.first() + (not2 ? ")" : "");
        }
      }
    };
    var operators$2 = {
      equal: {
        label: "==",
        labelForFormat: "==",
        sqlOp: "=",
        spelOp: "==",
        spelOps: ["==", "eq"],
        reversedOp: "not_equal",
        formatOp: function formatOp(field, op, value2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {
          var opStr = isForDisplay ? "=" : opDef.label;
          if (valueTypes == "boolean" && isForDisplay) return value2 == "No" ? "NOT ".concat(field) : "".concat(field);
          else return "".concat(field, " ").concat(opStr, " ").concat(value2);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return (_this$utils = this.utils).mongoFormatOp1.apply(_this$utils, ["$eq", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: "==",
        elasticSearchQueryType: "term"
      },
      not_equal: {
        isNotOp: true,
        label: "!=",
        labelForFormat: "!=",
        sqlOp: "<>",
        spelOp: "!=",
        spelOps: ["!=", "ne"],
        reversedOp: "equal",
        formatOp: function formatOp(field, op, value2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {
          if (valueTypes == "boolean" && isForDisplay) return value2 == "No" ? "".concat(field) : "NOT ".concat(field);
          else return "".concat(field, " ").concat(opDef.label, " ").concat(value2);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils2;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return (_this$utils2 = this.utils).mongoFormatOp1.apply(_this$utils2, ["$ne", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: "!="
      },
      less: {
        label: "<",
        labelForFormat: "<",
        sqlOp: "<",
        spelOp: "<",
        spelOps: ["<", "lt"],
        reversedOp: "greater_or_equal",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils3;
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          return (_this$utils3 = this.utils).mongoFormatOp1.apply(_this$utils3, ["$lt", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: "<",
        elasticSearchQueryType: "range"
      },
      less_or_equal: {
        label: "<=",
        labelForFormat: "<=",
        sqlOp: "<=",
        spelOp: "<=",
        spelOps: ["<=", "le"],
        reversedOp: "greater",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils4;
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          return (_this$utils4 = this.utils).mongoFormatOp1.apply(_this$utils4, ["$lte", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: "<=",
        elasticSearchQueryType: "range"
      },
      greater: {
        label: ">",
        labelForFormat: ">",
        sqlOp: ">",
        spelOp: ">",
        spelOps: [">", "gt"],
        reversedOp: "less_or_equal",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils5;
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }
          return (_this$utils5 = this.utils).mongoFormatOp1.apply(_this$utils5, ["$gt", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: ">",
        elasticSearchQueryType: "range"
      },
      greater_or_equal: {
        label: ">=",
        labelForFormat: ">=",
        sqlOp: ">=",
        spelOp: ">=",
        spelOps: [">=", "ge"],
        reversedOp: "less",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils6;
          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }
          return (_this$utils6 = this.utils).mongoFormatOp1.apply(_this$utils6, ["$gte", function(v2) {
            return v2;
          }, false].concat(args));
        },
        jsonLogic: ">=",
        elasticSearchQueryType: "range"
      },
      like: {
        label: "Contains",
        labelForFormat: "Contains",
        reversedOp: "not_like",
        sqlOp: "LIKE",
        spelOp: "${0}.contains(${1})",
        valueTypes: ["text"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils7, _this = this;
          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }
          return (_this$utils7 = this.utils).mongoFormatOp1.apply(_this$utils7, ["$regex", function(v2) {
            return typeof v2 == "string" ? _this.utils.escapeRegExp(v2) : void 0;
          }, false].concat(args));
        },
        jsonLogic: function jsonLogic(field, op, val) {
          return {
            "in": [val, field]
          };
        },
        jsonLogic2: "#in",
        valueSources: ["value"],
        elasticSearchQueryType: "regexp"
      },
      not_like: {
        isNotOp: true,
        label: "Not contains",
        reversedOp: "like",
        labelForFormat: "Not Contains",
        sqlOp: "NOT LIKE",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils8, _this2 = this;
          for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            args[_key8] = arguments[_key8];
          }
          return (_this$utils8 = this.utils).mongoFormatOp1.apply(_this$utils8, ["$regex", function(v2) {
            return typeof v2 == "string" ? _this2.utils.escapeRegExp(v2) : void 0;
          }, true].concat(args));
        },
        jsonLogic: function jsonLogic(field, op, val) {
          return {
            "!": {
              "in": [val, field]
            }
          };
        },
        jsonLogic2: "#!in",
        _jsonLogicIsExclamationOp: true,
        valueSources: ["value"]
      },
      starts_with: {
        label: "Starts with",
        labelForFormat: "Starts with",
        sqlOp: "LIKE",
        spelOp: "${0}.startsWith(${1})",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils9, _this3 = this;
          for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
          }
          return (_this$utils9 = this.utils).mongoFormatOp1.apply(_this$utils9, ["$regex", function(v2) {
            return typeof v2 == "string" ? "^" + _this3.utils.escapeRegExp(v2) : void 0;
          }, false].concat(args));
        },
        jsonLogic: void 0,
        // not supported
        valueSources: ["value"]
      },
      ends_with: {
        label: "Ends with",
        labelForFormat: "Ends with",
        sqlOp: "LIKE",
        spelOp: "${0}.endsWith(${1})",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils10, _this4 = this;
          for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
            args[_key10] = arguments[_key10];
          }
          return (_this$utils10 = this.utils).mongoFormatOp1.apply(_this$utils10, ["$regex", function(v2) {
            return typeof v2 == "string" ? _this4.utils.escapeRegExp(v2) + "$" : void 0;
          }, false].concat(args));
        },
        jsonLogic: void 0,
        // not supported
        valueSources: ["value"]
      },
      between: {
        label: "Between",
        labelForFormat: "BETWEEN",
        sqlOp: "BETWEEN",
        cardinality: 2,
        formatOp: function formatOp(field, op, values, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {
          var valFrom = values.first();
          var valTo = values.get(1);
          if (isForDisplay) return "".concat(field, " BETWEEN ").concat(valFrom, " AND ").concat(valTo);
          else return "".concat(field, " >= ").concat(valFrom, " && ").concat(field, " <= ").concat(valTo);
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          var valFrom = values[0];
          var valTo = values[1];
          return "".concat(field, " >= ").concat(valFrom, " && ").concat(field, " <= ").concat(valTo);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils11;
          for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
            args[_key11] = arguments[_key11];
          }
          return (_this$utils11 = this.utils).mongoFormatOp2.apply(_this$utils11, [["$gte", "$lte"], false].concat(args));
        },
        valueLabels: ["Value from", "Value to"],
        textSeparators: [null, "and"],
        reversedOp: "not_between",
        jsonLogic: "<=",
        validateValues: function validateValues(values) {
          if (values[0] != void 0 && values[1] != void 0) {
            return values[0] <= values[1];
          }
          return null;
        },
        elasticSearchQueryType: function elasticSearchQueryType(type) {
          return type === "time" ? "filter" : "range";
        }
      },
      not_between: {
        isNotOp: true,
        label: "Not between",
        labelForFormat: "NOT BETWEEN",
        sqlOp: "NOT BETWEEN",
        cardinality: 2,
        formatOp: function formatOp(field, op, values, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {
          var valFrom = values.first();
          var valTo = values.get(1);
          if (isForDisplay) return "".concat(field, " NOT BETWEEN ").concat(valFrom, " AND ").concat(valTo);
          else return "(".concat(field, " < ").concat(valFrom, " || ").concat(field, " > ").concat(valTo, ")");
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          var valFrom = values[0];
          var valTo = values[1];
          return "(".concat(field, " < ").concat(valFrom, " || ").concat(field, " > ").concat(valTo, ")");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils12;
          for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
            args[_key12] = arguments[_key12];
          }
          return (_this$utils12 = this.utils).mongoFormatOp2.apply(_this$utils12, [["$gte", "$lte"], true].concat(args));
        },
        valueLabels: ["Value from", "Value to"],
        textSeparators: [null, "and"],
        reversedOp: "between",
        jsonLogic: function jsonLogic(field, op, val) {
          return {
            "!": {
              "<=": [Array.isArray(val) ? val[0] : val, field, Array.isArray(val) ? val[1] : val]
            }
          };
        },
        jsonLogic2: "!<=",
        _jsonLogicIsExclamationOp: true,
        validateValues: function validateValues(values) {
          if (values[0] != void 0 && values[1] != void 0) {
            return values[0] <= values[1];
          }
          return null;
        }
      },
      is_empty: {
        label: "Is empty",
        labelForFormat: "IS EMPTY",
        cardinality: 0,
        reversedOp: "is_not_empty",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS EMPTY") : "!".concat(field);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var empty = this.utils.sqlEmptyValue(fieldDef);
          return "COALESCE(".concat(field, ", ").concat(empty, ") = ").concat(empty);
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " <= ''");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils13, _this5 = this;
          for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
            args[_key13] = arguments[_key13];
          }
          return (_this$utils13 = this.utils).mongoFormatOp1.apply(_this$utils13, ["$in", function(v2, fieldDef) {
            return [_this5.utils.mongoEmptyValue(fieldDef), null];
          }, false].concat(args));
        },
        jsonLogic: "!"
      },
      is_not_empty: {
        isNotOp: true,
        label: "Is not empty",
        labelForFormat: "IS NOT EMPTY",
        cardinality: 0,
        reversedOp: "is_empty",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NOT EMPTY") : "!!".concat(field);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var empty = this.utils.sqlEmptyValue(fieldDef);
          return "COALESCE(".concat(field, ", ").concat(empty, ") <> ").concat(empty);
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " > ''");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils14, _this6 = this;
          for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
            args[_key14] = arguments[_key14];
          }
          return (_this$utils14 = this.utils).mongoFormatOp1.apply(_this$utils14, ["$nin", function(v2, fieldDef) {
            return [_this6.utils.mongoEmptyValue(fieldDef), null];
          }, false].concat(args));
        },
        jsonLogic: "!!",
        elasticSearchQueryType: "exists"
      },
      is_null: {
        label: "Is null",
        labelForFormat: "IS NULL",
        sqlOp: "IS NULL",
        cardinality: 0,
        reversedOp: "is_not_null",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NULL") : "!".concat(field);
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " == null");
        },
        // check if value is null OR not exists
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils15;
          for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
            args[_key15] = arguments[_key15];
          }
          return (_this$utils15 = this.utils).mongoFormatOp1.apply(_this$utils15, ["$eq", function(v2) {
            return null;
          }, false].concat(args));
        },
        jsonLogic: "=="
      },
      is_not_null: {
        label: "Is not null",
        labelForFormat: "IS NOT NULL",
        sqlOp: "IS NOT NULL",
        cardinality: 0,
        reversedOp: "is_null",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NOT NULL") : "!!".concat(field);
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " != null");
        },
        // check if value exists and is not null
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils16;
          for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
            args[_key16] = arguments[_key16];
          }
          return (_this$utils16 = this.utils).mongoFormatOp1.apply(_this$utils16, ["$ne", function(v2) {
            return null;
          }, false].concat(args));
        },
        jsonLogic: "!=",
        elasticSearchQueryType: "exists"
      },
      select_equals: {
        label: "==",
        labelForFormat: "==",
        sqlOp: "=",
        // enum/set
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var opStr = isForDisplay ? "=" : "==";
          return "".concat(field, " ").concat(opStr, " ").concat(value2);
        },
        spelOp: "==",
        spelOps: ["==", "eq"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils17;
          for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
            args[_key17] = arguments[_key17];
          }
          return (_this$utils17 = this.utils).mongoFormatOp1.apply(_this$utils17, ["$eq", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "select_not_equals",
        jsonLogic: "==",
        elasticSearchQueryType: "term"
      },
      select_not_equals: {
        isNotOp: true,
        label: "!=",
        labelForFormat: "!=",
        sqlOp: "<>",
        // enum/set
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " != ").concat(value2);
        },
        spelOp: "!=",
        spelOps: ["!=", "ne"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils18;
          for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
            args[_key18] = arguments[_key18];
          }
          return (_this$utils18 = this.utils).mongoFormatOp1.apply(_this$utils18, ["$ne", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "select_equals",
        jsonLogic: "!="
      },
      select_any_in: {
        label: "Any in",
        labelForFormat: "IN",
        sqlOp: "IN",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value") return "".concat(field, " IN (").concat(values.join(", "), ")");
          else return "".concat(field, " IN (").concat(values, ")");
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (valueSrc == "value") {
            return "".concat(field, " IN (").concat(values.join(", "), ")");
          } else return void 0;
        },
        valueTypes: ["multiselect"],
        spelOp: "${1}.contains(${0})",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils19;
          for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
            args[_key19] = arguments[_key19];
          }
          return (_this$utils19 = this.utils).mongoFormatOp1.apply(_this$utils19, ["$in", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "select_not_any_in",
        jsonLogic: "in",
        elasticSearchQueryType: "term"
      },
      select_not_any_in: {
        isNotOp: true,
        label: "Not in",
        labelForFormat: "NOT IN",
        sqlOp: "NOT IN",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value") return "".concat(field, " NOT IN (").concat(values.join(", "), ")");
          else return "".concat(field, " NOT IN (").concat(values, ")");
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (valueSrc == "value") {
            return "".concat(field, " NOT IN (").concat(values.join(", "), ")");
          } else return void 0;
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils20;
          for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
            args[_key20] = arguments[_key20];
          }
          return (_this$utils20 = this.utils).mongoFormatOp1.apply(_this$utils20, ["$nin", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "select_any_in",
        jsonLogic: function jsonLogic(field, op, val) {
          return {
            "!": {
              "in": [field, val]
            }
          };
        },
        jsonLogic2: "!in",
        _jsonLogicIsExclamationOp: true
      },
      // it's not "contains all", but "contains any" operator
      multiselect_contains: {
        label: "Contains",
        labelForFormat: "CONTAINS",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value") return "".concat(field, " CONTAINS [").concat(values.join(", "), "]");
          else return "".concat(field, " CONTAINS ").concat(values);
        },
        reversedOp: "multiselect_not_contains",
        jsonLogic2: "some-in",
        jsonLogic: function jsonLogic(field, op, vals) {
          return {
            "some": [field, {
              "in": [{
                "var": ""
              }, vals]
            }]
          };
        },
        //spelOp: "${0}.containsAll(${1})",
        spelOp: "T(CollectionUtils).containsAny(${0}, ${1})",
        elasticSearchQueryType: "term",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils21;
          for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
            args[_key21] = arguments[_key21];
          }
          return (_this$utils21 = this.utils).mongoFormatOp1.apply(_this$utils21, ["$in", function(v2) {
            return v2;
          }, false].concat(args));
        }
      },
      multiselect_not_contains: {
        isNotOp: true,
        label: "Not contains",
        labelForFormat: "NOT CONTAINS",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value") return "".concat(field, " NOT CONTAINS [").concat(values.join(", "), "]");
          else return "".concat(field, " NOT CONTAINS ").concat(values);
        },
        reversedOp: "multiselect_contains",
        jsonLogic2: "!some-in",
        jsonLogic: function jsonLogic(field, op, vals) {
          return {
            "!": {
              "some": [field, {
                "in": [{
                  "var": ""
                }, vals]
              }]
            }
          };
        },
        _jsonLogicIsExclamationOp: true
      },
      multiselect_equals: {
        label: "Equals",
        labelForFormat: "==",
        sqlOp: "=",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var opStr = isForDisplay ? "=" : "==";
          if (valueSrc == "value") return "".concat(field, " ").concat(opStr, " [").concat(values.join(", "), "]");
          else return "".concat(field, " ").concat(opStr, " ").concat(values);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var _this7 = this;
          if (valueSrc == "value")
            return "".concat(field, " = '").concat(values.map(function(v2) {
              return _this7.utils.SqlString.trim(v2);
            }).join(","), "'");
          else return void 0;
        },
        spelOp: "${0}.equals(${1})",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils22;
          for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
            args[_key22] = arguments[_key22];
          }
          return (_this$utils22 = this.utils).mongoFormatOp1.apply(_this$utils22, ["$eq", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "multiselect_not_equals",
        jsonLogic2: "all-in",
        jsonLogic: function jsonLogic(field, op, vals) {
          return {
            // it's not "equals", but "includes" operator - just for example
            "all": [field, {
              "in": [{
                "var": ""
              }, vals]
            }]
          };
        },
        elasticSearchQueryType: "term"
      },
      multiselect_not_equals: {
        isNotOp: true,
        label: "Not equals",
        labelForFormat: "!=",
        sqlOp: "<>",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value") return "".concat(field, " != [").concat(values.join(", "), "]");
          else return "".concat(field, " != ").concat(values);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var _this8 = this;
          if (valueSrc == "value")
            return "".concat(field, " != '").concat(values.map(function(v2) {
              return _this8.utils.SqlString.trim(v2);
            }).join(","), "'");
          else return void 0;
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils23;
          for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
            args[_key23] = arguments[_key23];
          }
          return (_this$utils23 = this.utils).mongoFormatOp1.apply(_this$utils23, ["$ne", function(v2) {
            return v2;
          }, false].concat(args));
        },
        reversedOp: "multiselect_equals",
        jsonLogic2: "!all-in",
        jsonLogic: function jsonLogic(field, op, vals) {
          return {
            // it's not "equals", but "includes" operator - just for example
            "!": {
              "all": [field, {
                "in": [{
                  "var": ""
                }, vals]
              }]
            }
          };
        },
        _jsonLogicIsExclamationOp: true
      },
      proximity: {
        label: "Proximity search",
        cardinality: 2,
        valueLabels: [{
          label: "Word 1",
          placeholder: "Enter first word"
        }, {
          label: "Word 2",
          placeholder: "Enter second word"
        }],
        textSeparators: [
          //'Word 1',
          //'Word 2'
        ],
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var val1 = values.first();
          var val2 = values.get(1);
          var prox = operatorOptions === null || operatorOptions === void 0 ? void 0 : operatorOptions.get("proximity");
          return "".concat(field, " ").concat(val1, " NEAR/").concat(prox, " ").concat(val2);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var val1 = values.first();
          var val2 = values.get(1);
          var aVal1 = this.utils.SqlString.trim(val1);
          var aVal2 = this.utils.SqlString.trim(val2);
          var prox = operatorOptions === null || operatorOptions === void 0 ? void 0 : operatorOptions.get("proximity");
          return "CONTAINS(".concat(field, ", 'NEAR((").concat(aVal1, ", ").concat(aVal2, "), ").concat(prox, ")')");
        },
        mongoFormatOp: void 0,
        // not supported
        jsonLogic: void 0,
        // not supported
        options: {
          optionLabel: "Near",
          // label on top of "near" selectbox (for config.settings.showLabels==true)
          optionTextBefore: "Near",
          // label before "near" selectbox (for config.settings.showLabels==false)
          optionPlaceholder: "Select words between",
          // placeholder for "near" selectbox
          minProximity: 2,
          maxProximity: 10,
          defaults: {
            proximity: 2
          }
        }
      },
      some: {
        label: "Some",
        labelForFormat: "SOME",
        cardinality: 0,
        jsonLogic: "some",
        spelFormatOp: function spelFormatOp(filteredSize) {
          return "".concat(filteredSize, " > 0");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils24;
          for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
            args[_key24] = arguments[_key24];
          }
          return (_this$utils24 = this.utils).mongoFormatOp1.apply(_this$utils24, ["$gt", function(v2) {
            return 0;
          }, false].concat(args));
        }
        // reversedOp: undefined,
      },
      all: {
        label: "All",
        labelForFormat: "ALL",
        cardinality: 0,
        jsonLogic: "all",
        spelFormatOp: function spelFormatOp(filteredSize, op, fullSize) {
          return "".concat(filteredSize, " == ").concat(fullSize);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils25;
          for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
            args[_key25] = arguments[_key25];
          }
          return (_this$utils25 = this.utils).mongoFormatOp1.apply(_this$utils25, ["$eq", function(v2) {
            return v2;
          }, false].concat(args));
        }
        // reversedOp: "none",
      },
      none: {
        label: "None",
        labelForFormat: "NONE",
        cardinality: 0,
        jsonLogic: "none",
        spelFormatOp: function spelFormatOp(filteredSize) {
          return "".concat(filteredSize, " == 0");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils26;
          for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
            args[_key26] = arguments[_key26];
          }
          return (_this$utils26 = this.utils).mongoFormatOp1.apply(_this$utils26, ["$eq", function(v2) {
            return 0;
          }, false].concat(args));
        }
        // reversedOp: "all",
      }
    };
    var widgets$2 = {
      text: {
        type: "text",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "String",
        valuePlaceholder: "Enter string",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.spelEscape(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          if (opDef.sqlOp == "LIKE" || opDef.sqlOp == "NOT LIKE") {
            return this.utils.SqlString.escapeLike(val, op != "starts_with", op != "ends_with");
          } else {
            return this.utils.SqlString.escape(val);
          }
        },
        toJS: function toJS2(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      textarea: {
        type: "text",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "Text",
        valuePlaceholder: "Enter text",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          if (opDef.sqlOp == "LIKE" || opDef.sqlOp == "NOT LIKE") {
            return this.utils.SqlString.escapeLike(val, op != "starts_with", op != "ends_with");
          } else {
            return this.utils.SqlString.escape(val);
          }
        },
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val);
        },
        toJS: function toJS2(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        },
        fullWidth: true
      },
      number: {
        type: "number",
        jsType: "number",
        valueSrc: "value",
        valueLabel: "Number",
        valuePlaceholder: "Enter number",
        valueLabels: [{
          label: "Number from",
          placeholder: "Enter number from"
        }, {
          label: "Number to",
          placeholder: "Enter number to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef) {
          var isFloat = wgtDef.step && !Number.isInteger(wgtDef.step);
          return this.utils.spelEscape(val, isFloat);
        },
        toJS: function toJS2(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      slider: {
        type: "number",
        jsType: "number",
        valueSrc: "value",
        valueLabel: "Number",
        valuePlaceholder: "Enter number or move slider",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val);
        },
        toJS: function toJS2(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      select: {
        type: "select",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "Value",
        valuePlaceholder: "Select value",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var valLabel = this.utils.getTitleInListValues(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, val);
          return isForDisplay ? this.utils.stringifyForDisplay(valLabel) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val);
        },
        toJS: function toJS2(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      multiselect: {
        type: "multiselect",
        jsType: "array",
        valueSrc: "value",
        valueLabel: "Values",
        valuePlaceholder: "Select values",
        formatValue: function formatValue2(vals, fieldDef, wgtDef, isForDisplay) {
          var _this9 = this;
          var valsLabels = vals.map(function(v2) {
            return _this9.utils.getTitleInListValues(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, v2);
          });
          return isForDisplay ? valsLabels.map(this.utils.stringifyForDisplay) : vals.map(JSON.stringify);
        },
        sqlFormatValue: function sqlFormatValue(vals, fieldDef, wgtDef, op, opDef) {
          var _this10 = this;
          return vals.map(function(v2) {
            return _this10.utils.SqlString.escape(v2);
          });
        },
        spelFormatValue: function spelFormatValue(vals, fieldDef, wgtDef, op, opDef) {
          var isCallable = opDef && opDef.spelOp && opDef.spelOp.startsWith("${1}");
          var res = this.utils.spelEscape(vals);
          if (isCallable) {
            res = this.utils.spelFixList(res);
          }
          return res;
        },
        toJS: function toJS2(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      date: {
        type: "date",
        jsType: "string",
        valueSrc: "value",
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD",
        valueLabel: "Date",
        valuePlaceholder: "Enter date",
        valueLabels: [{
          label: "Date from",
          placeholder: "Enter date from"
        }, {
          label: "Date to",
          placeholder: "Enter date to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.dateFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return this.utils.SqlString.escape(dateVal.format("YYYY-MM-DD"));
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          var v2 = dateVal.format("YYYY-MM-DD");
          var fmt = "yyyy-MM-dd";
          return "T(java.time.LocalDate).parse('".concat(v2, "', T(java.time.format.DateTimeFormatter).ofPattern('").concat(fmt, "'))");
        },
        spelImportFuncs: [
          //"new java.text.SimpleDateFormat(${fmt}).parse(${v})",
          {
            obj: {
              cls: ["java", "time", "LocalDate"]
            },
            methodName: "parse",
            args: [{
              "var": "v"
            }, {
              obj: {
                cls: ["java", "time", "format", "DateTimeFormatter"]
              },
              methodName: "ofPattern",
              args: [{
                "var": "fmt"
              }]
            }]
          }
        ],
        spelImportValue: function spelImportValue(val, wgtDef, args) {
          var _args$fmt, _args$fmt$includes, _args$fmt2, _args$fmt2$toLowerCas;
          if (!wgtDef) return [void 0, "No widget def to get value format"];
          if (args !== null && args !== void 0 && (_args$fmt = args.fmt) !== null && _args$fmt !== void 0 && (_args$fmt = _args$fmt.value) !== null && _args$fmt !== void 0 && (_args$fmt$includes = _args$fmt.includes) !== null && _args$fmt$includes !== void 0 && _args$fmt$includes.call(_args$fmt, " ") || (_args$fmt2 = args.fmt) !== null && _args$fmt2 !== void 0 && (_args$fmt2 = _args$fmt2.value) !== null && _args$fmt2 !== void 0 && (_args$fmt2$toLowerCas = _args$fmt2.toLowerCase) !== null && _args$fmt2$toLowerCas !== void 0 && _args$fmt2$toLowerCas.call(_args$fmt2).includes("hh:mm")) return [void 0, "Invalid date format ".concat(JSON.stringify(args.fmt))];
          var dateVal = this.utils.moment(val.value, this.utils.moment.ISO_8601);
          if (dateVal.isValid()) {
            return [dateVal.format(wgtDef === null || wgtDef === void 0 ? void 0 : wgtDef.valueFormat), []];
          } else {
            return [void 0, "Invalid date"];
          }
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          return this.utils.moment(val, wgtDef.valueFormat).toDate();
        },
        toJS: function toJS2(val, fieldSettings) {
          var dateVal = this.utils.moment(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        }
      },
      time: {
        type: "time",
        jsType: "string",
        valueSrc: "value",
        timeFormat: "HH:mm",
        valueFormat: "HH:mm:ss",
        use12Hours: false,
        valueLabel: "Time",
        valuePlaceholder: "Enter time",
        valueLabels: [{
          label: "Time from",
          placeholder: "Enter time from"
        }, {
          label: "Time to",
          placeholder: "Enter time to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.timeFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return this.utils.SqlString.escape(dateVal.format("HH:mm:ss"));
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          var v2 = dateVal.format("HH:mm:ss");
          return "T(java.time.LocalTime).parse('".concat(v2, "')");
        },
        spelImportFuncs: [
          "T(java.time.LocalTime).parse(${v})"
          //"new java.text.SimpleDateFormat(${fmt}).parse(${v})"
        ],
        spelImportValue: function spelImportValue(val, wgtDef, args) {
          var _args$fmt3, _args$fmt3$toLowerCas, _args$fmt4;
          if (!wgtDef) return [void 0, "No widget def to get value format"];
          if (args !== null && args !== void 0 && args.fmt && (!((_args$fmt3 = args.fmt) !== null && _args$fmt3 !== void 0 && (_args$fmt3 = _args$fmt3.value) !== null && _args$fmt3 !== void 0 && (_args$fmt3$toLowerCas = _args$fmt3.toLowerCase) !== null && _args$fmt3$toLowerCas !== void 0 && _args$fmt3$toLowerCas.call(_args$fmt3).includes("hh:mm")) || (_args$fmt4 = args.fmt) !== null && _args$fmt4 !== void 0 && (_args$fmt4 = _args$fmt4.value) !== null && _args$fmt4 !== void 0 && _args$fmt4.includes(" "))) return [void 0, "Invalid time format ".concat(JSON.stringify(args.fmt))];
          var dateVal = this.utils.moment(val.value, "HH:mm:ss");
          if (dateVal.isValid()) {
            return [dateVal.format(wgtDef === null || wgtDef === void 0 ? void 0 : wgtDef.valueFormat), []];
          } else {
            return [void 0, "Invalid date"];
          }
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second");
        },
        toJS: function toJS2(val, fieldSettings) {
          var dateVal = this.utils.moment(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second") : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second");
        },
        elasticSearchFormatValue: function elasticSearchFormatValue(queryType, value2, operator, fieldName) {
          return {
            script: {
              script: {
                source: "doc[".concat(fieldName, "][0].getHour() >== params.min && doc[").concat(fieldName, "][0].getHour() <== params.max"),
                params: {
                  min: value2[0],
                  max: value2[1]
                }
              }
            }
          };
        }
      },
      datetime: {
        type: "datetime",
        jsType: "string",
        valueSrc: "value",
        timeFormat: "HH:mm",
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD HH:mm:ss",
        use12Hours: false,
        valueLabel: "Datetime",
        valuePlaceholder: "Enter datetime",
        valueLabels: [{
          label: "Datetime from",
          placeholder: "Enter datetime from"
        }, {
          label: "Datetime to",
          placeholder: "Enter datetime to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.dateFormat + " " + wgtDef.timeFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return this.utils.SqlString.escape(dateVal.toDate());
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          var v2 = dateVal.format("YYYY-MM-DD HH:mm:ss");
          var fmt = "yyyy-MM-dd HH:mm:ss";
          return "T(java.time.LocalDateTime).parse('".concat(v2, "', T(java.time.format.DateTimeFormatter).ofPattern('").concat(fmt, "'))");
        },
        spelImportFuncs: [
          //"new java.text.SimpleDateFormat(${fmt}).parse(${v})",
          {
            obj: {
              cls: ["java", "time", "LocalDateTime"]
            },
            methodName: "parse",
            args: [{
              "var": "v"
            }, {
              obj: {
                cls: ["java", "time", "format", "DateTimeFormatter"]
              },
              methodName: "ofPattern",
              args: [{
                "var": "fmt"
              }]
            }]
          }
        ],
        spelImportValue: function spelImportValue(val, wgtDef, args) {
          var _args$fmt5, _args$fmt5$includes;
          if (!wgtDef) return [void 0, "No widget def to get value format"];
          if (!(args !== null && args !== void 0 && (_args$fmt5 = args.fmt) !== null && _args$fmt5 !== void 0 && (_args$fmt5 = _args$fmt5.value) !== null && _args$fmt5 !== void 0 && (_args$fmt5$includes = _args$fmt5.includes) !== null && _args$fmt5$includes !== void 0 && _args$fmt5$includes.call(_args$fmt5, " "))) return [void 0, "Invalid datetime format ".concat(JSON.stringify(args.fmt))];
          var dateVal = this.utils.moment(val.value, this.utils.moment.ISO_8601);
          if (dateVal.isValid()) {
            return [dateVal.format(wgtDef === null || wgtDef === void 0 ? void 0 : wgtDef.valueFormat), []];
          } else {
            return [void 0, "Invalid date"];
          }
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          return this.utils.moment(val, wgtDef.valueFormat).toDate();
        },
        toJS: function toJS2(val, fieldSettings) {
          var dateVal = this.utils.moment(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        }
      },
      "boolean": {
        type: "boolean",
        jsType: "boolean",
        valueSrc: "value",
        labelYes: "Yes",
        labelNo: "No",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? val ? "Yes" : "No" : JSON.stringify(!!val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.spelEscape(val);
        },
        defaultValue: false,
        toJS: function toJS2(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      field: {
        valueSrc: "field",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay, op, opDef, rightFieldDef) {
          return isForDisplay ? rightFieldDef.label || val : val;
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef, rightFieldDef) {
          return val;
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return val;
        },
        valueLabel: "Field to compare",
        valuePlaceholder: "Select field to compare"
      },
      func: {
        valueSrc: "func",
        valueLabel: "Function",
        valuePlaceholder: "Select function"
      },
      /**
       * @deprecated
       */
      case_value: {
        valueSrc: "value",
        type: "case_value",
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val === "" ? null : val);
        },
        spelImportValue: function spelImportValue(val) {
          return [val.value, []];
        },
        jsonLogic: function jsonLogic(val) {
          return val === "" ? null : val;
        }
      }
    };
    var types$3 = {
      text: {
        defaultOperator: "equal",
        mainWidget: "text",
        widgets: {
          text: {
            operators: ["equal", "not_equal", "like", "not_like", "starts_with", "ends_with", "proximity", "is_empty", "is_not_empty", "is_null", "is_not_null"],
            widgetProps: {},
            opProps: {}
          },
          textarea: {
            operators: ["equal", "not_equal", "like", "not_like", "starts_with", "ends_with", "is_empty", "is_not_empty", "is_null", "is_not_null"],
            widgetProps: {},
            opProps: {}
          },
          field: {
            operators: [
              //unary ops (like `is_empty`) will be excluded anyway, see getWidgetsForFieldOp()
              "equal",
              "not_equal",
              "proximity"
              //can exclude if you want
            ]
          }
        }
      },
      number: {
        defaultOperator: "equal",
        mainWidget: "number",
        widgets: {
          number: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          },
          slider: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      date: {
        defaultOperator: "equal",
        widgets: {
          date: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      time: {
        defaultOperator: "equal",
        widgets: {
          time: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      datetime: {
        defaultOperator: "equal",
        widgets: {
          datetime: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      select: {
        mainWidget: "select",
        defaultOperator: "select_equals",
        widgets: {
          select: {
            operators: [
              "select_equals",
              "select_not_equals",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          },
          multiselect: {
            operators: [
              "select_any_in",
              "select_not_any_in",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      multiselect: {
        defaultOperator: "multiselect_equals",
        widgets: {
          multiselect: {
            operators: [
              "multiselect_contains",
              "multiselect_not_contains",
              "multiselect_equals",
              "multiselect_not_equals",
              // "is_empty",
              // "is_not_empty",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      "boolean": {
        defaultOperator: "equal",
        widgets: {
          "boolean": {
            operators: ["equal", "not_equal", "is_null", "is_not_null"],
            widgetProps: {
              //you can enable this if you don't use fields as value sources
              // hideOperator: true,
              // operatorInlineLabel: "is",
            }
          },
          field: {
            operators: ["equal", "not_equal"]
          }
        }
      },
      "!group": {
        defaultOperator: "some",
        mainWidget: "number",
        widgets: {
          number: {
            widgetProps: {
              min: 0
            },
            operators: [
              // w/o operand
              "some",
              "all",
              "none",
              // w/ operand - count
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between"
            ],
            opProps: {
              equal: {
                label: "Count =="
              },
              not_equal: {
                label: "Count !="
              },
              less: {
                label: "Count <"
              },
              less_or_equal: {
                label: "Count <="
              },
              greater: {
                label: "Count >"
              },
              greater_or_equal: {
                label: "Count >="
              },
              between: {
                label: "Count between"
              },
              not_between: {
                label: "Count not between"
              }
            }
          }
        }
      },
      /**
       * @deprecated
       */
      "case_value": {
        mainWidget: "case_value",
        widgets: {
          case_value: {
            widgetProps: {}
          }
        }
      }
    };
    var settings$2 = _objectSpread$h(_objectSpread$h({}, settings$3), {}, {
      convertableWidgets: {
        "number": ["slider", "rangeslider"],
        "slider": ["number", "rangeslider"],
        "rangeslider": ["number", "slider"],
        "text": ["textarea"],
        "textarea": ["text"]
      },
      formatSpelField: function formatSpelField(field, parentField, parts, partsExt, fieldDefinition, config2) {
        var _this11 = this;
        var fieldName = partsExt.map(function(_ref, ind) {
          var key = _ref.key, parent2 = _ref.parent, sep = _ref.fieldSeparator;
          if (ind == 0) {
            if (parent2 == "[map]") return "#this[".concat(_this11.utils.spelEscape(key), "]");
            else if (parent2 == "[class]") return key;
            else return key;
          } else {
            if (parent2 == "map" || parent2 == "[map]") return "[".concat(_this11.utils.spelEscape(key), "]");
            else if (parent2 == "class" || parent2 == "[class]") return "".concat(sep).concat(key);
            else return "".concat(sep).concat(key);
          }
        }).join("");
        if (fieldDefinition.fieldName) {
          fieldName = field;
        }
        if (fieldDefinition.isSpelVariable) {
          fieldName = "#" + fieldName;
        }
        return fieldName;
      },
      sqlFormatReverse: function sqlFormatReverse(q2) {
        if (q2 == void 0) return void 0;
        return "NOT" + this.utils.wrapWithBrackets(q2);
      },
      spelFormatReverse: function spelFormatReverse(q2) {
        if (q2 == void 0) return void 0;
        return "!" + this.utils.wrapWithBrackets(q2);
      },
      formatReverse: function formatReverse(q2, operator, reversedOp, operatorDefinition, revOperatorDefinition, isForDisplay) {
        if (q2 == void 0) return void 0;
        if (isForDisplay) return "NOT " + this.utils.wrapWithBrackets(q2);
        else return "!" + this.utils.wrapWithBrackets(q2);
      },
      formatAggr: function formatAggr(whereStr, aggrField, operator, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay, aggrFieldDef) {
        var labelForFormat = opDef.labelForFormat, cardinality = opDef.cardinality;
        if (cardinality == 0) {
          var cond = whereStr ? " HAVE ".concat(whereStr) : "";
          return "".concat(labelForFormat, " OF ").concat(aggrField).concat(cond);
        } else if (cardinality == void 0 || cardinality == 1) {
          var _cond = whereStr ? " WHERE ".concat(whereStr) : "";
          return "COUNT OF ".concat(aggrField).concat(_cond, " ").concat(labelForFormat, " ").concat(value2);
        } else if (cardinality == 2) {
          var _cond2 = whereStr ? " WHERE ".concat(whereStr) : "";
          var valFrom = value2.first();
          var valTo = value2.get(1);
          return "COUNT OF ".concat(aggrField).concat(_cond2, " ").concat(labelForFormat, " ").concat(valFrom, " AND ").concat(valTo);
        }
      },
      jsonLogic: {
        groupVarKey: "var",
        altVarKey: "var",
        lockedOp: "locked"
      },
      canCompareFieldWithField: function canCompareFieldWithField(leftField, leftFieldConfig, rightField, rightFieldConfig) {
        return true;
      },
      // enable compare fields
      valueSourcesInfo: {
        value: {
          label: "Value"
        },
        field: {
          label: "Field",
          widget: "field"
        },
        func: {
          label: "Function",
          widget: "func"
        }
      }
    });
    var _addMixins = function _addMixins2(config2, mixins) {
      var doAdd = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var mixinFuncs = {
        rangeslider: mixinWidgetRangeslider,
        treeselect: mixinWidgetTreeselect,
        treemultiselect: mixinWidgetTreemultiselect,
        rangeable__date: mixinRangeableWidget("date", "date")
      };
      var _iterator = _createForOfIteratorHelper$2(mixins), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var mixName = _step.value;
          var mixinFunc = mixinFuncs[mixName];
          if (mixinFunc) {
            config2 = mixinFunc(config2, doAdd);
          } else {
            throw new Error("Can't ".concat(doAdd ? "add" : "remove", " mixin ").concat(mixName));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return config2;
    };
    var addMixins = function addMixins2(config2, mixins) {
      return _addMixins(config2, mixins, true);
    };
    var removeMixins = function removeMixins2(config2, mixins) {
      return _addMixins(config2, mixins, false);
    };
    var mixinRangeableWidget = function mixinRangeableWidget2(type, widget) {
      return function(config2) {
        var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        var types2 = config2.types;
        types2 = _objectSpread$h(_objectSpread$h({}, types2), {}, _defineProperty$1({}, type, _objectSpread$h(_objectSpread$h({}, types2[type]), {}, {
          widgets: _objectSpread$h({}, types2[type].widgets)
        })));
        if (addMixin) {
          types2[type].widgets[widget] = _objectSpread$h({
            opProps: {
              between: {
                isSpecialRange: true,
                textSeparators: [null, null]
              },
              not_between: {
                isSpecialRange: true,
                textSeparators: [null, null]
              }
            }
          }, types2[type].widgets[widget]);
        } else {
          delete types2[type].widgets[widget];
        }
        return _objectSpread$h(_objectSpread$h({}, config2), {}, {
          types: types2
        });
      };
    };
    var mixinWidgetRangeslider = function mixinWidgetRangeslider2(config2) {
      var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var widgets2 = config2.widgets, types2 = config2.types;
      widgets2 = _objectSpread$h({}, widgets2);
      if (addMixin) {
        widgets2.rangeslider = _objectSpread$h({
          type: "number",
          jsType: "number",
          valueSrc: "value",
          valueLabel: "Range",
          valuePlaceholder: "Select range",
          valueLabels: [{
            label: "Number from",
            placeholder: "Enter number from"
          }, {
            label: "Number to",
            placeholder: "Enter number to"
          }],
          formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
            return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
          },
          sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
            return this.utils.SqlString.escape(val);
          },
          spelFormatValue: function spelFormatValue(val) {
            return this.utils.spelEscape(val);
          },
          singleWidget: "slider",
          toJS: function toJS2(val, fieldSettings) {
            return val;
          }
        }, widgets2.rangeslider);
      } else {
        delete widgets2.rangeslider;
      }
      types2 = _objectSpread$h(_objectSpread$h({}, types2), {}, {
        number: _objectSpread$h(_objectSpread$h({}, types2.number), {}, {
          widgets: _objectSpread$h({}, types2.number.widgets)
        })
      });
      if (addMixin) {
        types2.number.widgets.rangeslider = _objectSpread$h({
          opProps: {
            between: {
              isSpecialRange: true
            },
            not_between: {
              isSpecialRange: true
            }
          },
          operators: [
            "between",
            "not_between",
            // "is_empty",
            // "is_not_empty",
            "is_null",
            "is_not_null"
          ]
        }, types2.number.widgets.rangeslider);
      } else {
        delete types2.number.widgets.rangeslider;
      }
      return _objectSpread$h(_objectSpread$h({}, config2), {}, {
        widgets: widgets2,
        types: types2
      });
    };
    var mixinWidgetTreeselect = function mixinWidgetTreeselect2(config2) {
      var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var widgets2 = config2.widgets, types2 = config2.types;
      widgets2 = _objectSpread$h({}, widgets2);
      if (addMixin) {
        widgets2.treeselect = _objectSpread$h({
          type: "treeselect",
          jsType: "string",
          valueSrc: "value",
          valueLabel: "Value",
          valuePlaceholder: "Select value",
          formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
            var treeData = fieldDef.fieldSettings.treeValues || fieldDef.fieldSettings.listValues || fieldDef.asyncListValues;
            var valLabel = this.utils.getTitleInListValues(treeData, val);
            return isForDisplay ? this.utils.stringifyForDisplay(valLabel) : JSON.stringify(val);
          },
          sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
            return this.utils.SqlString.escape(val);
          },
          spelFormatValue: function spelFormatValue(val) {
            return this.utils.spelEscape(val);
          },
          toJS: function toJS2(val, fieldSettings) {
            return val;
          }
        }, widgets2.treeselect);
      } else {
        delete widgets2.treeselect;
      }
      types2 = _objectSpread$h({}, types2);
      if (addMixin) {
        types2.treeselect = _objectSpread$h({
          mainWidget: "treeselect",
          defaultOperator: "select_equals",
          widgets: {
            treeselect: {
              operators: ["select_equals", "select_not_equals"]
            },
            treemultiselect: {
              operators: ["select_any_in", "select_not_any_in"]
            }
          }
        }, types2.treeselect);
      } else {
        delete types2.treeselect;
      }
      return _objectSpread$h(_objectSpread$h({}, config2), {}, {
        widgets: widgets2,
        types: types2
      });
    };
    var mixinWidgetTreemultiselect = function mixinWidgetTreemultiselect2(config2) {
      var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var widgets2 = config2.widgets, types2 = config2.types;
      widgets2 = _objectSpread$h({}, widgets2);
      if (addMixin) {
        widgets2.treemultiselect = _objectSpread$h({
          type: "treemultiselect",
          jsType: "array",
          valueSrc: "value",
          valueLabel: "Values",
          valuePlaceholder: "Select values",
          formatValue: function formatValue2(vals, fieldDef, wgtDef, isForDisplay) {
            var _this12 = this;
            var treeData = fieldDef.fieldSettings.treeValues || fieldDef.fieldSettings.listValues || fieldDef.asyncListValues;
            var valsLabels = vals.map(function(v2) {
              return _this12.utils.getTitleInListValues(treeData, v2);
            });
            return isForDisplay ? valsLabels.map(this.utils.stringifyForDisplay) : vals.map(JSON.stringify);
          },
          sqlFormatValue: function sqlFormatValue(vals, fieldDef, wgtDef, op, opDef) {
            var _this13 = this;
            return vals.map(function(v2) {
              return _this13.utils.SqlString.escape(v2);
            });
          },
          spelFormatValue: function spelFormatValue(val) {
            return this.utils.spelEscape(val);
          },
          toJS: function toJS2(val, fieldSettings) {
            return val;
          }
        }, widgets2.treemultiselect);
      } else {
        delete widgets2.treemultiselect;
      }
      types2 = _objectSpread$h({}, types2);
      if (addMixin) {
        types2.treemultiselect = _objectSpread$h({
          defaultOperator: "multiselect_equals",
          widgets: {
            treemultiselect: {
              operators: ["multiselect_equals", "multiselect_not_equals"]
            }
          }
        }, types2.treemultiselect);
      } else {
        delete types2.treemultiselect;
      }
      return _objectSpread$h(_objectSpread$h({}, config2), {}, {
        widgets: widgets2,
        types: types2
      });
    };
    var ConfigMixins = {
      addMixins,
      removeMixins
    };
    var config$2 = {
      conjunctions: conjunctions$2,
      operators: operators$2,
      widgets: widgets$2,
      types: types$3,
      settings: settings$2,
      ctx: ctx$2
    };
    config$2 = addMixins(config$2, ["rangeslider", "treeselect", "treemultiselect"]);
    const CoreConfig = config$2;
    var ADD_GROUP = "ADD_GROUP";
    var ADD_CASE_GROUP = "ADD_CASE_GROUP";
    var REMOVE_GROUP = "REMOVE_GROUP";
    var SET_CONJUNCTION = "SET_CONJUNCTION";
    var SET_NOT = "SET_NOT";
    var ADD_RULE = "ADD_RULE";
    var REMOVE_RULE = "REMOVE_RULE";
    var SET_FIELD = "SET_FIELD";
    var SET_FIELD_SRC = "SET_FIELD_SRC";
    var SET_OPERATOR = "SET_OPERATOR";
    var SET_VALUE = "SET_VALUE";
    var SET_VALUE_SRC = "SET_VALUE_SRC";
    var SET_FUNC_VALUE = "SET_FUNC_VALUE";
    var SET_OPERATOR_OPTION = "SET_OPERATOR_OPTION";
    var SET_LOCK = "SET_LOCK";
    var SET_TREE = "SET_TREE";
    var MOVE_ITEM = "MOVE_ITEM";
    var PLACEMENT_AFTER$1 = "after";
    var PLACEMENT_BEFORE$1 = "before";
    var PLACEMENT_APPEND$1 = "append";
    var PLACEMENT_PREPEND$1 = "prepend";
    var SET_DRAG_PROGRESS$1 = "SET_DRAG_PROGRESS";
    var SET_DRAG_START$1 = "SET_DRAG_START";
    var SET_DRAG_END$1 = "SET_DRAG_END";
    var baseFor = _baseFor, keys$1 = keys_1;
    function baseForOwn$1(object, iteratee) {
      return object && baseFor(object, iteratee, keys$1);
    }
    var _baseForOwn = baseForOwn$1;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd$1(value2) {
      this.__data__.set(value2, HASH_UNDEFINED);
      return this;
    }
    var _setCacheAdd = setCacheAdd$1;
    function setCacheHas$1(value2) {
      return this.__data__.has(value2);
    }
    var _setCacheHas = setCacheHas$1;
    var MapCache = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
    function SetCache$1(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
    SetCache$1.prototype.has = setCacheHas;
    var _SetCache = SetCache$1;
    function arraySome$1(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    var _arraySome = arraySome$1;
    function cacheHas$1(cache, key) {
      return cache.has(key);
    }
    var _cacheHas = cacheHas$1;
    var SetCache = _SetCache, arraySome = _arraySome, cacheHas = _cacheHas;
    var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
    function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    var _equalArrays = equalArrays$2;
    function mapToArray$1(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value2, key) {
        result[++index] = [key, value2];
      });
      return result;
    }
    var _mapToArray = mapToArray$1;
    function setToArray$1(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value2) {
        result[++index] = value2;
      });
      return result;
    }
    var _setToArray = setToArray$1;
    var Symbol$1 = _Symbol, Uint8Array2 = _Uint8Array, eq = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray = _setToArray;
    var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
    var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
    var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;
          stack.set(object, other);
          var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    var _equalByTag = equalByTag$1;
    var getAllKeys = _getAllKeys;
    var COMPARE_PARTIAL_FLAG$3 = 1;
    var objectProto$1 = Object.prototype;
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
    function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    var _equalObjects = equalObjects$1;
    var Stack$1 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag = _getTag, isArray$1 = isArray_1, isBuffer = isBufferExports, isTypedArray = isTypedArray_1;
    var COMPARE_PARTIAL_FLAG$2 = 1;
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$1(object), othIsArr = isArray$1(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$1());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack$1());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$1());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    var _baseIsEqualDeep = baseIsEqualDeep$1;
    var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike = isObjectLike_1;
    function baseIsEqual$2(value2, other, bitmask, customizer, stack) {
      if (value2 === other) {
        return true;
      }
      if (value2 == null || other == null || !isObjectLike(value2) && !isObjectLike(other)) {
        return value2 !== value2 && other !== other;
      }
      return baseIsEqualDeep(value2, other, bitmask, customizer, baseIsEqual$2, stack);
    }
    var _baseIsEqual = baseIsEqual$2;
    var Stack = _Stack, baseIsEqual$1 = _baseIsEqual;
    var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
    function baseIsMatch$1(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    var _baseIsMatch = baseIsMatch$1;
    var isObject$1 = isObject_1;
    function isStrictComparable$2(value2) {
      return value2 === value2 && !isObject$1(value2);
    }
    var _isStrictComparable = isStrictComparable$2;
    var isStrictComparable$1 = _isStrictComparable, keys = keys_1;
    function getMatchData$1(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value2 = object[key];
        result[length] = [key, value2, isStrictComparable$1(value2)];
      }
      return result;
    }
    var _getMatchData = getMatchData$1;
    function matchesStrictComparable$2(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var _matchesStrictComparable = matchesStrictComparable$2;
    var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
    function baseMatches$1(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    var _baseMatches = baseMatches$1;
    var baseGet$1 = _baseGet;
    function get$1(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet$1(object, path);
      return result === void 0 ? defaultValue : result;
    }
    var get_1 = get$1;
    var baseIsEqual = _baseIsEqual, get = get_1, hasIn = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$1 = _toKey;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty$1(path, srcValue) {
      if (isKey$1(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey$1(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    var _baseMatchesProperty = baseMatchesProperty$1;
    function baseProperty$1(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    var _baseProperty = baseProperty$1;
    var baseGet = _baseGet;
    function basePropertyDeep$1(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    var _basePropertyDeep = basePropertyDeep$1;
    var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey = _toKey;
    function property$1(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    var property_1 = property$1;
    var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity = identity_1, isArray = isArray_1, property = property_1;
    function baseIteratee$2(value2) {
      if (typeof value2 == "function") {
        return value2;
      }
      if (value2 == null) {
        return identity;
      }
      if (typeof value2 == "object") {
        return isArray(value2) ? baseMatchesProperty(value2[0], value2[1]) : baseMatches(value2);
      }
      return property(value2);
    }
    var _baseIteratee = baseIteratee$2;
    var baseAssignValue = _baseAssignValue, baseForOwn = _baseForOwn, baseIteratee$1 = _baseIteratee;
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = baseIteratee$1(iteratee);
      baseForOwn(object, function(value2, key, object2) {
        baseAssignValue(result, key, iteratee(value2, key, object2));
      });
      return result;
    }
    var mapValues_1 = mapValues;
    const mapValues$1 = /* @__PURE__ */ getDefaultExportFromCjs(mapValues_1);
    function ownKeys$g(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$g(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$g(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$g(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _createForOfIteratorHelper$1(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$1(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray$1(o, minLen);
    }
    function _arrayLikeToArray$1(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var addNewGroup = function addNewGroup2(state, path, type, generatedId, properties, config2) {
      var _properties$get;
      var children = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var meta = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : {};
      var targetItem = state.getIn(expandTreePath(path));
      if (!targetItem) {
        return state;
      }
      var groupUuid = (properties === null || properties === void 0 || (_properties$get = properties.get) === null || _properties$get === void 0 ? void 0 : _properties$get.call(properties, "id")) || generatedId;
      var shouldCreateEmptyGroup = config2.settings.shouldCreateEmptyGroup;
      var groupPath = path.push(groupUuid);
      var canAddNewRule = !shouldCreateEmptyGroup;
      var isDefaultCase = !!(meta !== null && meta !== void 0 && meta.isDefaultCase);
      var origState = state;
      state = addItem(state, path, type, groupUuid, defaultGroupProperties(config2).merge(fromJS(properties) || {}), config2, children);
      if (state !== origState) {
        if (!children && !isDefaultCase) {
          state = state.setIn(expandTreePath(groupPath, "children1"), new Immutable.OrderedMap());
          if (canAddNewRule) {
            state = addItem(state, groupPath, "rule", uuid$1(), defaultRuleProperties(config2, meta === null || meta === void 0 ? void 0 : meta.parentRuleGroupField), config2);
          }
        }
        state = fixPathsInTree(state);
      }
      return state;
    };
    var removeGroup$1 = function removeGroup2(state, path, config2) {
      var targetItem = state.getIn(expandTreePath(path));
      if (!targetItem) {
        return state;
      }
      state = removeItem(state, path);
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      var parentPath = path.slice(0, -1);
      var isEmptyParentGroup = !hasChildren(state, parentPath);
      if (isEmptyParentGroup && !canLeaveEmptyGroup) {
        state = fixEmptyGroupsInTree(state);
        if (isEmptyTree(state) && !canLeaveEmptyGroup) {
          var canUseDefaultFieldAndOp = false;
          var canGetFirst = false;
          state = addItem(state, new Immutable.List(), "rule", uuid$1(), defaultRuleProperties(config2, void 0, void 0, canUseDefaultFieldAndOp, canGetFirst), config2);
        }
      }
      state = fixPathsInTree(state);
      return state;
    };
    var removeRule$1 = function removeRule2(state, path, config2) {
      var targetItem = state.getIn(expandTreePath(path));
      if (!targetItem) {
        return state;
      }
      state = removeItem(state, path);
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      var parentPath = path.pop();
      var parent2 = state.getIn(expandTreePath(parentPath));
      var parentField = parent2.getIn(["properties", "field"]);
      var parentOperator = parent2.getIn(["properties", "operator"]);
      var parentFieldConfig = parentField ? getFieldConfig$b(config2, parentField) : null;
      var parentOperatorConfig = parentOperator ? getOperatorConfig$4(config2, parentOperator, parentField) : null;
      var hasGroupCountRule = parentField && parentOperator && parentOperatorConfig.cardinality != 0;
      var isParentRuleGroup = parent2.get("type") == "rule_group";
      var isEmptyParentGroup = !hasChildren(state, parentPath);
      var canLeaveEmpty = isParentRuleGroup ? hasGroupCountRule && parentFieldConfig.initialEmptyWhere : canLeaveEmptyGroup;
      if (isEmptyParentGroup && !canLeaveEmpty) {
        if (isParentRuleGroup) {
          state = state.deleteIn(expandTreePath(parentPath));
        }
        state = fixEmptyGroupsInTree(state);
        if (isEmptyTree(state) && !canLeaveEmptyGroup) {
          var canUseDefaultFieldAndOp = false;
          var canGetFirst = false;
          state = addItem(state, new Immutable.List(), "rule", uuid$1(), defaultRuleProperties(config2, void 0, void 0, canUseDefaultFieldAndOp, canGetFirst), config2);
        }
      }
      state = fixPathsInTree(state);
      return state;
    };
    var setNot$1 = function setNot2(state, path, not2) {
      var targetItem = state.getIn(expandTreePath(path));
      if (!targetItem) {
        return state;
      }
      state = state.setIn(expandTreePath(path, "properties", "not"), not2);
      return state;
    };
    var setLock$1 = function setLock2(state, path, lock) {
      var targetItem = state.getIn(expandTreePath(path));
      if (!targetItem) {
        return state;
      }
      state = removeIsLockedInTree(state.setIn(expandTreePath(path, "properties", "isLocked"), lock));
      return state;
    };
    var setConjunction$1 = function setConjunction2(state, path, conjunction) {
      var targetItem = state.getIn(expandTreePath(path));
      if (!targetItem) {
        return state;
      }
      state = state.setIn(expandTreePath(path, "properties", "conjunction"), conjunction);
      return state;
    };
    var addItem = function addItem2(state, path, type, generatedId, properties, config2) {
      var _properties$get2;
      var children = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (type === "switch_group") throw new Error("Can't add switch_group programmatically");
      var targetItem = state.getIn(expandTreePath(path));
      if (!targetItem) {
        return state;
      }
      var id2 = (properties === null || properties === void 0 || (_properties$get2 = properties.get) === null || _properties$get2 === void 0 ? void 0 : _properties$get2.call(properties, "id")) || generatedId;
      var _config$settings = config2.settings, maxNumberOfCases = _config$settings.maxNumberOfCases, maxNumberOfRules = _config$settings.maxNumberOfRules, maxNesting = _config$settings.maxNesting;
      var rootType = state.get("type");
      var isTernary = rootType === "switch_group";
      var caseGroup = isTernary ? state.getIn(expandTreePath(path.take(2))) : null;
      var childrenPath = expandTreePath(path, "children1");
      var targetChildren = state.getIn(childrenPath);
      var hasChildren2 = !!targetChildren && targetChildren.size;
      var targetChildrenSize = hasChildren2 ? targetChildren.size : null;
      var currentNumber, maxNumber;
      if (type === "case_group") {
        currentNumber = targetChildrenSize;
        maxNumber = maxNumberOfCases;
      } else if (type === "group") {
        var ruleGroups = getAncestorRuleGroups(state, path);
        if (ruleGroups.length) {
          var _ruleGroups$ = ruleGroups[0], ruleGroupPath = _ruleGroups$.path, ruleGroupField = _ruleGroups$.field;
          var ruleGroupFieldConfig = getFieldConfig$b(config2, ruleGroupField);
          currentNumber = path.size - ruleGroupPath.length;
          maxNumber = ruleGroupFieldConfig === null || ruleGroupFieldConfig === void 0 ? void 0 : ruleGroupFieldConfig.maxNesting;
        } else {
          currentNumber = path.size;
          maxNumber = maxNesting;
        }
      } else {
        var _ruleGroups = getAncestorRuleGroups(state, path);
        if (_ruleGroups.length) {
          var _ruleGroups$2 = _ruleGroups[0], _ruleGroupPath = _ruleGroups$2.path, _ruleGroupField = _ruleGroups$2.field;
          var _ruleGroupFieldConfig = getFieldConfig$b(config2, _ruleGroupField);
          var ruleGroupItem = getItemByPath(state, _ruleGroupPath);
          maxNumber = _ruleGroupFieldConfig === null || _ruleGroupFieldConfig === void 0 ? void 0 : _ruleGroupFieldConfig.maxNumberOfRules;
          currentNumber = getTotalRulesCountInTree$3(ruleGroupItem);
        } else {
          currentNumber = isTernary ? getTotalRulesCountInTree$3(caseGroup) : getTotalRulesCountInTree$3(state);
          maxNumber = maxNumberOfRules;
        }
      }
      var canAdd = maxNumber && currentNumber ? currentNumber < maxNumber : true;
      var item = {
        type,
        id: id2,
        properties
      };
      _addChildren1(config2, item, children);
      var isLastDefaultCase = type === "case_group" && hasChildren2 && targetChildren.last().get("children1") == null;
      if (canAdd) {
        var newChildren = new Immutable.OrderedMap(_defineProperty$1({}, id2, new Immutable.Map(item)));
        if (!hasChildren2) {
          state = state.setIn(childrenPath, newChildren);
        } else if (isLastDefaultCase) {
          var last2 = targetChildren.last();
          var newChildrenWithLast = new Immutable.OrderedMap(_defineProperty$1(_defineProperty$1({}, id2, new Immutable.Map(item)), last2.get("id"), last2));
          state = state.deleteIn(expandTreePath(childrenPath, "children1", last2.get("id")));
          state = state.mergeIn(childrenPath, newChildrenWithLast);
        } else {
          state = state.mergeIn(childrenPath, newChildren);
        }
        state = fixPathsInTree(state);
      }
      return state;
    };
    var removeItem = function removeItem2(state, path) {
      state = state.deleteIn(expandTreePath(path));
      state = fixPathsInTree(state);
      return state;
    };
    var moveItem$1 = function moveItem2(state, fromPath, toPath, placement, config2) {
      var from2 = getItemByPath(state, fromPath);
      var sourcePath = fromPath.pop();
      var source = fromPath.size > 1 ? getItemByPath(state, sourcePath) : null;
      var sourceChildren = source ? source.get("children1") : null;
      var to2 = getItemByPath(state, toPath);
      var targetPath = placement == PLACEMENT_APPEND$1 || placement == PLACEMENT_PREPEND$1 ? toPath : toPath.pop();
      var target = placement == PLACEMENT_APPEND$1 || placement == PLACEMENT_PREPEND$1 ? to2 : toPath.size > 1 ? getItemByPath(state, targetPath) : null;
      var targetChildren = target ? target.get("children1") : null;
      if (!source || !target || !from2) {
        return state;
      }
      var isSameParent = source.get("id") == target.get("id");
      var isSourceInsideTarget = targetPath.size < sourcePath.size && deepEqual(targetPath.toArray(), sourcePath.toArray().slice(0, targetPath.size));
      var isTargetInsideSource = targetPath.size > sourcePath.size && deepEqual(sourcePath.toArray(), targetPath.toArray().slice(0, sourcePath.size));
      var sourceSubpathFromTarget = null;
      var targetSubpathFromSource = null;
      if (isSourceInsideTarget) {
        sourceSubpathFromTarget = Immutable.List(sourcePath.toArray().slice(targetPath.size));
      } else if (isTargetInsideSource) {
        targetSubpathFromSource = Immutable.List(targetPath.toArray().slice(sourcePath.size));
      }
      var newTargetChildren = targetChildren, newSourceChildren = sourceChildren;
      if (!isTargetInsideSource) newSourceChildren = newSourceChildren["delete"](from2.get("id"));
      if (isSameParent) {
        newTargetChildren = newSourceChildren;
      } else if (isSourceInsideTarget) {
        newTargetChildren = newTargetChildren.updateIn(expandTreeSubpath(sourceSubpathFromTarget, "children1"), function(_oldChildren) {
          return newSourceChildren;
        });
      }
      if (placement == PLACEMENT_BEFORE$1 || placement == PLACEMENT_AFTER$1) {
        newTargetChildren = Immutable.OrderedMap().withMutations(function(r2) {
          var _iterator = _createForOfIteratorHelper$1(newTargetChildren.entries()), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _step$value = _slicedToArray(_step.value, 2), itemId = _step$value[0], item = _step$value[1];
              if (itemId == (to2 === null || to2 === void 0 ? void 0 : to2.get("id")) && placement == PLACEMENT_BEFORE$1) {
                r2.set(from2.get("id"), from2);
              }
              r2.set(itemId, item);
              if (itemId == (to2 === null || to2 === void 0 ? void 0 : to2.get("id")) && placement == PLACEMENT_AFTER$1) {
                r2.set(from2.get("id"), from2);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        });
      } else if (placement == PLACEMENT_APPEND$1) {
        newTargetChildren = newTargetChildren.merge(Immutable.OrderedMap(_defineProperty$1({}, from2.get("id"), from2)));
      } else if (placement == PLACEMENT_PREPEND$1) {
        newTargetChildren = Immutable.OrderedMap(_defineProperty$1({}, from2.get("id"), from2)).merge(newTargetChildren);
      }
      if (isTargetInsideSource) {
        newSourceChildren = newSourceChildren.updateIn(expandTreeSubpath(targetSubpathFromSource, "children1"), function(_oldChildren) {
          return newTargetChildren;
        });
        newSourceChildren = newSourceChildren["delete"](from2.get("id"));
      }
      if (!isSameParent && !isSourceInsideTarget) state = state.updateIn(expandTreePath(sourcePath, "children1"), function(_oldChildren) {
        return newSourceChildren;
      });
      if (!isTargetInsideSource) state = state.updateIn(expandTreePath(targetPath, "children1"), function(_oldChildren) {
        return newTargetChildren;
      });
      state = fixPathsInTree(state);
      return state;
    };
    var setFieldSrc$1 = function setFieldSrc2(state, path, srcKey, config2) {
      var currentRule = state.getIn(expandTreePath(path));
      if (!currentRule) {
        return state;
      }
      var keepInputOnChangeFieldSrc = config2.settings.keepInputOnChangeFieldSrc;
      var currentProperties = currentRule.get("properties");
      var currentField = currentProperties === null || currentProperties === void 0 ? void 0 : currentProperties.get("field");
      var currentFielType = currentProperties === null || currentProperties === void 0 ? void 0 : currentProperties.get("fieldType");
      var currentFieldConfig = getFieldConfig$b(config2, currentField);
      var fieldType = (currentFieldConfig === null || currentFieldConfig === void 0 ? void 0 : currentFieldConfig.type) || currentFielType;
      if (!fieldType || fieldType === "!group" || fieldType === "!struct") {
        fieldType = null;
      }
      var canReuseValue = !selectTypes.includes(fieldType);
      var keepInput = keepInputOnChangeFieldSrc && !isEmptyItem(currentRule, config2) && canReuseValue;
      if (!keepInput) {
        state = state.setIn(expandTreePath(path, "properties"), defaultRuleProperties(config2, null, null, false));
      } else {
        state = state.setIn(expandTreePath(path, "properties", "field"), null);
        state = state.deleteIn(expandTreePath(path, "properties", "fieldError"));
        state = state.setIn(expandTreePath(path, "properties", "fieldType"), fieldType);
      }
      state = state.setIn(expandTreePath(path, "properties", "fieldSrc"), srcKey);
      return state;
    };
    var setFuncValue$1 = function setFuncValue2(config2, state, path, delta, parentFuncs, argKey, argValue, valueType, asyncListValues) {
      var _meta = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : {};
      var currentRule = state.getIn(expandTreePath(path));
      if (!currentRule) {
        return state;
      }
      var isLHS = delta === -1;
      var currentProperties = currentRule.get("properties");
      var currentField = currentProperties.get("field");
      var currentValue = currentProperties.get("value");
      var currentV = isLHS ? currentField : currentValue.getIn([delta]);
      var funcsPath = [];
      var targetFV = currentV;
      var _iterator2 = _createForOfIteratorHelper$1(parentFuncs || []), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var _step2$value = _slicedToArray(_step2.value, 2), _funcK = _step2$value[0], _argK = _step2$value[1];
          funcsPath.push([_funcK, _argK, targetFV]);
          if (_funcK !== targetFV.get("func")) {
            var funcPath = funcsPath.map(function(_ref) {
              var _ref2 = _slicedToArray(_ref, 2), f2 = _ref2[0], a = _ref2[1];
              return "".concat(f2, "(").concat(a, ")");
            }).join("/") || "root";
            throw new Error("In ".concat(isLHS ? "LHS" : "RHS", " for path ").concat(funcPath, " expected func key ").concat(_funcK, " but got ").concat(parent.get("func")));
          }
          targetFV = targetFV.getIn(["args", _argK, "value"]);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (!argKey) {
        var newFuncKey = argValue;
        var canFixArgs = true;
        targetFV = setFunc(targetFV, newFuncKey, config2, canFixArgs);
        _meta.canDropArgs = true;
      } else {
        var funcKey = targetFV.get("func");
        var funcDefinition = getFuncConfig$2(config2, funcKey);
        var args = funcDefinition.args;
        var argDefinition = args[argKey];
        if (valueType === "!valueSrc") {
          targetFV = setArgValueSrc(targetFV, argKey, argValue);
        } else {
          targetFV = setArgValue(targetFV, argKey, argValue, argDefinition, config2);
        }
      }
      var newV = targetFV;
      while (funcsPath.length) {
        var _funcsPath$pop = funcsPath.pop(), _funcsPath$pop2 = _slicedToArray(_funcsPath$pop, 3), funcK = _funcsPath$pop2[0], argK = _funcsPath$pop2[1], parentFV = _funcsPath$pop2[2];
        var _funcDefinition = getFuncConfig$2(config2, funcK);
        var _args = _funcDefinition.args;
        var _argDefinition = _args[argK];
        newV = setArgValue(parentFV, argK, newV, _argDefinition, config2);
      }
      if (isLHS) {
        return setField$1(state, path, newV, config2, asyncListValues, _meta);
      } else {
        return setValue$1(state, path, delta, newV, void 0, config2, asyncListValues, _meta);
      }
    };
    var setField$1 = function setField2(state, path, newField, config2, asyncListValues) {
      var _newFieldConfig$opera, _currentField$get, _newField, _newField$get;
      var _meta = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
      var currentRule = state.getIn(expandTreePath(path));
      if (!currentRule) {
        return {
          state
        };
      }
      var isEndValue = _meta.isEndValue, canDropArgs = _meta.canDropArgs;
      if (!newField) {
        state = removeItem(state, path);
        return {
          state
        };
      }
      var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, setOpOnChangeField = _config$settings2.setOpOnChangeField, showErrorMessage = _config$settings2.showErrorMessage;
      if (Array.isArray(newField)) newField = newField.join(fieldSeparator);
      var currentType = currentRule.get("type");
      var currentProperties = currentRule.get("properties");
      var wasRuleGroup = currentType == "rule_group";
      var currentFieldSrc = currentProperties === null || currentProperties === void 0 ? void 0 : currentProperties.get("fieldSrc");
      var newFieldConfig = getFieldConfig$b(config2, newField);
      if (!newFieldConfig) {
        console.warn("No config for LHS ".concat(newField));
        return {
          state
        };
      }
      var fieldType = newFieldConfig.type;
      if (fieldType === "!group" || fieldType === "!struct") {
        fieldType = null;
      }
      var currentOperator = currentProperties === null || currentProperties === void 0 ? void 0 : currentProperties.get("operator");
      var currentOperatorOptions = currentProperties === null || currentProperties === void 0 ? void 0 : currentProperties.get("operatorOptions");
      var currentField = currentProperties === null || currentProperties === void 0 ? void 0 : currentProperties.get("field");
      var isRuleGroup = newFieldConfig.type == "!group";
      var isRuleGroupExt = isRuleGroup && newFieldConfig.mode == "array";
      var isChangeToAnotherType = wasRuleGroup != isRuleGroup;
      var lastOp = newFieldConfig && ((_newFieldConfig$opera = newFieldConfig.operators) === null || _newFieldConfig$opera === void 0 ? void 0 : _newFieldConfig$opera.indexOf(currentOperator)) !== -1 ? currentOperator : null;
      var isSameFunc = currentFieldSrc === "func" && (currentField === null || currentField === void 0 || (_currentField$get = currentField.get) === null || _currentField$get === void 0 ? void 0 : _currentField$get.call(currentField, "func")) === ((_newField = newField) === null || _newField === void 0 || (_newField$get = _newField.get) === null || _newField$get === void 0 ? void 0 : _newField$get.call(_newField, "func"));
      var forceKeepOp = isSameFunc && !!lastOp;
      var newOperator = null;
      var availOps = currentFieldSrc === "func" ? getOperatorsForType(config2, fieldType) : getOperatorsForField(config2, newField);
      if (availOps && availOps.length == 1) newOperator = availOps[0];
      else if (forceKeepOp) newOperator = lastOp;
      else if (availOps && availOps.length > 1) {
        var _iterator3 = _createForOfIteratorHelper$1(setOpOnChangeField), _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            var strategy = _step3.value;
            if (strategy == "keep" && !isChangeToAnotherType) newOperator = lastOp;
            else if (strategy == "default") newOperator = getDefaultOperator(config2, newField, false);
            else if (strategy == "first") newOperator = getFirstOperator(config2, newField);
            if (newOperator)
              break;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      if (!isRuleGroup && !newFieldConfig.operators) {
        console.warn("Type ".concat(newFieldConfig.type, " is not supported"));
        return {
          state
        };
      }
      if (wasRuleGroup && !isRuleGroup) {
        state = state.setIn(expandTreePath(path, "type"), "rule");
        state = state.deleteIn(expandTreePath(path, "children1"));
        state = state.setIn(expandTreePath(path, "properties"), new Immutable.OrderedMap());
      }
      if (!currentProperties) {
        state = state.setIn(expandTreePath(path, "properties"), new Immutable.OrderedMap());
      }
      var canFix = !showErrorMessage;
      if (isRuleGroup) {
        state = state.setIn(expandTreePath(path, "type"), "rule_group");
        var _getNewValueForFieldO = getNewValueForFieldOp(config2, config2, currentProperties, newField, newOperator, "field", canFix, isEndValue, canDropArgs);
        _getNewValueForFieldO.canReuseValue;
        var newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueType = _getNewValueForFieldO.newValueType, operatorCardinality = _getNewValueForFieldO.operatorCardinality;
        var groupProperties = defaultGroupProperties(config2, newFieldConfig, newField).merge({
          field: newField,
          fieldSrc: "field",
          mode: newFieldConfig.mode
        });
        if (isRuleGroupExt) {
          groupProperties = groupProperties.merge({
            operator: newOperator,
            value: newValue,
            valueSrc: newValueSrc,
            valueType: newValueType
          });
        }
        state = state.setIn(expandTreePath(path, "children1"), new Immutable.OrderedMap());
        state = state.setIn(expandTreePath(path, "properties"), groupProperties);
        if (newFieldConfig.initialEmptyWhere && operatorCardinality == 1) ;
        else {
          state = addItem(state, path, "rule", uuid$1(), defaultRuleProperties(config2, newField), config2);
        }
        state = fixPathsInTree(state);
      } else {
        state = state.updateIn(expandTreePath(path, "properties"), function(map2) {
          return map2.withMutations(function(current) {
            var _getNewValueForFieldO2 = getNewValueForFieldOp(config2, config2, current, newField, newOperator, "field", canFix, isEndValue, canDropArgs), canReuseValue = _getNewValueForFieldO2.canReuseValue, newValue2 = _getNewValueForFieldO2.newValue, newValueSrc2 = _getNewValueForFieldO2.newValueSrc, newValueType2 = _getNewValueForFieldO2.newValueType, newValueError = _getNewValueForFieldO2.newValueError, newFieldError = _getNewValueForFieldO2.newFieldError, fixedField = _getNewValueForFieldO2.fixedField;
            var newCorrectField = newField;
            var willFixField = fixedField !== newField;
            if (willFixField) {
              newCorrectField = fixedField;
            }
            if (showErrorMessage) {
              current = current.set("fieldError", newFieldError);
              current = current.set("valueError", newValueError);
            }
            var newOperatorOptions = canReuseValue ? currentOperatorOptions : defaultOperatorOptions(config2, newOperator, newCorrectField);
            current = current.set("field", newCorrectField)["delete"]("fieldType").set("fieldSrc", currentFieldSrc).set("operator", newOperator).set("operatorOptions", newOperatorOptions).set("value", newValue2).set("valueSrc", newValueSrc2).set("valueType", newValueType2);
            if (!canReuseValue) {
              current = current["delete"]("asyncListValues");
            }
            return current;
          });
        });
      }
      return {
        state
      };
    };
    var setOperator$1 = function setOperator2(state, path, newOperator, config2) {
      var currentRule = state.getIn(expandTreePath(path));
      if (!currentRule) {
        return state;
      }
      var showErrorMessage = config2.settings.showErrorMessage;
      var properties = currentRule.get("properties");
      var children = currentRule.get("children1");
      var currentField = properties.get("field");
      properties.get("fieldSrc");
      var fieldConfig = getFieldConfig$b(config2, currentField);
      var isRuleGroup = (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) == "!group";
      var operatorConfig = getOperatorConfig$4(config2, newOperator, currentField);
      var operatorCardinality = operatorConfig ? getOpCardinality$1(operatorConfig) : null;
      var canFix = true;
      state = state.updateIn(expandTreePath(path, "properties"), function(map2) {
        return map2.withMutations(function(current) {
          var currentField2 = current.get("field");
          var currentOperatorOptions = current.get("operatorOptions");
          current.get("value", new Immutable.List());
          current.get("valueSrc", new Immutable.List());
          current.get("operator");
          var _getNewValueForFieldO3 = getNewValueForFieldOp(config2, config2, current, currentField2, newOperator, "operator", canFix), canReuseValue = _getNewValueForFieldO3.canReuseValue, newValue = _getNewValueForFieldO3.newValue, newValueSrc = _getNewValueForFieldO3.newValueSrc, newValueType = _getNewValueForFieldO3.newValueType, newValueError = _getNewValueForFieldO3.newValueError;
          if (showErrorMessage) {
            current = current.set("valueError", newValueError);
          }
          var newOperatorOptions = canReuseValue ? currentOperatorOptions : defaultOperatorOptions(config2, newOperator, currentField2);
          if (!canReuseValue) {
            current = current["delete"]("asyncListValues");
          }
          return current.set("operator", newOperator).set("operatorOptions", newOperatorOptions).set("value", newValue).set("valueSrc", newValueSrc).set("valueType", newValueType);
        });
      });
      if (isRuleGroup) {
        if (operatorCardinality == 0 && children.size == 0) {
          state = addItem(state, path, "rule", uuid$1(), defaultRuleProperties(config2, currentField), config2);
        }
      }
      return state;
    };
    var setValue$1 = function setValue2(state, path, delta, value2, valueType, config2, asyncListValues) {
      var _meta = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : {};
      var currentRule = state.getIn(expandTreePath(path));
      if (!currentRule) {
        return {
          state
        };
      }
      var canDropArgs = _meta.canDropArgs, isEndValue = _meta.isEndValue;
      var _config$settings3 = config2.settings, fieldSeparator = _config$settings3.fieldSeparator, showErrorMessage = _config$settings3.showErrorMessage;
      var valueSrc = state.getIn(expandTreePath(path, "properties", "valueSrc", delta + "")) || null;
      if (valueSrc === "field" && Array.isArray(value2)) value2 = value2.join(fieldSeparator);
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      var operator = state.getIn(expandTreePath(path, "properties", "operator")) || null;
      var operatorConfig = getOperatorConfig$4(config2, operator, field);
      var operatorCardinality = operator ? getOpCardinality$1(operatorConfig) : null;
      var calculatedValueType = valueType || calculateValueType(value2, valueSrc, config2);
      var canFix = !showErrorMessage;
      var _validateValue = validateValue(config2, field, field, operator, value2, calculatedValueType, valueSrc, asyncListValues, canFix, isEndValue, canDropArgs), _validateValue2 = _slicedToArray(_validateValue, 2), fixedValue = _validateValue2[0], allErrors = _validateValue2[1];
      var firstError = allErrors === null || allErrors === void 0 ? void 0 : allErrors.find(function(e2) {
        return !e2.fixed && !e2.ignore;
      });
      var validationError = firstError ? translateValidation(firstError) : null;
      var willFix = fixedValue !== value2;
      if (willFix) {
        value2 = fixedValue;
      }
      state = initEmptyValueLists(state, path, config2, operatorCardinality);
      var values = Array.from({
        length: operatorCardinality
      }, function(_, i) {
        return i == delta ? value2 : state.getIn(expandTreePath(path, "properties", "value", i + "")) || null;
      });
      var valueSrcs = Array.from({
        length: operatorCardinality
      }, function(_, i) {
        return state.getIn(expandTreePath(path, "properties", "valueSrc", i + "")) || null;
      });
      var rangeErrorObj = validateRange(config2, field, operator, values, valueSrcs);
      var rangeValidationError = rangeErrorObj ? translateValidation(rangeErrorObj) : null;
      var isValid2 = !validationError && !rangeValidationError;
      var canUpdValue = showErrorMessage ? true : isValid2 || willFix;
      if (canUpdValue) {
        state = state.deleteIn(expandTreePath(path, "properties", "asyncListValues"));
        if (typeof value2 === "undefined") {
          state = state.setIn(expandTreePath(path, "properties", "value", delta), void 0);
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta), null);
        } else {
          if (asyncListValues) {
            state = state.setIn(expandTreePath(path, "properties", "asyncListValues"), asyncListValues);
          }
          state = state.setIn(expandTreePath(path, "properties", "value", delta), value2);
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta), calculatedValueType);
        }
      }
      if (showErrorMessage) {
        var lastValueErrorArr = state.getIn(expandTreePath(path, "properties", "valueError"));
        if (!lastValueErrorArr) {
          state = state.setIn(expandTreePath(path, "properties", "valueError"), new Immutable.List(new Array(operatorCardinality)));
        }
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), validationError);
        if (operatorCardinality >= 2) {
          state = state.setIn(expandTreePath(path, "properties", "valueError", operatorCardinality), rangeValidationError);
        }
      }
      return {
        state
      };
    };
    var setValueSrc$1 = function setValueSrc2(state, path, delta, srcKey, config2) {
      var currentRule = state.getIn(expandTreePath(path));
      if (!currentRule) {
        return state;
      }
      var showErrorMessage = config2.settings.showErrorMessage;
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      var operator = state.getIn(expandTreePath(path, "properties", "operator")) || null;
      var operatorConfig = getOperatorConfig$4(config2, operator, field);
      var operatorCardinality = operator ? getOpCardinality$1(operatorConfig) : null;
      state = initEmptyValueLists(state, path, config2, operatorCardinality);
      state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), void 0);
      state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), null);
      state = state.deleteIn(expandTreePath(path, "properties", "asyncListValues"));
      if (showErrorMessage) {
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), null);
        if (operatorConfig.validateValues) {
          state = state.setIn(expandTreePath(path, "properties", "valueError", operatorCardinality), null);
        }
      }
      if (typeof srcKey === "undefined") {
        state = state.setIn(expandTreePath(path, "properties", "valueSrc", delta + ""), null);
      } else {
        state = state.setIn(expandTreePath(path, "properties", "valueSrc", delta + ""), srcKey);
      }
      if (srcKey) {
        var properties = state.getIn(expandTreePath(path, "properties"));
        var canFix = true;
        var _getNewValueForFieldO4 = getNewValueForFieldOp(config2, config2, properties, field, operator, "valueSrc", canFix), canReuseValue = _getNewValueForFieldO4.canReuseValue, newValue = _getNewValueForFieldO4.newValue, newValueSrc = _getNewValueForFieldO4.newValueSrc, newValueType = _getNewValueForFieldO4.newValueType;
        _getNewValueForFieldO4.newValueError;
        if (!canReuseValue && newValueSrc.get(delta) == srcKey) {
          state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), newValue.get(delta));
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), newValueType.get(delta));
        }
      }
      return state;
    };
    var setOperatorOption$1 = function setOperatorOption2(state, path, name, value2) {
      var currentRule = state.getIn(expandTreePath(path));
      if (!currentRule) {
        return state;
      }
      return state.setIn(expandTreePath(path, "properties", "operatorOptions", name), value2);
    };
    var checkEmptyGroups = function checkEmptyGroups2(state, config2) {
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      if (!canLeaveEmptyGroup) {
        state = fixEmptyGroupsInTree(state);
      }
      return state;
    };
    var initEmptyValueLists = function initEmptyValueLists2(state, path, config2, operatorCardinality) {
      if (!operatorCardinality) {
        var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
        var operator = state.getIn(expandTreePath(path, "properties", "operator")) || null;
        var operatorConfig = getOperatorConfig$4(config2, operator, field);
        operatorCardinality = operator ? getOpCardinality$1(operatorConfig) : null;
      }
      for (var _i = 0, _arr = ["value", "valueType", "valueError", "valueSrc"]; _i < _arr.length; _i++) {
        var k2 = _arr[_i];
        if (!state.getIn(expandTreePath(path, "properties", k2))) {
          state = state.setIn(expandTreePath(path, "properties", k2), new Immutable.List(operatorCardinality ? Array.from({
            length: operatorCardinality
          }) : []));
        }
      }
      return state;
    };
    var _addChildren1 = function _addChildren12(config2, item, children) {
      if (children && Array.isArray(children)) {
        item.children1 = new Immutable.OrderedMap(children.reduce(function(map2, it) {
          var _it$id;
          var id1 = (_it$id = it.id) !== null && _it$id !== void 0 ? _it$id : uuid$1();
          var it1 = _objectSpread$g(_objectSpread$g({}, it), {}, {
            properties: defaultItemProperties(config2, it).merge(fromJS(it.properties) || {}),
            id: id1
          });
          _addChildren12(config2, it1, it1.children1);
          return _objectSpread$g(_objectSpread$g({}, map2), {}, _defineProperty$1({}, id1, new Immutable.Map(it1)));
        }, {}));
      }
    };
    var getField = function getField2(state, path) {
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      return field;
    };
    var emptyDrag = {
      dragging: {
        id: null,
        x: null,
        y: null,
        w: null,
        h: null
      },
      mousePos: {},
      dragStart: {
        id: null
      }
    };
    var getActionMeta = function getActionMeta2(action, state) {
      if (!action || !action.type) return null;
      var actionKeysToOmit = ["config", "asyncListValues"];
      var actionTypesToIgnore = [SET_TREE, SET_DRAG_START$1, SET_DRAG_PROGRESS$1, SET_DRAG_END$1];
      var meta = mapValues$1(omit$1(action, actionKeysToOmit), applyToJS);
      var affectedField = action.path && getField(state.tree, action.path) || action.field;
      if (affectedField) {
        var _affectedField;
        if ((_affectedField = affectedField) !== null && _affectedField !== void 0 && _affectedField.toJS) affectedField = affectedField.toJS();
        meta.affectedField = affectedField;
      }
      if (actionTypesToIgnore.includes(action.type) || action.type.indexOf("@@redux") == 0) meta = null;
      return meta;
    };
    const TreeStore = function(initialConfig, tree2, getMemoizedTree, setLastTree, getLastConfig) {
      var initTree2 = tree2;
      var emptyState = _objectSpread$g({
        tree: initTree2
      }, emptyDrag);
      return function() {
        var _ref3, _getLastConfig;
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyState;
        var action = arguments.length > 1 ? arguments[1] : void 0;
        var config2 = (_ref3 = (_getLastConfig = getLastConfig === null || getLastConfig === void 0 ? void 0 : getLastConfig()) !== null && _getLastConfig !== void 0 ? _getLastConfig : action === null || action === void 0 ? void 0 : action.config) !== null && _ref3 !== void 0 ? _ref3 : initialConfig;
        var unset = {
          __lastAction: void 0
        };
        var set2 = {};
        var actionMeta = getActionMeta(action, state);
        switch (action === null || action === void 0 ? void 0 : action.type) {
          case SET_TREE: {
            var validatedTree = getMemoizedTree(config2, action.tree);
            set2.tree = validatedTree;
            break;
          }
          case ADD_CASE_GROUP: {
            set2.tree = addNewGroup(state.tree, action.path, "case_group", action.id, action.properties, config2, action.children, action.meta);
            break;
          }
          case ADD_GROUP: {
            set2.tree = addNewGroup(state.tree, action.path, "group", action.id, action.properties, config2, action.children, action.meta);
            break;
          }
          case REMOVE_GROUP: {
            set2.tree = removeGroup$1(state.tree, action.path, config2);
            break;
          }
          case ADD_RULE: {
            set2.tree = addItem(state.tree, action.path, action.ruleType, action.id, action.properties, config2, action.children);
            break;
          }
          case REMOVE_RULE: {
            set2.tree = removeRule$1(state.tree, action.path, config2);
            break;
          }
          case SET_CONJUNCTION: {
            set2.tree = setConjunction$1(state.tree, action.path, action.conjunction);
            break;
          }
          case SET_NOT: {
            set2.tree = setNot$1(state.tree, action.path, action.not);
            break;
          }
          case SET_FIELD: {
            var _setField = setField$1(state.tree, action.path, action.field, config2, action.asyncListValues, action._meta), newTree = _setField.state;
            set2.tree = newTree;
            break;
          }
          case SET_FIELD_SRC: {
            set2.tree = setFieldSrc$1(state.tree, action.path, action.srcKey, config2);
            break;
          }
          case SET_LOCK: {
            set2.tree = setLock$1(state.tree, action.path, action.lock);
            break;
          }
          case SET_OPERATOR: {
            set2.tree = setOperator$1(state.tree, action.path, action.operator, config2);
            break;
          }
          case SET_VALUE: {
            var _setValue = setValue$1(state.tree, action.path, action.delta, action.value, action.valueType, config2, action.asyncListValues, action._meta), _newTree = _setValue.state;
            set2.tree = _newTree;
            break;
          }
          case SET_FUNC_VALUE: {
            var _setFuncValue = setFuncValue$1(config2, state.tree, action.path, action.delta, action.parentFuncs, action.argKey, action.value, action.valueType, action.asyncListValues, action._meta), _newTree2 = _setFuncValue.state;
            set2.tree = _newTree2;
            break;
          }
          case SET_VALUE_SRC: {
            set2.tree = setValueSrc$1(state.tree, action.path, action.delta, action.srcKey, config2, action._meta);
            break;
          }
          case SET_OPERATOR_OPTION: {
            set2.tree = setOperatorOption$1(state.tree, action.path, action.name, action.value);
            break;
          }
          case MOVE_ITEM: {
            set2.tree = moveItem$1(state.tree, action.fromPath, action.toPath, action.placement);
            break;
          }
          case SET_DRAG_START$1: {
            set2.dragStart = action.dragStart;
            set2.dragging = action.dragging;
            set2.mousePos = action.mousePos;
            break;
          }
          case SET_DRAG_PROGRESS$1: {
            set2.mousePos = action.mousePos;
            set2.dragging = action.dragging;
            break;
          }
          case SET_DRAG_END$1: {
            set2.tree = checkEmptyGroups(state.tree, config2);
            set2 = _objectSpread$g(_objectSpread$g({}, set2), emptyDrag);
            break;
          }
        }
        if (actionMeta) {
          set2.__lastAction = actionMeta;
        }
        if (setLastTree && set2.tree && state.tree) {
          setLastTree(state.tree);
        }
        return _objectSpread$g(_objectSpread$g(_objectSpread$g({}, state), unset), set2);
      };
    };
    var setTree = function setTree2(config2, tree2) {
      return {
        type: SET_TREE,
        tree: tree2,
        config: config2
      };
    };
    var addRule = function addRule2(config2, path, properties) {
      var ruleType = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "rule";
      var children = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var parentRuleGroupField = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      return {
        type: ADD_RULE,
        ruleType,
        children,
        path: toImmutableList(path),
        id: uuid$1(),
        properties: defaultRuleProperties(config2, parentRuleGroupField).merge(fromJS(properties) || {}),
        config: config2,
        meta: {
          parentRuleGroupField
        }
      };
    };
    var removeRule = function removeRule2(config2, path) {
      return {
        type: REMOVE_RULE,
        path: toImmutableList(path),
        config: config2
      };
    };
    var addDefaultCaseGroup = function addDefaultCaseGroup2(config2, path, properties) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_CASE_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$1(),
        properties: defaultGroupProperties(config2).merge(fromJS(properties) || {}),
        config: config2,
        meta: {
          isDefaultCase: true
        }
      };
    };
    var addCaseGroup = function addCaseGroup2(config2, path, properties) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_CASE_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$1(),
        properties: defaultGroupProperties(config2).merge(fromJS(properties) || {}),
        config: config2
      };
    };
    var addGroup = function addGroup2(config2, path, properties) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var parentRuleGroupField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      return {
        type: ADD_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$1(),
        properties: defaultGroupProperties(config2, parentRuleGroupField).merge(fromJS(properties) || {}),
        config: config2,
        meta: {
          parentRuleGroupField
        }
      };
    };
    var removeGroup = function removeGroup2(config2, path) {
      return {
        type: REMOVE_GROUP,
        path: toImmutableList(path),
        config: config2
      };
    };
    var moveItem = function moveItem2(config2, fromPath, toPath, placement) {
      return {
        type: MOVE_ITEM,
        fromPath: toImmutableList(fromPath),
        toPath: toImmutableList(toPath),
        placement,
        config: config2
      };
    };
    const tree$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      addCaseGroup,
      addDefaultCaseGroup,
      addGroup,
      addRule,
      moveItem,
      removeGroup,
      removeRule,
      setTree
    }, Symbol.toStringTag, { value: "Module" }));
    var setConjunction = function setConjunction2(config2, path, conjunction) {
      return {
        type: SET_CONJUNCTION,
        path: toImmutableList(path),
        conjunction
      };
    };
    var setNot = function setNot2(config2, path, not2) {
      return {
        type: SET_NOT,
        path: toImmutableList(path),
        not: not2
      };
    };
    var setLock = function setLock2(config2, path, lock) {
      return {
        type: SET_LOCK,
        path: toImmutableList(path),
        lock
      };
    };
    const group$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      setConjunction,
      setLock,
      setNot
    }, Symbol.toStringTag, { value: "Module" }));
    var setField = function setField2(config2, path, field, asyncListValues, _meta) {
      return {
        type: SET_FIELD,
        path: toImmutableList(path),
        field,
        config: config2,
        asyncListValues,
        _meta
      };
    };
    var setFieldSrc = function setFieldSrc2(config2, path, srcKey) {
      return {
        type: SET_FIELD_SRC,
        path: toImmutableList(path),
        srcKey,
        config: config2
      };
    };
    var setOperator = function setOperator2(config2, path, operator) {
      return {
        type: SET_OPERATOR,
        path: toImmutableList(path),
        operator,
        config: config2
      };
    };
    var setValue = function setValue2(config2, path, delta, value2, valueType, asyncListValues, _meta) {
      return {
        type: SET_VALUE,
        path: toImmutableList(path),
        delta,
        value: value2,
        valueType,
        asyncListValues,
        config: config2,
        _meta
      };
    };
    var setValueSrc = function setValueSrc2(config2, path, delta, srcKey, _meta) {
      return {
        type: SET_VALUE_SRC,
        path: toImmutableList(path),
        delta,
        srcKey,
        config: config2,
        _meta
      };
    };
    var setFuncValue = function setFuncValue2(config2, path, delta, parentFuncs, argKey, value2, valueType, asyncListValues, _meta) {
      return {
        type: SET_FUNC_VALUE,
        path: toImmutableList(path),
        delta,
        parentFuncs,
        argKey,
        value: value2,
        valueType,
        asyncListValues,
        config: config2,
        _meta
      };
    };
    var setOperatorOption = function setOperatorOption2(config2, path, name, value2) {
      return {
        type: SET_OPERATOR_OPTION,
        path: toImmutableList(path),
        name,
        value: value2,
        config: config2
      };
    };
    const rule$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      setField,
      setFieldSrc,
      setFuncValue,
      setOperator,
      setOperatorOption,
      setValue,
      setValueSrc
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$f(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$f(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$f(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$f(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var Utils$1 = _objectSpread$f(_objectSpread$f(_objectSpread$f({}, BasicUtils), {}, {
      Export,
      Import,
      // intrenal
      ConfigMixins
    }, Export), Import);
    var propTypes = { exports: {} };
    var ReactPropTypesSecret$1 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
    var ReactPropTypesSecret = ReactPropTypesSecret_1;
    function emptyFunction() {
    }
    function emptyFunctionWithReset() {
    }
    emptyFunctionWithReset.resetWarningCache = emptyFunction;
    var factoryWithThrowingShims = function() {
      function shim2(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          return;
        }
        var err = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        err.name = "Invariant Violation";
        throw err;
      }
      shim2.isRequired = shim2;
      function getShim() {
        return shim2;
      }
      var ReactPropTypes = {
        array: shim2,
        bigint: shim2,
        bool: shim2,
        func: shim2,
        number: shim2,
        object: shim2,
        string: shim2,
        symbol: shim2,
        any: shim2,
        arrayOf: getShim,
        element: shim2,
        elementType: shim2,
        instanceOf: getShim,
        node: shim2,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
    {
      propTypes.exports = factoryWithThrowingShims();
    }
    var propTypesExports = propTypes.exports;
    const PropTypes = /* @__PURE__ */ getDefaultExportFromCjs(propTypesExports);
    const context = /* @__PURE__ */ React.createContext();
    function formatProdErrorMessage(code) {
      return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or use the non-minified dev environment for full errors. ";
    }
    var $$observable = function() {
      return typeof Symbol === "function" && Symbol.observable || "@@observable";
    }();
    var randomString = function randomString2() {
      return Math.random().toString(36).substring(7).split("").join(".");
    };
    var ActionTypes = {
      INIT: "@@redux/INIT" + randomString(),
      REPLACE: "@@redux/REPLACE" + randomString(),
      PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
      }
    };
    function isPlainObject(obj) {
      if (typeof obj !== "object" || obj === null) return false;
      var proto2 = obj;
      while (Object.getPrototypeOf(proto2) !== null) {
        proto2 = Object.getPrototypeOf(proto2);
      }
      return Object.getPrototypeOf(obj) === proto2;
    }
    function createStore(reducer, preloadedState, enhancer) {
      var _ref2;
      if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
        throw new Error(formatProdErrorMessage(0));
      }
      if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
        enhancer = preloadedState;
        preloadedState = void 0;
      }
      if (typeof enhancer !== "undefined") {
        if (typeof enhancer !== "function") {
          throw new Error(formatProdErrorMessage(1));
        }
        return enhancer(createStore)(reducer, preloadedState);
      }
      if (typeof reducer !== "function") {
        throw new Error(formatProdErrorMessage(2));
      }
      var currentReducer = reducer;
      var currentState = preloadedState;
      var currentListeners = [];
      var nextListeners = currentListeners;
      var isDispatching = false;
      function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
          nextListeners = currentListeners.slice();
        }
      }
      function getState() {
        if (isDispatching) {
          throw new Error(formatProdErrorMessage(3));
        }
        return currentState;
      }
      function subscribe(listener) {
        if (typeof listener !== "function") {
          throw new Error(formatProdErrorMessage(4));
        }
        if (isDispatching) {
          throw new Error(formatProdErrorMessage(5));
        }
        var isSubscribed = true;
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function unsubscribe() {
          if (!isSubscribed) {
            return;
          }
          if (isDispatching) {
            throw new Error(formatProdErrorMessage(6));
          }
          isSubscribed = false;
          ensureCanMutateNextListeners();
          var index = nextListeners.indexOf(listener);
          nextListeners.splice(index, 1);
          currentListeners = null;
        };
      }
      function dispatch(action) {
        if (!isPlainObject(action)) {
          throw new Error(formatProdErrorMessage(7));
        }
        if (typeof action.type === "undefined") {
          throw new Error(formatProdErrorMessage(8));
        }
        if (isDispatching) {
          throw new Error(formatProdErrorMessage(9));
        }
        try {
          isDispatching = true;
          currentState = currentReducer(currentState, action);
        } finally {
          isDispatching = false;
        }
        var listeners = currentListeners = nextListeners;
        for (var i = 0; i < listeners.length; i++) {
          var listener = listeners[i];
          listener();
        }
        return action;
      }
      function replaceReducer(nextReducer) {
        if (typeof nextReducer !== "function") {
          throw new Error(formatProdErrorMessage(10));
        }
        currentReducer = nextReducer;
        dispatch({
          type: ActionTypes.REPLACE
        });
      }
      function observable() {
        var _ref;
        var outerSubscribe = subscribe;
        return _ref = {
          /**
           * The minimal observable subscription method.
           * @param {Object} observer Any object that can be used as an observer.
           * The observer object should have a `next` method.
           * @returns {subscription} An object with an `unsubscribe` method that can
           * be used to unsubscribe the observable from the store, and prevent further
           * emission of values from the observable.
           */
          subscribe: function subscribe2(observer) {
            if (typeof observer !== "object" || observer === null) {
              throw new Error(formatProdErrorMessage(11));
            }
            function observeState() {
              if (observer.next) {
                observer.next(getState());
              }
            }
            observeState();
            var unsubscribe = outerSubscribe(observeState);
            return {
              unsubscribe
            };
          }
        }, _ref[$$observable] = function() {
          return this;
        }, _ref;
      }
      dispatch({
        type: ActionTypes.INIT
      });
      return _ref2 = {
        dispatch,
        subscribe,
        getState,
        replaceReducer
      }, _ref2[$$observable] = observable, _ref2;
    }
    var shim = { exports: {} };
    var useSyncExternalStoreShim_production_min = {};
    /**
     * @license React
     * use-sync-external-store-shim.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var e$2 = reactExports;
    function h$3(a, b2) {
      return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
    }
    var k$2 = "function" === typeof Object.is ? Object.is : h$3, l$2 = e$2.useState, m$2 = e$2.useEffect, n$3 = e$2.useLayoutEffect, p$3 = e$2.useDebugValue;
    function q$3(a, b2) {
      var d2 = b2(), f2 = l$2({ inst: { value: d2, getSnapshot: b2 } }), c2 = f2[0].inst, g2 = f2[1];
      n$3(function() {
        c2.value = d2;
        c2.getSnapshot = b2;
        r$2(c2) && g2({ inst: c2 });
      }, [a, d2, b2]);
      m$2(function() {
        r$2(c2) && g2({ inst: c2 });
        return a(function() {
          r$2(c2) && g2({ inst: c2 });
        });
      }, [a]);
      p$3(d2);
      return d2;
    }
    function r$2(a) {
      var b2 = a.getSnapshot;
      a = a.value;
      try {
        var d2 = b2();
        return !k$2(a, d2);
      } catch (f2) {
        return true;
      }
    }
    function t$3(a, b2) {
      return b2();
    }
    var u$2 = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? t$3 : q$3;
    useSyncExternalStoreShim_production_min.useSyncExternalStore = void 0 !== e$2.useSyncExternalStore ? e$2.useSyncExternalStore : u$2;
    {
      shim.exports = useSyncExternalStoreShim_production_min;
    }
    var shimExports = shim.exports;
    var withSelector_production_min = {};
    /**
     * @license React
     * use-sync-external-store-shim/with-selector.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var h$2 = reactExports, n$2 = shimExports;
    function p$2(a, b2) {
      return a === b2 && (0 !== a || 1 / a === 1 / b2) || a !== a && b2 !== b2;
    }
    var q$2 = "function" === typeof Object.is ? Object.is : p$2, r$1 = n$2.useSyncExternalStore, t$2 = h$2.useRef, u$1 = h$2.useEffect, v$2 = h$2.useMemo, w$1 = h$2.useDebugValue;
    withSelector_production_min.useSyncExternalStoreWithSelector = function(a, b2, e2, l2, g2) {
      var c2 = t$2(null);
      if (null === c2.current) {
        var f2 = { hasValue: false, value: null };
        c2.current = f2;
      } else f2 = c2.current;
      c2 = v$2(function() {
        function a2(a3) {
          if (!c3) {
            c3 = true;
            d3 = a3;
            a3 = l2(a3);
            if (void 0 !== g2 && f2.hasValue) {
              var b3 = f2.value;
              if (g2(b3, a3)) return k2 = b3;
            }
            return k2 = a3;
          }
          b3 = k2;
          if (q$2(d3, a3)) return b3;
          var e3 = l2(a3);
          if (void 0 !== g2 && g2(b3, e3)) return b3;
          d3 = a3;
          return k2 = e3;
        }
        var c3 = false, d3, k2, m2 = void 0 === e2 ? null : e2;
        return [function() {
          return a2(b2());
        }, null === m2 ? void 0 : function() {
          return a2(m2());
        }];
      }, [b2, e2, l2, g2]);
      var d2 = r$1(a, c2[0], c2[1]);
      u$1(function() {
        f2.hasValue = true;
        f2.value = d2;
      }, [d2]);
      w$1(d2);
      return d2;
    };
    function defaultNoopBatch(callback) {
      callback();
    }
    let batch = defaultNoopBatch;
    const setBatch = (newBatch) => batch = newBatch;
    const getBatch = () => batch;
    const ContextKey = Symbol.for(`react-redux-context`);
    const gT = typeof globalThis !== "undefined" ? globalThis : (
      /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
      {}
    );
    function getContext() {
      var _gT$ContextKey;
      if (!reactExports.createContext) return {};
      const contextMap = (_gT$ContextKey = gT[ContextKey]) != null ? _gT$ContextKey : gT[ContextKey] = /* @__PURE__ */ new Map();
      let realContext = contextMap.get(reactExports.createContext);
      if (!realContext) {
        realContext = reactExports.createContext(null);
        contextMap.set(reactExports.createContext, realContext);
      }
      return realContext;
    }
    const ReactReduxContext = /* @__PURE__ */ getContext();
    const notInitialized = () => {
      throw new Error("uSES not initialized!");
    };
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    var reactIs$2 = { exports: {} };
    var reactIs_production_min$1 = {};
    /** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b$1 = "function" === typeof Symbol && Symbol.for, c$1 = b$1 ? Symbol.for("react.element") : 60103, d$1 = b$1 ? Symbol.for("react.portal") : 60106, e$1 = b$1 ? Symbol.for("react.fragment") : 60107, f$1 = b$1 ? Symbol.for("react.strict_mode") : 60108, g$1 = b$1 ? Symbol.for("react.profiler") : 60114, h$1 = b$1 ? Symbol.for("react.provider") : 60109, k$1 = b$1 ? Symbol.for("react.context") : 60110, l$1 = b$1 ? Symbol.for("react.async_mode") : 60111, m$1 = b$1 ? Symbol.for("react.concurrent_mode") : 60111, n$1 = b$1 ? Symbol.for("react.forward_ref") : 60112, p$1 = b$1 ? Symbol.for("react.suspense") : 60113, q$1 = b$1 ? Symbol.for("react.suspense_list") : 60120, r = b$1 ? Symbol.for("react.memo") : 60115, t$1 = b$1 ? Symbol.for("react.lazy") : 60116, v$1 = b$1 ? Symbol.for("react.block") : 60121, w = b$1 ? Symbol.for("react.fundamental") : 60117, x = b$1 ? Symbol.for("react.responder") : 60118, y = b$1 ? Symbol.for("react.scope") : 60119;
    function z(a) {
      if ("object" === typeof a && null !== a) {
        var u2 = a.$$typeof;
        switch (u2) {
          case c$1:
            switch (a = a.type, a) {
              case l$1:
              case m$1:
              case e$1:
              case g$1:
              case f$1:
              case p$1:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k$1:
                  case n$1:
                  case t$1:
                  case r:
                  case h$1:
                    return a;
                  default:
                    return u2;
                }
            }
          case d$1:
            return u2;
        }
      }
    }
    function A(a) {
      return z(a) === m$1;
    }
    reactIs_production_min$1.AsyncMode = l$1;
    reactIs_production_min$1.ConcurrentMode = m$1;
    reactIs_production_min$1.ContextConsumer = k$1;
    reactIs_production_min$1.ContextProvider = h$1;
    reactIs_production_min$1.Element = c$1;
    reactIs_production_min$1.ForwardRef = n$1;
    reactIs_production_min$1.Fragment = e$1;
    reactIs_production_min$1.Lazy = t$1;
    reactIs_production_min$1.Memo = r;
    reactIs_production_min$1.Portal = d$1;
    reactIs_production_min$1.Profiler = g$1;
    reactIs_production_min$1.StrictMode = f$1;
    reactIs_production_min$1.Suspense = p$1;
    reactIs_production_min$1.isAsyncMode = function(a) {
      return A(a) || z(a) === l$1;
    };
    reactIs_production_min$1.isConcurrentMode = A;
    reactIs_production_min$1.isContextConsumer = function(a) {
      return z(a) === k$1;
    };
    reactIs_production_min$1.isContextProvider = function(a) {
      return z(a) === h$1;
    };
    reactIs_production_min$1.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === c$1;
    };
    reactIs_production_min$1.isForwardRef = function(a) {
      return z(a) === n$1;
    };
    reactIs_production_min$1.isFragment = function(a) {
      return z(a) === e$1;
    };
    reactIs_production_min$1.isLazy = function(a) {
      return z(a) === t$1;
    };
    reactIs_production_min$1.isMemo = function(a) {
      return z(a) === r;
    };
    reactIs_production_min$1.isPortal = function(a) {
      return z(a) === d$1;
    };
    reactIs_production_min$1.isProfiler = function(a) {
      return z(a) === g$1;
    };
    reactIs_production_min$1.isStrictMode = function(a) {
      return z(a) === f$1;
    };
    reactIs_production_min$1.isSuspense = function(a) {
      return z(a) === p$1;
    };
    reactIs_production_min$1.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === e$1 || a === m$1 || a === g$1 || a === f$1 || a === p$1 || a === q$1 || "object" === typeof a && null !== a && (a.$$typeof === t$1 || a.$$typeof === r || a.$$typeof === h$1 || a.$$typeof === k$1 || a.$$typeof === n$1 || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v$1);
    };
    reactIs_production_min$1.typeOf = z;
    {
      reactIs$2.exports = reactIs_production_min$1;
    }
    var reactIsExports$1 = reactIs$2.exports;
    var reactIs$1 = reactIsExports$1;
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs$1.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys2 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys2.length; ++i) {
          var key = keys2[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e2) {
            }
          }
        }
      }
      return targetComponent;
    }
    var hoistNonReactStatics_cjs = hoistNonReactStatics;
    const hoistStatics = /* @__PURE__ */ getDefaultExportFromCjs(hoistNonReactStatics_cjs);
    var reactIs = { exports: {} };
    var reactIs_production_min = {};
    /**
     * @license React
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b = Symbol.for("react.element"), c = Symbol.for("react.portal"), d = Symbol.for("react.fragment"), e = Symbol.for("react.strict_mode"), f = Symbol.for("react.profiler"), g = Symbol.for("react.provider"), h = Symbol.for("react.context"), k = Symbol.for("react.server_context"), l = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), n = Symbol.for("react.suspense_list"), p = Symbol.for("react.memo"), q = Symbol.for("react.lazy"), t = Symbol.for("react.offscreen"), u;
    u = Symbol.for("react.module.reference");
    function v(a) {
      if ("object" === typeof a && null !== a) {
        var r2 = a.$$typeof;
        switch (r2) {
          case b:
            switch (a = a.type, a) {
              case d:
              case f:
              case e:
              case m:
              case n:
                return a;
              default:
                switch (a = a && a.$$typeof, a) {
                  case k:
                  case h:
                  case l:
                  case q:
                  case p:
                  case g:
                    return a;
                  default:
                    return r2;
                }
            }
          case c:
            return r2;
        }
      }
    }
    reactIs_production_min.ContextConsumer = h;
    reactIs_production_min.ContextProvider = g;
    reactIs_production_min.Element = b;
    reactIs_production_min.ForwardRef = l;
    reactIs_production_min.Fragment = d;
    reactIs_production_min.Lazy = q;
    reactIs_production_min.Memo = p;
    reactIs_production_min.Portal = c;
    reactIs_production_min.Profiler = f;
    reactIs_production_min.StrictMode = e;
    reactIs_production_min.Suspense = m;
    reactIs_production_min.SuspenseList = n;
    reactIs_production_min.isAsyncMode = function() {
      return false;
    };
    reactIs_production_min.isConcurrentMode = function() {
      return false;
    };
    reactIs_production_min.isContextConsumer = function(a) {
      return v(a) === h;
    };
    reactIs_production_min.isContextProvider = function(a) {
      return v(a) === g;
    };
    reactIs_production_min.isElement = function(a) {
      return "object" === typeof a && null !== a && a.$$typeof === b;
    };
    reactIs_production_min.isForwardRef = function(a) {
      return v(a) === l;
    };
    reactIs_production_min.isFragment = function(a) {
      return v(a) === d;
    };
    reactIs_production_min.isLazy = function(a) {
      return v(a) === q;
    };
    reactIs_production_min.isMemo = function(a) {
      return v(a) === p;
    };
    reactIs_production_min.isPortal = function(a) {
      return v(a) === c;
    };
    reactIs_production_min.isProfiler = function(a) {
      return v(a) === f;
    };
    reactIs_production_min.isStrictMode = function(a) {
      return v(a) === e;
    };
    reactIs_production_min.isSuspense = function(a) {
      return v(a) === m;
    };
    reactIs_production_min.isSuspenseList = function(a) {
      return v(a) === n;
    };
    reactIs_production_min.isValidElementType = function(a) {
      return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? true : false;
    };
    reactIs_production_min.typeOf = v;
    {
      reactIs.exports = reactIs_production_min;
    }
    var reactIsExports = reactIs.exports;
    const _excluded$6 = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
    function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, {
      areStatesEqual,
      areOwnPropsEqual,
      areStatePropsEqual
    }) {
      let hasRunAtLeastOnce = false;
      let state;
      let ownProps;
      let stateProps;
      let dispatchProps;
      let mergedProps;
      function handleFirstCall(firstState, firstOwnProps) {
        state = firstState;
        ownProps = firstOwnProps;
        stateProps = mapStateToProps(state, ownProps);
        dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        hasRunAtLeastOnce = true;
        return mergedProps;
      }
      function handleNewPropsAndNewState() {
        stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleNewProps() {
        if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleNewState() {
        const nextStateProps = mapStateToProps(state, ownProps);
        const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
        stateProps = nextStateProps;
        if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleSubsequentCalls(nextState, nextOwnProps) {
        const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
        const stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
        state = nextState;
        ownProps = nextOwnProps;
        if (propsChanged && stateChanged) return handleNewPropsAndNewState();
        if (propsChanged) return handleNewProps();
        if (stateChanged) return handleNewState();
        return mergedProps;
      }
      return function pureFinalPropsSelector(nextState, nextOwnProps) {
        return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
      };
    }
    function finalPropsSelectorFactory(dispatch, _ref) {
      let {
        initMapStateToProps,
        initMapDispatchToProps,
        initMergeProps
      } = _ref, options = _objectWithoutPropertiesLoose(_ref, _excluded$6);
      const mapStateToProps = initMapStateToProps(dispatch, options);
      const mapDispatchToProps = initMapDispatchToProps(dispatch, options);
      const mergeProps = initMergeProps(dispatch, options);
      return pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
    }
    function bindActionCreators$1(actionCreators, dispatch) {
      const boundActionCreators = {};
      for (const key in actionCreators) {
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === "function") {
          boundActionCreators[key] = (...args) => dispatch(actionCreator(...args));
        }
      }
      return boundActionCreators;
    }
    function wrapMapToPropsConstant(getConstant) {
      return function initConstantSelector(dispatch) {
        const constant2 = getConstant(dispatch);
        function constantSelector() {
          return constant2;
        }
        constantSelector.dependsOnOwnProps = false;
        return constantSelector;
      };
    }
    function getDependsOnOwnProps(mapToProps) {
      return mapToProps.dependsOnOwnProps ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
    }
    function wrapMapToPropsFunc(mapToProps, methodName) {
      return function initProxySelector(dispatch, {
        displayName
      }) {
        const proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
          return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch, void 0);
        };
        proxy.dependsOnOwnProps = true;
        proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
          proxy.mapToProps = mapToProps;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
          let props = proxy(stateOrDispatch, ownProps);
          if (typeof props === "function") {
            proxy.mapToProps = props;
            proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
            props = proxy(stateOrDispatch, ownProps);
          }
          return props;
        };
        return proxy;
      };
    }
    function createInvalidArgFactory(arg, name) {
      return (dispatch, options) => {
        throw new Error(`Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`);
      };
    }
    function mapDispatchToPropsFactory(mapDispatchToProps) {
      return mapDispatchToProps && typeof mapDispatchToProps === "object" ? wrapMapToPropsConstant((dispatch) => (
        // @ts-ignore
        bindActionCreators$1(mapDispatchToProps, dispatch)
      )) : !mapDispatchToProps ? wrapMapToPropsConstant((dispatch) => ({
        dispatch
      })) : typeof mapDispatchToProps === "function" ? (
        // @ts-ignore
        wrapMapToPropsFunc(mapDispatchToProps)
      ) : createInvalidArgFactory(mapDispatchToProps, "mapDispatchToProps");
    }
    function mapStateToPropsFactory(mapStateToProps) {
      return !mapStateToProps ? wrapMapToPropsConstant(() => ({})) : typeof mapStateToProps === "function" ? (
        // @ts-ignore
        wrapMapToPropsFunc(mapStateToProps)
      ) : createInvalidArgFactory(mapStateToProps, "mapStateToProps");
    }
    function defaultMergeProps(stateProps, dispatchProps, ownProps) {
      return _extends({}, ownProps, stateProps, dispatchProps);
    }
    function mergePropsFactory(mergeProps) {
      return () => defaultMergeProps;
    }
    function createListenerCollection() {
      const batch2 = getBatch();
      let first = null;
      let last2 = null;
      return {
        clear() {
          first = null;
          last2 = null;
        },
        notify() {
          batch2(() => {
            let listener = first;
            while (listener) {
              listener.callback();
              listener = listener.next;
            }
          });
        },
        get() {
          let listeners = [];
          let listener = first;
          while (listener) {
            listeners.push(listener);
            listener = listener.next;
          }
          return listeners;
        },
        subscribe(callback) {
          let isSubscribed = true;
          let listener = last2 = {
            callback,
            next: null,
            prev: last2
          };
          if (listener.prev) {
            listener.prev.next = listener;
          } else {
            first = listener;
          }
          return function unsubscribe() {
            if (!isSubscribed || first === null) return;
            isSubscribed = false;
            if (listener.next) {
              listener.next.prev = listener.prev;
            } else {
              last2 = listener.prev;
            }
            if (listener.prev) {
              listener.prev.next = listener.next;
            } else {
              first = listener.next;
            }
          };
        }
      };
    }
    const nullListeners = {
      notify() {
      },
      get: () => []
    };
    function createSubscription(store, parentSub) {
      let unsubscribe;
      let listeners = nullListeners;
      let subscriptionsAmount = 0;
      let selfSubscribed = false;
      function addNestedSub(listener) {
        trySubscribe();
        const cleanupListener = listeners.subscribe(listener);
        let removed = false;
        return () => {
          if (!removed) {
            removed = true;
            cleanupListener();
            tryUnsubscribe();
          }
        };
      }
      function notifyNestedSubs() {
        listeners.notify();
      }
      function handleChangeWrapper() {
        if (subscription.onStateChange) {
          subscription.onStateChange();
        }
      }
      function isSubscribed() {
        return selfSubscribed;
      }
      function trySubscribe() {
        subscriptionsAmount++;
        if (!unsubscribe) {
          unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
          listeners = createListenerCollection();
        }
      }
      function tryUnsubscribe() {
        subscriptionsAmount--;
        if (unsubscribe && subscriptionsAmount === 0) {
          unsubscribe();
          unsubscribe = void 0;
          listeners.clear();
          listeners = nullListeners;
        }
      }
      function trySubscribeSelf() {
        if (!selfSubscribed) {
          selfSubscribed = true;
          trySubscribe();
        }
      }
      function tryUnsubscribeSelf() {
        if (selfSubscribed) {
          selfSubscribed = false;
          tryUnsubscribe();
        }
      }
      const subscription = {
        addNestedSub,
        notifyNestedSubs,
        handleChangeWrapper,
        isSubscribed,
        trySubscribe: trySubscribeSelf,
        tryUnsubscribe: tryUnsubscribeSelf,
        getListeners: () => listeners
      };
      return subscription;
    }
    const canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    const useIsomorphicLayoutEffect = canUseDOM ? reactExports.useLayoutEffect : reactExports.useEffect;
    function is(x2, y2) {
      if (x2 === y2) {
        return x2 !== 0 || y2 !== 0 || 1 / x2 === 1 / y2;
      } else {
        return x2 !== x2 && y2 !== y2;
      }
    }
    function shallowEqual$4(objA, objB) {
      if (is(objA, objB)) return true;
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      const keysA = Object.keys(objA);
      const keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) return false;
      for (let i = 0; i < keysA.length; i++) {
        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }
      return true;
    }
    const _excluded$5 = ["reactReduxForwardedRef"];
    let useSyncExternalStore = notInitialized;
    const initializeConnect = (fn) => {
      useSyncExternalStore = fn;
    };
    const NO_SUBSCRIPTION_ARRAY = [null, null];
    function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
      useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);
    }
    function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs) {
      lastWrapperProps.current = wrapperProps;
      renderIsScheduled.current = false;
      if (childPropsFromStoreUpdate.current) {
        childPropsFromStoreUpdate.current = null;
        notifyNestedSubs();
      }
    }
    function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, additionalSubscribeListener) {
      if (!shouldHandleStateChanges) return () => {
      };
      let didUnsubscribe = false;
      let lastThrownError = null;
      const checkForUpdates = () => {
        if (didUnsubscribe || !isMounted.current) {
          return;
        }
        const latestStoreState = store.getState();
        let newChildProps, error;
        try {
          newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
        } catch (e2) {
          error = e2;
          lastThrownError = e2;
        }
        if (!error) {
          lastThrownError = null;
        }
        if (newChildProps === lastChildProps.current) {
          if (!renderIsScheduled.current) {
            notifyNestedSubs();
          }
        } else {
          lastChildProps.current = newChildProps;
          childPropsFromStoreUpdate.current = newChildProps;
          renderIsScheduled.current = true;
          additionalSubscribeListener();
        }
      };
      subscription.onStateChange = checkForUpdates;
      subscription.trySubscribe();
      checkForUpdates();
      const unsubscribeWrapper = () => {
        didUnsubscribe = true;
        subscription.tryUnsubscribe();
        subscription.onStateChange = null;
        if (lastThrownError) {
          throw lastThrownError;
        }
      };
      return unsubscribeWrapper;
    }
    function strictEqual(a, b2) {
      return a === b2;
    }
    function connect(mapStateToProps, mapDispatchToProps, mergeProps, {
      // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
      // @ts-ignore
      pure,
      areStatesEqual = strictEqual,
      areOwnPropsEqual = shallowEqual$4,
      areStatePropsEqual = shallowEqual$4,
      areMergedPropsEqual = shallowEqual$4,
      // use React's forwardRef to expose a ref of the wrapped component
      forwardRef = false,
      // the context consumer to use
      context: context2 = ReactReduxContext
    } = {}) {
      const Context = context2;
      const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);
      const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);
      const initMergeProps = mergePropsFactory();
      const shouldHandleStateChanges = Boolean(mapStateToProps);
      const wrapWithConnect = (WrappedComponent) => {
        const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
        const displayName = `Connect(${wrappedComponentName})`;
        const selectorFactoryOptions = {
          shouldHandleStateChanges,
          displayName,
          wrappedComponentName,
          WrappedComponent,
          // @ts-ignore
          initMapStateToProps,
          // @ts-ignore
          initMapDispatchToProps,
          initMergeProps,
          areStatesEqual,
          areStatePropsEqual,
          areOwnPropsEqual,
          areMergedPropsEqual
        };
        function ConnectFunction(props) {
          const [propsContext, reactReduxForwardedRef, wrapperProps] = reactExports.useMemo(() => {
            const {
              reactReduxForwardedRef: reactReduxForwardedRef2
            } = props, wrapperProps2 = _objectWithoutPropertiesLoose(props, _excluded$5);
            return [props.context, reactReduxForwardedRef2, wrapperProps2];
          }, [props]);
          const ContextToUse = reactExports.useMemo(() => {
            return propsContext && propsContext.Consumer && // @ts-ignore
            reactIsExports.isContextConsumer(/* @__PURE__ */ reactExports.createElement(propsContext.Consumer, null)) ? propsContext : Context;
          }, [propsContext, Context]);
          const contextValue = reactExports.useContext(ContextToUse);
          const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
          const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
          const store = didStoreComeFromProps ? props.store : contextValue.store;
          const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;
          const childPropsSelector = reactExports.useMemo(() => {
            return finalPropsSelectorFactory(store.dispatch, selectorFactoryOptions);
          }, [store]);
          const [subscription, notifyNestedSubs] = reactExports.useMemo(() => {
            if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;
            const subscription2 = createSubscription(store, didStoreComeFromProps ? void 0 : contextValue.subscription);
            const notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
            return [subscription2, notifyNestedSubs2];
          }, [store, didStoreComeFromProps, contextValue]);
          const overriddenContextValue = reactExports.useMemo(() => {
            if (didStoreComeFromProps) {
              return contextValue;
            }
            return _extends({}, contextValue, {
              subscription
            });
          }, [didStoreComeFromProps, contextValue, subscription]);
          const lastChildProps = reactExports.useRef();
          const lastWrapperProps = reactExports.useRef(wrapperProps);
          const childPropsFromStoreUpdate = reactExports.useRef();
          const renderIsScheduled = reactExports.useRef(false);
          reactExports.useRef(false);
          const isMounted = reactExports.useRef(false);
          const latestSubscriptionCallbackError = reactExports.useRef();
          useIsomorphicLayoutEffect(() => {
            isMounted.current = true;
            return () => {
              isMounted.current = false;
            };
          }, []);
          const actualChildPropsSelector = reactExports.useMemo(() => {
            const selector = () => {
              if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
                return childPropsFromStoreUpdate.current;
              }
              return childPropsSelector(store.getState(), wrapperProps);
            };
            return selector;
          }, [store, wrapperProps]);
          const subscribeForReact = reactExports.useMemo(() => {
            const subscribe = (reactListener) => {
              if (!subscription) {
                return () => {
                };
              }
              return subscribeUpdates(
                shouldHandleStateChanges,
                store,
                subscription,
                // @ts-ignore
                childPropsSelector,
                lastWrapperProps,
                lastChildProps,
                renderIsScheduled,
                isMounted,
                childPropsFromStoreUpdate,
                notifyNestedSubs,
                reactListener
              );
            };
            return subscribe;
          }, [subscription]);
          useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);
          let actualChildProps;
          try {
            actualChildProps = useSyncExternalStore(
              // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
              subscribeForReact,
              // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
              // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
              actualChildPropsSelector,
              getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector
            );
          } catch (err) {
            if (latestSubscriptionCallbackError.current) {
              err.message += `
The error may be correlated with this previous error:
${latestSubscriptionCallbackError.current.stack}

`;
            }
            throw err;
          }
          useIsomorphicLayoutEffect(() => {
            latestSubscriptionCallbackError.current = void 0;
            childPropsFromStoreUpdate.current = void 0;
            lastChildProps.current = actualChildProps;
          });
          const renderedWrappedComponent = reactExports.useMemo(() => {
            return (
              // @ts-ignore
              /* @__PURE__ */ reactExports.createElement(WrappedComponent, _extends({}, actualChildProps, {
                ref: reactReduxForwardedRef
              }))
            );
          }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
          const renderedChild = reactExports.useMemo(() => {
            if (shouldHandleStateChanges) {
              return /* @__PURE__ */ reactExports.createElement(ContextToUse.Provider, {
                value: overriddenContextValue
              }, renderedWrappedComponent);
            }
            return renderedWrappedComponent;
          }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
          return renderedChild;
        }
        const _Connect = reactExports.memo(ConnectFunction);
        const Connect = _Connect;
        Connect.WrappedComponent = WrappedComponent;
        Connect.displayName = ConnectFunction.displayName = displayName;
        if (forwardRef) {
          const _forwarded = reactExports.forwardRef(function forwardConnectRef(props, ref) {
            return /* @__PURE__ */ reactExports.createElement(Connect, _extends({}, props, {
              reactReduxForwardedRef: ref
            }));
          });
          const forwarded = _forwarded;
          forwarded.displayName = displayName;
          forwarded.WrappedComponent = WrappedComponent;
          return hoistStatics(forwarded, WrappedComponent);
        }
        return hoistStatics(Connect, WrappedComponent);
      };
      return wrapWithConnect;
    }
    function Provider({
      store,
      context: context2,
      children,
      serverState,
      stabilityCheck = "once",
      noopCheck = "once"
    }) {
      const contextValue = reactExports.useMemo(() => {
        const subscription = createSubscription(store);
        return {
          store,
          subscription,
          getServerState: serverState ? () => serverState : void 0,
          stabilityCheck,
          noopCheck
        };
      }, [store, serverState, stabilityCheck, noopCheck]);
      const previousState = reactExports.useMemo(() => store.getState(), [store]);
      useIsomorphicLayoutEffect(() => {
        const {
          subscription
        } = contextValue;
        subscription.onStateChange = subscription.notifyNestedSubs;
        subscription.trySubscribe();
        if (previousState !== store.getState()) {
          subscription.notifyNestedSubs();
        }
        return () => {
          subscription.tryUnsubscribe();
          subscription.onStateChange = void 0;
        };
      }, [contextValue, previousState]);
      const Context = context2 || ReactReduxContext;
      return /* @__PURE__ */ reactExports.createElement(Context.Provider, {
        value: contextValue
      }, children);
    }
    initializeConnect(shimExports.useSyncExternalStore);
    setBatch(reactDomExports.unstable_batchedUpdates);
    var PLACEMENT_AFTER = "after";
    var PLACEMENT_BEFORE = "before";
    var PLACEMENT_APPEND = "append";
    var PLACEMENT_PREPEND = "prepend";
    var SET_DRAG_PROGRESS = "SET_DRAG_PROGRESS";
    var SET_DRAG_START = "SET_DRAG_START";
    var SET_DRAG_END = "SET_DRAG_END";
    var setDragProgress = function setDragProgress2(mousePos, dragging) {
      return {
        type: SET_DRAG_PROGRESS,
        mousePos,
        dragging
      };
    };
    var setDragStart = function setDragStart2(dragStart, dragging, mousePos) {
      return {
        type: SET_DRAG_START,
        dragStart,
        dragging,
        mousePos
      };
    };
    var setDragEnd = function setDragEnd2() {
      return {
        type: SET_DRAG_END
      };
    };
    var tree = tree$1, group = group$1, rule = rule$1;
    var define_process_env_default = {};
    var getOpCardinality = function getOpCardinality2(opDef) {
      var _opDef$cardinality;
      return (_opDef$cardinality = opDef === null || opDef === void 0 ? void 0 : opDef.cardinality) !== null && _opDef$cardinality !== void 0 ? _opDef$cardinality : 1;
    };
    var truncateString = function truncateString2(str, n2, useWordBoundary) {
      if (!n2 || !str || str.length <= n2) {
        return str;
      }
      var subString = str.substr(0, n2 - 1);
      return subString + "...";
    };
    var immutableEqual = function immutableEqual2(v1, v2) {
      if (v1 === v2) {
        return true;
      } else {
        return v1 === null || v1 === void 0 ? void 0 : v1.equals(v2);
      }
    };
    var shallowEqual$3 = function shallowEqual2(a, b2) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (a === b2) {
        return true;
      } else if (Array.isArray(a)) return shallowEqualArrays(a, b2, deep);
      else if (a && typeof a.equals === "function") return a.equals(b2);
      else if (_typeof$1(a) === "object") return shallowEqualObjects(a, b2, deep);
      else return a === b2;
    };
    function shallowEqualArrays(arrA, arrB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (arrA === arrB) {
        return true;
      }
      if (!arrA || !arrB) {
        return false;
      }
      var len = arrA.length;
      if (arrB.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var isEqual = deep ? shallowEqual$3(arrA[i], arrB[i], deep) : arrA[i] === arrB[i];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    function shallowEqualObjects(objA, objB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (objA === objB) {
        return true;
      }
      if (!objA || !objB) {
        return false;
      }
      var aKeys = Object.keys(objA);
      var bKeys = Object.keys(objB);
      var len = aKeys.length;
      if (bKeys.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var key = aKeys[i];
        var isEqual = deep ? shallowEqual$3(objA[key], objB[key], deep) : objA[key] === objB[key];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    var isDev = function isDev2() {
      return typeof process !== "undefined" && define_process_env_default && false;
    };
    var getLogger = function getLogger2() {
      var devMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var verbose = devMode != void 0 ? devMode : isDev();
      return verbose ? console : {
        error: function error() {
        },
        log: function log() {
        },
        warn: function warn2() {
        },
        debug: function debug() {
        },
        info: function info() {
        }
      };
    };
    var logger = getLogger();
    var validateAndFixTree = Utils$1.Validation.validateAndFixTree;
    var createValidationMemo = function createValidationMemo2() {
      var originalTree;
      var validatedTree;
      var configId2;
      return function(config2, tree2) {
        var oldConfig = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
        var sanitizeTree2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
        if (!tree2) {
          return null;
        }
        if (config2.__configId === configId2 && (immutableEqual(tree2, originalTree) || immutableEqual(tree2, validatedTree))) {
          return validatedTree;
        } else {
          configId2 = config2.__configId;
          originalTree = tree2;
          if (sanitizeTree2 === false) {
            validatedTree = validateAndFixTree(tree2, null, config2, oldConfig || config2, false, false, false);
          } else {
            validatedTree = validateAndFixTree(tree2, null, config2, oldConfig || config2);
          }
          return validatedTree;
        }
      };
    };
    var getReactContainerType = function getReactContainerType2(el) {
      if (el._reactRootContainer) {
        return "root";
      }
      if (Object.getOwnPropertyNames(el).filter(function(k2) {
        return k2.startsWith("__reactContainer");
      }).length > 0) {
        return "container";
      }
      return void 0;
    };
    var getReactRootNodeType = function getReactRootNodeType2(node) {
      if (!node) {
        return void 0;
      }
      var type = getReactContainerType(node);
      if (type !== void 0) {
        return type;
      } else {
        return getReactRootNodeType2(node.parentNode);
      }
    };
    var isUsingLegacyReactDomRender = function isUsingLegacyReactDomRender2(node) {
      return getReactRootNodeType(node) === "root";
    };
    var liteShouldComponentUpdate = function liteShouldComponentUpdate2(self2, config2) {
      return function(nextProps, nextState) {
        var prevProps = self2.props;
        var prevState = self2.state;
        var should = nextProps != prevProps || nextState != prevState;
        if (should) {
          if (prevState == nextState && prevProps != nextProps) {
            var chs = [];
            for (var k2 in nextProps) {
              var changed = nextProps[k2] != prevProps[k2];
              if (changed) {
                if (config2[k2] == "ignore") changed = false;
                else if (config2[k2] == "shallow_deep") changed = !shallowEqual$3(nextProps[k2], prevProps[k2], true);
                else if (config2[k2] == "shallow") changed = !shallowEqual$3(nextProps[k2], prevProps[k2]);
                else if (typeof config2[k2] == "function") changed = config2[k2](nextProps[k2], prevProps[k2], nextProps, prevProps);
              }
              if (changed) chs.push(k2);
            }
            if (!chs.length) should = false;
          }
        }
        return should;
      };
    };
    var pureShouldComponentUpdate = function pureShouldComponentUpdate2(self2) {
      return function(nextProps, nextState) {
        return !shallowEqual$3(self2.props, nextProps) || !shallowEqual$3(self2.state, nextState);
      };
    };
    var canUseOldComponentWillReceiveProps = function canUseOldComponentWillReceiveProps2() {
      var v2 = React.version.split(".").map(parseInt.bind(null, 10));
      return v2[0] == 16 && v2[1] < 3 || v2[0] < 16;
    };
    var useOnPropsChanged = function useOnPropsChanged2(obj) {
      if (!obj.shouldComponentUpdate) {
        obj.shouldComponentUpdate = pureShouldComponentUpdate(obj);
      }
      if (canUseOldComponentWillReceiveProps()) {
        obj.componentWillReceiveProps = function(nextProps) {
          obj.onPropsChanged(nextProps);
        };
      } else {
        var origShouldComponentUpdate = obj.shouldComponentUpdate;
        var newShouldComponentUpdate = function newShouldComponentUpdate2(nextProps, nextState) {
          var shouldNotify = !shallowEqual$3(obj.props, nextProps);
          if (shouldNotify) {
            obj.onPropsChanged(nextProps);
          }
          var shouldUpdate = origShouldComponentUpdate.call(obj, nextProps, nextState);
          return shouldUpdate;
        };
        obj.shouldComponentUpdate = newShouldComponentUpdate.bind(obj);
      }
    };
    var bindActionCreators = function bindActionCreators2(actionCreators, config2, dispatch) {
      return mapValues$1(actionCreators, function(actionCreator) {
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return dispatch(actionCreator.apply(void 0, [config2].concat(args)));
        };
      });
    };
    const ReactUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      bindActionCreators,
      isUsingLegacyReactDomRender,
      liteShouldComponentUpdate,
      pureShouldComponentUpdate,
      useOnPropsChanged
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$e(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$e(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$e(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$e(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$r(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$r() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$r() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$r = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var Query = /* @__PURE__ */ function(_Component) {
      function Query2(props) {
        var _this;
        _classCallCheck(this, Query2);
        _this = _callSuper$r(this, Query2, [props]);
        _this.shouldComponentUpdate = liteShouldComponentUpdate(_this, {
          tree: function tree2(nextValue) {
            if (nextValue === _this.oldValidatedTree && _this.oldValidatedTree === _this.validatedTree) {
              return false;
            }
            return true;
          }
        });
        useOnPropsChanged(_this);
        _this._updateActions(props);
        _this.validatedTree = props.getMemoizedTree(props.config, props.tree, void 0, props.sanitizeTree);
        _this.oldValidatedTree = _this.validatedTree;
        var basicConfig = props.getBasicConfig(props.config);
        props.onInit && props.onInit(_this.validatedTree, basicConfig, void 0, _this.actions);
        return _this;
      }
      _inherits(Query2, _Component);
      return _createClass(Query2, [{
        key: "_updateActions",
        value: function _updateActions(props) {
          var config2 = props.config, dispatch = props.dispatch;
          this.actions = bindActionCreators(_objectSpread$e(_objectSpread$e(_objectSpread$e({}, tree), group), rule), config2, dispatch);
        }
      }, {
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var onChange = nextProps.onChange;
          var oldConfig = this.props.config;
          var newTree = nextProps.tree;
          this.props.tree;
          var newConfig = nextProps.config;
          this.oldValidatedTree = this.validatedTree;
          this.validatedTree = newTree;
          if (oldConfig !== newConfig) {
            this._updateActions(nextProps);
            this.validatedTree = nextProps.getMemoizedTree(newConfig, newTree, oldConfig);
          }
          var validatedTreeChanged = !immutableEqual(this.validatedTree, this.oldValidatedTree);
          if (validatedTreeChanged) {
            var newBasicConfig = nextProps.getBasicConfig(newConfig);
            onChange && onChange(this.validatedTree, newBasicConfig, nextProps.__lastAction, this.actions);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, renderBuilder = _this$props.renderBuilder, dispatch = _this$props.dispatch;
          var builderProps = {
            tree: this.validatedTree,
            actions: this.actions,
            config: config2,
            dispatch
          };
          return renderBuilder(builderProps);
        }
      }]);
    }(reactExports.Component);
    Query.propTypes = {
      config: PropTypes.object.isRequired,
      onChange: PropTypes.func,
      onInit: PropTypes.func,
      renderBuilder: PropTypes.func,
      tree: PropTypes.any
      //instanceOf(Immutable.Map)
      //dispatch: PropTypes.func.isRequired,
      //__lastAction
      //getMemoizedTree: PropTypes.func.isRequired,
      //getBasicConfig: PropTypes.func.isRequired,
      //sanitizeTree
    };
    var ConnectedQuery = connect(function(state) {
      return {
        tree: state.tree,
        __lastAction: state.__lastAction
      };
    }, null, null, {
      context
    })(Query);
    ConnectedQuery.displayName = "ConnectedQuery";
    function _callSuper$q(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$q() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$q() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$q = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var defaultRoot = Utils$1.DefaultUtils.defaultRoot;
    var createConfigMemo = Utils$1.ConfigUtils.createConfigMemo;
    var QueryContainer = /* @__PURE__ */ function(_Component) {
      function QueryContainer2(props, context2) {
        var _this$_reactInternals, _this$_reactInternals2;
        var _this;
        _classCallCheck(this, QueryContainer2);
        _this = _callSuper$q(this, QueryContainer2, [props, context2]);
        _this.setLastTree = function(lastTree) {
          if (_this.prevTree) {
            _this.prevprevTree = _this.prevTree;
          }
          _this.prevTree = lastTree;
        };
        _this.getConfig = function() {
          return _this.config;
        };
        _this.shouldComponentUpdate = liteShouldComponentUpdate(_this, {
          value: function value2(nextValue, prevValue) {
            return false;
          }
        });
        useOnPropsChanged(_this);
        var _createConfigMemo = createConfigMemo({
          reactIndex: (_this$_reactInternals = (_this$_reactInternals2 = _this._reactInternals) === null || _this$_reactInternals2 === void 0 ? void 0 : _this$_reactInternals2.index) !== null && _this$_reactInternals !== void 0 ? _this$_reactInternals : -1,
          maxSize: 2,
          // current and prev
          canCompile: true
        }), getExtendedConfig = _createConfigMemo.getExtendedConfig, getBasicConfig = _createConfigMemo.getBasicConfig, clearConfigMemo = _createConfigMemo.clearConfigMemo;
        _this.getMemoizedConfig = getExtendedConfig;
        _this.getBasicConfig = getBasicConfig;
        _this.clearConfigMemo = clearConfigMemo;
        _this.getMemoizedTree = createValidationMemo();
        var config2 = _this.getMemoizedConfig(props);
        var shouldCreateEmptyGroup = config2.settings.shouldCreateEmptyGroup;
        var canAddDefaultRule = !shouldCreateEmptyGroup;
        var emptyTree = defaultRoot(config2, canAddDefaultRule);
        var sanitizeTree2 = !!props.value;
        var tree2 = props.value || emptyTree;
        var validatedTree = _this.getMemoizedTree(config2, tree2, void 0, sanitizeTree2);
        var reducer = TreeStore(config2, validatedTree, _this.getMemoizedTree, _this.setLastTree, _this.getConfig);
        var store = createStore(reducer);
        _this.config = config2;
        _this.state = {
          store
        };
        _this.QueryWrapper = function(pr) {
          return config2.settings.renderProvider(pr, config2.ctx);
        };
        return _this;
      }
      _inherits(QueryContainer2, _Component);
      return _createClass(QueryContainer2, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.clearConfigMemo();
        }
      }, {
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var oldConfig = this.config;
          var nextConfig = this.getMemoizedConfig(nextProps);
          var isConfigChanged = oldConfig !== nextConfig;
          var storeValue = this.state.store.getState().tree;
          var isTreeChanged = !immutableEqual(nextProps.value, this.props.value) && !immutableEqual(nextProps.value, storeValue);
          var currentTree = isTreeChanged ? nextProps.value || defaultRoot(nextProps) : storeValue;
          var isTreeTrulyChanged = isTreeChanged && !immutableEqual(nextProps.value, this.prevTree) && !immutableEqual(nextProps.value, this.prevprevTree);
          this.sanitizeTree = isTreeTrulyChanged || isConfigChanged;
          if (isConfigChanged) {
            if (prevProps.settings.renderProvider !== nextProps.settings.renderProvider) {
              this.QueryWrapper = function(props) {
                return nextConfig.settings.renderProvider(props, nextConfig.ctx);
              };
            }
            this.config = nextConfig;
          }
          if (isTreeChanged || isConfigChanged) {
            var validatedTree = this.getMemoizedTree(nextConfig, currentTree, oldConfig, this.sanitizeTree);
            this.state.store.dispatch(tree.setTree(nextConfig, validatedTree));
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, renderBuilder = _this$props.renderBuilder, get_children = _this$props.get_children, onChange = _this$props.onChange, onInit = _this$props.onInit;
          var store = this.state.store;
          var config2 = this.config;
          var QueryWrapper = this.QueryWrapper;
          return /* @__PURE__ */ React.createElement(QueryWrapper, {
            config: config2
          }, /* @__PURE__ */ React.createElement(Provider, {
            store,
            context
          }, /* @__PURE__ */ React.createElement(ConnectedQuery, {
            config: config2,
            getMemoizedTree: this.getMemoizedTree,
            getBasicConfig: this.getBasicConfig,
            sanitizeTree: this.sanitizeTree,
            onChange,
            onInit,
            renderBuilder: renderBuilder || get_children
          })));
        }
      }]);
    }(reactExports.Component);
    QueryContainer.propTypes = {
      //config
      conjunctions: PropTypes.object.isRequired,
      fields: PropTypes.object.isRequired,
      types: PropTypes.object.isRequired,
      operators: PropTypes.object.isRequired,
      widgets: PropTypes.object.isRequired,
      settings: PropTypes.object.isRequired,
      ctx: PropTypes.object.isRequired,
      onChange: PropTypes.func,
      onInit: PropTypes.func,
      renderBuilder: PropTypes.func,
      value: PropTypes.any
      //instanceOf(Immutable.Map)
    };
    var classnames = { exports: {} };
    /*!
    	Copyright (c) 2018 Jed Watson.
    	Licensed under the MIT License (MIT), see
    	http://jedwatson.github.io/classnames
    */
    (function(module2) {
      (function() {
        var hasOwn = {}.hasOwnProperty;
        function classNames2() {
          var classes = "";
          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (arg) {
              classes = appendClass(classes, parseValue(arg));
            }
          }
          return classes;
        }
        function parseValue(arg) {
          if (typeof arg === "string" || typeof arg === "number") {
            return arg;
          }
          if (typeof arg !== "object") {
            return "";
          }
          if (Array.isArray(arg)) {
            return classNames2.apply(null, arg);
          }
          if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
            return arg.toString();
          }
          var classes = "";
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes = appendClass(classes, key);
            }
          }
          return classes;
        }
        function appendClass(value2, newClass) {
          if (!newClass) {
            return value2;
          }
          if (value2) {
            return value2 + " " + newClass;
          }
          return value2 + newClass;
        }
        if (module2.exports) {
          classNames2.default = classNames2;
          module2.exports = classNames2;
        } else {
          window.classNames = classNames2;
        }
      })();
    })(classnames);
    var classnamesExports = classnames.exports;
    const classNames = /* @__PURE__ */ getDefaultExportFromCjs(classnamesExports);
    function _callSuper$p(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$p() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$p() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$p = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var getFieldConfig$a = Utils$1.ConfigUtils.getFieldConfig;
    var createRuleContainer = function createRuleContainer2(Rule2) {
      var _RuleContainer;
      return _RuleContainer = /* @__PURE__ */ function(_Component) {
        function RuleContainer2(props) {
          var _this;
          _classCallCheck(this, RuleContainer2);
          _this = _callSuper$p(this, RuleContainer2, [props]);
          _this.dummyFn = function() {
          };
          _this.removeSelf = function() {
            _this.props.actions.removeRule(_this.props.path);
          };
          _this.setLock = function() {
            var lock = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setLock(_this.props.path, lock);
          };
          _this.setField = function(field, asyncListValues, _meta) {
            _this.props.actions.setField(_this.props.path, field, asyncListValues, _meta);
          };
          _this.setFieldSrc = function(srcKey) {
            _this.props.actions.setFieldSrc(_this.props.path, srcKey);
          };
          _this.setOperator = function(operator) {
            _this.props.actions.setOperator(_this.props.path, operator);
          };
          _this.setOperatorOption = function(name, value2) {
            _this.props.actions.setOperatorOption(_this.props.path, name, value2);
          };
          _this.setValue = function(delta, value2, type, asyncListValues, _meta) {
            _this.props.actions.setValue(_this.props.path, delta, value2, type, asyncListValues, _meta);
          };
          _this.setValueSrc = function(delta, srcKey, _meta) {
            _this.props.actions.setValueSrc(_this.props.path, delta, srcKey, _meta);
          };
          _this.setFuncValue = function(delta, parentFuncs, argKey, value2, type, asyncListValues, _meta) {
            _this.props.actions.setFuncValue(_this.props.path, delta, parentFuncs, argKey, value2, type, asyncListValues, _meta);
          };
          _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_this);
          _this.dummyFn.isDummyFn = true;
          return _this;
        }
        _inherits(RuleContainer2, _Component);
        return _createClass(RuleContainer2, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = this.pureShouldComponentUpdate(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var draggingId = nextProps.dragging.id || prevProps.dragging.id;
                var isDraggingMe = draggingId == nextProps.id;
                var chs = [];
                for (var k2 in nextProps) {
                  var changed = nextProps[k2] != prevProps[k2];
                  if (k2 == "dragging" && !isDraggingMe) {
                    changed = false;
                  }
                  if (changed) {
                    chs.push(k2);
                  }
                }
                if (!chs.length) should = false;
              }
            }
            return should;
          }
        }, {
          key: "render",
          value: function render() {
            var isDraggingMe = this.props.dragging.id == this.props.id;
            var fieldConfig = getFieldConfig$a(this.props.config, this.props.field);
            var fieldType = this.props.fieldType || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) || null;
            var showErrorMessage = this.props.config.settings.showErrorMessage;
            fieldConfig && fieldConfig.type == "!struct";
            var isInDraggingTempo = !isDraggingMe && this.props.isDraggingTempo;
            var _this$props = this.props, valueError = _this$props.valueError, fieldError = _this$props.fieldError;
            var oneError = [fieldError].concat(_toConsumableArray((valueError === null || valueError === void 0 ? void 0 : valueError.toArray()) || [])).filter(function(e2) {
              return !!e2;
            }).shift() || null;
            var hasError = oneError != null && showErrorMessage;
            return /* @__PURE__ */ React.createElement("div", {
              className: classNames("group-or-rule-container", "rule-container", hasError ? "rule-with-error" : null),
              "data-id": this.props.id
            }, [isDraggingMe ? /* @__PURE__ */ React.createElement(Rule2, {
              key: "dragging",
              id: this.props.id,
              groupId: this.props.groupId,
              lev: this.props.path.size - 1,
              isDraggingMe: true,
              isDraggingTempo: true,
              dragging: this.props.dragging,
              setField: this.dummyFn,
              setFieldSrc: this.dummyFn,
              setFuncValue: this.dummyFn,
              setOperator: this.dummyFn,
              setOperatorOption: this.dummyFn,
              setLock: this.dummyFn,
              removeSelf: this.dummyFn,
              setValue: this.dummyFn,
              setValueSrc: this.dummyFn,
              selectedField: this.props.field || null,
              selectedFieldSrc: this.props.fieldSrc || "field",
              selectedFieldType: fieldType,
              parentField: this.props.parentField || null,
              parentFieldPathSize: this.props.parentFieldPathSize,
              parentFieldCanReorder: this.props.parentFieldCanReorder,
              selectedOperator: this.props.operator || null,
              value: this.props.value || null,
              valueSrc: this.props.valueSrc || null,
              valueType: this.props.valueType || null,
              valueError: this.props.valueError || null,
              fieldError: this.props.fieldError || null,
              operatorOptions: this.props.operatorOptions,
              config: this.props.config,
              reordableNodesCnt: this.props.reordableNodesCnt,
              totalRulesCnt: this.props.totalRulesCnt,
              asyncListValues: this.props.asyncListValues,
              isLocked: this.props.isLocked,
              isTrueLocked: this.props.isTrueLocked,
              parentReordableNodesCnt: this.props.parentReordableNodesCnt
            }) : null, /* @__PURE__ */ React.createElement(Rule2, {
              key: this.props.id,
              id: this.props.id,
              groupId: this.props.groupId,
              lev: this.props.path.size - 1,
              isDraggingMe,
              isDraggingTempo: isInDraggingTempo,
              onDragStart: this.props.onDragStart,
              setLock: isInDraggingTempo ? this.dummyFn : this.setLock,
              removeSelf: isInDraggingTempo ? this.dummyFn : this.removeSelf,
              setField: isInDraggingTempo ? this.dummyFn : this.setField,
              setFieldSrc: isInDraggingTempo ? this.dummyFn : this.setFieldSrc,
              setFuncValue: isInDraggingTempo ? this.dummyFn : this.setFuncValue,
              setOperator: isInDraggingTempo ? this.dummyFn : this.setOperator,
              setOperatorOption: isInDraggingTempo ? this.dummyFn : this.setOperatorOption,
              setValue: isInDraggingTempo ? this.dummyFn : this.setValue,
              setValueSrc: isInDraggingTempo ? this.dummyFn : this.setValueSrc,
              selectedField: this.props.field || null,
              selectedFieldSrc: this.props.fieldSrc || "field",
              selectedFieldType: fieldType,
              parentField: this.props.parentField || null,
              parentFieldPathSize: this.props.parentFieldPathSize,
              parentFieldCanReorder: this.props.parentFieldCanReorder,
              selectedOperator: this.props.operator || null,
              value: this.props.value || null,
              valueSrc: this.props.valueSrc || null,
              valueType: this.props.valueType || null,
              valueError: this.props.valueError || null,
              fieldError: this.props.fieldError || null,
              operatorOptions: this.props.operatorOptions,
              config: this.props.config,
              reordableNodesCnt: this.props.reordableNodesCnt,
              totalRulesCnt: this.props.totalRulesCnt,
              asyncListValues: this.props.asyncListValues,
              isLocked: this.props.isLocked,
              isTrueLocked: this.props.isTrueLocked,
              parentReordableNodesCnt: this.props.parentReordableNodesCnt
            })]);
          }
        }]);
      }(reactExports.Component), _RuleContainer.propTypes = {
        id: PropTypes.string.isRequired,
        groupId: PropTypes.string,
        config: PropTypes.object.isRequired,
        path: PropTypes.any.isRequired,
        //instanceOf(Immutable.List)
        operator: PropTypes.string,
        field: PropTypes.any,
        fieldSrc: PropTypes.string,
        fieldType: PropTypes.string,
        actions: PropTypes.object.isRequired,
        //{removeRule: Function, setField, setFieldSrc, setOperator, setOperatorOption, setValue, setValueSrc, ...}
        onDragStart: PropTypes.func,
        value: PropTypes.any,
        //depends on widget
        valueSrc: PropTypes.any,
        asyncListValues: PropTypes.array,
        valueError: PropTypes.any,
        fieldError: PropTypes.string,
        operatorOptions: PropTypes.object,
        reordableNodesCnt: PropTypes.number,
        parentField: PropTypes.string,
        //from RuleGroup
        isLocked: PropTypes.bool,
        isTrueLocked: PropTypes.bool,
        //connected:
        dragging: PropTypes.object,
        //{id, x, y, w, h}
        isDraggingTempo: PropTypes.bool
      }, _RuleContainer;
    };
    const RuleContainer = function(Rule2) {
      var ConnectedRuleContainer = connect(function(state) {
        return {
          dragging: state.dragging
        };
      }, null, null, {
        context
      })(createRuleContainer(Rule2));
      ConnectedRuleContainer.displayName = "ConnectedRuleContainer";
      return ConnectedRuleContainer;
    };
    function _callSuper$o(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$o() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$o() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$o = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var clone$2 = Utils$1.clone;
    var getFlatTree = Utils$1.TreeUtils.getFlatTree;
    var _isReorderingTree = false;
    var createSortableContainer = function createSortableContainer2(Builder2) {
      var _SortableContainer;
      var CanMoveFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return _SortableContainer = /* @__PURE__ */ function(_Component) {
        function SortableContainer2(props) {
          var _this;
          _classCallCheck(this, SortableContainer2);
          _this = _callSuper$o(this, SortableContainer2, [props]);
          _this._getEventTarget = function(e2, dragStart) {
            return e2 && e2.__mocked_window || document.body || window;
          };
          _this.onDragStart = function(id2, dom, e2) {
            var treeEl = dom.closest(".query-builder");
            if (_this._isUsingLegacyReactDomRender === void 0) {
              _this._isUsingLegacyReactDomRender = isUsingLegacyReactDomRender(treeEl);
            }
            document.body.classList.add("qb-dragging");
            treeEl.classList.add("qb-dragging");
            var treeElContainer = treeEl.closest(".query-builder-container") || treeEl;
            treeElContainer = _this._getScrollParent(treeElContainer) || document.body;
            var scrollTop = treeElContainer.scrollTop;
            _this._getDraggableNodeEl(treeEl);
            _this._getPlaceholderNodeEl(treeEl);
            var tmpAllGroups = treeEl.querySelectorAll(".group--children");
            var anyGroup = tmpAllGroups.length ? tmpAllGroups[0] : null;
            var groupPadding;
            if (anyGroup) {
              groupPadding = window.getComputedStyle(anyGroup, null).getPropertyValue("padding-left");
              groupPadding = parseInt(groupPadding);
            }
            var dragging = {
              id: id2,
              x: dom.offsetLeft,
              y: dom.offsetTop,
              w: dom.offsetWidth,
              h: dom.offsetHeight,
              itemInfo: _this.tree.items[id2],
              paddingLeft: groupPadding
            };
            var dragStart = {
              id: id2,
              x: dom.offsetLeft,
              y: dom.offsetTop,
              scrollTop,
              clientX: e2.clientX,
              clientY: e2.clientY,
              itemInfo: clone$2(_this.tree.items[id2]),
              treeEl,
              treeElContainer
            };
            var mousePos = {
              clientX: e2.clientX,
              clientY: e2.clientY
            };
            var target = _this._getEventTarget(e2, dragStart);
            _this.eventTarget = target;
            target.addEventListener("mousemove", _this.onDrag);
            target.addEventListener("mouseup", _this.onDragEnd);
            _this.props.setDragStart(dragStart, dragging, mousePos);
          };
          _this.onDrag = function(e2) {
            var doHandleDrag = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var dragging = Object.assign({}, _this.props.dragging);
            var startDragging = _this.props.dragStart;
            var paddingLeft = dragging.paddingLeft;
            var treeElContainer = startDragging.treeElContainer;
            var scrollTop = treeElContainer.scrollTop;
            dragging.itemInfo = _this.tree.items[dragging.id];
            if (!dragging.itemInfo) {
              return;
            }
            var mousePos = {
              clientX: e2.clientX,
              clientY: e2.clientY
            };
            var startMousePos = {
              clientX: startDragging.clientX,
              clientY: startDragging.clientY
            };
            if (e2.__mock_dom) {
              var treeEl = startDragging.treeEl;
              var dragEl = _this._getDraggableNodeEl(treeEl);
              var plhEl = _this._getPlaceholderNodeEl(treeEl);
              e2.__mock_dom({
                treeEl,
                dragEl,
                plhEl
              });
            }
            if (!startDragging.plX) {
              var _treeEl = startDragging.treeEl;
              var _plhEl2 = _this._getPlaceholderNodeEl(_treeEl);
              if (_plhEl2) {
                startDragging.plX = _plhEl2.getBoundingClientRect().left + window.scrollX;
                startDragging.plY = _plhEl2.getBoundingClientRect().top + window.scrollY;
              }
            }
            var startX = startDragging.x;
            var startY = startDragging.y;
            var startClientX = startDragging.clientX;
            var startClientY = startDragging.clientY;
            var startScrollTop = startDragging.scrollTop;
            var pos = {
              x: startX + (e2.clientX - startClientX),
              y: startY + (e2.clientY - startClientY) + (scrollTop - startScrollTop)
            };
            dragging.x = pos.x;
            dragging.y = pos.y;
            dragging.paddingLeft = paddingLeft;
            dragging.mousePos = mousePos;
            dragging.startMousePos = startMousePos;
            _this.props.setDragProgress(mousePos, dragging);
            var moved = doHandleDrag ? _this.handleDrag(dragging, e2, CanMoveFn) : false;
            if (!moved) {
              if (e2.preventDefault) e2.preventDefault();
            }
          };
          _this.onDragEnd = function() {
            var treeEl = _this.props.dragStart.treeEl;
            _this.props.setDragEnd();
            treeEl.classList.remove("qb-dragging");
            document.body.classList.remove("qb-dragging");
            _this._cacheEls = {};
            var target = _this.eventTarget || _this._getEventTarget();
            target.removeEventListener("mousemove", _this.onDrag);
            target.removeEventListener("mouseup", _this.onDragEnd);
          };
          _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_this);
          useOnPropsChanged(_this);
          _this.onPropsChanged(props);
          return _this;
        }
        _inherits(SortableContainer2, _Component);
        return _createClass(SortableContainer2, [{
          key: "onPropsChanged",
          value: function onPropsChanged(nextProps) {
            this.tree = getFlatTree(nextProps.tree, nextProps.config);
          }
        }, {
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = this.pureShouldComponentUpdate(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var chs = [];
                for (var k2 in nextProps) {
                  var changed = nextProps[k2] != prevProps[k2];
                  if (changed) {
                    if (k2 != "dragging" && k2 != "mousePos") chs.push(k2);
                  }
                }
                if (!chs.length) should = false;
              }
            }
            return should;
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(_prevProps, _prevState) {
            var dragging = this.props.dragging;
            var startDragging = this.props.dragStart;
            _isReorderingTree = false;
            if (startDragging && startDragging.id) {
              dragging.itemInfo = this.tree.items[dragging.id];
              if (dragging.itemInfo) {
                if (dragging.itemInfo.index != startDragging.itemInfo.index || dragging.itemInfo.parent != startDragging.itemInfo.parent) {
                  var treeEl = startDragging.treeEl;
                  var treeElContainer = startDragging.treeElContainer;
                  var plhEl = this._getPlaceholderNodeEl(treeEl, true);
                  if (plhEl) {
                    var plX = plhEl.getBoundingClientRect().left + window.scrollX;
                    var plY = plhEl.getBoundingClientRect().top + window.scrollY;
                    var oldPlX = startDragging.plX;
                    var oldPlY = startDragging.plY;
                    var scrollTop = treeElContainer.scrollTop;
                    startDragging.plX = plX;
                    startDragging.plY = plY;
                    startDragging.itemInfo = clone$2(dragging.itemInfo);
                    startDragging.y = plhEl.offsetTop;
                    startDragging.x = plhEl.offsetLeft;
                    startDragging.clientY += plY - oldPlY;
                    startDragging.clientX += plX - oldPlX;
                    if (treeElContainer != document.body) startDragging.scrollTop = scrollTop;
                    this.onDrag(this.props.mousePos, false);
                  }
                }
              }
            }
          }
        }, {
          key: "_getNodeElById",
          value: function _getNodeElById(treeEl, indexId) {
            var ignoreCache = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
            if (indexId == null) return null;
            if (!this._cacheEls) this._cacheEls = {};
            var el = this._cacheEls[indexId];
            if (el && document.contains(el) && !ignoreCache) return el;
            el = treeEl.querySelector('.group-or-rule-container[data-id="' + indexId + '"]');
            this._cacheEls[indexId] = el;
            return el;
          }
        }, {
          key: "_getDraggableNodeEl",
          value: function _getDraggableNodeEl(treeEl) {
            var ignoreCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            if (!this._cacheEls) this._cacheEls = {};
            var el = this._cacheEls["draggable"];
            if (el && document.contains(el) && !ignoreCache) return el;
            var els = treeEl.getElementsByClassName("qb-draggable");
            el = els.length ? els[0] : null;
            this._cacheEls["draggable"] = el;
            return el;
          }
        }, {
          key: "_getPlaceholderNodeEl",
          value: function _getPlaceholderNodeEl(treeEl) {
            var ignoreCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            if (!this._cacheEls) this._cacheEls = {};
            var el = this._cacheEls["placeholder"];
            if (el && document.contains(el) && !ignoreCache) return el;
            var els = treeEl.getElementsByClassName("qb-placeholder");
            el = els.length ? els[0] : null;
            this._cacheEls["placeholder"] = el;
            return el;
          }
        }, {
          key: "_isScrollable",
          value: function _isScrollable(node) {
            var overflowY = window.getComputedStyle(node)["overflow-y"];
            return (overflowY === "scroll" || overflowY === "auto") && node.scrollHeight > node.offsetHeight;
          }
        }, {
          key: "_getScrollParent",
          value: function _getScrollParent(node) {
            if (node == null) return null;
            if (node === document.body || this._isScrollable(node)) {
              return node;
            } else {
              return this._getScrollParent(node.parentNode);
            }
          }
        }, {
          key: "handleDrag",
          value: function handleDrag(dragInfo, e2, canMoveFn) {
            var _this2 = this;
            var canMoveBeforeAfterGroup = true;
            var itemInfo = dragInfo.itemInfo;
            var paddingLeft = dragInfo.paddingLeft;
            var moveInfo = null;
            var treeEl = this.props.dragStart.treeEl;
            var dragId = dragInfo.id;
            var dragEl = this._getDraggableNodeEl(treeEl);
            var plhEl = this._getPlaceholderNodeEl(treeEl);
            var dragRect, plhRect, hovRect, treeRect;
            if (dragEl && plhEl) {
              dragRect = dragEl.getBoundingClientRect();
              plhRect = plhEl.getBoundingClientRect();
              if (!plhRect.width) {
                return;
              }
              var dragDirs = {
                hrz: 0,
                vrt: 0
              };
              if (dragRect.top < plhRect.top) dragDirs.vrt = -1;
              else if (dragRect.bottom > plhRect.bottom) dragDirs.vrt = 1;
              if (dragRect.left > plhRect.left) dragDirs.hrz = 1;
              else if (dragRect.left < plhRect.left) dragDirs.hrz = -1;
              treeRect = treeEl.getBoundingClientRect();
              var trgCoord = {
                x: treeRect.left + (treeRect.right - treeRect.left) / 2,
                y: dragDirs.vrt >= 0 ? dragRect.bottom : dragRect.top
              };
              var hovCNodeEl;
              if (e2.__mocked_hov_container) {
                hovCNodeEl = e2.__mocked_hov_container;
              } else {
                var hovNodeEl = document.elementFromPoint(trgCoord.x, trgCoord.y - 1);
                hovCNodeEl = hovNodeEl ? hovNodeEl.closest(".group-or-rule-container") : null;
                if (!hovCNodeEl && hovNodeEl && hovNodeEl.classList.contains("query-builder-container")) {
                  var _hovNodeEl$firstChild;
                  var rootGroupContainer = hovNodeEl === null || hovNodeEl === void 0 || (_hovNodeEl$firstChild = hovNodeEl.firstChild) === null || _hovNodeEl$firstChild === void 0 ? void 0 : _hovNodeEl$firstChild.firstChild;
                  if (rootGroupContainer && rootGroupContainer.classList.contains("group-or-rule-container")) {
                    hovCNodeEl = rootGroupContainer;
                  }
                }
              }
              if (!hovCNodeEl) {
                logger.log("out of tree bounds!");
              } else {
                var isGroup = hovCNodeEl.classList.contains("group-container");
                var hovNodeId = hovCNodeEl.getAttribute("data-id");
                var hovEl = hovCNodeEl;
                var doAppend = false;
                var doPrepend = false;
                if (hovEl) {
                  hovRect = hovEl.getBoundingClientRect();
                  var hovHeight = hovRect.bottom - hovRect.top;
                  var hovII = this.tree.items[hovNodeId];
                  if (!hovII) {
                    throw new Error("There is an issue with rendering. If you use Next.js, please check getServerSideProps() method.");
                  }
                  var trgRect = null, trgEl = null, trgII = null, altII = null;
                  if (dragDirs.vrt == 0) {
                    trgII = itemInfo;
                    trgEl = plhEl;
                    if (trgEl) trgRect = trgEl.getBoundingClientRect();
                  } else {
                    if (isGroup) {
                      if (dragDirs.vrt > 0) {
                        var hovInnerEl = hovCNodeEl.getElementsByClassName("group--header");
                        var hovEl2 = hovInnerEl.length ? hovInnerEl[0] : null;
                        if (hovEl2) {
                          var hovRect2 = hovEl2.getBoundingClientRect();
                          var hovHeight2 = hovRect2.bottom - hovRect2.top;
                          var isOverHover = dragRect.bottom - hovRect2.top > hovHeight2 * 3 / 4;
                          if (isOverHover && hovII.top > dragInfo.itemInfo.top) {
                            trgII = hovII;
                            trgRect = hovRect2;
                            trgEl = hovEl2;
                            doPrepend = true;
                          }
                        }
                      } else if (dragDirs.vrt < 0) {
                        if (hovII.lev >= itemInfo.lev) {
                          var isClimbToHover = hovRect.bottom - dragRect.top >= 2;
                          if (isClimbToHover && hovII.top < dragInfo.itemInfo.top) {
                            trgII = hovII;
                            trgRect = hovRect;
                            trgEl = hovEl;
                            doAppend = true;
                          }
                        }
                      }
                      if (!doPrepend && !doAppend || canMoveBeforeAfterGroup) {
                        var _isOverHover = dragDirs.vrt < 0 ? hovRect.bottom - dragRect.top > hovHeight - 5 : dragRect.bottom - hovRect.top > hovHeight - 5;
                        if (_isOverHover) {
                          if (!doPrepend && !doAppend) {
                            trgII = hovII;
                            trgRect = hovRect;
                            trgEl = hovEl;
                          }
                          {
                            altII = hovII;
                          }
                        }
                      }
                    } else {
                      var _isOverHover2 = dragDirs.vrt < 0 ? hovRect.bottom - dragRect.top > hovHeight / 2 : dragRect.bottom - hovRect.top > hovHeight / 2;
                      if (_isOverHover2) {
                        trgII = hovII;
                        trgRect = hovRect;
                        trgEl = hovEl;
                      }
                    }
                  }
                  var isSamePos = trgII && trgII.id == dragId;
                  if (trgRect) {
                    var dragLeftOffset = dragRect.left - treeRect.left;
                    trgRect.left - treeRect.left;
                    var dragLev = Math.max(0, Math.round(dragLeftOffset / paddingLeft));
                    var availMoves = [];
                    var altMoves = [];
                    if (isSamePos) ;
                    else {
                      if (isGroup) {
                        if (doAppend) {
                          availMoves.push([PLACEMENT_APPEND, trgII, trgII.lev + 1]);
                        } else if (doPrepend) {
                          availMoves.push([PLACEMENT_PREPEND, trgII, trgII.lev + 1]);
                        }
                        if (altII) {
                          var isToRoot = altII.lev == 0;
                          var isToCase = altII.type == "case_group" && itemInfo.type != "case_group";
                          var prevCaseId = altII.prev && this.tree.items[altII.prev].caseId;
                          var nextCaseId = altII.next && this.tree.items[altII.next].caseId;
                          if (itemInfo.caseId == prevCaseId) prevCaseId = null;
                          if (itemInfo.caseId == nextCaseId) nextCaseId = null;
                          var prevCase = prevCaseId && this.tree.items[prevCaseId];
                          var nextCase = nextCaseId && this.tree.items[nextCaseId];
                          if (dragDirs.vrt > 0) {
                            if (isToRoot) {
                              altMoves.push([PLACEMENT_APPEND, altII, altII.lev + 1]);
                            } else if (isToCase && nextCase) {
                              altMoves.push([PLACEMENT_PREPEND, nextCase, nextCase.lev + 1]);
                            } else {
                              altMoves.push([PLACEMENT_AFTER, altII, altII.lev]);
                            }
                          } else if (dragDirs.vrt < 0) {
                            if (isToRoot) {
                              altMoves.push([PLACEMENT_PREPEND, altII, altII.lev + 1]);
                            } else if (isToCase && prevCase) {
                              altMoves.push([PLACEMENT_APPEND, prevCase, prevCase.lev + 1]);
                            } else {
                              altMoves.push([PLACEMENT_BEFORE, altII, altII.lev]);
                            }
                          }
                        }
                      }
                      if (!doAppend && !doPrepend) {
                        if (dragDirs.vrt < 0) {
                          availMoves.push([PLACEMENT_BEFORE, trgII, trgII.lev]);
                        } else if (dragDirs.vrt > 0) {
                          availMoves.push([PLACEMENT_AFTER, trgII, trgII.lev]);
                        }
                      }
                    }
                    var addCaseII = function addCaseII2(am) {
                      var toII = am[1];
                      var fromCaseII = itemInfo.caseId ? _this2.tree.items[itemInfo.caseId] : null;
                      var toCaseII = toII.caseId ? _this2.tree.items[toII.caseId] : null;
                      return [].concat(_toConsumableArray(am), [fromCaseII, toCaseII]);
                    };
                    availMoves = availMoves.map(addCaseII);
                    altMoves = altMoves.map(addCaseII);
                    availMoves = availMoves.filter(function(am) {
                      var placement = am[0];
                      var trg = am[1];
                      if ((placement == PLACEMENT_BEFORE || placement == PLACEMENT_AFTER) && trg.parent == null) return false;
                      if (trg.collapsed && (placement == PLACEMENT_APPEND || placement == PLACEMENT_PREPEND)) return false;
                      var isInside = trg.id == itemInfo.id;
                      if (!isInside) {
                        var tmp = trg;
                        while (tmp.parent) {
                          tmp = _this2.tree.items[tmp.parent];
                          if (tmp.id == itemInfo.id) {
                            isInside = true;
                            break;
                          }
                        }
                      }
                      return !isInside;
                    }).map(function(am) {
                      var placement = am[0], toII = am[1];
                      am[2];
                      am[3];
                      am[4];
                      var toParentII = null;
                      if (placement == PLACEMENT_APPEND || placement == PLACEMENT_PREPEND) toParentII = toII;
                      else toParentII = _this2.tree.items[toII.parent];
                      if (toParentII && toParentII.parent == null) toParentII = null;
                      am[5] = toParentII;
                      return am;
                    });
                    var bestMode = null;
                    var filteredMoves = availMoves.filter(function(am) {
                      return _this2.canMove(itemInfo, am[1], am[0], am[3], am[4], am[5], canMoveFn);
                    });
                    if (filteredMoves.length == 0 && altMoves.length > 0) {
                      filteredMoves = altMoves.filter(function(am) {
                        return _this2.canMove(itemInfo, am[1], am[0], am[3], am[4], am[5], canMoveFn);
                      });
                    }
                    var levs = filteredMoves.map(function(am) {
                      return am[2];
                    });
                    var curLev = itemInfo.lev;
                    var allLevs = levs.concat(curLev);
                    var closestDragLev = null;
                    if (allLevs.indexOf(dragLev) != -1) closestDragLev = dragLev;
                    else if (dragLev > Math.max.apply(Math, _toConsumableArray(allLevs))) closestDragLev = Math.max.apply(Math, _toConsumableArray(allLevs));
                    else if (dragLev < Math.min.apply(Math, _toConsumableArray(allLevs))) closestDragLev = Math.min.apply(Math, _toConsumableArray(allLevs));
                    bestMode = filteredMoves.find(function(am) {
                      return am[2] == closestDragLev;
                    });
                    if (!isSamePos && !bestMode && filteredMoves.length) bestMode = filteredMoves[0];
                    moveInfo = bestMode;
                  }
                }
              }
            }
            if (moveInfo) {
              this.move(itemInfo, moveInfo[1], moveInfo[0], moveInfo[3]);
              return true;
            }
            return false;
          }
        }, {
          key: "canMove",
          value: function canMove(fromII, toII, placement, fromCaseII, toCaseII, toParentII, canMoveFn) {
            if (!fromII || !toII) return false;
            if (fromII.id === toII.id) return false;
            var _this$props$config$se = this.props.config.settings, canRegroup = _this$props$config$se.canRegroup, canRegroupCases = _this$props$config$se.canRegroupCases, maxNesting = _this$props$config$se.maxNesting, maxNumberOfRules = _this$props$config$se.maxNumberOfRules, canLeaveEmptyCase = _this$props$config$se.canLeaveEmptyCase;
            var newAtomicLev = toParentII ? toParentII.nextAtomicLev : toII.atomicLev;
            var newDepthLev = newAtomicLev + (fromII.closestRuleGroupId ? 0 : fromII.depth || (fromII.type == "group" ? 1 : 0));
            var isBeforeAfter = placement == PLACEMENT_BEFORE || placement == PLACEMENT_AFTER;
            var isPend = placement == PLACEMENT_PREPEND || placement == PLACEMENT_APPEND;
            var isLev1 = isBeforeAfter && toII.lev == 1 || isPend && toII.lev == 0;
            var isParentChange = fromII.parent != toII.parent;
            var isStructChange = isPend || isParentChange;
            var isRuleGroupAffected = fromII.type == "rule_group" || !!fromII.closestRuleGroupId || toII.type == "rule_group" || !!toII.closestRuleGroupId;
            var targetRuleGroupId = isPend && toII.type == "rule_group" ? toII.id : toII.closestRuleGroupId;
            var targetRuleGroupMaxNesting = isPend && toII.type == "rule_group" ? toII.maxNesting : toII.closestRuleGroupMaxNesting;
            var targetRuleGroupCanRegroup = (isPend && toII.type == "rule_group" ? toII.canRegroup : toII.closestRuleGroupCanRegroup) != false;
            var closestRuleGroupLev = isPend && toII.type == "rule_group" ? toII.lev : toII.closestRuleGroupLev;
            var newDepthLevInRuleGroup = (toParentII ? toParentII.lev + 1 : toII.lev) + (fromII.depth || (fromII.type == "group" ? 1 : 0)) - (closestRuleGroupLev || 0);
            var isForbiddenRuleGroupChange = isRuleGroupAffected && fromII.closestRuleGroupId != targetRuleGroupId;
            var isForbiddenCaseChange = (
              // can't move `case_group` anywhere but before/after anoter `case_group`
              fromII.type == "case_group" && !isLev1 || fromII.type != "case_group" && toII.type == "case_group" && isBeforeAfter || fromII.type != "case_group" && toII.type == "switch_group" || !canRegroupCases && fromII.caseId != toII.caseId
            );
            var isForbiddenStructChange = isForbiddenCaseChange || isForbiddenRuleGroupChange;
            var isLockedChange = toII.isLocked || fromII.isLocked || toParentII && toParentII.isLocked;
            if (maxNesting && newDepthLev > maxNesting) {
              return false;
            }
            if (targetRuleGroupMaxNesting && newDepthLevInRuleGroup > targetRuleGroupMaxNesting) {
              return false;
            }
            if (isStructChange && (!canRegroup || isForbiddenStructChange || isLockedChange)) {
              return false;
            }
            if (isRuleGroupAffected && isStructChange && !targetRuleGroupCanRegroup) {
              return false;
            }
            if (fromII.type != "case_group" && fromII.caseId != toII.caseId) {
              var isLastFromCase = fromCaseII ? fromCaseII._height == 2 : false;
              var newRulesInTargetCase = toCaseII ? toCaseII.atomicRulesCountInCase + 1 : 0;
              if (maxNumberOfRules && newRulesInTargetCase > maxNumberOfRules) return false;
              if (isLastFromCase && !canLeaveEmptyCase) return false;
            }
            if (fromII.type == "case_group" && (fromII.isDefaultCase || toII.isDefaultCase || toII.type == "switch_group" && placement == PLACEMENT_APPEND)) {
              return false;
            }
            var res = true;
            if (canMoveFn) {
              res = canMoveFn(fromII.node.toJS(), toII.node.toJS(), placement, toParentII ? toParentII.node.toJS() : null);
            }
            return res;
          }
        }, {
          key: "move",
          value: function move(fromII, toII, placement, toParentII) {
            if (!this._isUsingLegacyReactDomRender) {
              _isReorderingTree = true;
            }
            this.props.actions.moveItem(fromII.path, toII.path, placement);
          }
        }, {
          key: "render",
          value: function render() {
            return /* @__PURE__ */ React.createElement(Builder2, _extends({}, this.props, {
              onDragStart: this.onDragStart
            }));
          }
        }]);
      }(reactExports.Component), _SortableContainer.propTypes = {
        tree: PropTypes.any.isRequired,
        //instanceOf(Immutable.Map)
        actions: PropTypes.object.isRequired
        // {moveItem: Function, ..}
        //... see Builder
      }, _SortableContainer;
    };
    const SortableContainer = function(Builder2) {
      var CanMoveFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var ConnectedSortableContainer = connect(function(state) {
        return {
          dragging: state.dragging,
          dragStart: state.dragStart,
          mousePos: state.mousePos
        };
      }, {
        setDragStart,
        setDragProgress,
        setDragEnd
      }, null, {
        context
      })(createSortableContainer(Builder2, CanMoveFn));
      ConnectedSortableContainer.displayName = "ConnectedSortableContainer";
      return ConnectedSortableContainer;
    };
    var _excluded$4 = ["isDraggingTempo", "isDraggingMe", "dragging"];
    function _callSuper$n(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$n() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$n() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$n = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    const Draggable = function(className) {
      return function(GroupOrRule) {
        var _Draggable;
        return _Draggable = /* @__PURE__ */ function(_PureComponent) {
          function Draggable2(props) {
            var _this;
            _classCallCheck(this, Draggable2);
            _this = _callSuper$n(this, Draggable2, [props]);
            _this.handleDraggerMouseDown = function(e2) {
              var nodeId = _this.props.id;
              var dom = _this.wrapper.current;
              if (_this.props.onDragStart) {
                _this.props.onDragStart(nodeId, dom, e2);
              }
            };
            _this.wrapper = /* @__PURE__ */ React.createRef();
            return _this;
          }
          _inherits(Draggable2, _PureComponent);
          return _createClass(Draggable2, [{
            key: "render",
            value: function render() {
              var _this$props = this.props, isDraggingTempo = _this$props.isDraggingTempo, isDraggingMe = _this$props.isDraggingMe, dragging = _this$props.dragging, otherProps = _objectWithoutProperties(_this$props, _excluded$4);
              var isTrueLocked = otherProps.isTrueLocked;
              var styles = {};
              if (isDraggingMe && isDraggingTempo) {
                if (_isReorderingTree) ;
                else {
                  styles = {
                    top: dragging.y,
                    left: dragging.x,
                    width: dragging.w
                  };
                }
              }
              var cn = classNames(className, "group-or-rule", isDraggingMe && isDraggingTempo ? "qb-draggable" : null, isDraggingMe && !isDraggingTempo ? "qb-placeholder" : null, isTrueLocked ? "locked" : null);
              return /* @__PURE__ */ React.createElement("div", {
                className: cn,
                style: styles,
                ref: this.wrapper,
                "data-id": this.props.id
              }, /* @__PURE__ */ React.createElement(GroupOrRule, _extends({
                handleDraggerMouseDown: this.handleDraggerMouseDown,
                isDraggingMe,
                isDraggingTempo
              }, otherProps)));
            }
          }]);
        }(reactExports.PureComponent), _Draggable.propTypes = {
          isDraggingTempo: PropTypes.bool,
          isDraggingMe: PropTypes.bool,
          onDragStart: PropTypes.func,
          dragging: PropTypes.object,
          //{id, x, y, w, h}
          isLocked: PropTypes.bool,
          isTrueLocked: PropTypes.bool
        }, _Draggable;
      };
    };
    var arrayMap = _arrayMap, baseIteratee = _baseIteratee, basePickBy = _basePickBy, getAllKeysIn = _getAllKeysIn;
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = baseIteratee(predicate);
      return basePickBy(object, props, function(value2, path) {
        return predicate(value2, path[0]);
      });
    }
    var pickBy_1 = pickBy;
    const pickBy$1 = /* @__PURE__ */ getDefaultExportFromCjs(pickBy_1);
    function ownKeys$d(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$d(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$d(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$d(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$m(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$m() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$m() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$m = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var _Utils$ConfigUtils$6 = Utils$1.ConfigUtils, getFieldConfig$9 = _Utils$ConfigUtils$6.getFieldConfig, getOperatorConfig$3 = _Utils$ConfigUtils$6.getOperatorConfig;
    var Operator = /* @__PURE__ */ function(_Component) {
      function Operator2(props) {
        var _this;
        _classCallCheck(this, Operator2);
        _this = _callSuper$m(this, Operator2, [props]);
        _this.shouldComponentUpdate = liteShouldComponentUpdate(_this, {
          // tip: rely on selectedFieldId instead
          selectedField: function selectedField(nextValue, prevValue) {
            return false;
          }
        });
        useOnPropsChanged(_this);
        _this.onPropsChanged(props);
        return _this;
      }
      _inherits(Operator2, _Component);
      return _createClass(Operator2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "selectedField", "selectedFieldSrc", "selectedFieldType", "selectedOperator"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var _config$types$selecte;
          var config2 = _ref.config, selectedField = _ref.selectedField, selectedFieldType = _ref.selectedFieldType, selectedOperator = _ref.selectedOperator;
          var fieldConfig = getFieldConfig$9(config2, selectedField);
          var operators2 = _toConsumableArray((fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.operators) || ((_config$types$selecte = config2.types[selectedFieldType]) === null || _config$types$selecte === void 0 ? void 0 : _config$types$selecte.operators) || []);
          if (!selectedField && !operators2.includes(selectedOperator)) {
            operators2.push(selectedOperator);
          }
          var operatorsOptions = mapValues$1(pickBy$1(config2.operators, function(item, key) {
            return (operators2 === null || operators2 === void 0 ? void 0 : operators2.indexOf(key)) !== -1;
          }), function(_opts, op) {
            return getOperatorConfig$3(config2, op, selectedField);
          });
          var items = this.buildOptions(config2, operatorsOptions, operators2);
          var selectedOpts = operatorsOptions[selectedOperator] || {};
          var placeholder = this.props.config.settings.operatorPlaceholder;
          var selectedKey = selectedOperator;
          var selectedKeys = selectedKey ? [selectedKey] : null;
          var selectedPath = selectedKeys;
          var selectedLabel = selectedOpts.label;
          var selectedAltLabel = selectedOpts.label2 || selectedOpts.tooltip;
          return {
            placeholder,
            items,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedAltLabel,
            selectedOpts,
            fieldConfig
          };
        }
      }, {
        key: "buildOptions",
        value: function buildOptions(config2, fields2, ops) {
          if (!fields2 || !ops) return null;
          return keys$7(fields2).sort(function(a, b2) {
            return ops.indexOf(a) - ops.indexOf(b2);
          }).map(function(fieldKey) {
            var field = fields2[fieldKey];
            var label = field.label;
            var altLabel = field.label2;
            var tooltip = field.tooltip;
            return {
              key: fieldKey,
              path: fieldKey,
              label,
              altLabel,
              tooltip
            };
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setOperator2 = _this$props.setOperator, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var renderOperator = config2.settings.renderOperator;
          var renderProps = _objectSpread$d({
            id: id2,
            groupId,
            config: config2,
            customProps,
            readonly,
            setField: setOperator2
          }, this.meta);
          if (!renderProps.items) return null;
          return renderOperator(renderProps, config2.ctx);
        }
      }]);
    }(reactExports.Component);
    Operator.propTypes = {
      id: PropTypes.string,
      groupId: PropTypes.string,
      config: PropTypes.object.isRequired,
      selectedField: PropTypes.any,
      selectedFieldId: PropTypes.string,
      selectedFieldType: PropTypes.string,
      selectedFieldSrc: PropTypes.string,
      selectedOperator: PropTypes.string,
      readonly: PropTypes.bool,
      customProps: PropTypes.object,
      //actions
      setOperator: PropTypes.func.isRequired
    };
    var _excluded$3 = ["children"];
    var Col = function Col2(_ref) {
      var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded$3);
      return /* @__PURE__ */ React.createElement("div", props, children);
    };
    var dummyFn = function dummyFn2() {
    };
    var DragIcon = function DragIcon2() {
      return /* @__PURE__ */ React.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "gray",
        width: "18px",
        height: "18px"
      }, /* @__PURE__ */ React.createElement("path", {
        d: "M0 0h24v24H0V0z",
        fill: "none"
      }), /* @__PURE__ */ React.createElement("path", {
        d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
      }));
    };
    var WithConfirmFn = function WithConfirmFn2(Cmp) {
      return function(props) {
        var useConfirm = props.config.settings.useConfirm;
        var confirmFn = useConfirm ? useConfirm.call(props.config.ctx, props.config.ctx) : null;
        return /* @__PURE__ */ React.createElement(Cmp, _extends({}, props, {
          confirmFn
        }));
      };
    };
    var getWidgetId = function getWidgetId2(_ref2) {
      var id2 = _ref2.id, isLHS = _ref2.isLHS, delta = _ref2.delta, parentFuncs = _ref2.parentFuncs;
      return [id2, isLHS ? "L" : "R", isLHS ? -1 : delta || 0, (parentFuncs || []).map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2), f2 = _ref4[0], a = _ref4[1];
        return "".concat(f2, "(").concat(a, ")");
      }).join("/")].join(":");
    };
    var getRenderFromConfig = function getRenderFromConfig2(config2, renderFn) {
      var Cmp;
      if (typeof renderFn === "function") {
        Cmp = function Cmp2(pr) {
          return renderFn === null || renderFn === void 0 ? void 0 : renderFn(pr, config2.ctx);
        };
        Cmp.displayName = renderFn.name;
      } else {
        Cmp = renderFn;
      }
      return Cmp;
    };
    function _callSuper$l(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$l() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$l() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$l = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var OperatorWrapper = /* @__PURE__ */ function(_PureComponent) {
      function OperatorWrapper2() {
        _classCallCheck(this, OperatorWrapper2);
        return _callSuper$l(this, OperatorWrapper2, arguments);
      }
      _inherits(OperatorWrapper2, _PureComponent);
      return _createClass(OperatorWrapper2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField, selectedFieldSrc = _this$props.selectedFieldSrc, selectedFieldType = _this$props.selectedFieldType, selectedOperator = _this$props.selectedOperator, setOperator2 = _this$props.setOperator, selectedFieldId = _this$props.selectedFieldId, showOperator = _this$props.showOperator, showOperatorLabel = _this$props.showOperatorLabel, selectedFieldWidgetConfig = _this$props.selectedFieldWidgetConfig, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var operator = showOperator && /* @__PURE__ */ React.createElement(Col, {
            key: "operators-for-" + selectedFieldId,
            className: "rule--operator"
          }, config2.settings.showLabels && /* @__PURE__ */ React.createElement("label", {
            className: "rule--label"
          }, config2.settings.operatorLabel), /* @__PURE__ */ React.createElement(Operator, {
            key: "operator",
            config: config2,
            selectedField,
            selectedFieldSrc,
            selectedFieldType,
            selectedFieldId,
            selectedOperator,
            setOperator: setOperator2,
            customProps: config2.settings.customOperatorSelectProps,
            readonly,
            id: id2,
            groupId
          }));
          var hiddenOperator = showOperatorLabel && /* @__PURE__ */ React.createElement(Col, {
            key: "operators-for-" + selectedFieldId,
            className: "rule--operator"
          }, /* @__PURE__ */ React.createElement("div", {
            className: "rule--operator-wrapper"
          }, config2.settings.showLabels ? /* @__PURE__ */ React.createElement("label", {
            className: "rule--label"
          }, " ") : null, /* @__PURE__ */ React.createElement("div", {
            className: "rule--operator-text-wrapper"
          }, /* @__PURE__ */ React.createElement("span", {
            className: "rule--operator-text"
          }, selectedFieldWidgetConfig.operatorInlineLabel))));
          return [operator, hiddenOperator];
        }
      }]);
    }(reactExports.PureComponent);
    function ownKeys$c(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$c(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$c(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$c(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$k(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$k() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$k() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$k = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var getFieldPathLabels$1 = Utils$1.RuleUtils.getFieldPathLabels;
    var _Utils$ConfigUtils$5 = Utils$1.ConfigUtils, getFieldConfig$8 = _Utils$ConfigUtils$5.getFieldConfig, getFieldParts$2 = _Utils$ConfigUtils$5.getFieldParts, getFieldPathParts$2 = _Utils$ConfigUtils$5.getFieldPathParts;
    var Field = /* @__PURE__ */ function(_Component) {
      function Field2(props) {
        var _this;
        _classCallCheck(this, Field2);
        _this = _callSuper$k(this, Field2, [props]);
        _this.setField = function(field, asyncListValues) {
          var _meta = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var id2 = _this.props.id;
          if (!_meta.widgetId) {
            var widgetId = [id2, "L", -1].join(":");
            _meta.widgetId = widgetId;
          }
          _this.props.setField(field, asyncListValues, _meta);
        };
        useOnPropsChanged(_this);
        _this.onPropsChanged(props);
        return _this;
      }
      _inherits(Field2, _Component);
      return _createClass(Field2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["selectedField", "selectedFieldSrc", "selectedFieldType", "config", "parentField"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var selectedField = _ref.selectedField, selectedFieldType = _ref.selectedFieldType, config2 = _ref.config, parentField = _ref.parentField;
          var selectedKey = selectedField;
          var _config$settings = config2.settings, maxLabelsLength = _config$settings.maxLabelsLength, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay, fieldPlaceholder = _config$settings.fieldPlaceholder;
          _config$settings.fieldSeparator;
          var isFieldSelected = !!selectedField;
          var placeholder = !isFieldSelected ? truncateString(fieldPlaceholder, maxLabelsLength) : null;
          var currField = isFieldSelected ? getFieldConfig$8(config2, selectedKey) : null;
          var selectedOpts = currField || {};
          var selectedKeys = getFieldPathParts$2(selectedKey, config2);
          var selectedPath = getFieldPathParts$2(selectedKey, config2, true);
          var selectedLabel = this.getFieldLabel(currField, selectedKey, config2);
          var partsLabels = getFieldPathLabels$1(selectedKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel || parentField) selectedFullLabel = null;
          var selectedAltLabel = selectedOpts.label2 || selectedOpts.tooltip;
          var parentFieldPath = getFieldParts$2(parentField, config2);
          var parentFieldConfig = parentField ? getFieldConfig$8(config2, parentField) : null;
          var sourceFields = parentField ? parentFieldConfig && parentFieldConfig.subfields : config2.fields;
          var lookingForFieldType = !isFieldSelected && selectedFieldType;
          var items = this.buildOptions(parentFieldPath, config2, sourceFields, lookingForFieldType, parentFieldPath);
          var errorText = lookingForFieldType ? "Please select field" : null;
          if (selectedKey && _typeof$1(selectedKey) === "object") {
            selectedKey = void 0;
          }
          return {
            placeholder,
            items,
            parentField,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedAltLabel,
            selectedFullLabel,
            errorText
          };
        }
      }, {
        key: "getFieldLabel",
        value: function getFieldLabel(fieldOpts, fieldKey, config2) {
          if (!fieldKey) return null;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var fieldParts = getFieldParts$2(fieldKey, config2);
          var label = (fieldOpts === null || fieldOpts === void 0 ? void 0 : fieldOpts.label) || last$2(fieldParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions(parentFieldPath, config2, fields2) {
          var _this2 = this;
          var fieldType = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
          var path = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
          var optGroup = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
          if (!fields2) return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix = path !== null && path !== void 0 && path.length ? path.join(fieldSeparator) + fieldSeparator : "";
          var countFieldsMatchesType = function countFieldsMatchesType2(fields3) {
            return Object.keys(fields3 || {}).reduce(function(acc, fieldKey) {
              var field = fields3[fieldKey];
              if (field.type === "!struct") {
                return acc + countFieldsMatchesType2(field.subfields);
              } else {
                return acc + (field.type === fieldType ? 1 : 0);
              }
            }, 0);
          };
          return keys$7(fields2).map(function(fieldKey) {
            var fullFieldPath = [].concat(_toConsumableArray(path !== null && path !== void 0 ? path : []), [fieldKey]);
            var field = fields2[fieldKey];
            var label = _this2.getFieldLabel(field, fullFieldPath, config2);
            var partsLabels = getFieldPathLabels$1(fullFieldPath, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label || parentFieldPath !== null && parentFieldPath !== void 0 && parentFieldPath.length) fullLabel = null;
            var altLabel = field.label2;
            var tooltip = field.tooltip;
            var disabled = field.disabled;
            if (field.hideForSelect) return void 0;
            if (field.type == "!struct") {
              var items = _this2.buildOptions(parentFieldPath, config2, field.subfields, fieldType, fullFieldPath, {
                label,
                tooltip
              });
              var hasItemsMatchesType = countFieldsMatchesType(field.subfields) > 0;
              return {
                disabled,
                key: fieldKey,
                path: prefix + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                items,
                matchesType: hasItemsMatchesType
              };
            } else {
              var matchesType = fieldType !== void 0 ? field.type === fieldType : void 0;
              return {
                disabled,
                key: fieldKey,
                path: prefix + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                grouplabel: optGroup === null || optGroup === void 0 ? void 0 : optGroup.label,
                group: optGroup,
                matchesType
              };
            }
          }).filter(function(o) {
            return !!o;
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setFieldSrc2 = _this$props.setFieldSrc, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var renderField = config2.settings.renderField;
          var renderProps = _objectSpread$c({
            id: id2,
            groupId,
            config: config2,
            customProps,
            readonly,
            setField: this.setField,
            setFieldSrc: setFieldSrc2
          }, this.meta);
          return renderField(renderProps, config2.ctx);
        }
      }]);
    }(reactExports.Component);
    Field.propTypes = {
      id: PropTypes.string,
      groupId: PropTypes.string,
      config: PropTypes.object.isRequired,
      selectedField: PropTypes.any,
      selectedFieldSrc: PropTypes.string,
      selectedFieldType: PropTypes.string,
      parentField: PropTypes.string,
      customProps: PropTypes.object,
      readonly: PropTypes.bool,
      //actions
      setField: PropTypes.func.isRequired,
      setFieldSrc: PropTypes.func
    };
    function ownKeys$b(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$b(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$b(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$b(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$j(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$j() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$j() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$j = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var clone$1 = Utils$1.clone;
    var _Utils$ConfigUtils$4 = Utils$1.ConfigUtils, getFieldConfig$7 = _Utils$ConfigUtils$4.getFieldConfig, getFuncConfig$1 = _Utils$ConfigUtils$4.getFuncConfig, getFieldParts$1 = _Utils$ConfigUtils$4.getFieldParts, getFieldPathParts$1 = _Utils$ConfigUtils$4.getFieldPathParts;
    var _Utils$RuleUtils$2 = Utils$1.RuleUtils, getFuncPathLabels = _Utils$RuleUtils$2.getFuncPathLabels, getWidgetForFieldOp$2 = _Utils$RuleUtils$2.getWidgetForFieldOp;
    var shallowEqual$2 = Utils$1.OtherUtils.shallowEqual;
    var FuncSelect = /* @__PURE__ */ function(_Component) {
      function FuncSelect2(props) {
        var _this;
        _classCallCheck(this, FuncSelect2);
        _this = _callSuper$j(this, FuncSelect2, [props]);
        useOnPropsChanged(_this);
        _this.onPropsChanged(props);
        return _this;
      }
      _inherits(FuncSelect2, _Component);
      return _createClass(FuncSelect2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForItems = ["config", "field", "fieldType", "fieldSrc", "operator", "isFuncArg", "isLHS", "parentFuncs"];
          var keysForMeta = ["config", "field", "fieldType", "fieldSrc", "value", "isLHS"];
          var needUpdateItems = !this.items || keysForItems.map(function(k2) {
            return k2 === "parentFuncs" ? !shallowEqual$2(nextProps[k2], prevProps[k2], true) : nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
          if (needUpdateItems) {
            this.items = this.getItems(nextProps, this.meta);
          }
        }
      }, {
        key: "getItems",
        value: function getItems(_ref, _ref2) {
          var config2 = _ref.config, field = _ref.field, fieldType = _ref.fieldType, isLHS = _ref.isLHS, operator = _ref.operator, parentFuncs = _ref.parentFuncs, fieldDefinition = _ref.fieldDefinition, isFuncArg = _ref.isFuncArg;
          var lookingForFieldType = _ref2.lookingForFieldType;
          var canUseFuncForField = config2.settings.canUseFuncForField;
          var filteredFuncs = this.filterFuncs(config2, config2.funcs, field, fieldType, isLHS, operator, canUseFuncForField, parentFuncs, isFuncArg, fieldDefinition);
          var items = this.buildOptions(config2, filteredFuncs, lookingForFieldType);
          return items;
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref3) {
          var config2 = _ref3.config;
          _ref3._field;
          var fieldType = _ref3.fieldType, value2 = _ref3.value, isLHS = _ref3.isLHS, isFuncArg = _ref3.isFuncArg;
          var _config$settings = config2.settings, funcPlaceholder = _config$settings.funcPlaceholder, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
          var selectedFuncKey = value2;
          var isFuncSelected = !!value2;
          var placeholder = !isFuncSelected ? funcPlaceholder : null;
          var currFunc = isFuncSelected ? getFuncConfig$1(config2, selectedFuncKey) : null;
          var selectedOpts = currFunc || {};
          var selectedKeys = getFieldPathParts$1(selectedFuncKey, config2);
          var selectedPath = getFieldPathParts$1(selectedFuncKey, config2, true);
          var selectedLabel = this.getFuncLabel(currFunc, selectedFuncKey, config2);
          var partsLabels = getFuncPathLabels(selectedFuncKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel) selectedFullLabel = null;
          var isRootFuncAtLHS = isLHS && !isFuncArg;
          var lookingForFieldType = isRootFuncAtLHS && !isFuncSelected && fieldType;
          var errorText = lookingForFieldType ? "Please select function" : null;
          return {
            placeholder,
            selectedKey: selectedFuncKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedFullLabel,
            errorText,
            lookingForFieldType
          };
        }
      }, {
        key: "filterFuncs",
        value: function filterFuncs(config2, funcs2, leftFieldFullkey, fieldType, isLHS, operator, canUseFuncForField, parentFuncs, isFuncArg, fieldDefinition) {
          funcs2 = clone$1(funcs2);
          var fieldSeparator = config2.settings.fieldSeparator;
          var leftFieldConfig = getFieldConfig$7(config2, leftFieldFullkey);
          var expectedType;
          var targetDefinition = leftFieldConfig;
          var widget = getWidgetForFieldOp$2(config2, leftFieldFullkey, operator, "value");
          widget && config2.widgets[widget];
          if (isFuncArg) {
            targetDefinition = fieldDefinition;
            expectedType = fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.type;
          } else if (leftFieldConfig) {
            expectedType = leftFieldConfig.type;
          } else if (!isLHS) {
            expectedType = fieldType;
          }
          function _filter(list, path) {
            for (var funcKey in list) {
              var subfields = list[funcKey].subfields;
              var subpath = (path ? path : []).concat(funcKey);
              var funcFullkey = subpath.join(fieldSeparator);
              var funcConfig = getFuncConfig$1(config2, funcFullkey);
              if (funcConfig.type == "!struct") {
                if (_filter(subfields, subpath) == 0) delete list[funcKey];
              } else {
                var _targetDefinition;
                var canUse = !expectedType || funcConfig.returnType == expectedType;
                if ((_targetDefinition = targetDefinition) !== null && _targetDefinition !== void 0 && _targetDefinition.funcs) canUse = canUse && targetDefinition.funcs.includes(funcFullkey);
                if (canUseFuncForField) canUse = canUse && canUseFuncForField(leftFieldFullkey, leftFieldConfig, funcFullkey, funcConfig, operator);
                if (!funcConfig.allowSelfNesting && parentFuncs && parentFuncs.map(function(_ref4) {
                  var _ref5 = _slicedToArray(_ref4, 2), func = _ref5[0];
                  _ref5[1];
                  return func;
                }).includes(funcFullkey)) canUse = false;
                if (!canUse) delete list[funcKey];
              }
            }
            return keys$7(list).length;
          }
          _filter(funcs2, []);
          return funcs2;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions(config2, funcs2) {
          var _this2 = this;
          var fieldType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
          var path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          var optGroup = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
          if (!funcs2) return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix = path !== null && path !== void 0 && path.length ? path.join(fieldSeparator) + fieldSeparator : "";
          var countFieldsMatchesType = function countFieldsMatchesType2(fields2) {
            return Object.keys(fields2 || {}).reduce(function(acc, fieldKey) {
              var field = fields2[fieldKey];
              if (field.type === "!struct") {
                return acc + countFieldsMatchesType2(field.subfields);
              } else {
                return acc + (field.type === fieldType ? 1 : 0);
              }
            }, 0);
          };
          return keys$7(funcs2).map(function(funcKey) {
            var fullFuncPath = [].concat(_toConsumableArray(path !== null && path !== void 0 ? path : []), [funcKey]);
            var func = funcs2[funcKey];
            var label = _this2.getFuncLabel(func, fullFuncPath, config2);
            var partsLabels = getFuncPathLabels(fullFuncPath, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label) fullLabel = null;
            var tooltip = func.tooltip;
            if (func.type == "!struct") {
              var items = _this2.buildOptions(config2, func.subfields, fieldType, fullFuncPath, {
                label,
                tooltip
              });
              var hasItemsMatchesType = countFieldsMatchesType(func.subfields) > 0;
              return {
                key: funcKey,
                path: prefix + funcKey,
                label,
                fullLabel,
                tooltip,
                items,
                matchesType: hasItemsMatchesType
              };
            } else {
              var matchesType = fieldType !== void 0 ? func.returnType === fieldType : void 0;
              return {
                key: funcKey,
                path: prefix + funcKey,
                label,
                fullLabel,
                tooltip,
                grouplabel: optGroup === null || optGroup === void 0 ? void 0 : optGroup.label,
                group: optGroup,
                matchesType
              };
            }
          });
        }
      }, {
        key: "getFuncLabel",
        value: function getFuncLabel(funcOpts, funcKey, config2) {
          if (!funcKey) return null;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var funcParts = getFieldParts$1(funcKey, config2);
          var label = (funcOpts === null || funcOpts === void 0 ? void 0 : funcOpts.label) || last$2(funcParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setValue2 = _this$props.setValue, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var renderFunc = config2.settings.renderFunc;
          var renderProps = _objectSpread$b({
            config: config2,
            customProps,
            readonly,
            setField: setValue2,
            items: this.items,
            id: id2,
            groupId
          }, this.meta);
          return renderFunc(renderProps, config2.ctx);
        }
      }]);
    }(reactExports.Component);
    FuncSelect.propTypes = {
      id: PropTypes.string,
      groupId: PropTypes.string,
      config: PropTypes.object.isRequired,
      field: PropTypes.any,
      fieldType: PropTypes.string,
      fieldSrc: PropTypes.string,
      operator: PropTypes.string,
      customProps: PropTypes.object,
      value: PropTypes.string,
      setValue: PropTypes.func.isRequired,
      readonly: PropTypes.bool,
      parentFuncs: PropTypes.array,
      fieldDefinition: PropTypes.object,
      isFuncArg: PropTypes.bool,
      isLHS: PropTypes.bool
    };
    var nativeCeil = Math.ceil, nativeMax = Math.max;
    function baseRange$1(start, end, step, fromRight) {
      var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }
    var _baseRange = baseRange$1;
    var reWhitespace = /\s/;
    function trimmedEndIndex$1(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    var _trimmedEndIndex = trimmedEndIndex$1;
    var trimmedEndIndex = _trimmedEndIndex;
    var reTrimStart = /^\s+/;
    function baseTrim$1(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    var _baseTrim = baseTrim$1;
    var baseTrim = _baseTrim, isObject = isObject_1, isSymbol = isSymbol_1;
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber$1(value2) {
      if (typeof value2 == "number") {
        return value2;
      }
      if (isSymbol(value2)) {
        return NAN;
      }
      if (isObject(value2)) {
        var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
        value2 = isObject(other) ? other + "" : other;
      }
      if (typeof value2 != "string") {
        return value2 === 0 ? value2 : +value2;
      }
      value2 = baseTrim(value2);
      var isBinary = reIsBinary.test(value2);
      return isBinary || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value2) ? NAN : +value2;
    }
    var toNumber_1 = toNumber$1;
    var toNumber = toNumber_1;
    var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
    function toFinite$2(value2) {
      if (!value2) {
        return value2 === 0 ? value2 : 0;
      }
      value2 = toNumber(value2);
      if (value2 === INFINITY || value2 === -INFINITY) {
        var sign2 = value2 < 0 ? -1 : 1;
        return sign2 * MAX_INTEGER;
      }
      return value2 === value2 ? value2 : 0;
    }
    var toFinite_1 = toFinite$2;
    var baseRange = _baseRange, isIterateeCall = _isIterateeCall, toFinite$1 = toFinite_1;
    function createRange$1(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
          end = step = void 0;
        }
        start = toFinite$1(start);
        if (end === void 0) {
          end = start;
          start = 0;
        } else {
          end = toFinite$1(end);
        }
        step = step === void 0 ? start < end ? 1 : -1 : toFinite$1(step);
        return baseRange(start, end, step, fromRight);
      };
    }
    var _createRange = createRange$1;
    var createRange = _createRange;
    var range = createRange();
    var range_1 = range;
    const range$1 = /* @__PURE__ */ getDefaultExportFromCjs(range_1);
    var _excluded$2 = ["widgetFactory"], _excluded2 = ["factory"];
    function ownKeys$a(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$a(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$a(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$a(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var getTitleInListValues = Utils$1.ListUtils.getTitleInListValues;
    var _widgetDefKeysToOmit = Utils$1.ConfigUtils._widgetDefKeysToOmit;
    var _Utils$TreeUtils$3 = Utils$1.TreeUtils, _fixImmutableValue = _Utils$TreeUtils$3._fixImmutableValue, isImmutable = _Utils$TreeUtils$3.isImmutable;
    var WidgetFactoryMemo = /* @__PURE__ */ reactExports.memo(function(_ref) {
      var widgetFactory = _ref.widgetFactory, widgetProps = _objectWithoutProperties(_ref, _excluded$2);
      var config2 = widgetProps.config, isFuncArg = widgetProps.isFuncArg, fieldDefinition = widgetProps.fieldDefinition;
      var _ref2 = fieldDefinition || {}, fieldSettings = _ref2.fieldSettings, defaultValue = _ref2.defaultValue, valueSources = _ref2.valueSources;
      var isConst = isFuncArg && (valueSources === null || valueSources === void 0 ? void 0 : valueSources.length) == 1 && (valueSources === null || valueSources === void 0 ? void 0 : valueSources[0]) === "const";
      var listValues2 = (fieldSettings === null || fieldSettings === void 0 ? void 0 : fieldSettings.treeValues) || (fieldSettings === null || fieldSettings === void 0 ? void 0 : fieldSettings.listValues);
      if (isConst && defaultValue) {
        if (typeof defaultValue === "boolean") {
          return defaultValue ? widgetProps.labelYes || "YES" : widgetProps.labelNo || "NO";
        } else if (listValues2) {
          if (Array.isArray(defaultValue)) return defaultValue.map(function(v2) {
            return getTitleInListValues(listValues2, v2) || v2;
          }).join(", ");
          else return getTitleInListValues(listValues2, defaultValue) || defaultValue;
        }
        return "" + defaultValue;
      }
      if (!widgetFactory) {
        return "?";
      }
      return widgetFactory(widgetProps, config2.ctx);
    });
    WidgetFactoryMemo.displayName = "WidgetFactoryMemo";
    var WidgetFactory = function WidgetFactory2(_ref3) {
      var delta = _ref3.delta, isFuncArg = _ref3.isFuncArg, valueSrc = _ref3.valueSrc, immValue = _ref3.value, immValueError = _ref3.valueError, fieldError = _ref3.fieldError, asyncListValues = _ref3.asyncListValues, isSpecialRange = _ref3.isSpecialRange, fieldDefinition = _ref3.fieldDefinition, widget = _ref3.widget, widgetDefinition = _ref3.widgetDefinition, widgetValueLabel = _ref3.widgetValueLabel, valueLabels = _ref3.valueLabels, textSeparators = _ref3.textSeparators, setValue2 = _ref3.setValue, setFuncValue2 = _ref3.setFuncValue, config2 = _ref3.config, field = _ref3.field, fieldSrc = _ref3.fieldSrc, fieldPath = _ref3.fieldPath, fieldType = _ref3.fieldType, isLHS = _ref3.isLHS, operator = _ref3.operator, readonly = _ref3.readonly, parentField = _ref3.parentField, parentFuncs = _ref3.parentFuncs, id2 = _ref3.id, groupId = _ref3.groupId, widgetId = _ref3.widgetId;
      var widgetFactory = widgetDefinition.factory, fieldWidgetProps = _objectWithoutProperties(widgetDefinition, _excluded2);
      var fixedImmValue = immValue ? immValue.map(function(v2) {
        return _fixImmutableValue(v2);
      }) : void 0;
      var value2 = reactExports.useMemo(function() {
        if (isSpecialRange) {
          var _value = [fixedImmValue === null || fixedImmValue === void 0 ? void 0 : fixedImmValue.get(0), fixedImmValue === null || fixedImmValue === void 0 ? void 0 : fixedImmValue.get(1)];
          if (_value[0] === void 0 && _value[1] === void 0) _value = void 0;
          return _value;
        }
        return fixedImmValue === null || fixedImmValue === void 0 ? void 0 : fixedImmValue.get(delta);
      }, [isSpecialRange, immValue]);
      var valueError = reactExports.useMemo(function() {
        if (!immValueError) {
          return null;
        }
        if (isSpecialRange) {
          return [immValueError.get(0), immValueError.get(1), immValueError.get(2)];
        }
        return immValueError === null || immValueError === void 0 ? void 0 : immValueError.get(delta);
      }, [isSpecialRange, immValue]);
      var errorMessage = isLHS ? fieldError : valueError;
      var _ref4 = fieldDefinition || {}, fieldSettings = _ref4.fieldSettings;
      var label = widgetValueLabel.label, placeholder = widgetValueLabel.placeholder;
      var placeholders = valueLabels ? valueLabels.placeholder : null;
      var simpleField = isImmutable(field) ? null : field;
      var widgetProps = omit$1(_objectSpread$a(_objectSpread$a(_objectSpread$a({}, fieldWidgetProps), fieldSettings), {}, {
        config: config2,
        field: simpleField,
        // !!! using of field prop in widget is strongly discouraged
        fieldPath,
        fieldSrc,
        fieldType,
        isLHS,
        parentField,
        parentFuncs,
        fieldDefinition,
        operator,
        delta,
        isSpecialRange,
        isFuncArg,
        value: value2,
        valueSrc,
        valueError,
        fieldError,
        errorMessage,
        label,
        placeholder,
        placeholders,
        textSeparators,
        setValue: setValue2,
        setFuncValue: setFuncValue2,
        readonly,
        asyncListValues,
        id: id2,
        groupId,
        widgetId,
        widgetFactory,
        widget
      }), [].concat(_toConsumableArray(_widgetDefKeysToOmit), ["toJS"]));
      return /* @__PURE__ */ React.createElement(WidgetFactoryMemo, _extends({
        widgetFactory
      }, widgetProps));
    };
    WidgetFactory.displayName = "WidgetFactory";
    function _callSuper$i(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$i() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$i() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$i = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var _Utils$ConfigUtils$3 = Utils$1.ConfigUtils, getFieldConfig$6 = _Utils$ConfigUtils$3.getFieldConfig, getOperatorConfig$2 = _Utils$ConfigUtils$3.getOperatorConfig, getFieldWidgetConfig$2 = _Utils$ConfigUtils$3.getFieldWidgetConfig;
    var _Utils$RuleUtils$1 = Utils$1.RuleUtils, getValueSourcesForFieldOp = _Utils$RuleUtils$1.getValueSourcesForFieldOp, getWidgetForFieldOp$1 = _Utils$RuleUtils$1.getWidgetForFieldOp, getValueLabel = _Utils$RuleUtils$1.getValueLabel;
    var createListWithOneElement$1 = Utils$1.DefaultUtils.createListWithOneElement;
    var shallowEqual$1 = Utils$1.OtherUtils.shallowEqual;
    Utils$1.TreeUtils.isImmutable;
    var funcArgDummyOpDef = {
      cardinality: 1
    };
    var Widget = /* @__PURE__ */ function(_Component) {
      function Widget2(_props) {
        var _this;
        _classCallCheck(this, Widget2);
        _this = _callSuper$i(this, Widget2, [_props]);
        _this._setValue = function(isSpecialRange, delta, widgetType, widgetId, value2, asyncListValues) {
          var _meta = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : {};
          if (!_meta.widgetId) {
            _meta.widgetId = widgetId;
          }
          if (isSpecialRange && Array.isArray(value2)) {
            var oldRange = [_this.props.value.get(0), _this.props.value.get(1)];
            if (oldRange[0] != value2[0]) _this.props.setValue(0, value2[0], widgetType, asyncListValues, _meta);
            if (oldRange[1] != value2[1]) _this.props.setValue(1, value2[1], widgetType, asyncListValues, _meta);
          } else {
            _this.props.setValue(delta, value2, widgetType, asyncListValues, _meta);
          }
        };
        _this._setValueSrc = function(delta, widgetId, srcKey) {
          var _meta = {
            widgetId
          };
          _this.props.setValueSrc(delta, srcKey, _meta);
        };
        _this.renderWidget = function(delta, meta, props) {
          var config2 = props.config, isFuncArg = props.isFuncArg, leftField = props.leftField, operator = props.operator, values = props.value, valueError = props.valueError, fieldError = props.fieldError, readonly = props.readonly, parentField = props.parentField, parentFuncs = props.parentFuncs, id2 = props.id, groupId = props.groupId, fieldSrc = props.fieldSrc, fieldType = props.fieldType, isLHS = props.isLHS, setFuncValue2 = props.setFuncValue;
          var settings2 = config2.settings;
          var widgets2 = meta.widgets, iValues = meta.iValues, aField = meta.aField, valueSources = meta.valueSources;
          var value2 = isFuncArg ? iValues : values;
          var field = isFuncArg ? leftField : aField;
          var _widgets$delta = widgets2[delta], valueSrc = _widgets$delta.valueSrc, valueLabel = _widgets$delta.valueLabel, widgetId = _widgets$delta.widgetId;
          var hasValueSources = valueSources.length > 1 && !readonly;
          var widgetLabel = settings2.showLabels ? /* @__PURE__ */ React.createElement("label", {
            key: "label-" + widgetId,
            className: "rule--label"
          }, valueLabel.label) : null;
          return /* @__PURE__ */ React.createElement("div", {
            key: "wrapper-" + widgetId,
            className: classNames(valueSrc === "func" ? "widget--func" : "widget--widget", hasValueSources ? "widget--has-valuesrcs" : "widget--has-no-valuesrcs")
          }, valueSrc === "func" ? null : widgetLabel, /* @__PURE__ */ React.createElement(WidgetFactory, _extends({
            key: widgetId,
            id: id2,
            groupId,
            widgetId,
            valueSrc,
            delta,
            value: value2,
            valueError,
            fieldError,
            isFuncArg,
            isLHS
          }, pick$1(meta, ["isSpecialRange", "fieldDefinition", "asyncListValues"]), pick$1(widgets2[delta], ["widget", "widgetDefinition", "widgetValueLabel", "valueLabels", "textSeparators", "setValue"]), {
            setFuncValue: setFuncValue2,
            config: config2,
            field,
            fieldSrc,
            fieldType,
            parentField,
            parentFuncs,
            operator,
            readonly
          })));
        };
        _this.renderValueSources = function(delta, meta, props) {
          var config2 = props.config, isFuncArg = props.isFuncArg, leftField = props.leftField, operator = props.operator, readonly = props.readonly;
          var settings2 = config2.settings;
          var valueSources = meta.valueSources, widgets2 = meta.widgets, aField = meta.aField, valueSourcesOptions = meta.valueSourcesOptions;
          var field = isFuncArg ? leftField : aField;
          var _widgets$delta2 = widgets2[delta], valueSrc = _widgets$delta2.valueSrc, setValueSrc2 = _widgets$delta2.setValueSrc;
          var ValueSources = _this.ValueSources;
          var sourceLabel = settings2.showLabels ? /* @__PURE__ */ React.createElement("label", {
            className: "rule--label"
          }, " ") : null;
          return valueSources.length > 1 && !readonly && /* @__PURE__ */ React.createElement("div", {
            key: "wrapper-valuesrc-" + delta,
            className: "widget--valuesrc"
          }, sourceLabel, /* @__PURE__ */ React.createElement(ValueSources, {
            key: "valuesrc-" + delta,
            delta,
            valueSources: valueSourcesOptions,
            valueSrc,
            config: config2,
            field,
            operator,
            setValueSrc: setValueSrc2,
            readonly,
            title: settings2.valueSourcesPopupTitle
          }));
        };
        _this.renderSep = function(delta, meta, props) {
          var config2 = props.config;
          var widgets2 = meta.widgets;
          var settings2 = config2.settings;
          var sepText = widgets2[delta].sepText;
          var sepLabel = settings2.showLabels ? /* @__PURE__ */ React.createElement("label", {
            className: "rule--label"
          }, " ") : null;
          return sepText && /* @__PURE__ */ React.createElement("div", {
            key: "widget-separators-" + delta,
            className: classNames("widget--sep", delta == 0 && "widget--sep-first")
          }, sepLabel, /* @__PURE__ */ React.createElement("span", null, sepText));
        };
        _this.renderWidgetDelta = function(delta) {
          var sep = _this.renderSep(delta, _this.meta, _this.props);
          var sources = _this.renderValueSources(delta, _this.meta, _this.props);
          var widgetCmp = _this.renderWidget(delta, _this.meta, _this.props);
          return [sep, sources, widgetCmp];
        };
        useOnPropsChanged(_this);
        _this.onPropsChanged(_props);
        return _this;
      }
      _inherits(Widget2, _Component);
      return _createClass(Widget2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var configChanged = !this.ValueSources || (prevProps === null || prevProps === void 0 ? void 0 : prevProps.config) !== (nextProps === null || nextProps === void 0 ? void 0 : nextProps.config);
          var keysForMeta = ["config", "id", "parentFuncs", "field", "fieldId", "fieldSrc", "fieldType", "fieldFunc", "fieldArg", "leftField", "operator", "valueSrc", "asyncListValues", "isLHS", "isFuncArg", "isForRuleGroup", "isCaseValue", "value"];
          var changedKeys = keysForMeta.filter(function(k2) {
            if (k2 === "parentFuncs") {
              return !shallowEqual$1(nextProps[k2], prevProps[k2], true);
            }
            if (k2 === "field") {
              return nextProps["fieldId"] !== prevProps["fieldId"];
            }
            return nextProps[k2] !== prevProps[k2];
          });
          var needUpdateMeta = !this.meta || changedKeys.length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps, changedKeys);
          }
          if (configChanged) {
            var config2 = nextProps.config;
            var renderValueSources = config2.settings.renderValueSources;
            this.ValueSources = getRenderFromConfig(config2, renderValueSources);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var _iValueSrcs, _iValueSrcs2, _this$meta, _this$meta2, _this2 = this;
          var config2 = _ref.config, simpleField = _ref.field;
          _ref.fieldSrc;
          var fieldType = _ref.fieldType, fieldFunc = _ref.fieldFunc, fieldArg = _ref.fieldArg, operator = _ref.operator, valueSrcs = _ref.valueSrc, values = _ref.value, isForRuleGroup = _ref.isForRuleGroup, isCaseValue = _ref.isCaseValue, isFuncArg = _ref.isFuncArg;
          _ref.leftField;
          var asyncListValues = _ref.asyncListValues, parentFuncs = _ref.parentFuncs, isLHS = _ref.isLHS, id2 = _ref.id;
          var changedKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
          var valueSourcesInfo = config2.settings.valueSourcesInfo;
          var field = isFuncArg ? {
            func: fieldFunc,
            arg: fieldArg
          } : simpleField;
          var isOkWithoutField = !simpleField && fieldType;
          var iValueSrcs = valueSrcs;
          var iValues = values;
          if (isFuncArg || isForRuleGroup || isCaseValue) {
            iValueSrcs = createListWithOneElement$1(valueSrcs);
            iValues = createListWithOneElement$1(values);
          }
          var fieldDefinition = getFieldConfig$6(config2, field);
          if (!fieldDefinition && isOkWithoutField) {
            fieldDefinition = config2.types[fieldType];
          }
          var defaultWidget = getWidgetForFieldOp$1(config2, field, operator);
          if (!defaultWidget && isOkWithoutField) {
            var _config$types$fieldTy;
            defaultWidget = (_config$types$fieldTy = config2.types[fieldType]) === null || _config$types$fieldTy === void 0 ? void 0 : _config$types$fieldTy.mainWidget;
          }
          var operatorDefinition = isFuncArg ? funcArgDummyOpDef : getOperatorConfig$2(config2, operator, field);
          if ((fieldDefinition == null || operatorDefinition == null) && !isCaseValue) {
            return null;
          }
          var isSpecialRange = operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.isSpecialRange;
          var isSpecialRangeForSrcField = isSpecialRange && (((_iValueSrcs = iValueSrcs) === null || _iValueSrcs === void 0 ? void 0 : _iValueSrcs.get(0)) === "field" || ((_iValueSrcs2 = iValueSrcs) === null || _iValueSrcs2 === void 0 ? void 0 : _iValueSrcs2.get(1)) === "field");
          var isTrueSpecialRange = isSpecialRange && !isSpecialRangeForSrcField;
          var cardinality = isTrueSpecialRange ? 1 : getOpCardinality(operatorDefinition);
          if (cardinality === 0) {
            return null;
          }
          var valueSources = (_this$meta = this.meta) === null || _this$meta === void 0 ? void 0 : _this$meta.valueSources;
          var valueSourcesOptions = (_this$meta2 = this.meta) === null || _this$meta2 === void 0 ? void 0 : _this$meta2.valueSourcesOptions;
          if (!valueSources || ["field", "operator", "config", "fieldDefinition", "isForRuleGroup"].filter(function(k2) {
            return changedKeys.includes(k2);
          }).length) {
            valueSources = getValueSourcesForFieldOp(config2, field, operator, fieldDefinition);
            if (isForRuleGroup) {
              valueSources = ["value"];
            }
            if (!field) {
              valueSources = Object.keys(valueSourcesInfo);
            }
            valueSourcesOptions = valueSources.map(function(srcKey) {
              return [srcKey, {
                label: valueSourcesInfo[srcKey].label
              }];
            });
          }
          var widgets2 = range$1(0, cardinality).map(function(delta) {
            var _this2$meta, _iValueSrcs3, _widgetDefinition, _this2$meta2;
            var oldWidgetMeta = (_this2$meta = _this2.meta) === null || _this2$meta === void 0 || (_this2$meta = _this2$meta.widgets) === null || _this2$meta === void 0 ? void 0 : _this2$meta[delta];
            var valueSrc = ((_iValueSrcs3 = iValueSrcs) === null || _iValueSrcs3 === void 0 ? void 0 : _iValueSrcs3.get(delta)) || null;
            var widget = getWidgetForFieldOp$1(config2, field, operator, valueSrc);
            var widgetDefinition = getFieldWidgetConfig$2(config2, field, operator, widget, valueSrc);
            if (isSpecialRangeForSrcField) {
              widget = widgetDefinition.singleWidget;
              widgetDefinition = getFieldWidgetConfig$2(config2, field, operator, widget, valueSrc);
            }
            if (!widgetDefinition && isOkWithoutField) {
              widget = ["func", "field"].includes(valueSrc) ? valueSrc : defaultWidget;
              widgetDefinition = config2.widgets[widget];
            }
            var widgetType = (_widgetDefinition = widgetDefinition) === null || _widgetDefinition === void 0 ? void 0 : _widgetDefinition.type;
            var valueLabel = getValueLabel(config2, field, operator, delta, valueSrc, isTrueSpecialRange);
            var widgetValueLabel = getValueLabel(config2, field, operator, delta, null, isTrueSpecialRange);
            var sepText = operatorDefinition !== null && operatorDefinition !== void 0 && operatorDefinition.textSeparators ? operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.textSeparators[delta] : null;
            var valueLabels = null;
            var textSeparators = null;
            if (isSpecialRange) {
              valueLabels = [getValueLabel(config2, field, operator, 0), getValueLabel(config2, field, operator, 1)];
              valueLabels = {
                placeholder: [valueLabels[0].placeholder, valueLabels[1].placeholder],
                label: [valueLabels[0].label, valueLabels[1].label]
              };
              textSeparators = operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.textSeparators;
            }
            var widgetId = getWidgetId({
              id: id2,
              isLHS,
              delta,
              parentFuncs
            });
            var vsId = widgetId + ":VS";
            var setValueSrc2 = oldWidgetMeta === null || oldWidgetMeta === void 0 ? void 0 : oldWidgetMeta.setValueSrc;
            if (!setValueSrc2 || (oldWidgetMeta === null || oldWidgetMeta === void 0 ? void 0 : oldWidgetMeta.widgetId) !== widgetId) {
              setValueSrc2 = _this2._setValueSrc.bind(_this2, delta, vsId);
            }
            var setValue2 = oldWidgetMeta === null || oldWidgetMeta === void 0 ? void 0 : oldWidgetMeta.setValue;
            if (!setValue2 || (oldWidgetMeta === null || oldWidgetMeta === void 0 ? void 0 : oldWidgetMeta.widgetId) !== widgetId || (oldWidgetMeta === null || oldWidgetMeta === void 0 ? void 0 : oldWidgetMeta.widgetType) !== widgetType || ((_this2$meta2 = _this2.meta) === null || _this2$meta2 === void 0 ? void 0 : _this2$meta2.isSpecialRange) !== isSpecialRange) {
              setValue2 = _this2._setValue.bind(_this2, isSpecialRange, delta, widgetType, widgetId);
            }
            return {
              valueSrc,
              valueLabel,
              widget,
              sepText,
              widgetDefinition,
              widgetValueLabel,
              valueLabels,
              textSeparators,
              setValueSrc: setValueSrc2,
              setValue: setValue2,
              widgetId,
              widgetType
            };
          });
          return {
            defaultWidget,
            fieldDefinition,
            operatorDefinition,
            isSpecialRange: isTrueSpecialRange,
            cardinality,
            valueSources,
            valueSourcesOptions,
            widgets: widgets2,
            iValues,
            //correct for isFuncArg
            aField: field,
            //correct for isFuncArg
            asyncListValues
          };
        }
      }, {
        key: "render",
        value: function render() {
          if (!this.meta) return null;
          var _this$meta3 = this.meta, defaultWidget = _this$meta3.defaultWidget, cardinality = _this$meta3.cardinality;
          if (!defaultWidget) return null;
          var name = defaultWidget;
          return /* @__PURE__ */ React.createElement(Col, {
            className: "rule--widget rule--widget--".concat(name.toUpperCase()),
            key: "widget-col-" + name
          }, range$1(0, cardinality).map(this.renderWidgetDelta));
        }
      }]);
    }(reactExports.Component);
    Widget.propTypes = {
      config: PropTypes.object.isRequired,
      value: PropTypes.any,
      //instanceOf(Immutable.List)
      valueSrc: PropTypes.any,
      //instanceOf(Immutable.List)
      valueError: PropTypes.any,
      //instanceOf(Immutable.List)
      fieldError: PropTypes.string,
      field: PropTypes.any,
      fieldSrc: PropTypes.string,
      fieldType: PropTypes.string,
      fieldId: PropTypes.string,
      operator: PropTypes.string,
      readonly: PropTypes.bool,
      asyncListValues: PropTypes.array,
      id: PropTypes.string,
      groupId: PropTypes.string,
      //actions
      setValue: PropTypes.func,
      setValueSrc: PropTypes.func,
      setFuncValue: PropTypes.func,
      // for isFuncArg
      isFuncArg: PropTypes.bool,
      fieldFunc: PropTypes.string,
      fieldArg: PropTypes.string,
      leftField: PropTypes.any,
      // for RuleGroupExt
      isForRuleGroup: PropTypes.bool,
      parentField: PropTypes.string,
      // for func in func
      parentFuncs: PropTypes.array,
      isLHS: PropTypes.bool,
      // for case_value
      isCaseValue: PropTypes.bool
    };
    function _callSuper$h(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$h() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$h() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$h = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var getFuncConfig = Utils$1.ConfigUtils.getFuncConfig;
    var shallowEqual = Utils$1.OtherUtils.shallowEqual;
    var FuncWidget = /* @__PURE__ */ function(_Component) {
      function FuncWidget2(props) {
        var _this;
        _classCallCheck(this, FuncWidget2);
        _this = _callSuper$h(this, FuncWidget2, [props]);
        _this.setFunc = function(funcKey) {
          var _meta = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var _this$props = _this.props, isLHS = _this$props.isLHS, delta = _this$props.delta, parentFuncs = _this$props.parentFuncs, id2 = _this$props.id;
          if (!_meta.widgetId) {
            var widgetId = getWidgetId({
              id: id2,
              isLHS,
              delta,
              parentFuncs
            });
            _meta.widgetId = widgetId;
          }
          _this.props.setFuncValue(isLHS ? -1 : delta || 0, parentFuncs, null, funcKey, "!func", void 0, _meta);
        };
        _this.setArgValue = function(argKey, argVal, widgetType, asyncListValues, _meta) {
          var _this$props2 = _this.props;
          _this$props2.config;
          var delta = _this$props2.delta, isLHS = _this$props2.isLHS, parentFuncs = _this$props2.parentFuncs;
          _this.props.setFuncValue(isLHS ? -1 : delta || 0, parentFuncs, argKey, argVal, widgetType, asyncListValues, _meta);
        };
        _this.setArgValueSrc = function(argKey, argValSrc, _meta) {
          var _this$props3 = _this.props;
          _this$props3.config;
          var delta = _this$props3.delta, isLHS = _this$props3.isLHS, parentFuncs = _this$props3.parentFuncs;
          _this.props.setFuncValue(isLHS ? -1 : delta || 0, parentFuncs, argKey, argValSrc, "!valueSrc", void 0, _meta);
        };
        _this.renderFuncSelect = function() {
          var _value$get, _value$get2;
          var _this$props4 = _this.props, config2 = _this$props4.config, field = _this$props4.field, fieldType = _this$props4.fieldType, fieldSrc = _this$props4.fieldSrc, isLHS = _this$props4.isLHS, operator = _this$props4.operator, customProps = _this$props4.customProps, value2 = _this$props4.value, readonly = _this$props4.readonly, parentFuncs = _this$props4.parentFuncs, id2 = _this$props4.id, groupId = _this$props4.groupId, isFuncArg = _this$props4.isFuncArg, fieldDefinition = _this$props4.fieldDefinition;
          var funcKey = (_value$get = value2 === null || value2 === void 0 || (_value$get2 = value2.get) === null || _value$get2 === void 0 ? void 0 : _value$get2.call(value2, "func")) !== null && _value$get !== void 0 ? _value$get : null;
          var selectProps = {
            value: funcKey,
            setValue: _this.setFunc,
            config: config2,
            field,
            fieldType,
            fieldSrc,
            isLHS,
            operator,
            customProps,
            readonly,
            parentFuncs,
            isFuncArg,
            fieldDefinition,
            id: id2,
            groupId
          };
          var _config$settings = config2.settings, showLabels = _config$settings.showLabels, funcLabel = _config$settings.funcLabel;
          var widgetLabel = showLabels ? /* @__PURE__ */ React.createElement("label", {
            className: "rule--label"
          }, funcLabel) : null;
          return /* @__PURE__ */ React.createElement(Col, {
            key: "func",
            className: "rule--func"
          }, widgetLabel, /* @__PURE__ */ React.createElement(FuncSelect, selectProps));
        };
        _this.renderArgLabel = function(argKey, argDefinition) {
          var valueSources = argDefinition.valueSources, type = argDefinition.type, showPrefix = argDefinition.showPrefix, label = argDefinition.label;
          var config2 = _this.props.config;
          var isConst = valueSources && valueSources.length == 1 && valueSources[0] == "const";
          var forceShow = !config2.settings.showLabels && (type == "boolean" || isConst) && showPrefix;
          if (!forceShow) return null;
          return /* @__PURE__ */ React.createElement(Col, {
            className: "rule--func--arg-label"
          }, label || argKey);
        };
        _this.renderArgLabelSep = function(argKey, argDefinition) {
          var valueSources = argDefinition.valueSources, type = argDefinition.type, showPrefix = argDefinition.showPrefix;
          var config2 = _this.props.config;
          var isConst = valueSources && valueSources.length == 1 && valueSources[0] == "const";
          var forceShow = !config2.settings.showLabels && (type == "boolean" || isConst) && showPrefix;
          if (!forceShow) return null;
          return /* @__PURE__ */ React.createElement(Col, {
            className: "rule--func--arg-label-sep"
          }, ":");
        };
        _this.renderArgVal = function(funcKey, argKey, argDefinition) {
          var _this$props5 = _this.props, config2 = _this$props5.config, field = _this$props5.field, fieldType = _this$props5.fieldType, fieldSrc = _this$props5.fieldSrc, isLHS = _this$props5.isLHS;
          _this$props5.operator;
          var value2 = _this$props5.value, readonly = _this$props5.readonly, parentFuncs = _this$props5.parentFuncs, id2 = _this$props5.id, groupId = _this$props5.groupId, fieldError = _this$props5.fieldError, valueError = _this$props5.valueError, setFuncValue2 = _this$props5.setFuncValue;
          var arg = value2 ? value2.getIn(["args", argKey]) : null;
          var argVal = arg ? arg.get("value") : void 0;
          var defaultValueSource = argDefinition.valueSources.length == 1 ? argDefinition.valueSources[0] : void 0;
          var argValSrc = arg ? arg.get("valueSrc") || defaultValueSource || "value" : defaultValueSource;
          var widgetProps = {
            config: config2,
            fieldFunc: funcKey,
            fieldArg: argKey,
            leftField: field,
            fieldType,
            // type of leftField
            fieldSrc,
            // src of leftField
            fieldError,
            // error in LHS
            valueError,
            // error in RHS
            isLHS,
            operator: null,
            value: argVal,
            valueSrc: argValSrc,
            setValue: _this.setArgValue,
            setValueSrc: _this.setArgValueSrc,
            setFuncValue: setFuncValue2,
            funcKey,
            argKey,
            argDefinition,
            readonly,
            parentFuncs,
            id: id2,
            groupId
          };
          return /* @__PURE__ */ React.createElement(Col, {
            className: "rule--func--arg-value"
          }, /* @__PURE__ */ React.createElement(ArgWidget, widgetProps));
        };
        _this.renderArgSep = function(argKey, argDefinition, argIndex, _ref) {
          var renderSeps = _ref.renderSeps;
          if (!argIndex) return null;
          return /* @__PURE__ */ React.createElement(Col, {
            className: "rule--func--arg-sep"
          }, renderSeps ? renderSeps[argIndex - 1] : ", ");
        };
        _this.renderBracketBefore = function(_ref2) {
          var renderBrackets = _ref2.renderBrackets;
          return /* @__PURE__ */ React.createElement(Col, {
            key: "before_args",
            className: "rule--func--bracket-before"
          }, renderBrackets ? renderBrackets[0] : "(");
        };
        _this.renderBracketAfter = function(_ref3) {
          var renderBrackets = _ref3.renderBrackets;
          return /* @__PURE__ */ React.createElement(Col, {
            key: "after_args",
            className: "rule--func--bracket-after"
          }, renderBrackets ? renderBrackets[1] : ")");
        };
        _this.renderFuncArgs = function() {
          var _this$meta = _this.meta, funcDefinition = _this$meta.funcDefinition, funcKey = _this$meta.funcKey;
          if (!funcKey) return null;
          var _ref4 = funcDefinition || {}, args = _ref4.args;
          if (!args) return null;
          return /* @__PURE__ */ React.createElement(React.Fragment, null, _this.renderBracketBefore(funcDefinition), /* @__PURE__ */ React.createElement(Col, {
            key: "args-".concat(funcKey),
            className: "rule--func--args rule--func--".concat(funcKey, "--args")
          }, Object.keys(args).map(function(argKey, argIndex) {
            return /* @__PURE__ */ React.createElement(Col, {
              key: "arg-".concat(argKey, "-").concat(argIndex),
              className: "rule--func--arg rule--func--".concat(funcKey, "--arg--").concat(argKey)
            }, _this.renderArgSep(argKey, args[argKey], argIndex, funcDefinition), _this.renderArgLabel(argKey, args[argKey]), _this.renderArgLabelSep(argKey, args[argKey]), _this.renderArgVal(funcKey, argKey, args[argKey]));
          })), _this.renderBracketAfter(funcDefinition));
        };
        useOnPropsChanged(_this);
        _this.onPropsChanged(props);
        return _this;
      }
      _inherits(FuncWidget2, _Component);
      return _createClass(FuncWidget2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "field", "operator", "value", "fieldSrc", "fieldType", "isLHS"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return k2 === "parentFuncs" ? !shallowEqual(nextProps[k2], prevProps[k2], true) : nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref5) {
          var _value$get3, _value$get4;
          var config2 = _ref5.config;
          _ref5.field;
          _ref5.operator;
          var value2 = _ref5.value;
          var funcKey = (_value$get3 = value2 === null || value2 === void 0 || (_value$get4 = value2.get) === null || _value$get4 === void 0 ? void 0 : _value$get4.call(value2, "func")) !== null && _value$get3 !== void 0 ? _value$get3 : null;
          var funcDefinition = funcKey ? getFuncConfig(config2, funcKey) : null;
          return {
            funcDefinition,
            funcKey
          };
        }
      }, {
        key: "render",
        value: function render() {
          var parentFuncs = this.props.parentFuncs;
          var funcPath = parentFuncs ? parentFuncs.map(function(_ref6) {
            var _ref7 = _slicedToArray(_ref6, 2), f2 = _ref7[0], a = _ref7[1];
            return "".concat(f2, "_").concat(a);
          }).join("-") : "root";
          var funcLevel = (parentFuncs === null || parentFuncs === void 0 ? void 0 : parentFuncs.length) || 0;
          return /* @__PURE__ */ React.createElement(Col, {
            className: "rule--func--wrapper rule--func--wrapper--under-".concat(funcPath, " rule--func--wrapper--lev-").concat(funcLevel)
          }, this.renderFuncSelect(), this.renderFuncArgs());
        }
      }]);
    }(reactExports.Component);
    FuncWidget.propTypes = {
      id: PropTypes.string,
      groupId: PropTypes.string,
      config: PropTypes.object.isRequired,
      field: PropTypes.any,
      fieldSrc: PropTypes.string,
      fieldType: PropTypes.string,
      fieldError: PropTypes.string,
      operator: PropTypes.string,
      customProps: PropTypes.object,
      value: PropTypes.object,
      //instanceOf(Immutable.Map) //with keys 'func' and `args`
      setValue: PropTypes.func.isRequired,
      setFuncValue: PropTypes.func,
      readonly: PropTypes.bool,
      parentFuncs: PropTypes.array,
      fieldDefinition: PropTypes.object,
      isFuncArg: PropTypes.bool,
      isLHS: PropTypes.bool,
      valueError: PropTypes.string
    };
    var ArgWidget = /* @__PURE__ */ function(_Component2) {
      function ArgWidget2(props) {
        var _this2;
        _classCallCheck(this, ArgWidget2);
        _this2 = _callSuper$h(this, ArgWidget2, [props]);
        _this2.setValue = function(_delta, value2, widgetType, asyncListValues, _meta) {
          var _this2$props = _this2.props, setValue2 = _this2$props.setValue, argKey = _this2$props.argKey;
          setValue2(argKey, value2, widgetType, asyncListValues, _meta);
        };
        _this2.setValueSrc = function(_delta, valueSrc, _meta) {
          var _this2$props2 = _this2.props, setValueSrc2 = _this2$props2.setValueSrc, argKey = _this2$props2.argKey;
          setValueSrc2(argKey, valueSrc, _meta);
        };
        useOnPropsChanged(_this2);
        _this2.onPropsChanged(props);
        return _this2;
      }
      _inherits(ArgWidget2, _Component2);
      return _createClass(ArgWidget2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["parentFuncs", "funcKey", "argKey"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return k2 === "parentFuncs" ? !shallowEqual(nextProps[k2], prevProps[k2], true) : nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref8) {
          var parentFuncs = _ref8.parentFuncs, funcKey = _ref8.funcKey, argKey = _ref8.argKey;
          var newParentFuncs = [].concat(_toConsumableArray(parentFuncs || []), [[funcKey, argKey]]);
          return {
            parentFuncs: newParentFuncs
          };
        }
      }, {
        key: "render",
        value: function render() {
          var parentFuncs = this.meta.parentFuncs;
          return /* @__PURE__ */ React.createElement(Widget, _extends({}, this.props, {
            setValue: this.setValue,
            setValueSrc: this.setValueSrc,
            isFuncArg: true,
            parentFuncs
          }));
        }
      }]);
    }(reactExports.Component);
    ArgWidget.propTypes = {
      funcKey: PropTypes.string.isRequired,
      argKey: PropTypes.string.isRequired,
      setValue: PropTypes.func.isRequired,
      setValueSrc: PropTypes.func.isRequired,
      readonly: PropTypes.bool,
      isLHS: PropTypes.bool,
      parentFuncs: PropTypes.array,
      id: PropTypes.string,
      groupId: PropTypes.string
    };
    function _callSuper$g(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$g() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$g() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$g = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var FieldWrapper = /* @__PURE__ */ function(_Component) {
      function FieldWrapper2(props) {
        var _this;
        _classCallCheck(this, FieldWrapper2);
        _this = _callSuper$g(this, FieldWrapper2, [props]);
        _this.renderField = function() {
          var _this$props = _this.props, config2 = _this$props.config, classname = _this$props.classname, selectedField = _this$props.selectedField, selectedFieldSrc = _this$props.selectedFieldSrc, selectedFieldType = _this$props.selectedFieldType, setField2 = _this$props.setField, setFuncValue2 = _this$props.setFuncValue, parentField = _this$props.parentField, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId, fieldError = _this$props.fieldError, valueError = _this$props.valueError;
          var supportedFieldSrcs = ["func", "field"];
          if (!supportedFieldSrcs.includes(selectedFieldSrc)) {
            return "?";
          }
          var field = selectedFieldSrc === "func" ? /* @__PURE__ */ React.createElement(FuncWidget, {
            isLHS: true,
            config: config2,
            value: selectedField,
            fieldSrc: selectedFieldSrc,
            fieldType: selectedFieldType,
            fieldError,
            valueError,
            parentField,
            setValue: setField2,
            setFuncValue: setFuncValue2,
            readonly,
            id: id2,
            groupId,
            key: "field-func-" + id2
          }) : /* @__PURE__ */ React.createElement(Field, {
            config: config2,
            selectedField,
            selectedFieldSrc,
            selectedFieldType,
            parentField,
            setField: setField2,
            customProps: config2.settings.customFieldSelectProps,
            readonly,
            id: id2,
            groupId,
            key: "field-" + id2
          });
          var fieldLabel = selectedFieldSrc === "func" ? config2.settings.funcLabel : config2.settings.fieldLabel;
          var label = config2.settings.showLabels && selectedFieldSrc !== "func" && /* @__PURE__ */ React.createElement("label", {
            className: "rule--label"
          }, fieldLabel);
          return /* @__PURE__ */ React.createElement("div", {
            key: selectedFieldSrc,
            className: classname
          }, label, field);
        };
        _this.renderFieldSources = function() {
          if (!_this.meta) return null;
          var _this$props2 = _this.props, config2 = _this$props2.config, readonly = _this$props2.readonly, selectedFieldSrc = _this$props2.selectedFieldSrc, setFieldSrc2 = _this$props2.setFieldSrc, id2 = _this$props2.id;
          var fieldSourcesOptions = _this.meta.fieldSourcesOptions;
          var settings2 = config2.settings;
          var ValueSources = _this.ValueSources;
          var sourceLabel = settings2.showLabels ? /* @__PURE__ */ React.createElement("label", {
            className: "rule--label"
          }, " ") : null;
          return fieldSourcesOptions.length > 1 && !readonly && /* @__PURE__ */ React.createElement("div", {
            key: "fieldsrc",
            className: "rule--fieldsrc"
          }, sourceLabel, /* @__PURE__ */ React.createElement(ValueSources, {
            key: "fieldsrc-" + id2,
            valueSources: fieldSourcesOptions,
            valueSrc: selectedFieldSrc,
            config: config2,
            setValueSrc: setFieldSrc2,
            readonly,
            title: settings2.fieldSourcesPopupTitle
          }));
        };
        useOnPropsChanged(_this);
        _this.onPropsChanged(props);
        return _this;
      }
      _inherits(FieldWrapper2, _Component);
      return _createClass(FieldWrapper2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var configChanged = !this.ValueSources || (prevProps === null || prevProps === void 0 ? void 0 : prevProps.config) !== (nextProps === null || nextProps === void 0 ? void 0 : nextProps.config);
          var keysForMeta = ["config"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
          if (configChanged) {
            var config2 = nextProps.config;
            var renderValueSources = config2.settings.renderValueSources;
            this.ValueSources = function(pr) {
              return renderValueSources(pr, config2.ctx);
            };
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var config2 = _ref.config;
          var _config$settings = config2.settings, valueSourcesInfo = _config$settings.valueSourcesInfo, fieldSources = _config$settings.fieldSources;
          var fieldSourcesOptions = fieldSources.map(function(srcKey) {
            return [srcKey, {
              label: valueSourcesInfo[srcKey].label
            }];
          });
          return {
            fieldSourcesOptions
          };
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props3 = this.props;
          _this$props3.classname;
          var canSelectFieldSource = _this$props3.canSelectFieldSource;
          var fieldSources = canSelectFieldSource && this.renderFieldSources();
          var field = this.renderField();
          if (!canSelectFieldSource) {
            return field;
          } else {
            return /* @__PURE__ */ React.createElement(Col, {
              className: "rule--field-wrapper"
            }, fieldSources, field);
          }
        }
      }]);
    }(reactExports.Component);
    var _excluded$1 = ["factory"];
    function _callSuper$f(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$f() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$f() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$f = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var getOperatorConfig$1 = Utils$1.ConfigUtils.getOperatorConfig;
    var OperatorOptions = /* @__PURE__ */ function(_PureComponent) {
      function OperatorOptions2() {
        _classCallCheck(this, OperatorOptions2);
        return _callSuper$f(this, OperatorOptions2, arguments);
      }
      _inherits(OperatorOptions2, _PureComponent);
      return _createClass(OperatorOptions2, [{
        key: "render",
        value: function render() {
          if (!this.props.selectedOperator) return null;
          var operatorDefinitions = getOperatorConfig$1(this.props.config, this.props.selectedOperator, this.props.selectedField);
          if (typeof operatorDefinitions.options === "undefined") {
            return null;
          }
          var _operatorDefinitions$ = operatorDefinitions.options, optionsFactory = _operatorDefinitions$.factory, basicOptionsProps = _objectWithoutProperties(_operatorDefinitions$, _excluded$1);
          var optionsProps = Object.assign({}, basicOptionsProps, {
            config: this.props.config,
            field: this.props.selectedField,
            fieldSrc: this.props.selectedFieldSrc,
            operator: this.props.selectedOperator,
            options: this.props.operatorOptions,
            setOption: this.props.setOperatorOption,
            readonly: this.props.readonly
          });
          var optionsCmp = optionsFactory(optionsProps, this.props.config.ctx);
          var name = this.props.selectedOperator;
          return /* @__PURE__ */ React.createElement("div", {
            className: "rule--operator rule--operator--".concat(name.toUpperCase())
          }, optionsCmp);
        }
      }]);
    }(reactExports.PureComponent);
    OperatorOptions.propTypes = {
      config: PropTypes.object.isRequired,
      operatorOptions: PropTypes.any.isRequired,
      //instanceOf(Immutable.Map)
      selectedField: PropTypes.any,
      selectedFieldSrc: PropTypes.string,
      selectedOperator: PropTypes.string.isRequired,
      readonly: PropTypes.bool,
      //actions
      setOperatorOption: PropTypes.func.isRequired
    };
    function ownKeys$9(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$9(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$9(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$9(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$e(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$e() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$e() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$e = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var _Utils$ConfigUtils$2 = Utils$1.ConfigUtils, getFieldConfig$5 = _Utils$ConfigUtils$2.getFieldConfig, getOperatorConfig = _Utils$ConfigUtils$2.getOperatorConfig, getFieldWidgetConfig$1 = _Utils$ConfigUtils$2.getFieldWidgetConfig, getFieldId = _Utils$ConfigUtils$2.getFieldId;
    var isEmptyRuleProperties = Utils$1.RuleUtils.isEmptyRuleProperties;
    var Rule = /* @__PURE__ */ function(_Component) {
      function Rule2(props) {
        var _this;
        _classCallCheck(this, Rule2);
        _this = _callSuper$e(this, Rule2, [props]);
        useOnPropsChanged(_this);
        _this.removeSelf = _this.removeSelf.bind(_this);
        _this.setLock = _this.setLock.bind(_this);
        _this.onPropsChanged(props);
        return _this;
      }
      _inherits(Rule2, _Component);
      return _createClass(Rule2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var _this2 = this;
          var prevProps = this.props;
          var configChanged = !this.Icon || (prevProps === null || prevProps === void 0 ? void 0 : prevProps.config) !== (nextProps === null || nextProps === void 0 ? void 0 : nextProps.config);
          var keysForMeta = ["selectedField", "selectedFieldSrc", "selectedFieldType", "selectedOperator", "config", "reordableNodesCnt", "isLocked", "parentField", "parentFieldCanReorder"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
          if (configChanged) {
            var config2 = nextProps.config;
            var _config$settings = config2.settings, renderIcon = _config$settings.renderIcon, renderButton = _config$settings.renderButton, renderButtonGroup = _config$settings.renderButtonGroup, renderSwitch = _config$settings.renderSwitch, renderBeforeWidget = _config$settings.renderBeforeWidget, renderAfterWidget = _config$settings.renderAfterWidget, renderRuleError = _config$settings.renderRuleError;
            this.Icon = getRenderFromConfig(config2, renderIcon);
            this.Btn = getRenderFromConfig(config2, renderButton);
            this.BtnGrp = getRenderFromConfig(config2, renderButtonGroup);
            this.Switch = getRenderFromConfig(config2, renderSwitch);
            this.BeforeWidget = getRenderFromConfig(config2, renderBeforeWidget);
            this.AfterWidget = getRenderFromConfig(config2, renderAfterWidget);
            this.RuleError = getRenderFromConfig(config2, renderRuleError);
          }
          this.doRemove = function() {
            _this2.props.removeSelf();
          };
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var selectedField = _ref.selectedField, selectedFieldType = _ref.selectedFieldType, selectedOperator = _ref.selectedOperator, config2 = _ref.config, reordableNodesCnt = _ref.reordableNodesCnt, isLocked = _ref.isLocked, parentField = _ref.parentField, parentFieldCanReorder = _ref.parentFieldCanReorder;
          var keepInputOnChangeFieldSrc = config2.settings.keepInputOnChangeFieldSrc;
          var selectedFieldId = getFieldId(selectedField, config2);
          var selectedFieldConfig = getFieldConfig$5(config2, selectedField);
          var isSelectedGroup = selectedFieldConfig && selectedFieldConfig.type === "!struct";
          var isOkWithoutField = keepInputOnChangeFieldSrc && selectedFieldType;
          var isFieldSelected = !!selectedField || isOkWithoutField;
          var isFieldAndOpSelected = isFieldSelected && selectedOperator;
          var selectedOperatorConfig = getOperatorConfig(config2, selectedOperator, selectedField);
          var selectedOperatorHasOptions = selectedOperatorConfig && selectedOperatorConfig.options != null;
          var selectedFieldWidgetConfig = getFieldWidgetConfig$1(config2, selectedField, selectedOperator, null, null) || {};
          var hideOperator = selectedFieldWidgetConfig.hideOperator;
          var showDragIcon = config2.settings.canReorder && reordableNodesCnt > 1 && !isLocked;
          if (parentField) {
            showDragIcon = showDragIcon && parentFieldCanReorder;
          }
          var showOperator = isFieldSelected && !hideOperator;
          var showOperatorLabel = isFieldSelected && hideOperator && selectedFieldWidgetConfig.operatorInlineLabel;
          var showWidget = isFieldAndOpSelected && !isSelectedGroup;
          var showOperatorOptions = isFieldAndOpSelected && selectedOperatorHasOptions;
          return {
            selectedFieldId,
            selectedFieldWidgetConfig,
            showDragIcon,
            showOperator,
            showOperatorLabel,
            showWidget,
            showOperatorOptions
          };
        }
      }, {
        key: "setLock",
        value: function setLock2(lock) {
          this.props.setLock(lock);
        }
      }, {
        key: "removeSelf",
        value: function removeSelf() {
          var _this$props = this.props, confirmFn = _this$props.confirmFn, config2 = _this$props.config;
          var _config$settings2 = config2.settings, renderConfirm = _config$settings2.renderConfirm, confirmOptions = _config$settings2.removeRuleConfirmOptions;
          if (confirmOptions && !this.isEmptyCurrentRule()) {
            renderConfirm.call(config2.ctx, _objectSpread$9(_objectSpread$9({}, confirmOptions), {}, {
              onOk: this.doRemove,
              onCancel: null,
              confirmFn
            }), config2.ctx);
          } else {
            this.doRemove();
          }
        }
      }, {
        key: "_buildWidgetProps",
        value: function _buildWidgetProps(_ref2, _ref3) {
          var selectedField = _ref2.selectedField, selectedFieldSrc = _ref2.selectedFieldSrc, selectedFieldType = _ref2.selectedFieldType, selectedOperator = _ref2.selectedOperator, operatorOptions = _ref2.operatorOptions, value2 = _ref2.value, valueType = _ref2.valueType, valueSrc = _ref2.valueSrc, asyncListValues = _ref2.asyncListValues, valueError = _ref2.valueError, fieldError = _ref2.fieldError, parentField = _ref2.parentField;
          var selectedFieldId = _ref3.selectedFieldId;
          return {
            field: selectedField,
            fieldSrc: selectedFieldSrc,
            fieldType: selectedFieldType,
            fieldId: selectedFieldId,
            operator: selectedOperator,
            operatorOptions,
            value: value2,
            valueType,
            valueSrc,
            asyncListValues,
            valueError,
            fieldError,
            parentField
          };
        }
      }, {
        key: "isEmptyCurrentRule",
        value: function isEmptyCurrentRule() {
          var config2 = this.props.config;
          var ruleData = this._buildWidgetProps(this.props, this.meta);
          return isEmptyRuleProperties(ruleData, config2);
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props2 = this.props, config2 = _this$props2.config, isLocked = _this$props2.isLocked, parentField = _this$props2.parentField, groupId = _this$props2.groupId, id2 = _this$props2.id, selectedFieldSrc = _this$props2.selectedFieldSrc, selectedField = _this$props2.selectedField, selectedFieldType = _this$props2.selectedFieldType, setField2 = _this$props2.setField, setFuncValue2 = _this$props2.setFuncValue, setFieldSrc2 = _this$props2.setFieldSrc, fieldError = _this$props2.fieldError;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          var selectedFieldId = this.meta.selectedFieldId;
          return /* @__PURE__ */ React.createElement(FieldWrapper, {
            key: "field",
            classname: classNames(selectedFieldSrc == "func" ? "rule--field--func" : "rule--field"),
            config: config2,
            canSelectFieldSource: !parentField,
            selectedField,
            selectedFieldSrc,
            selectedFieldType,
            selectedFieldId,
            fieldError,
            setField: !immutableFieldsMode ? setField2 : dummyFn,
            setFuncValue: !immutableFieldsMode ? setFuncValue2 : dummyFn,
            setFieldSrc: !immutableFieldsMode ? setFieldSrc2 : dummyFn,
            parentField,
            readonly: immutableFieldsMode || isLocked,
            id: id2,
            groupId
          });
        }
      }, {
        key: "renderOperator",
        value: function renderOperator() {
          var _this$props3 = this.props, config2 = _this$props3.config, isLocked = _this$props3.isLocked;
          var _this$meta = this.meta, selectedFieldId = _this$meta.selectedFieldId, selectedFieldWidgetConfig = _this$meta.selectedFieldWidgetConfig, showOperator = _this$meta.showOperator, showOperatorLabel = _this$meta.showOperatorLabel;
          var immutableOpsMode = config2.settings.immutableOpsMode;
          return /* @__PURE__ */ React.createElement(OperatorWrapper, {
            key: "operator",
            config: config2,
            selectedField: this.props.selectedField,
            selectedFieldSrc: this.props.selectedFieldSrc,
            selectedFieldType: this.props.selectedFieldType,
            selectedFieldId,
            selectedOperator: this.props.selectedOperator,
            setOperator: !immutableOpsMode ? this.props.setOperator : dummyFn,
            showOperator,
            showOperatorLabel,
            selectedFieldWidgetConfig,
            readonly: immutableOpsMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          });
        }
      }, {
        key: "renderWidget",
        value: function renderWidget() {
          var _this$props4 = this.props, config2 = _this$props4.config, isLocked = _this$props4.isLocked;
          var showWidget = this.meta.showWidget;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          if (!showWidget) return null;
          var widget = /* @__PURE__ */ React.createElement(Widget, _extends({
            key: "values"
          }, this._buildWidgetProps(this.props, this.meta), {
            config: config2,
            setValue: !immutableValuesMode ? this.props.setValue : dummyFn,
            setValueSrc: !immutableValuesMode ? this.props.setValueSrc : dummyFn,
            setFuncValue: !immutableValuesMode ? this.props.setFuncValue : dummyFn,
            readonly: immutableValuesMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }));
          return /* @__PURE__ */ React.createElement(Col, {
            key: "widget-for-" + this.props.selectedOperator,
            className: "rule--value"
          }, widget);
        }
      }, {
        key: "renderOperatorOptions",
        value: function renderOperatorOptions() {
          var config2 = this.props.config;
          var showOperatorOptions = this.meta.showOperatorOptions;
          var _config$settings3 = config2.settings, immutableOpsMode = _config$settings3.immutableOpsMode, immutableValuesMode = _config$settings3.immutableValuesMode;
          if (!showOperatorOptions) return null;
          var opOpts = /* @__PURE__ */ React.createElement(OperatorOptions, {
            key: "operatorOptions",
            selectedField: this.props.selectedField,
            selectedOperator: this.props.selectedOperator,
            operatorOptions: this.props.operatorOptions,
            setOperatorOption: !immutableOpsMode ? this.props.setOperatorOption : dummyFn,
            config: config2,
            readonly: immutableValuesMode
          });
          return /* @__PURE__ */ React.createElement(Col, {
            key: "op-options-for-" + this.props.selectedOperator,
            className: "rule--operator-options"
          }, opOpts);
        }
      }, {
        key: "renderBeforeWidget",
        value: function renderBeforeWidget() {
          var BeforeWidget = this.BeforeWidget;
          if (!BeforeWidget) return null;
          return /* @__PURE__ */ React.createElement(Col, {
            key: "before-widget-for-" + this.props.selectedOperator,
            className: "rule--before-widget"
          }, /* @__PURE__ */ React.createElement(BeforeWidget, this.props));
        }
      }, {
        key: "renderAfterWidget",
        value: function renderAfterWidget() {
          var AfterWidget = this.AfterWidget;
          if (!AfterWidget) return null;
          return /* @__PURE__ */ React.createElement(Col, {
            key: "after-widget-for-" + this.props.selectedOperator,
            className: "rule--after-widget"
          }, /* @__PURE__ */ React.createElement(AfterWidget, this.props));
        }
      }, {
        key: "renderError",
        value: function renderError() {
          var _this$props5 = this.props, config2 = _this$props5.config, valueError = _this$props5.valueError, fieldError = _this$props5.fieldError;
          var showErrorMessage = config2.settings.showErrorMessage;
          var RuleError = this.RuleError;
          var oneError = [fieldError].concat(_toConsumableArray((valueError === null || valueError === void 0 ? void 0 : valueError.toArray()) || [])).filter(function(e2) {
            return !!e2;
          }).shift() || null;
          return showErrorMessage && oneError && /* @__PURE__ */ React.createElement("div", {
            className: "rule--error"
          }, RuleError ? /* @__PURE__ */ React.createElement(RuleError, {
            error: oneError
          }) : oneError);
        }
      }, {
        key: "renderDrag",
        value: function renderDrag() {
          var handleDraggerMouseDown = this.props.handleDraggerMouseDown;
          var showDragIcon = this.meta.showDragIcon;
          var Icon = this.Icon;
          var icon = /* @__PURE__ */ React.createElement(Icon, {
            type: "drag"
          });
          return showDragIcon && /* @__PURE__ */ React.createElement("div", {
            key: "rule-drag-icon",
            onMouseDown: handleDraggerMouseDown,
            className: "qb-drag-handler rule--drag-handler"
          }, icon);
        }
      }, {
        key: "renderDel",
        value: function renderDel() {
          var _this$props6 = this.props, config2 = _this$props6.config, isLocked = _this$props6.isLocked;
          var _config$settings4 = config2.settings, deleteLabel = _config$settings4.deleteLabel, immutableGroupsMode = _config$settings4.immutableGroupsMode, canDeleteLocked = _config$settings4.canDeleteLocked;
          var Icon = this.Icon;
          var Btn = this.Btn;
          return !immutableGroupsMode && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ React.createElement(Btn, {
            key: "rule-del",
            type: "delRule",
            onClick: this.removeSelf,
            label: deleteLabel,
            config: config2,
            renderIcon: Icon
          });
        }
      }, {
        key: "renderLock",
        value: function renderLock() {
          var _this$props7 = this.props, config2 = _this$props7.config, isLocked = _this$props7.isLocked, isTrueLocked = _this$props7.isTrueLocked, id2 = _this$props7.id;
          var _config$settings5 = config2.settings, lockLabel = _config$settings5.lockLabel, lockedLabel = _config$settings5.lockedLabel, showLock = _config$settings5.showLock;
          var Switch = this.Switch;
          return showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ React.createElement(Switch, {
            key: "rule-lock",
            type: "lock",
            id: id2,
            value: isLocked,
            setValue: this.setLock,
            label: lockLabel,
            checkedLabel: lockedLabel,
            hideLabel: true,
            config: config2
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$meta2 = this.meta, showOperatorOptions = _this$meta2.showOperatorOptions, selectedFieldWidgetConfig = _this$meta2.selectedFieldWidgetConfig;
          var _this$props8 = this.props, valueSrc = _this$props8.valueSrc, value2 = _this$props8.value, config2 = _this$props8.config;
          var canShrinkValue = (valueSrc === null || valueSrc === void 0 ? void 0 : valueSrc.first()) == "value" && !showOperatorOptions && value2.size == 1 && selectedFieldWidgetConfig.fullWidth;
          var BtnGrp = this.BtnGrp;
          var parts = [this.renderField(), this.renderOperator(), this.renderBeforeWidget(), this.renderWidget(), this.renderAfterWidget(), this.renderOperatorOptions()];
          var body = /* @__PURE__ */ React.createElement("div", {
            key: "rule-body",
            className: classNames("rule--body", canShrinkValue && "can--shrink--value")
          }, parts);
          var error = this.renderError();
          var drag = this.renderDrag();
          var lock = this.renderLock();
          var del = this.renderDel();
          return /* @__PURE__ */ React.createElement(React.Fragment, null, drag, /* @__PURE__ */ React.createElement("div", {
            key: "rule-body-wrapper",
            className: "rule--body--wrapper"
          }, body, error), /* @__PURE__ */ React.createElement("div", {
            key: "rule-header-wrapper",
            className: "rule--header"
          }, /* @__PURE__ */ React.createElement(BtnGrp, {
            key: "rule-header-group",
            config: config2
          }, lock, del)));
        }
      }]);
    }(reactExports.Component);
    Rule.propTypes = {
      id: PropTypes.string.isRequired,
      groupId: PropTypes.string,
      selectedField: PropTypes.any,
      selectedFieldSrc: PropTypes.string,
      selectedFieldType: PropTypes.string,
      selectedOperator: PropTypes.string,
      operatorOptions: PropTypes.object,
      config: PropTypes.object.isRequired,
      value: PropTypes.any,
      //depends on widget
      valueSrc: PropTypes.any,
      valueType: PropTypes.any,
      asyncListValues: PropTypes.array,
      isDraggingMe: PropTypes.bool,
      isDraggingTempo: PropTypes.bool,
      parentField: PropTypes.string,
      //from RuleGroup
      valueError: PropTypes.any,
      fieldError: PropTypes.string,
      isLocked: PropTypes.bool,
      isTrueLocked: PropTypes.bool,
      //path: PropTypes.instanceOf(Immutable.List),
      //actions
      handleDraggerMouseDown: PropTypes.func,
      setField: PropTypes.func,
      setFieldSrc: PropTypes.func,
      setOperator: PropTypes.func,
      setOperatorOption: PropTypes.func,
      setLock: PropTypes.func,
      removeSelf: PropTypes.func,
      setValue: PropTypes.func,
      setValueSrc: PropTypes.func,
      setFuncValue: PropTypes.func,
      reordableNodesCnt: PropTypes.number,
      totalRulesCnt: PropTypes.number,
      parentReordableNodesCnt: PropTypes.number,
      parentFieldCanReorder: PropTypes.bool
    };
    const Rule$1 = RuleContainer(Draggable("rule")(WithConfirmFn(Rule)));
    function baseClamp$1(number, lower, upper) {
      if (number === number) {
        if (upper !== void 0) {
          number = number <= upper ? number : upper;
        }
        if (lower !== void 0) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }
    var _baseClamp = baseClamp$1;
    var toFinite = toFinite_1;
    function toInteger$1(value2) {
      var result = toFinite(value2), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    var toInteger_1 = toInteger$1;
    var baseClamp = _baseClamp, baseToString = _baseToString, toInteger = toInteger_1, toString = toString_1;
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }
    var startsWith_1 = startsWith;
    const startsWith$1 = /* @__PURE__ */ getDefaultExportFromCjs(startsWith_1);
    function _callSuper$d(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$d() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$d() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$d = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var defaultGroupConjunction = Utils$1.DefaultUtils.defaultGroupConjunction;
    var getFieldConfig$4 = Utils$1.ConfigUtils.getFieldConfig;
    var createGroupContainer = function createGroupContainer2(Group2, itemType) {
      var _GroupContainer;
      return _GroupContainer = /* @__PURE__ */ function(_Component) {
        function GroupContainer2(_props) {
          var _this;
          _classCallCheck(this, GroupContainer2);
          _this = _callSuper$d(this, GroupContainer2, [_props]);
          _this._selectedConjunction = function(props) {
            props = props || _this.props;
            return props.conjunction || defaultGroupConjunction(props.config, props.field);
          };
          _this.setConjunction = function() {
            var conj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setConjunction(_this.props.path, conj);
          };
          _this.setNot = function() {
            var not2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setNot(_this.props.path, not2);
          };
          _this.setLock = function() {
            var lock = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setLock(_this.props.path, lock);
          };
          _this.dummyFn = function() {
          };
          _this.removeSelf = function() {
            _this.props.actions.removeGroup(_this.props.path);
          };
          _this.addGroup = function() {
            var parentRuleGroupField = itemType == "rule_group" ? _this.props.field : _this.props.parentField;
            _this.props.actions.addGroup(_this.props.path, void 0, void 0, parentRuleGroupField);
          };
          _this.addCaseGroup = function() {
            _this.props.actions.addCaseGroup(_this.props.path);
          };
          _this.addDefaultCaseGroup = function() {
            _this.props.actions.addDefaultCaseGroup(_this.props.path);
          };
          _this.addRule = function() {
            var parentRuleGroupField = itemType == "rule_group" ? _this.props.field : _this.props.parentField;
            _this.props.actions.addRule(_this.props.path, void 0, void 0, void 0, parentRuleGroupField);
          };
          _this.setField = function(field, asyncListValues, _meta) {
            _this.props.actions.setField(_this.props.path, field, asyncListValues, _meta);
          };
          _this.setOperator = function(operator) {
            _this.props.actions.setOperator(_this.props.path, operator);
          };
          _this.setValue = function(delta, value2, type, asyncListValues, _meta) {
            _this.props.actions.setValue(_this.props.path, delta, value2, type, asyncListValues, _meta);
          };
          _this.setValueSrc = function(delta, srcKey, _meta) {
            _this.props.actions.setValueSrc(_this.props.path, delta, srcKey, _meta);
          };
          _this.setFuncValue = function(delta, parentFuncs, argKey, value2, type, asyncListValues, _meta) {
            _this.props.actions.setFuncValue(_this.props.path, delta, parentFuncs, argKey, value2, type, asyncListValues, _meta);
          };
          _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_this);
          useOnPropsChanged(_this);
          _this.selectedConjunction = _this._selectedConjunction(_props);
          _this.conjunctionOptions = _this._getConjunctionOptions(_props);
          _this.dummyFn.isDummyFn = true;
          return _this;
        }
        _inherits(GroupContainer2, _Component);
        return _createClass(GroupContainer2, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = this.pureShouldComponentUpdate(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var draggingId = nextProps.dragging.id || prevProps.dragging.id;
                var isDraggingMe = draggingId == nextProps.id;
                var chs = [];
                for (var k2 in nextProps) {
                  var changed = nextProps[k2] != prevProps[k2];
                  if (k2 == "dragging" && !isDraggingMe) {
                    changed = false;
                  }
                  if (changed) {
                    chs.push(k2);
                  }
                }
                if (!chs.length) should = false;
              }
            }
            return should;
          }
        }, {
          key: "onPropsChanged",
          value: function onPropsChanged(nextProps) {
            var config2 = nextProps.config;
            nextProps.id;
            var conjunction = nextProps.conjunction;
            var oldConfig = this.props.config;
            var oldConjunction = this.props.conjunction;
            if (oldConfig != config2 || oldConjunction != conjunction) {
              this.selectedConjunction = this._selectedConjunction(nextProps);
              this.conjunctionOptions = this._getConjunctionOptions(nextProps);
            }
          }
        }, {
          key: "_getConjunctionOptions",
          value: function _getConjunctionOptions(props) {
            var _this2 = this;
            return mapValues$1(props.config.conjunctions, function(item, index) {
              return {
                id: "conjunction-".concat(props.id, "-").concat(index),
                name: "conjunction[".concat(props.id, "]"),
                key: index,
                label: item.label,
                checked: index === _this2._selectedConjunction(props)
              };
            });
          }
        }, {
          key: "render",
          value: function render() {
            var showErrorMessage = this.props.config.settings.showErrorMessage;
            var isDraggingMe = this.props.dragging.id == this.props.id;
            var currentNesting = this.props.path.size;
            var maxNesting = this.props.config.settings.maxNesting;
            var isRoot = currentNesting == 1;
            if (this.props.parentField && this.props.parentFieldPathSize) {
              var ruleGroupFieldConfig = getFieldConfig$4(this.props.config, this.props.parentField);
              currentNesting = this.props.path.size - this.props.parentFieldPathSize + 1;
              maxNesting = ruleGroupFieldConfig === null || ruleGroupFieldConfig === void 0 ? void 0 : ruleGroupFieldConfig.maxNesting;
              isRoot = false;
            } else if (this.props.field) {
              var _ruleGroupFieldConfig = getFieldConfig$4(this.props.config, this.props.field);
              currentNesting = 1;
              maxNesting = _ruleGroupFieldConfig === null || _ruleGroupFieldConfig === void 0 ? void 0 : _ruleGroupFieldConfig.maxNesting;
              isRoot = false;
            }
            var isInDraggingTempo = !isDraggingMe && this.props.isDraggingTempo;
            var fieldType = this.props.fieldType || null;
            var valueError = this.props.valueError;
            var oneError = _toConsumableArray((valueError === null || valueError === void 0 ? void 0 : valueError.toArray()) || []).filter(function(e2) {
              return !!e2;
            }).shift() || null;
            var hasError = oneError != null && showErrorMessage;
            var allowFurtherNesting = typeof maxNesting === "undefined" || currentNesting < maxNesting;
            var isMaxNestingExceeded = maxNesting && currentNesting > maxNesting;
            return /* @__PURE__ */ React.createElement("div", {
              className: classNames("group-or-rule-container", "group-container", hasError ? "group-with-error" : null),
              "data-id": this.props.id
            }, [isDraggingMe ? /* @__PURE__ */ React.createElement(Group2, {
              key: "dragging",
              id: this.props.id,
              groupId: this.props.groupId,
              isDraggingMe: true,
              isDraggingTempo: true,
              dragging: this.props.dragging,
              isRoot,
              lev: this.props.path.size - 1,
              allowFurtherNesting,
              isMaxNestingExceeded,
              conjunctionOptions: this.conjunctionOptions,
              not: this.props.not,
              selectedConjunction: this.selectedConjunction,
              setConjunction: this.dummyFn,
              setNot: this.dummyFn,
              setLock: this.dummyFn,
              removeSelf: this.dummyFn,
              addGroup: this.dummyFn,
              addCaseGroup: this.dummyFn,
              addDefaultCaseGroup: this.dummyFn,
              addRule: this.dummyFn,
              setField: this.dummyFn,
              setFuncValue: this.dummyFn,
              setOperator: this.dummyFn,
              setValue: this.dummyFn,
              setValueSrc: this.dummyFn,
              value: this.props.value || null,
              valueError: this.props.valueError || null,
              valueSrc: this.props.valueSrc || null,
              config: this.props.config,
              children1: this.props.children1,
              actions: this.props.actions,
              reordableNodesCnt: this.props.reordableNodesCnt,
              totalRulesCnt: this.props.totalRulesCnt,
              selectedField: this.props.field || null,
              selectedFieldSrc: this.props.fieldSrc || "field",
              selectedFieldType: fieldType,
              parentField: this.props.parentField || null,
              parentFieldPathSize: this.props.parentFieldPathSize,
              parentFieldCanReorder: this.props.parentFieldCanReorder,
              selectedOperator: this.props.operator || null,
              isLocked: this.props.isLocked,
              isTrueLocked: this.props.isTrueLocked,
              parentReordableNodesCnt: this.props.parentReordableNodesCnt
            }) : null, /* @__PURE__ */ React.createElement(Group2, {
              key: this.props.id,
              id: this.props.id,
              groupId: this.props.groupId,
              isDraggingMe,
              isDraggingTempo: isInDraggingTempo,
              onDragStart: this.props.onDragStart,
              isRoot,
              lev: this.props.path.size - 1,
              allowFurtherNesting,
              isMaxNestingExceeded,
              conjunctionOptions: this.conjunctionOptions,
              not: this.props.not,
              selectedConjunction: this.selectedConjunction,
              setConjunction: isInDraggingTempo ? this.dummyFn : this.setConjunction,
              setNot: isInDraggingTempo ? this.dummyFn : this.setNot,
              setLock: isInDraggingTempo ? this.dummyFn : this.setLock,
              removeSelf: isInDraggingTempo ? this.dummyFn : this.removeSelf,
              addGroup: isInDraggingTempo ? this.dummyFn : this.addGroup,
              addCaseGroup: isInDraggingTempo ? this.dummyFn : this.addCaseGroup,
              addDefaultCaseGroup: isInDraggingTempo ? this.dummyFn : this.addDefaultCaseGroup,
              addRule: isInDraggingTempo ? this.dummyFn : this.addRule,
              setField: isInDraggingTempo ? this.dummyFn : this.setField,
              setFuncValue: isInDraggingTempo ? this.dummyFn : this.setFuncValue,
              setOperator: isInDraggingTempo ? this.dummyFn : this.setOperator,
              setValue: isInDraggingTempo ? this.dummyFn : this.setValue,
              setValueSrc: isInDraggingTempo ? this.dummyFn : this.setValueSrc,
              value: this.props.value || null,
              valueError: this.props.valueError || null,
              valueSrc: this.props.valueSrc || null,
              config: this.props.config,
              children1: this.props.children1,
              actions: this.props.actions,
              reordableNodesCnt: this.props.reordableNodesCnt,
              totalRulesCnt: this.props.totalRulesCnt,
              selectedField: this.props.field || null,
              selectedFieldSrc: this.props.fieldSrc || "field",
              selectedFieldType: fieldType,
              parentField: this.props.parentField || null,
              parentFieldPathSize: this.props.parentFieldPathSize,
              parentFieldCanReorder: this.props.parentFieldCanReorder,
              selectedOperator: this.props.operator || null,
              isLocked: this.props.isLocked,
              isTrueLocked: this.props.isTrueLocked,
              parentReordableNodesCnt: this.props.parentReordableNodesCnt
            })]);
          }
        }]);
      }(reactExports.Component), _GroupContainer.propTypes = {
        config: PropTypes.object.isRequired,
        actions: PropTypes.object.isRequired,
        //{setConjunction: Function, removeGroup, addGroup, addRule, ...}
        path: PropTypes.any.isRequired,
        //instanceOf(Immutable.List)
        id: PropTypes.string.isRequired,
        groupId: PropTypes.string,
        not: PropTypes.bool,
        conjunction: PropTypes.string,
        children1: PropTypes.any,
        //instanceOf(Immutable.OrderedMap)
        onDragStart: PropTypes.func,
        reordableNodesCnt: PropTypes.number,
        field: PropTypes.any,
        // for RuleGroup
        fieldSrc: PropTypes.string,
        // for RuleGroup
        fieldType: PropTypes.string,
        // for RuleGroup
        parentField: PropTypes.string,
        //from RuleGroup
        value: PropTypes.any,
        // for RuleGroup, CaseGroup
        valueSrc: PropTypes.any,
        valueError: PropTypes.any,
        isLocked: PropTypes.bool,
        isTrueLocked: PropTypes.bool,
        //connected:
        dragging: PropTypes.object,
        //{id, x, y, w, h}
        isDraggingTempo: PropTypes.bool
      }, _GroupContainer;
    };
    const GroupContainer = function(Group2, itemType) {
      var ConnectedGroupContainer = connect(function(state) {
        return {
          dragging: state.dragging
        };
      }, null, null, {
        context
      })(createGroupContainer(Group2, itemType));
      ConnectedGroupContainer.displayName = "ConnectedGroupContainer";
      return ConnectedGroupContainer;
    };
    function _callSuper$c(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$c() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$c() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$c = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var groupActionsPositionList$1 = {
      topLeft: "group--actions--tl",
      topCenter: "group--actions--tc",
      topRight: "group--actions--tr",
      bottomLeft: "group--actions--bl",
      bottomCenter: "group--actions--bc",
      bottomRight: "group--actions--br"
    };
    var defaultPosition$2 = "topRight";
    var GroupActions = /* @__PURE__ */ function(_PureComponent) {
      function GroupActions2() {
        _classCallCheck(this, GroupActions2);
        return _callSuper$c(this, GroupActions2, arguments);
      }
      _inherits(GroupActions2, _PureComponent);
      return _createClass(GroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, addGroup2 = _this$props.addGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id2 = _this$props.id, parentField = _this$props.parentField, canAddGroup = _this$props.canAddGroup, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addRuleLabel = _config$settings.addRuleLabel, addGroupLabel = _config$settings.addGroupLabel, addSubRuleLabel = _config$settings.addSubRuleLabel, addSubGroupLabel = _config$settings.addSubGroupLabel, delGroupLabel = _config$settings.delGroupLabel, groupActionsPosition = _config$settings.groupActionsPosition, renderButton = _config$settings.renderButton, renderIcon = _config$settings.renderIcon, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var Icon = function Icon2(pr) {
            return renderIcon(pr, config2.ctx);
          };
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch = function Switch2(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var position = groupActionsPositionList$1[groupActionsPosition || defaultPosition$2];
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ React.createElement(Switch, {
            type: "lock",
            id: id2,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          });
          var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ React.createElement(Btn, {
            type: parentField ? "addSubRule" : "addRule",
            onClick: addRule2,
            label: parentField ? addSubRuleLabel : addRuleLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon
          });
          var addGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /* @__PURE__ */ React.createElement(Btn, {
            type: parentField ? "addSubGroup" : "addGroup",
            onClick: addGroup2,
            label: parentField ? addSubGroupLabel : addGroupLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon
          });
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ React.createElement(Btn, {
            type: "delGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2,
            renderIcon: Icon
          });
          return /* @__PURE__ */ React.createElement("div", {
            className: "group--actions ".concat(position)
          }, /* @__PURE__ */ React.createElement(BtnGrp, {
            config: config2
          }, setLockSwitch, addRuleBtn, addGroupBtn, delGroupBtn));
        }
      }]);
    }(reactExports.PureComponent);
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike) {
          if (it) o = it;
          var i = 0;
          var F2 = function F3() {
          };
          return { s: F2, n: function n2() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e2(_e) {
            throw _e;
          }, f: F2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n2() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e2(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f2() {
        try {
          if (!normalCompletion && it["return"] != null) it["return"]();
        } finally {
          if (didErr) throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$8(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$8(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$8(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$8(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$b(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$b() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$b() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$b = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var getFieldConfig$3 = Utils$1.ConfigUtils.getFieldConfig;
    var isEmptyGroupChildren = Utils$1.RuleUtils.isEmptyGroupChildren;
    var _Utils$TreeUtils$2 = Utils$1.TreeUtils;
    _Utils$TreeUtils$2.getTotalReordableNodesCountInTree;
    var getTotalRulesCountInTree$2 = _Utils$TreeUtils$2.getTotalRulesCountInTree;
    var defaultPosition$1 = "topRight";
    var BasicGroup = /* @__PURE__ */ function(_Component) {
      function BasicGroup2(props) {
        var _this;
        _classCallCheck(this, BasicGroup2);
        _this = _callSuper$b(this, BasicGroup2, [props]);
        _this.childrenClassName = function() {
          return "";
        };
        _this.renderBeforeActions = function() {
          var BeforeActions = _this.BeforeActions;
          if (BeforeActions == void 0) return null;
          return /* @__PURE__ */ React.createElement(BeforeActions, _extends({
            key: "group-actions-before"
          }, _this.props));
        };
        _this.renderAfterActions = function() {
          var AfterActions = _this.AfterActions;
          if (AfterActions == void 0) return null;
          return /* @__PURE__ */ React.createElement(AfterActions, _extends({
            key: "group-actions-after"
          }, _this.props));
        };
        useOnPropsChanged(_this);
        _this.onPropsChanged(props);
        _this.removeSelf = _this.removeSelf.bind(_this);
        _this.setLock = _this.setLock.bind(_this);
        _this.renderItem = _this.renderItem.bind(_this);
        return _this;
      }
      _inherits(BasicGroup2, _Component);
      return _createClass(BasicGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var _this2 = this;
          var prevProps = this.props;
          var configChanged = !this.Icon || (prevProps === null || prevProps === void 0 ? void 0 : prevProps.config) !== (nextProps === null || nextProps === void 0 ? void 0 : nextProps.config);
          if (configChanged) {
            var config2 = nextProps.config;
            var _config$settings = config2.settings, renderIcon = _config$settings.renderIcon, renderConjs = _config$settings.renderConjs, renderBeforeActions = _config$settings.renderBeforeActions, renderAfterActions = _config$settings.renderAfterActions;
            this.Icon = getRenderFromConfig(config2, renderIcon);
            this.Conjs = getRenderFromConfig(config2, renderConjs);
            this.BeforeActions = getRenderFromConfig(config2, renderBeforeActions);
            this.AfterActions = getRenderFromConfig(config2, renderAfterActions);
          }
          this.doRemove = function() {
            _this2.props.removeSelf();
          };
        }
      }, {
        key: "isGroupTopPosition",
        value: function isGroupTopPosition() {
          return startsWith$1(this.props.config.settings.groupActionsPosition || defaultPosition$1, "top");
        }
      }, {
        key: "setLock",
        value: function setLock2(lock) {
          this.props.setLock(lock);
        }
      }, {
        key: "removeSelf",
        value: function removeSelf() {
          var _this$props = this.props, confirmFn = _this$props.confirmFn, config2 = _this$props.config;
          var _config$settings2 = config2.settings, renderConfirm = _config$settings2.renderConfirm, confirmOptions = _config$settings2.removeGroupConfirmOptions;
          if (confirmOptions && !this.isEmptyCurrentGroup()) {
            renderConfirm.call(config2.ctx, _objectSpread$8(_objectSpread$8({}, confirmOptions), {}, {
              onOk: this.doRemove,
              onCancel: null,
              confirmFn
            }), config2.ctx);
          } else {
            this.doRemove();
          }
        }
      }, {
        key: "isEmptyCurrentGroup",
        value: function isEmptyCurrentGroup() {
          var _this$props2 = this.props, children1 = _this$props2.children1, config2 = _this$props2.config;
          return isEmptyGroupChildren(children1, config2);
        }
      }, {
        key: "showNot",
        value: function showNot() {
          var _this$props3 = this.props, config2 = _this$props3.config, parentField = _this$props3.parentField;
          var showNot2 = config2.settings.showNot;
          if (parentField) {
            var _ruleGroupFieldConfig;
            var ruleGroupFieldConfig = getFieldConfig$3(config2, parentField);
            showNot2 = showNot2 && ((_ruleGroupFieldConfig = ruleGroupFieldConfig === null || ruleGroupFieldConfig === void 0 ? void 0 : ruleGroupFieldConfig.showNot) !== null && _ruleGroupFieldConfig !== void 0 ? _ruleGroupFieldConfig : true);
          }
          return showNot2;
        }
        // show conjs for 2+ children?
      }, {
        key: "showConjs",
        value: function showConjs() {
          var config2 = this.props.config;
          var forceShowConj = config2.settings.forceShowConj;
          var conjunctionOptions = this.conjunctionOptions();
          var conjunctionCount = Object.keys(conjunctionOptions).length;
          return conjunctionCount > 1 && !this.isOneChild() || this.showNot() || forceShowConj;
        }
      }, {
        key: "isNoChildren",
        value: function isNoChildren() {
          var children1 = this.props.children1;
          return children1 ? children1.size == 0 : true;
        }
      }, {
        key: "isOneChild",
        value: function isOneChild() {
          var children1 = this.props.children1;
          return children1 ? children1.size < 2 : true;
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          var children1 = this.props.children1;
          return children1 && /* @__PURE__ */ React.createElement("div", {
            key: "group-children",
            className: classNames("group--children", !this.showConjs() ? "hide--conjs" : "", this.isOneChild() ? "hide--line" : "", this.isOneChild() ? "one--child" : "", this.childrenClassName())
          }, this.renderChildren());
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          var isGroupTopPosition = this.isGroupTopPosition();
          return /* @__PURE__ */ React.createElement("div", {
            key: "group-header",
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", !this.showConjs() ? "hide--conjs" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "")
          }, this.renderHeader(), isGroupTopPosition && this.renderBeforeActions(), isGroupTopPosition && this.renderActions(), isGroupTopPosition && this.renderAfterActions());
        }
      }, {
        key: "renderFooterWrapper",
        value: function renderFooterWrapper() {
          var isGroupTopPosition = this.isGroupTopPosition();
          return !isGroupTopPosition && /* @__PURE__ */ React.createElement("div", {
            key: "group-footer",
            className: "group--footer"
          }, this.renderBeforeActions(), this.renderActions(), this.renderAfterActions());
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props4 = this.props, config2 = _this$props4.config, addRule2 = _this$props4.addRule, addGroup2 = _this$props4.addGroup, isLocked = _this$props4.isLocked, isTrueLocked = _this$props4.isTrueLocked, id2 = _this$props4.id, parentField = _this$props4.parentField;
          return /* @__PURE__ */ React.createElement(GroupActions, {
            key: "group-actions",
            config: config2,
            addRule: addRule2,
            addGroup: addGroup2,
            canAddGroup: this.canAddGroup(),
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id: id2,
            parentField
          });
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          return this.props.allowFurtherNesting;
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          var _this$props5 = this.props, totalRulesCnt = _this$props5.totalRulesCnt, isMaxNestingExceeded = _this$props5.isMaxNestingExceeded, parentField = _this$props5.parentField;
          var maxNumberOfRules = this.props.config.settings.maxNumberOfRules;
          if (parentField) {
            var ruleGroupFieldConfig = getFieldConfig$3(this.props.config, parentField);
            maxNumberOfRules = ruleGroupFieldConfig.maxNumberOfRules;
          }
          if (isMaxNestingExceeded) {
            return false;
          }
          if (maxNumberOfRules) {
            return totalRulesCnt < maxNumberOfRules;
          }
          return true;
        }
      }, {
        key: "canDeleteGroup",
        value: function canDeleteGroup() {
          return !this.props.isRoot;
        }
      }, {
        key: "renderChildren",
        value: function renderChildren() {
          var children1 = this.props.children1;
          return children1 ? children1.valueSeq().toArray().map(this.renderItem) : null;
        }
      }, {
        key: "renderItem",
        value: function renderItem(item) {
          if (!item) {
            return void 0;
          }
          var props = this.props;
          var config2 = props.config, actions = props.actions, onDragStart = props.onDragStart, isLocked = props.isLocked, parentField = props.parentField, parentFieldPathSize = props.parentFieldPathSize, parentFieldCanReorder = props.parentFieldCanReorder;
          var isRuleGroup = item.get("type") == "group" && item.getIn(["properties", "field"]) != null;
          var type = isRuleGroup ? "rule_group" : item.get("type");
          return /* @__PURE__ */ React.createElement(Item, _extends({
            key: item.get("id"),
            id: item.get("id"),
            groupId: props.id,
            path: item.get("path"),
            type,
            properties: item.get("properties"),
            config: config2,
            actions,
            children1: item.get("children1"),
            parentField,
            parentFieldPathSize,
            parentFieldCanReorder,
            reordableNodesCnt: this.reordableNodesCntForItem(item),
            totalRulesCnt: this.totalRulesCntForItem(item),
            parentReordableNodesCnt: this.reordableNodesCnt(),
            onDragStart,
            isDraggingTempo: this.props.isDraggingTempo,
            isParentLocked: isLocked
          }, this.extraPropsForItem(item)));
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          return {};
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          if (this.props.isLocked) return 0;
          return this.props.reordableNodesCnt;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(item) {
          if (item.get("type") === "rule_group") {
            return getTotalRulesCountInTree$2(item);
          }
          return this.props.totalRulesCnt;
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked) return 0;
          return this.reordableNodesCnt();
        }
      }, {
        key: "showDragIcon",
        value: function showDragIcon() {
          var _this$props6 = this.props, config2 = _this$props6.config, isRoot = _this$props6.isRoot, isLocked = _this$props6.isLocked, parentField = _this$props6.parentField, parentFieldCanReorder = _this$props6.parentFieldCanReorder;
          var reordableNodesCnt = this.reordableNodesCnt();
          var canReorder = config2.settings.canReorder && !isRoot && reordableNodesCnt > 1 && !isLocked;
          if (parentField) {
            canReorder = canReorder && parentFieldCanReorder;
          }
          return canReorder;
        }
      }, {
        key: "renderDrag",
        value: function renderDrag() {
          var handleDraggerMouseDown = this.props.handleDraggerMouseDown;
          var Icon = this.Icon;
          var icon = /* @__PURE__ */ React.createElement(Icon, {
            type: "drag"
          });
          return this.showDragIcon() && /* @__PURE__ */ React.createElement("div", {
            key: "group-drag-icon",
            onMouseDown: handleDraggerMouseDown,
            className: "qb-drag-handler group--drag-handler"
          }, icon);
        }
      }, {
        key: "conjunctionOptions",
        value: function conjunctionOptions() {
          var _this$props7 = this.props, parentField = _this$props7.parentField, conjunctionOptions2 = _this$props7.conjunctionOptions;
          return parentField ? this.conjunctionOptionsForGroupField(parentField) : conjunctionOptions2;
        }
      }, {
        key: "conjunctionOptionsForGroupField",
        value: function conjunctionOptionsForGroupField() {
          var groupField = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
          var _this$props8 = this.props, config2 = _this$props8.config, conjunctionOptions = _this$props8.conjunctionOptions;
          var groupFieldConfig = getFieldConfig$3(config2, groupField);
          if (groupFieldConfig !== null && groupFieldConfig !== void 0 && groupFieldConfig.conjunctions) {
            var filtered = {};
            var _iterator = _createForOfIteratorHelper(groupFieldConfig.conjunctions), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var k2 = _step.value;
                var options = conjunctionOptions[k2];
                if (options) {
                  filtered[k2] = options;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            return filtered;
          }
          return conjunctionOptions;
        }
      }, {
        key: "renderConjs",
        value: function renderConjs() {
          var _this$props9 = this.props, config2 = _this$props9.config, children1 = _this$props9.children1, id2 = _this$props9.id, selectedConjunction = _this$props9.selectedConjunction, setConjunction2 = _this$props9.setConjunction, not2 = _this$props9.not, setNot2 = _this$props9.setNot, isLocked = _this$props9.isLocked;
          var _config$settings3 = config2.settings, immutableGroupsMode = _config$settings3.immutableGroupsMode, notLabel = _config$settings3.notLabel;
          var conjunctionOptions = this.conjunctionOptions();
          if (!this.showConjs()) return null;
          if (!children1 || !children1.size) return null;
          var renderProps = {
            disabled: this.isOneChild(),
            readonly: immutableGroupsMode || isLocked,
            selectedConjunction,
            setConjunction: immutableGroupsMode ? dummyFn : setConjunction2,
            conjunctionOptions,
            config: config2,
            not: not2 || false,
            id: id2,
            setNot: immutableGroupsMode ? dummyFn : setNot2,
            notLabel,
            showNot: this.showNot(),
            isLocked
          };
          var Conjs = this.Conjs;
          return /* @__PURE__ */ React.createElement(Conjs, _extends({
            key: "group-conjs"
          }, renderProps));
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ React.createElement("div", {
            key: "group-conjunctions",
            className: "group--conjunctions"
          }, this.renderConjs(), this.renderDrag());
        }
      }, {
        key: "render",
        value: function render() {
          return /* @__PURE__ */ React.createElement(React.Fragment, null, this.renderHeaderWrapper(), this.renderChildrenWrapper(), this.renderFooterWrapper());
        }
      }]);
    }(reactExports.Component);
    BasicGroup.propTypes = {
      reordableNodesCnt: PropTypes.number,
      conjunctionOptions: PropTypes.object.isRequired,
      allowFurtherNesting: PropTypes.bool.isRequired,
      isMaxNestingExceeded: PropTypes.bool,
      isRoot: PropTypes.bool.isRequired,
      not: PropTypes.bool,
      selectedConjunction: PropTypes.string,
      config: PropTypes.object.isRequired,
      id: PropTypes.string.isRequired,
      groupId: PropTypes.string,
      path: PropTypes.any,
      //instanceOf(Immutable.List)
      children1: PropTypes.any,
      //instanceOf(Immutable.OrderedMap)
      isDraggingMe: PropTypes.bool,
      isDraggingTempo: PropTypes.bool,
      isLocked: PropTypes.bool,
      isTrueLocked: PropTypes.bool,
      parentField: PropTypes.string,
      //from RuleGroup
      //actions
      handleDraggerMouseDown: PropTypes.func,
      onDragStart: PropTypes.func,
      addRule: PropTypes.func.isRequired,
      addGroup: PropTypes.func.isRequired,
      removeSelf: PropTypes.func.isRequired,
      setConjunction: PropTypes.func.isRequired,
      setNot: PropTypes.func.isRequired,
      setLock: PropTypes.func.isRequired,
      actions: PropTypes.object.isRequired
    };
    const Group = GroupContainer(Draggable("group")(WithConfirmFn(BasicGroup)), "group");
    function _superPropBase(object, property2) {
      while (!Object.prototype.hasOwnProperty.call(object, property2)) {
        object = _getPrototypeOf(object);
        if (object === null) break;
      }
      return object;
    }
    function _get() {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get.bind();
      } else {
        _get = function _get2(target, property2, receiver) {
          var base = _superPropBase(target, property2);
          if (!base) return;
          var desc = Object.getOwnPropertyDescriptor(base, property2);
          if (desc.get) {
            return desc.get.call(arguments.length < 3 ? target : receiver);
          }
          return desc.value;
        };
      }
      return _get.apply(this, arguments);
    }
    function _callSuper$a(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$a() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$a() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$a = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var RuleGroupActions = /* @__PURE__ */ function(_PureComponent) {
      function RuleGroupActions2() {
        _classCallCheck(this, RuleGroupActions2);
        return _callSuper$a(this, RuleGroupActions2, arguments);
      }
      _inherits(RuleGroupActions2, _PureComponent);
      return _createClass(RuleGroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id2 = _this$props.id;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addRuleLabel = _config$settings.addRuleLabel, delGroupLabel = _config$settings.delGroupLabel, renderButton = _config$settings.renderButton, renderIcon = _config$settings.renderIcon, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var Icon = function Icon2(pr) {
            return renderIcon(pr, config2.ctx);
          };
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch = function Switch2(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ React.createElement(Switch, {
            type: "lock",
            id: id2,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            hideLabel: true,
            config: config2
          });
          var addSubRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ React.createElement(Btn, {
            type: "addSubRuleSimple",
            onClick: addRule2,
            label: addRuleLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon
          });
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ React.createElement(Btn, {
            type: "delRuleGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2,
            renderIcon: Icon
          });
          return /* @__PURE__ */ React.createElement("div", {
            className: "group--actions"
          }, /* @__PURE__ */ React.createElement(BtnGrp, {
            config: config2
          }, setLockSwitch, addSubRuleBtn, delGroupBtn));
        }
      }]);
    }(reactExports.PureComponent);
    function ownKeys$7(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$7(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$7(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$7(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$9(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$9() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$9() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$9 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var getFieldConfig$2 = Utils$1.ConfigUtils.getFieldConfig;
    var RuleGroup = /* @__PURE__ */ function(_BasicGroup) {
      function RuleGroup2(props) {
        var _this;
        _classCallCheck(this, RuleGroup2);
        _this = _callSuper$9(this, RuleGroup2, [props]);
        _this.childrenClassName = function() {
          return "rule_group--children";
        };
        _this.renderHeaderWrapper = function() {
          return null;
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.renderConjs = function() {
          return null;
        };
        _this.canAddGroup = function() {
          return false;
        };
        _this.canAddRule = function() {
          return true;
        };
        _this.canDeleteGroup = function() {
          return false;
        };
        return _this;
      }
      _inherits(RuleGroup2, _BasicGroup);
      return _createClass(RuleGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          _get(_getPrototypeOf(RuleGroup2.prototype), "onPropsChanged", this).call(this, nextProps);
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked) return 0;
          var children1 = this.props.children1;
          return (children1 === null || children1 === void 0 ? void 0 : children1.size) || 0;
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          return /* @__PURE__ */ React.createElement(React.Fragment, null, this.renderDrag(), this.renderField(), this.renderActions(), _get(_getPrototypeOf(RuleGroup2.prototype), "renderChildrenWrapper", this).call(this));
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField, selectedFieldSrc = _this$props.selectedFieldSrc, selectedFieldType = _this$props.selectedFieldType, setField2 = _this$props.setField, setFuncValue2 = _this$props.setFuncValue, setFieldSrc2 = _this$props.setFieldSrc, parentField = _this$props.parentField, id2 = _this$props.id, groupId = _this$props.groupId, isLocked = _this$props.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ React.createElement(FieldWrapper, {
            key: "field",
            classname: "group--field",
            config: config2,
            canSelectFieldSource: false,
            selectedField,
            selectedFieldSrc,
            selectedFieldType,
            setField: setField2,
            setFuncValue: setFuncValue2,
            setFieldSrc: setFieldSrc2,
            parentField,
            readonly: immutableFieldsMode || isLocked,
            id: id2,
            groupId
          });
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props2 = this.props, config2 = _this$props2.config, addRule2 = _this$props2.addRule, isLocked = _this$props2.isLocked, isTrueLocked = _this$props2.isTrueLocked, id2 = _this$props2.id;
          return /* @__PURE__ */ React.createElement(RuleGroupActions, {
            config: config2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id: id2
          });
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          var _selectedFieldConfig$;
          var _this$props3 = this.props, selectedField = _this$props3.selectedField, lev = _this$props3.lev, config2 = _this$props3.config;
          var selectedFieldConfig = getFieldConfig$2(config2, selectedField);
          return {
            parentField: selectedField,
            parentFieldPathSize: lev + 1,
            parentFieldCanReorder: (_selectedFieldConfig$ = selectedFieldConfig === null || selectedFieldConfig === void 0 ? void 0 : selectedFieldConfig.canReorder) !== null && _selectedFieldConfig$ !== void 0 ? _selectedFieldConfig$ : config2.settings.canReorder
          };
        }
      }]);
    }(BasicGroup);
    RuleGroup.propTypes = _objectSpread$7(_objectSpread$7({}, BasicGroup.propTypes), {}, {
      selectedField: PropTypes.any,
      selectedFieldSrc: PropTypes.string,
      parentField: PropTypes.string,
      setField: PropTypes.func,
      setFieldSrc: PropTypes.func,
      lev: PropTypes.number
      // from GroupContainer
    });
    const RuleGroup$1 = GroupContainer(Draggable("group rule_group")(WithConfirmFn(RuleGroup)), "rule_group");
    function _callSuper$8(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$8() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$8() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$8 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var RuleGroupExtActions = /* @__PURE__ */ function(_PureComponent) {
      function RuleGroupExtActions2() {
        _classCallCheck(this, RuleGroupExtActions2);
        return _callSuper$8(this, RuleGroupExtActions2, arguments);
      }
      _inherits(RuleGroupExtActions2, _PureComponent);
      return _createClass(RuleGroupExtActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, addGroup2 = _this$props.addGroup, canAddRule = _this$props.canAddRule, canAddGroup = _this$props.canAddGroup, canDeleteGroup = _this$props.canDeleteGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id2 = _this$props.id;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addSubRuleLabel = _config$settings.addSubRuleLabel, addSubGroupLabel = _config$settings.addSubGroupLabel, delGroupLabel = _config$settings.delGroupLabel, renderButton = _config$settings.renderButton, renderIcon = _config$settings.renderIcon, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var Icon = function Icon2(pr) {
            return renderIcon(pr, config2.ctx);
          };
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch = function Switch2(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ React.createElement(Switch, {
            type: "lock",
            id: id2,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          });
          var addSubRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ React.createElement(Btn, {
            type: "addSubRule",
            onClick: addRule2,
            label: addSubRuleLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon
          });
          var addSubGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /* @__PURE__ */ React.createElement(Btn, {
            type: "addSubGroup",
            onClick: addGroup2,
            label: addSubGroupLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon
          });
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ React.createElement(Btn, {
            type: "delRuleGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2,
            renderIcon: Icon
          });
          return /* @__PURE__ */ React.createElement("div", {
            className: "group--actions group--actions--tr"
          }, /* @__PURE__ */ React.createElement(BtnGrp, {
            config: config2
          }, setLockSwitch, addSubRuleBtn, addSubGroupBtn, delGroupBtn));
        }
      }]);
    }(reactExports.PureComponent);
    function ownKeys$6(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$6(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$6(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$6(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$7(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$7() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$7() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$7 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var _Utils$ConfigUtils$1 = Utils$1.ConfigUtils, getFieldConfig$1 = _Utils$ConfigUtils$1.getFieldConfig, getFieldWidgetConfig = _Utils$ConfigUtils$1.getFieldWidgetConfig;
    var isEmptyRuleGroupExtPropertiesAndChildren = Utils$1.RuleUtils.isEmptyRuleGroupExtPropertiesAndChildren;
    var getTotalReordableNodesCountInTree$2 = Utils$1.TreeUtils.getTotalReordableNodesCountInTree;
    var RuleGroupExt = /* @__PURE__ */ function(_BasicGroup) {
      function RuleGroupExt2(props) {
        var _this;
        _classCallCheck(this, RuleGroupExt2);
        _this = _callSuper$7(this, RuleGroupExt2, [props]);
        _this.childrenClassName = function() {
          return "rule_group_ext--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.canDeleteGroup = function() {
          return true;
        };
        return _this;
      }
      _inherits(RuleGroupExt2, _BasicGroup);
      return _createClass(RuleGroupExt2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          _get(_getPrototypeOf(RuleGroupExt2.prototype), "onPropsChanged", this).call(this, nextProps);
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          return this.props.allowFurtherNesting;
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField;
          var selectedFieldConfig = getFieldConfig$1(config2, selectedField);
          var maxNumberOfRules = selectedFieldConfig.maxNumberOfRules;
          var totalRulesCnt = this.props.totalRulesCnt;
          if (maxNumberOfRules) {
            return totalRulesCnt < maxNumberOfRules;
          }
          return true;
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ React.createElement("div", {
            key: "group-header",
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "", this.showDragIcon() ? "with--drag" : "hide--drag", this.showConjs() ? "with--conjs" : "hide--conjs")
          }, this.renderHeader(), this.renderGroupField(), this.renderActions());
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ React.createElement("div", {
            className: "group--conjunctions"
          }, this.renderConjs(), this.renderDrag());
        }
      }, {
        key: "renderGroupField",
        value: function renderGroupField() {
          return /* @__PURE__ */ React.createElement("div", {
            className: "group--field--count--rule"
          }, this.renderField(), this.renderOperator(), this.renderWidget(), this.renderError());
        }
      }, {
        key: "renderError",
        value: function renderError() {
          var _this$props2 = this.props, config2 = _this$props2.config, valueError = _this$props2.valueError;
          var _config$settings = config2.settings, renderRuleError = _config$settings.renderRuleError, showErrorMessage = _config$settings.showErrorMessage;
          var oneError = _toConsumableArray((valueError === null || valueError === void 0 ? void 0 : valueError.toArray()) || []).filter(function(e2) {
            return !!e2;
          }).shift() || null;
          return showErrorMessage && oneError && /* @__PURE__ */ React.createElement("div", {
            className: "rule_group--error"
          }, renderRuleError ? renderRuleError({
            error: oneError
          }, config2.ctx) : oneError);
        }
      }, {
        key: "showNot",
        value: function showNot() {
          var _selectedFieldConfig$;
          var _this$props3 = this.props, config2 = _this$props3.config, selectedField = _this$props3.selectedField;
          var selectedFieldConfig = getFieldConfig$1(config2, selectedField);
          return (_selectedFieldConfig$ = selectedFieldConfig === null || selectedFieldConfig === void 0 ? void 0 : selectedFieldConfig.showNot) !== null && _selectedFieldConfig$ !== void 0 ? _selectedFieldConfig$ : config2.settings.showNot;
        }
      }, {
        key: "conjunctionOptions",
        value: function conjunctionOptions() {
          var selectedField = this.props.selectedField;
          return this.conjunctionOptionsForGroupField(selectedField);
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props4 = this.props, config2 = _this$props4.config, selectedField = _this$props4.selectedField, selectedFieldSrc = _this$props4.selectedFieldSrc, selectedFieldType = _this$props4.selectedFieldType, setField2 = _this$props4.setField, setFieldSrc2 = _this$props4.setFieldSrc, setFuncValue2 = _this$props4.setFuncValue, parentField = _this$props4.parentField, id2 = _this$props4.id, groupId = _this$props4.groupId, isLocked = _this$props4.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ React.createElement(FieldWrapper, {
            key: "field",
            classname: "rule--field",
            config: config2,
            canSelectFieldSource: false,
            selectedField,
            selectedFieldSrc,
            selectedFieldType,
            setField: setField2,
            setFuncValue: setFuncValue2,
            setFieldSrc: setFieldSrc2,
            parentField,
            readonly: immutableFieldsMode || isLocked,
            id: id2,
            groupId
          });
        }
      }, {
        key: "renderOperator",
        value: function renderOperator() {
          var _this$props5 = this.props, config2 = _this$props5.config, selectedField = _this$props5.selectedField, selectedFieldSrc = _this$props5.selectedFieldSrc, selectedOperator = _this$props5.selectedOperator;
          _this$props5.setField;
          var setOperator2 = _this$props5.setOperator, isLocked = _this$props5.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          var selectedFieldWidgetConfig = getFieldWidgetConfig(config2, selectedField, selectedOperator) || {};
          var hideOperator = selectedFieldWidgetConfig.hideOperator;
          var showOperatorLabel = selectedField && hideOperator && selectedFieldWidgetConfig.operatorInlineLabel;
          var showOperator = selectedField && !hideOperator;
          return /* @__PURE__ */ React.createElement(OperatorWrapper, {
            key: "operator",
            classname: "group--operator",
            config: config2,
            selectedField,
            selectedFieldSrc,
            selectedOperator,
            setOperator: setOperator2,
            showOperator,
            showOperatorLabel,
            selectedFieldWidgetConfig,
            readonly: immutableFieldsMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          });
        }
      }, {
        key: "isEmptyCurrentGroup",
        value: function isEmptyCurrentGroup() {
          var _this$props6 = this.props, children1 = _this$props6.children1, config2 = _this$props6.config;
          var ruleData = this._buildWidgetProps(this.props);
          return isEmptyRuleGroupExtPropertiesAndChildren(ruleData, children1, config2);
        }
      }, {
        key: "_buildWidgetProps",
        value: function _buildWidgetProps(_ref) {
          var selectedField = _ref.selectedField, selectedFieldSrc = _ref.selectedFieldSrc, selectedFieldType = _ref.selectedFieldType, selectedOperator = _ref.selectedOperator, operatorOptions = _ref.operatorOptions, value2 = _ref.value, valueType = _ref.valueType;
          _ref.valueSrc;
          _ref.asyncListValues;
          var valueError = _ref.valueError;
          _ref.fieldError;
          var parentField = _ref.parentField;
          return {
            field: selectedField,
            fieldSrc: selectedFieldSrc,
            fieldType: selectedFieldType,
            operator: selectedOperator,
            operatorOptions,
            value: value2,
            valueType,
            // new Immutable.List(["number"])
            // todo: aggregation can be not only number?
            valueSrc: ["value"],
            //new Immutable.List(["value"]), // should be fixed in isEmptyRuleGroupExtPropertiesAndChildren
            //asyncListValues,
            valueError,
            fieldError: null,
            parentField
          };
        }
      }, {
        key: "renderWidget",
        value: function renderWidget() {
          var _this$props7 = this.props, config2 = _this$props7.config, selectedField = _this$props7.selectedField, selectedOperator = _this$props7.selectedOperator, isLocked = _this$props7.isLocked;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          var isFieldAndOpSelected = selectedField && selectedOperator;
          var showWidget = isFieldAndOpSelected;
          if (!showWidget) return null;
          var widget = /* @__PURE__ */ React.createElement(Widget, _extends({
            key: "values",
            isForRuleGroup: true
          }, this._buildWidgetProps(this.props), {
            config: config2,
            setValue: !immutableValuesMode ? this.props.setValue : dummyFn,
            setValueSrc: dummyFn,
            readonly: immutableValuesMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }));
          return /* @__PURE__ */ React.createElement(Col, {
            key: "widget-for-" + this.props.selectedOperator,
            className: "rule--value"
          }, widget);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props8 = this.props, config2 = _this$props8.config, addRule2 = _this$props8.addRule, addGroup2 = _this$props8.addGroup, isLocked = _this$props8.isLocked, isTrueLocked = _this$props8.isTrueLocked, id2 = _this$props8.id;
          return /* @__PURE__ */ React.createElement(RuleGroupExtActions, {
            config: config2,
            addRule: addRule2,
            addGroup: addGroup2,
            canAddRule: this.canAddRule(),
            canAddGroup: this.canAddGroup(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id: id2
          });
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked) return 0;
          var _this$props9 = this.props, children1 = _this$props9.children1, id2 = _this$props9.id;
          return getTotalReordableNodesCountInTree$2({
            id: id2,
            type: "rule_group",
            children1
          });
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          var _selectedFieldConfig$2;
          var _this$props10 = this.props, selectedField = _this$props10.selectedField, lev = _this$props10.lev, config2 = _this$props10.config;
          var selectedFieldConfig = getFieldConfig$1(config2, selectedField);
          return {
            parentField: selectedField,
            parentFieldPathSize: lev + 1,
            parentFieldCanReorder: (_selectedFieldConfig$2 = selectedFieldConfig === null || selectedFieldConfig === void 0 ? void 0 : selectedFieldConfig.canReorder) !== null && _selectedFieldConfig$2 !== void 0 ? _selectedFieldConfig$2 : config2.settings.canReorder
          };
        }
      }]);
    }(BasicGroup);
    RuleGroupExt.propTypes = _objectSpread$6(_objectSpread$6({}, BasicGroup.propTypes), {}, {
      selectedField: PropTypes.any,
      selectedFieldSrc: PropTypes.string,
      selectedOperator: PropTypes.string,
      value: PropTypes.any,
      parentField: PropTypes.string,
      setField: PropTypes.func,
      setFieldSrc: PropTypes.func,
      setOperator: PropTypes.func,
      setValue: PropTypes.func,
      valueError: PropTypes.any,
      lev: PropTypes.number
      // from GroupContainer
    });
    const RuleGroupExt$1 = GroupContainer(Draggable("group rule_group_ext")(WithConfirmFn(RuleGroupExt)), "rule_group");
    function _callSuper$6(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$6() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$6() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$6 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var groupActionsPositionList = {
      topLeft: "group--actions--tl",
      topCenter: "group--actions--tc",
      topRight: "group--actions--tr",
      bottomLeft: "group--actions--bl",
      bottomCenter: "group--actions--bc",
      bottomRight: "group--actions--br"
    };
    var defaultPosition = "topRight";
    var SwitchGroupActions = /* @__PURE__ */ function(_PureComponent) {
      function SwitchGroupActions2() {
        _classCallCheck(this, SwitchGroupActions2);
        return _callSuper$6(this, SwitchGroupActions2, arguments);
      }
      _inherits(SwitchGroupActions2, _PureComponent);
      return _createClass(SwitchGroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addCaseGroup2 = _this$props.addCaseGroup, addDefaultCaseGroup2 = _this$props.addDefaultCaseGroup, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id2 = _this$props.id, canAddGroup = _this$props.canAddGroup, canAddDefault = _this$props.canAddDefault;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addCaseLabel = _config$settings.addCaseLabel, addDefaultCaseLabel = _config$settings.addDefaultCaseLabel, groupActionsPosition = _config$settings.groupActionsPosition, renderButton = _config$settings.renderButton, renderIcon = _config$settings.renderIcon, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock;
          var Icon = function Icon2(pr) {
            return renderIcon(pr, config2.ctx);
          };
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch = function Switch2(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var position = groupActionsPositionList[groupActionsPosition || defaultPosition];
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ React.createElement(Switch, {
            type: "lock",
            id: id2,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          });
          var addCaseGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /* @__PURE__ */ React.createElement(Btn, {
            type: "addCaseGroup",
            onClick: addCaseGroup2,
            label: addCaseLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon
          });
          var addDefaultCaseGroupBtn = !immutableGroupsMode && canAddDefault && !isLocked && /* @__PURE__ */ React.createElement(Btn, {
            type: "addDefaultCaseGroup",
            onClick: addDefaultCaseGroup2,
            label: addDefaultCaseLabel,
            readonly: isLocked,
            config: config2,
            renderIcon: Icon
          });
          return /* @__PURE__ */ React.createElement("div", {
            className: "group--actions ".concat(position)
          }, /* @__PURE__ */ React.createElement(BtnGrp, {
            config: config2
          }, setLockSwitch, addCaseGroupBtn, addDefaultCaseGroupBtn));
        }
      }]);
    }(reactExports.PureComponent);
    function ownKeys$5(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$5(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$5(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$5(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$5(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$5() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$5() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$5 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var _Utils$TreeUtils$1 = Utils$1.TreeUtils, getTotalReordableNodesCountInTree$1 = _Utils$TreeUtils$1.getTotalReordableNodesCountInTree, getTotalRulesCountInTree$1 = _Utils$TreeUtils$1.getTotalRulesCountInTree;
    var SwitchGroup = /* @__PURE__ */ function(_BasicGroup) {
      function SwitchGroup2(props) {
        var _this;
        _classCallCheck(this, SwitchGroup2);
        _this = _callSuper$5(this, SwitchGroup2, [props]);
        _this.childrenClassName = function() {
          return "switch_group--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.hasDefaultCase = function() {
          var _this$props$children;
          return ((_this$props$children = _this.props.children1) === null || _this$props$children === void 0 ? void 0 : _this$props$children.size) && _this.props.children1.filter(function(c2) {
            return c2.get("children1") == null;
          }).size > 0;
        };
        return _this;
      }
      _inherits(SwitchGroup2, _BasicGroup);
      return _createClass(SwitchGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          _get(_getPrototypeOf(SwitchGroup2.prototype), "onPropsChanged", this).call(this, nextProps);
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          var _this$props$children2;
          var maxNumberOfCases = this.props.config.settings.maxNumberOfCases;
          var totalCasesCnt = ((_this$props$children2 = this.props.children1) === null || _this$props$children2 === void 0 ? void 0 : _this$props$children2.size) || 0;
          if (maxNumberOfCases) {
            return totalCasesCnt < maxNumberOfCases;
          }
          return true;
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          return false;
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          var _this$props$children3;
          var totalCasesCnt = ((_this$props$children3 = this.props.children1) === null || _this$props$children3 === void 0 ? void 0 : _this$props$children3.size) || 0;
          var casesToReorder = totalCasesCnt;
          if (this.hasDefaultCase()) {
            casesToReorder--;
          }
          return casesToReorder;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(item) {
          return getTotalRulesCountInTree$1(item);
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(item) {
          var _this$props$children4;
          if (this.props.isLocked) return 0;
          var _this$props$config$se = this.props.config.settings, canLeaveEmptyCase = _this$props$config$se.canLeaveEmptyCase, canRegroupCases = _this$props$config$se.canRegroupCases;
          var totalCasesCnt = ((_this$props$children4 = this.props.children1) === null || _this$props$children4 === void 0 ? void 0 : _this$props$children4.size) || 0;
          var casesToReorder = totalCasesCnt;
          if (this.hasDefaultCase()) {
            casesToReorder--;
          }
          var nodesInCase = getTotalReordableNodesCountInTree$1(item);
          var cnt = nodesInCase;
          if (cnt == 1 && canRegroupCases && canLeaveEmptyCase && casesToReorder > 1) cnt = 111;
          return cnt;
        }
      }, {
        key: "showConjs",
        value: function showConjs() {
          return true;
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ React.createElement("div", {
            key: "group-header",
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "", this.showDragIcon() ? "with--drag" : "hide--drag", this.showConjs() ? "with--conjs" : "hide--conjs")
          }, this.renderHeader(), this.renderActions());
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ React.createElement("div", {
            className: "group--conjunctions"
          }, this.renderConjs(), this.renderDrag());
        }
      }, {
        key: "renderConjs",
        value: function renderConjs() {
          var config2 = this.props.config;
          var renderSwitchPrefix = config2.settings.renderSwitchPrefix;
          return renderSwitchPrefix || null;
        }
      }, {
        key: "showNot",
        value: function showNot() {
          return false;
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props = this.props, config2 = _this$props.config, addCaseGroup2 = _this$props.addCaseGroup, addDefaultCaseGroup2 = _this$props.addDefaultCaseGroup, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id2 = _this$props.id;
          return /* @__PURE__ */ React.createElement(SwitchGroupActions, {
            config: config2,
            addCaseGroup: addCaseGroup2,
            addDefaultCaseGroup: addDefaultCaseGroup2,
            canAddDefault: !this.hasDefaultCase(),
            canAddGroup: this.canAddGroup(),
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id: id2
          });
        }
      }]);
    }(BasicGroup);
    SwitchGroup.propTypes = _objectSpread$5({}, BasicGroup.propTypes);
    const SwitchGroup$1 = GroupContainer(Draggable("group switch_group")(WithConfirmFn(SwitchGroup)), "switch_group");
    function ownKeys$4(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$4(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$4(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$4(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$4(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$4() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$4() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$4 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var CaseGroup = /* @__PURE__ */ function(_BasicGroup) {
      function CaseGroup2(props) {
        var _this;
        _classCallCheck(this, CaseGroup2);
        _this = _callSuper$4(this, CaseGroup2, [props]);
        _this.childrenClassName = function() {
          return "case_group--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        return _this;
      }
      _inherits(CaseGroup2, _BasicGroup);
      return _createClass(CaseGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var configChanged = !this.renderBeforeCaseValue || (prevProps === null || prevProps === void 0 ? void 0 : prevProps.config) !== (nextProps === null || nextProps === void 0 ? void 0 : nextProps.config);
          _get(_getPrototypeOf(CaseGroup2.prototype), "onPropsChanged", this).call(this, nextProps);
          if (configChanged) {
            var config2 = nextProps.config;
            var _config$settings = config2.settings, renderBeforeCaseValue = _config$settings.renderBeforeCaseValue, renderAfterCaseValue = _config$settings.renderAfterCaseValue, renderRuleError = _config$settings.renderRuleError;
            this.BeforeCaseValue = getRenderFromConfig(config2, renderBeforeCaseValue);
            this.AfterCaseValue = getRenderFromConfig(config2, renderAfterCaseValue);
            this.RuleError = getRenderFromConfig(config2, renderRuleError);
          }
        }
      }, {
        key: "isDefaultCase",
        value: function isDefaultCase() {
          return this.props.children1 == void 0;
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          return this.props.parentReordableNodesCnt;
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked) return 0;
          return this.props.reordableNodesCnt;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(_item) {
          return this.props.totalRulesCnt;
        }
      }, {
        key: "showDragIcon",
        value: function showDragIcon() {
          if (this.isDefaultCase()) return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "showDragIcon", this).call(this);
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ React.createElement("div", {
            key: "group-header",
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "", this.showDragIcon() ? "with--drag" : "hide--drag", this.showConjs() && (!this.isOneChild() || this.showNot()) ? "with--conjs" : "hide--conjs")
          }, this.renderHeaderLeft(), this.renderHeaderCenter(), this.renderActions());
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          if (this.isDefaultCase()) return null;
          return /* @__PURE__ */ React.createElement("div", {
            className: "case_group--body"
          }, this.renderCondition(), this.renderBeforeValue(), this.renderValue(), this.renderAfterValue());
        }
      }, {
        key: "renderHeaderLeft",
        value: function renderHeaderLeft() {
          if (this.isDefaultCase()) {
            var defaultCaseLabel = this.props.config.settings.defaultCaseLabel;
            return defaultCaseLabel || "";
          }
          return /* @__PURE__ */ React.createElement("div", {
            className: "group--conjunctions"
          }, this.renderConjs(), this.renderDrag(), this.renderError());
        }
      }, {
        key: "renderCondition",
        value: function renderCondition() {
          if (this.isDefaultCase()) return null;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "renderChildrenWrapper", this).call(this);
        }
      }, {
        key: "renderHeaderCenter",
        value: function renderHeaderCenter() {
          if (this.isDefaultCase()) {
            return /* @__PURE__ */ React.createElement("div", null, this.renderValue(), this.renderError());
          }
          return null;
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          if (this.isDefaultCase()) return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "canAddGroup", this).call(this);
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          if (this.isDefaultCase()) return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "canAddRule", this).call(this);
        }
      }, {
        key: "renderBeforeValue",
        value: function renderBeforeValue() {
          var BeforeCaseValue = this.BeforeCaseValue;
          if (BeforeCaseValue == void 0) return null;
          return /* @__PURE__ */ React.createElement(BeforeCaseValue, _extends({
            key: "values-before"
          }, this.props));
        }
      }, {
        key: "renderAfterValue",
        value: function renderAfterValue() {
          var AfterCaseValue = this.AfterCaseValue;
          if (AfterCaseValue == void 0) return null;
          return /* @__PURE__ */ React.createElement(AfterCaseValue, _extends({
            key: "values-after"
          }, this.props));
        }
      }, {
        key: "renderError",
        value: function renderError() {
          var _this$props = this.props, config2 = _this$props.config, valueError = _this$props.valueError;
          var showErrorMessage = config2.settings.showErrorMessage;
          var RuleError = this.RuleError;
          var oneError = _toConsumableArray((valueError === null || valueError === void 0 ? void 0 : valueError.toArray()) || []).filter(function(e2) {
            return !!e2;
          }).shift() || null;
          return showErrorMessage && oneError && /* @__PURE__ */ React.createElement("div", {
            className: "rule--error"
          }, RuleError ? /* @__PURE__ */ React.createElement(RuleError, {
            error: oneError
          }) : oneError);
        }
      }, {
        key: "renderValue",
        value: function renderValue() {
          var _this$props2 = this.props, config2 = _this$props2.config, isLocked = _this$props2.isLocked, value2 = _this$props2.value, valueSrc = _this$props2.valueSrc, valueError = _this$props2.valueError, setValue2 = _this$props2.setValue, setValueSrc2 = _this$props2.setValueSrc, setFuncValue2 = _this$props2.setFuncValue, id2 = _this$props2.id;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          var widget = /* @__PURE__ */ React.createElement(Widget, {
            key: "values",
            isCaseValue: true,
            field: "!case_value",
            operator: null,
            value: value2,
            valueSrc: valueSrc !== null && valueSrc !== void 0 ? valueSrc : "value",
            valueError,
            fieldError: null,
            config: config2,
            setValue: !immutableValuesMode ? setValue2 : dummyFn,
            setValueSrc: !immutableValuesMode ? setValueSrc2 : dummyFn,
            setFuncValue: !immutableValuesMode ? setFuncValue2 : dummyFn,
            readonly: immutableValuesMode || isLocked,
            id: id2,
            groupId: null
          });
          return /* @__PURE__ */ React.createElement(Col, {
            className: "case_group--value"
          }, widget);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props3 = this.props, config2 = _this$props3.config, addGroup2 = _this$props3.addGroup, addRule2 = _this$props3.addRule, isLocked = _this$props3.isLocked, isTrueLocked = _this$props3.isTrueLocked, id2 = _this$props3.id;
          return /* @__PURE__ */ React.createElement(GroupActions, {
            config: config2,
            addGroup: addGroup2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canAddGroup: this.canAddGroup(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id: id2
          });
        }
      }, {
        key: "isEmptyCurrentGroup",
        value: function isEmptyCurrentGroup() {
          var value2 = this.props.value;
          var oneValue = value2 && value2.size ? value2.get(0) : null;
          var hasValue = oneValue != null && (Array.isArray(oneValue) ? oneValue.length > 0 : true);
          return _get(_getPrototypeOf(CaseGroup2.prototype), "isEmptyCurrentGroup", this).call(this) && !hasValue;
        }
      }]);
    }(BasicGroup);
    CaseGroup.propTypes = _objectSpread$4(_objectSpread$4({}, BasicGroup.propTypes), {}, {
      parentReordableNodesCnt: PropTypes.number,
      value: PropTypes.any,
      setValue: PropTypes.func
    });
    const CaseGroup$1 = GroupContainer(Draggable("group case_group")(WithConfirmFn(CaseGroup)), "case_group");
    var _excluded = ["type"];
    function _callSuper$3(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$3() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$3() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$3 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    function ownKeys$3(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$3(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$3(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$3(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var types$2 = ["rule", "group", "rule_group", "switch_group", "case_group"];
    var getProperties = function getProperties2(props) {
      var _props$properties;
      var properties = ((_props$properties = props.properties) === null || _props$properties === void 0 ? void 0 : _props$properties.toObject()) || {};
      var result = _objectSpread$3({}, properties);
      if (props.isParentLocked) {
        result.isLocked = true;
      }
      if (properties.isLocked) {
        result.isTrueLocked = true;
      }
      return result;
    };
    var typeMap = {
      rule: function rule2(props) {
        return /* @__PURE__ */ React.createElement(Rule$1, _extends({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          config: props.config,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          parentField: props.parentField,
          parentFieldPathSize: props.parentFieldPathSize,
          parentReordableNodesCnt: props.parentReordableNodesCnt,
          parentFieldCanReorder: props.parentFieldCanReorder
        }));
      },
      group: function group2(props) {
        return /* @__PURE__ */ React.createElement(Group, _extends({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: props.parentField,
          parentFieldPathSize: props.parentFieldPathSize,
          parentReordableNodesCnt: props.parentReordableNodesCnt,
          parentFieldCanReorder: props.parentFieldCanReorder
        }));
      },
      rule_group: function rule_group(props) {
        return /* @__PURE__ */ React.createElement(RuleGroup$1, _extends({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: props.parentField,
          parentFieldPathSize: props.parentFieldPathSize,
          parentReordableNodesCnt: props.parentReordableNodesCnt,
          parentFieldCanReorder: props.parentFieldCanReorder
        }));
      },
      rule_group_ext: function rule_group_ext(props) {
        return /* @__PURE__ */ React.createElement(RuleGroupExt$1, _extends({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: props.parentField,
          parentFieldPathSize: props.parentFieldPathSize,
          parentReordableNodesCnt: props.parentReordableNodesCnt,
          parentFieldCanReorder: props.parentFieldCanReorder
        }));
      },
      switch_group: function switch_group(props) {
        return /* @__PURE__ */ React.createElement(SwitchGroup$1, _extends({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }));
      },
      case_group: function case_group(props) {
        return /* @__PURE__ */ React.createElement(CaseGroup$1, _extends({}, getProperties(props), {
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }));
      }
    };
    var Item = /* @__PURE__ */ function(_PureComponent) {
      function Item2() {
        _classCallCheck(this, Item2);
        return _callSuper$3(this, Item2, arguments);
      }
      _inherits(Item2, _PureComponent);
      return _createClass(Item2, [{
        key: "render",
        value: function render() {
          var _props$properties2;
          var _this$props = this.props, type = _this$props.type, props = _objectWithoutProperties(_this$props, _excluded);
          var mode = (_props$properties2 = props.properties) === null || _props$properties2 === void 0 ? void 0 : _props$properties2.get("mode");
          var postfix = mode == "array" ? "_ext" : "";
          var renderItem = props.config.settings.renderItem;
          var Cmp = typeMap[type + postfix];
          if (renderItem) {
            return renderItem(_objectSpread$3(_objectSpread$3({}, props), {}, {
              type,
              itemComponent: Cmp
            }), props.config.ctx);
          }
          if (!Cmp) return null;
          return Cmp(props);
        }
      }]);
    }(reactExports.PureComponent);
    Item.propTypes = {
      config: PropTypes.object.isRequired,
      id: PropTypes.string.isRequired,
      groupId: PropTypes.string,
      type: PropTypes.oneOf(types$2).isRequired,
      path: PropTypes.any.isRequired,
      //instanceOf(Immutable.List)
      properties: PropTypes.any,
      //instanceOf(Immutable.Map)
      children1: PropTypes.any,
      //instanceOf(Immutable.OrderedMap)
      actions: PropTypes.object.isRequired,
      reordableNodesCnt: PropTypes.number,
      onDragStart: PropTypes.func,
      parentField: PropTypes.string,
      //from RuleGroup
      isDraggingTempo: PropTypes.bool,
      isParentLocked: PropTypes.bool
    };
    function _callSuper$2(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$2() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$2() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var _Utils$TreeUtils = Utils$1.TreeUtils, getTotalReordableNodesCountInTree = _Utils$TreeUtils.getTotalReordableNodesCountInTree, getTotalRulesCountInTree = _Utils$TreeUtils.getTotalRulesCountInTree;
    var _Utils$DefaultUtils = Utils$1.DefaultUtils, createListWithOneElement = _Utils$DefaultUtils.createListWithOneElement, emptyProperties = _Utils$DefaultUtils.emptyProperties;
    var Builder = /* @__PURE__ */ function(_Component) {
      function Builder2(props) {
        var _this;
        _classCallCheck(this, Builder2);
        _this = _callSuper$2(this, Builder2, [props]);
        _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_this);
        _this._updPath(props);
        return _this;
      }
      _inherits(Builder2, _Component);
      return _createClass(Builder2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          var should = this.pureShouldComponentUpdate(nextProps, nextState);
          return should;
        }
      }, {
        key: "_updPath",
        value: function _updPath(props) {
          var id2 = props.tree.get("id");
          this.path = createListWithOneElement(id2);
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, tree2 = _this$props.tree, config2 = _this$props.config, actions = _this$props.actions, onDragStart = _this$props.onDragStart;
          var rootType = tree2.get("type");
          var isTernary = rootType == "switch_group";
          var reordableNodesCnt = isTernary ? null : getTotalReordableNodesCountInTree(tree2);
          var totalRulesCnt = isTernary ? null : getTotalRulesCountInTree(tree2);
          var id2 = tree2.get("id");
          return /* @__PURE__ */ React.createElement(Item, {
            key: id2,
            id: id2,
            path: this.path,
            type: rootType,
            properties: tree2.get("properties") || emptyProperties(),
            config: config2,
            actions,
            children1: tree2.get("children1") || emptyProperties(),
            reordableNodesCnt,
            totalRulesCnt,
            parentReordableNodesCnt: 0,
            onDragStart
          });
        }
      }]);
    }(reactExports.Component);
    Builder.propTypes = {
      tree: PropTypes.any.isRequired,
      //instanceOf(Immutable.Map)
      config: PropTypes.object.isRequired,
      actions: PropTypes.object.isRequired,
      onDragStart: PropTypes.func
    };
    const Builder$1 = SortableContainer(Builder);
    function ownKeys$2(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$2(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$2(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$2(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    function _callSuper$1(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct$1() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct$1() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var clone = Utils$1.clone;
    var _Utils$ConfigUtils = Utils$1.ConfigUtils, getFieldConfig = _Utils$ConfigUtils.getFieldConfig, getFieldParts = _Utils$ConfigUtils.getFieldParts, getFieldPathParts = _Utils$ConfigUtils.getFieldPathParts;
    var _Utils$RuleUtils = Utils$1.RuleUtils, getFieldPathLabels = _Utils$RuleUtils.getFieldPathLabels, getWidgetForFieldOp = _Utils$RuleUtils.getWidgetForFieldOp;
    var ValueField = /* @__PURE__ */ function(_Component) {
      function ValueField2(props) {
        var _this;
        _classCallCheck(this, ValueField2);
        _this = _callSuper$1(this, ValueField2, [props]);
        useOnPropsChanged(_this);
        _this.onPropsChanged(props);
        return _this;
      }
      _inherits(ValueField2, _Component);
      return _createClass(ValueField2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForItems = ["config", "field", "fieldSrc", "fieldType", "operator", "isFuncArg", "parentField"];
          var keysForMeta = ["config", "field", "fieldSrc", "fieldType", "operator", "value", "placeholder", "isFuncArg", "parentField"];
          var needUpdateItems = !this.items || keysForItems.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k2) {
            return nextProps[k2] !== prevProps[k2];
          }).filter(function(ch2) {
            return ch2;
          }).length > 0;
          if (needUpdateItems) {
            this.items = this.getItems(nextProps);
          }
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getItems",
        value: function getItems(_ref) {
          var config2 = _ref.config, field = _ref.field, fieldType = _ref.fieldType, operator = _ref.operator, parentField = _ref.parentField, isFuncArg = _ref.isFuncArg, fieldDefinition = _ref.fieldDefinition;
          var canCompareFieldWithField = config2.settings.canCompareFieldWithField;
          var parentFieldPath = getFieldParts(parentField, config2);
          var parentFieldConfig = parentField ? getFieldConfig(config2, parentField) : null;
          var sourceFields = parentField ? parentFieldConfig === null || parentFieldConfig === void 0 ? void 0 : parentFieldConfig.subfields : config2.fields;
          var filteredFields = this.filterFields(config2, sourceFields, field, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition, fieldType);
          var items = this.buildOptions(parentFieldPath, config2, filteredFields, parentFieldPath);
          return items;
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref2) {
          var _leftFieldConfig$widg;
          var config2 = _ref2.config, field = _ref2.field;
          _ref2.fieldType;
          _ref2.operator;
          var value2 = _ref2.value, customPlaceholder = _ref2.placeholder, isFuncArg = _ref2.isFuncArg, parentField = _ref2.parentField;
          var _config$settings = config2.settings, fieldPlaceholder = _config$settings.fieldPlaceholder, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
          var selectedKey = value2;
          var isFieldSelected = !!value2;
          var leftFieldConfig = field ? getFieldConfig(config2, field) : {};
          var leftFieldWidgetField = leftFieldConfig === null || leftFieldConfig === void 0 || (_leftFieldConfig$widg = leftFieldConfig.widgets) === null || _leftFieldConfig$widg === void 0 ? void 0 : _leftFieldConfig$widg.field;
          var leftFieldWidgetFieldProps = (leftFieldWidgetField === null || leftFieldWidgetField === void 0 ? void 0 : leftFieldWidgetField.widgetProps) || {};
          var placeholder = isFieldSelected ? null : isFuncArg && customPlaceholder || leftFieldWidgetFieldProps.valuePlaceholder || fieldPlaceholder;
          var currField = isFieldSelected ? getFieldConfig(config2, selectedKey) : null;
          var selectedOpts = currField || {};
          var selectedKeys = getFieldPathParts(selectedKey, config2);
          var selectedPath = getFieldPathParts(selectedKey, config2, true);
          var selectedLabel = this.getFieldLabel(currField, selectedKey, config2);
          var partsLabels = getFieldPathLabels(selectedKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel || parentField) selectedFullLabel = null;
          var selectedAltLabel = selectedOpts.label2 || selectedOpts.tooltip;
          return {
            placeholder,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedAltLabel,
            selectedFullLabel
          };
        }
      }, {
        key: "filterFields",
        value: function filterFields(config2, fields2, leftFieldFullkey, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition, fieldType) {
          fields2 = clone(fields2);
          var fieldSeparator = config2.settings.fieldSeparator;
          var leftFieldConfig = getFieldConfig(config2, leftFieldFullkey);
          var widget = getWidgetForFieldOp(config2, leftFieldFullkey, operator, "value");
          config2.widgets[widget];
          var expectedType;
          if (isFuncArg) {
            expectedType = fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.type;
          } else if (leftFieldConfig) {
            expectedType = leftFieldConfig.type;
          } else {
            expectedType = fieldType;
          }
          function _filter(list, path) {
            for (var rightFieldKey in list) {
              var subfields = list[rightFieldKey].subfields;
              var subpath = (path ? path : []).concat(rightFieldKey);
              var rightFieldFullkey = subpath.join(fieldSeparator);
              var rightFieldConfig = getFieldConfig(config2, rightFieldFullkey);
              if (!rightFieldConfig) {
                delete list[rightFieldKey];
              } else if (rightFieldConfig.type == "!struct" || rightFieldConfig.type == "!group") {
                if (_filter(subfields, subpath) == 0) delete list[rightFieldKey];
              } else {
                var canUse = (!expectedType || rightFieldConfig.type == expectedType) && (isFuncArg ? true : rightFieldFullkey != leftFieldFullkey);
                var fn = canCompareFieldWithField || config2.settings.canCompareFieldWithField;
                if (fn) canUse = canUse && fn(leftFieldFullkey, leftFieldConfig, rightFieldFullkey, rightFieldConfig, operator);
                if (!canUse) delete list[rightFieldKey];
              }
            }
            return keys$7(list).length;
          }
          _filter(fields2, parentFieldPath || []);
          return fields2;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions(parentFieldPath, config2, fields2) {
          var _this2 = this;
          var path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          var optGroup = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
          if (!fields2) return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix = path !== null && path !== void 0 && path.length ? path.join(fieldSeparator) + fieldSeparator : "";
          return keys$7(fields2).map(function(fieldKey) {
            var fullFieldPath = [].concat(_toConsumableArray(path !== null && path !== void 0 ? path : []), [fieldKey]);
            var field = fields2[fieldKey];
            var label = _this2.getFieldLabel(field, fullFieldPath, config2);
            var partsLabels = getFieldPathLabels(fullFieldPath, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label || parentFieldPath) fullLabel = null;
            var altLabel = field.label2;
            var tooltip = field.tooltip;
            if (field.hideForCompare) return void 0;
            if (field.type == "!struct" || field.type == "!group") {
              return {
                key: fieldKey,
                path: prefix + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                items: _this2.buildOptions(parentFieldPath, config2, field.subfields, fullFieldPath, {
                  label,
                  tooltip
                })
              };
            } else {
              return {
                key: fieldKey,
                path: prefix + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                grouplabel: optGroup === null || optGroup === void 0 ? void 0 : optGroup.label,
                group: optGroup
              };
            }
          }).filter(function(o) {
            return !!o;
          });
        }
      }, {
        key: "getFieldLabel",
        value: function getFieldLabel(fieldOpts, fieldKey, config2) {
          if (!fieldKey) return null;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var fieldParts = getFieldParts(fieldKey, config2);
          var label = (fieldOpts === null || fieldOpts === void 0 ? void 0 : fieldOpts.label) || last$2(fieldParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setValue2 = _this$props.setValue, readonly = _this$props.readonly, id2 = _this$props.id, groupId = _this$props.groupId;
          var renderField = config2.settings.renderField;
          var renderProps = _objectSpread$2({
            isValueField: true,
            config: config2,
            customProps,
            setField: setValue2,
            readonly,
            items: this.items,
            id: id2,
            groupId
          }, this.meta);
          return renderField(renderProps, config2.ctx);
        }
      }]);
    }(reactExports.Component);
    ValueField.propTypes = {
      id: PropTypes.string,
      groupId: PropTypes.string,
      setValue: PropTypes.func.isRequired,
      config: PropTypes.object.isRequired,
      field: PropTypes.any,
      fieldSrc: PropTypes.string,
      fieldType: PropTypes.string,
      value: PropTypes.string,
      operator: PropTypes.string,
      customProps: PropTypes.object,
      readonly: PropTypes.bool,
      parentField: PropTypes.string,
      fieldDefinition: PropTypes.object,
      isFuncArg: PropTypes.bool
    };
    const VanillaBoolean = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var labelYes = props.labelYes, labelNo = props.labelNo, readonly = props.readonly;
      props.widgetId;
      var _props$customProps = props.customProps, customProps = _props$customProps === void 0 ? {} : _props$customProps;
      var customRadioYesProps = customProps.radioYes || {};
      var customRadioNoProps = customProps.radioNo || {};
      var onRadioChange = function onRadioChange2(e2) {
        return setValue2(e2.target.value == "true");
      };
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("input", _extends({
        type: "radio",
        value: true,
        checked: !!value2,
        disabled: readonly,
        onChange: onRadioChange
      }, customRadioYesProps)), " ", labelYes, /* @__PURE__ */ React.createElement("input", _extends({
        type: "radio",
        value: false,
        checked: !value2,
        disabled: readonly,
        onChange: onRadioChange
      }, customRadioNoProps)), " ", labelNo);
    };
    const VanillaText = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, placeholder = props.placeholder, maxLength = props.maxLength, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "") val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ React.createElement("input", _extends({
        type: "text",
        value: textValue,
        placeholder,
        disabled: readonly,
        onChange,
        maxLength
      }, customProps));
    };
    const VanillaTextArea = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, placeholder = props.placeholder, maxLength = props.maxLength;
      props.maxRows;
      var fullWidth = props.fullWidth, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "") val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ React.createElement("textarea", _extends({
        value: textValue,
        placeholder,
        disabled: readonly,
        onChange,
        maxLength,
        style: {
          width: fullWidth ? "100%" : void 0
        }
      }, customProps));
    };
    Utils$1.moment;
    const VanillaDate = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      props.valueFormat;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var value3 = e2.target.value;
        if (value3 == "") value3 = void 0;
        setValue2(value3);
      };
      return /* @__PURE__ */ React.createElement("input", _extends({
        type: "date",
        value: value2 || "",
        disabled: readonly,
        onChange
      }, customProps));
    };
    const VanillaTime = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      props.valueFormat;
      props.use12Hours;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var value3 = e2.target.value;
        if (value3 == "") value3 = void 0;
        setValue2(value3);
      };
      return /* @__PURE__ */ React.createElement("input", _extends({
        type: "time",
        value: value2 || "",
        disabled: readonly,
        onChange
      }, customProps));
    };
    var moment = Utils$1.moment;
    const VanillaDateTime = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var valueFormat = props.valueFormat;
      props.use12Hours;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var value3 = e2.target.value;
        if (value3 == "") value3 = void 0;
        else value3 = moment(new Date(value3)).format(valueFormat);
        setValue2(value3);
      };
      var dtValue = value2;
      if (!value2) dtValue = "";
      else dtValue = moment(value2).format("YYYY-MM-DDTHH:mm");
      return /* @__PURE__ */ React.createElement("input", _extends({
        type: "datetime-local",
        value: dtValue,
        disabled: readonly,
        onChange
      }, customProps));
    };
    var mapListValues$1 = Utils$1.ListUtils.mapListValues;
    const VanillaMultiSelect = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, customProps = _ref.customProps;
      var renderOptions = function renderOptions2() {
        return mapListValues$1(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ React.createElement("option", {
            key: value3,
            value: value3
          }, title);
        });
      };
      var getMultiSelectValues = function getMultiSelectValues2(multiselect) {
        var values = [];
        var options = multiselect.options;
        for (var i = 0; i < options.length; i++) {
          var opt = options[i];
          if (opt.selected) {
            values.push(opt.value);
          }
        }
        if (!values.length) values = void 0;
        return values;
      };
      var onChange = function onChange2(e2) {
        return setValue2(getMultiSelectValues(e2.target));
      };
      return /* @__PURE__ */ React.createElement("select", _extends({
        multiple: true,
        onChange,
        value: value2,
        disabled: readonly
      }, omit$1(customProps, ["showSearch", "input", "showCheckboxes"])), renderOptions());
    };
    var mapListValues = Utils$1.ListUtils.mapListValues;
    const VanillaSelect = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, customProps = _ref.customProps;
      var renderOptions = function renderOptions2() {
        return mapListValues(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ React.createElement("option", {
            key: value3,
            value: value3
          }, title);
        });
      };
      var onChange = function onChange2(e2) {
        return setValue2(e2.target.value);
      };
      var hasValue = value2 != null;
      return /* @__PURE__ */ React.createElement("select", _extends({
        onChange,
        value: hasValue ? value2 : "",
        disabled: readonly
      }, omit$1(customProps, ["showSearch", "input"])), !hasValue && /* @__PURE__ */ React.createElement("option", {
        disabled: true,
        value: ""
      }), renderOptions());
    };
    const VanillaNumber = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, min2 = props.min, max2 = props.max, step = props.step, placeholder = props.placeholder, customProps = props.customProps;
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "" || val === null) val = void 0;
        else val = Number(val);
        setValue2(val);
      };
      var numberValue = value2 == void 0 ? "" : value2;
      return /* @__PURE__ */ React.createElement("input", _extends({
        type: "number",
        value: numberValue,
        placeholder,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        onChange
      }, customProps));
    };
    const VanillaSlider = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, min2 = props.min, max2 = props.max, step = props.step, placeholder = props.placeholder, _props$customProps = props.customProps, customProps = _props$customProps === void 0 ? {} : _props$customProps;
      var customInputProps = customProps.input || {};
      var customSliderProps = customProps.slider || customProps;
      var onChange = function onChange2(e2) {
        var val = e2.target.value;
        if (val === "" || val === null) val = void 0;
        else val = Number(val);
        setValue2(val);
      };
      var numberValue = value2 == void 0 ? "" : value2;
      return /* @__PURE__ */ React.createElement("div", {
        style: {
          display: "inline-flex"
        }
      }, /* @__PURE__ */ React.createElement("input", _extends({
        key: "number",
        type: "number",
        value: numberValue,
        placeholder,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        onChange
      }, customInputProps)), /* @__PURE__ */ React.createElement("input", _extends({
        key: "range",
        type: "range",
        value: numberValue,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        onChange
      }, customSliderProps)));
    };
    const VanillaFieldSelect = function(_ref) {
      var items = _ref.items, setField2 = _ref.setField, selectedKey = _ref.selectedKey, readonly = _ref.readonly, errorText = _ref.errorText;
      var renderOptions = function renderOptions2(fields2) {
        return fields2.map(function(field) {
          var items2 = field.items, path = field.path, label = field.label, disabled = field.disabled, matchesType = field.matchesType;
          if (items2) {
            return /* @__PURE__ */ React.createElement("optgroup", {
              disabled,
              key: path,
              label
            }, renderOptions2(items2));
          } else {
            var style = matchesType ? {
              fontWeight: "bold"
            } : {};
            return /* @__PURE__ */ React.createElement("option", {
              disabled,
              key: path,
              value: path,
              style
            }, label);
          }
        });
      };
      var onChange = function onChange2(e2) {
        return setField2(e2.target.value);
      };
      var hasValue = selectedKey != null;
      return /* @__PURE__ */ React.createElement("select", {
        onChange,
        value: hasValue ? selectedKey : "",
        disabled: readonly,
        style: {
          color: errorText ? "red" : null
        }
      }, !hasValue && /* @__PURE__ */ React.createElement("option", {
        disabled: true,
        value: ""
      }), renderOptions(items));
    };
    const VanillaConjs = function(_ref) {
      var id2 = _ref.id, not2 = _ref.not, setNot2 = _ref.setNot, conjunctionOptions = _ref.conjunctionOptions, setConjunction2 = _ref.setConjunction, disabled = _ref.disabled, readonly = _ref.readonly, config2 = _ref.config, showNot = _ref.showNot, notLabel = _ref.notLabel;
      var conjsCount = Object.keys(conjunctionOptions).length;
      var lessThenTwo = disabled;
      var forceShowConj = config2.settings.forceShowConj;
      var showConj = forceShowConj || conjsCount > 1 && !lessThenTwo;
      var renderOptions = function renderOptions2() {
        return Object.keys(conjunctionOptions).map(function(key) {
          var _conjunctionOptions$k = conjunctionOptions[key], id3 = _conjunctionOptions$k.id, name = _conjunctionOptions$k.name, label = _conjunctionOptions$k.label, checked = _conjunctionOptions$k.checked;
          var postfix = setConjunction2.isDummyFn ? "__dummy" : "";
          if ((readonly || disabled) && !checked) return null;
          return [/* @__PURE__ */ React.createElement("input", {
            key: id3 + postfix,
            type: "radio",
            id: id3 + postfix,
            name: name + postfix,
            checked,
            disabled: readonly || disabled,
            value: key,
            onChange
          }), /* @__PURE__ */ React.createElement("label", {
            key: id3 + postfix + "label",
            htmlFor: id3 + postfix
          }, label)];
        });
      };
      var renderNot = function renderNot2() {
        var postfix = "not";
        return [/* @__PURE__ */ React.createElement("input", {
          key: id2 + postfix,
          type: "checkbox",
          id: id2 + postfix,
          checked: not2,
          disabled: readonly,
          onChange: onNotChange
        }), /* @__PURE__ */ React.createElement("label", {
          key: id2 + postfix + "label",
          htmlFor: id2 + postfix
        }, notLabel || "NOT")];
      };
      var onChange = function onChange2(e2) {
        return setConjunction2(e2.target.value);
      };
      var onNotChange = function onNotChange2(e2) {
        return setNot2(e2.target.checked);
      };
      return [showNot && renderNot(), showConj && renderOptions()];
    };
    var typeToLabel = {
      "addSubRuleSimple": "+",
      "addSubRule": "+",
      "addSubGroup": "+",
      "delGroup": "x",
      "delRuleGroup": "x",
      "delRule": "x"
    };
    const VanillaButton = function(_ref) {
      var type = _ref.type, label = _ref.label, onClick = _ref.onClick, readonly = _ref.readonly;
      var btnLabel = label || typeToLabel[type];
      return /* @__PURE__ */ React.createElement("button", {
        onClick,
        type: "button",
        disabled: readonly
      }, btnLabel);
    };
    const VanillaIcon = function(_ref) {
      var type = _ref.type;
      var typeToIcon = {};
      var icon = typeToIcon[type] || null;
      if (!icon && type === "drag") {
        icon = /* @__PURE__ */ React.createElement(DragIcon, null);
      }
      return icon;
    };
    const VanillaButtonGroup = function(_ref) {
      var children = _ref.children;
      _ref.config;
      return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
    };
    const VanillaValueSources = function(_ref) {
      _ref.config;
      var valueSources = _ref.valueSources, valueSrc = _ref.valueSrc;
      _ref.title;
      var setValueSrc2 = _ref.setValueSrc, readonly = _ref.readonly;
      var renderOptions = function renderOptions2(valueSources2) {
        return valueSources2.map(function(_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2), srcKey = _ref3[0], info = _ref3[1];
          return /* @__PURE__ */ React.createElement("option", {
            key: srcKey,
            value: srcKey
          }, info.label);
        });
      };
      var onChange = function onChange2(e2) {
        return setValueSrc2(e2.target.value);
      };
      return /* @__PURE__ */ React.createElement("select", {
        onChange,
        value: valueSrc || "",
        disabled: readonly
      }, renderOptions(valueSources));
    };
    const VanillaSwitch = function(_ref) {
      var value2 = _ref.value, setValue2 = _ref.setValue, label = _ref.label, id2 = _ref.id;
      _ref.config;
      var type = _ref.type;
      var onChange = function onChange2(e2) {
        return setValue2(e2.target.checked);
      };
      var postfix = type;
      return [/* @__PURE__ */ React.createElement("input", {
        key: id2 + postfix,
        type: "checkbox",
        id: id2 + postfix,
        checked: !!value2,
        onChange
      }), /* @__PURE__ */ React.createElement("label", {
        key: id2 + postfix + "label",
        htmlFor: id2 + postfix
      }, label)];
    };
    const vanillaConfirm = function(_ref) {
      var onOk = _ref.onOk;
      _ref.okText;
      _ref.cancelText;
      var title = _ref.title;
      if (confirm(title)) {
        onOk();
      }
    };
    var VanillaProvider = function VanillaProvider2(_ref) {
      _ref.config;
      var children = _ref.children;
      return children;
    };
    const Widgets = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      FuncWidget,
      ValueFieldWidget: ValueField,
      VanillaBooleanWidget: VanillaBoolean,
      VanillaButton,
      VanillaButtonGroup,
      VanillaConjs,
      VanillaDateTimeWidget: VanillaDateTime,
      VanillaDateWidget: VanillaDate,
      VanillaFieldSelect,
      VanillaIcon,
      VanillaMultiSelectWidget: VanillaMultiSelect,
      VanillaNumberWidget: VanillaNumber,
      VanillaProvider,
      VanillaSelectWidget: VanillaSelect,
      VanillaSliderWidget: VanillaSlider,
      VanillaSwitch,
      VanillaTextAreaWidget: VanillaTextArea,
      VanillaTextWidget: VanillaText,
      VanillaTimeWidget: VanillaTime,
      VanillaValueSources,
      vanillaConfirm
    }, Symbol.toStringTag, { value: "Module" }));
    function _callSuper(t2, o, e2) {
      return o = _getPrototypeOf(o), _possibleConstructorReturn(t2, _isNativeReflectConstruct() ? Reflect.construct(o, e2 || [], _getPrototypeOf(t2).constructor) : o.apply(t2, e2));
    }
    function _isNativeReflectConstruct() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    var Proximity = /* @__PURE__ */ function(_PureComponent) {
      function Proximity2() {
        var _this;
        _classCallCheck(this, Proximity2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper(this, Proximity2, [].concat(args));
        _this.handleChange = function(value2) {
          _this.props.setOption("proximity", parseInt(value2));
        };
        return _this;
      }
      _inherits(Proximity2, _PureComponent);
      return _createClass(Proximity2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, defaults2 = _this$props.defaults, options = _this$props.options, config2 = _this$props.config, optionLabel = _this$props.optionLabel, optionPlaceholder = _this$props.optionPlaceholder, customProps = _this$props.customProps, minProximity = _this$props.minProximity, maxProximity = _this$props.maxProximity, optionTextBefore = _this$props.optionTextBefore, readonly = _this$props.readonly;
          var settings2 = config2.settings, widgets2 = config2.widgets, ctx2 = config2.ctx;
          var defaultProximity = defaults2 ? defaults2.proximity : void 0;
          var showLabels = settings2.showLabels;
          var selectedProximity = options.get("proximity", defaultProximity);
          var proxValues = range$1(minProximity, maxProximity + 1).map(function(item) {
            return {
              title: item,
              value: item
            };
          });
          var factory = widgets2.select.factory;
          var Select = function Select2(props) {
            return factory(props, ctx2);
          };
          return /* @__PURE__ */ React.createElement("div", {
            className: "operator--PROXIMITY"
          }, /* @__PURE__ */ React.createElement("div", {
            className: "operator--options"
          }, showLabels && /* @__PURE__ */ React.createElement("label", {
            className: "rule--label"
          }, optionLabel), !showLabels && optionTextBefore && /* @__PURE__ */ React.createElement("div", {
            className: "operator--options--sep"
          }, /* @__PURE__ */ React.createElement("span", null, optionTextBefore)), /* @__PURE__ */ React.createElement(Select, _extends({
            config: config2,
            value: selectedProximity,
            listValues: proxValues,
            setValue: this.handleChange,
            readonly,
            placeholder: optionPlaceholder
          }, customProps))), /* @__PURE__ */ React.createElement("div", {
            className: "operator--widgets"
          }, this.props.children));
        }
      }]);
    }(reactExports.PureComponent);
    Proximity.propTypes = {
      config: PropTypes.object.isRequired,
      setOption: PropTypes.func.isRequired,
      options: PropTypes.any.isRequired,
      //instanceOf(Immutable.Map)
      minProximity: PropTypes.number,
      maxProximity: PropTypes.number,
      optionPlaceholder: PropTypes.string,
      optionTextBefore: PropTypes.string,
      optionLabel: PropTypes.string,
      customProps: PropTypes.object,
      readonly: PropTypes.bool
      //children
    };
    Proximity.defaultProps = {
      customProps: {},
      minProximity: 2,
      maxProximity: 10,
      optionPlaceholder: "Select words between",
      optionLabel: "Words between",
      optionTextBefore: null
    };
    const CustomOperators = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      ProximityOperator: Proximity
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$1(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread$1(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$1(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    var conjunctions$1 = _objectSpread$1({}, CoreConfig.conjunctions);
    var operators$1 = _objectSpread$1(_objectSpread$1({}, CoreConfig.operators), {}, {
      proximity: _objectSpread$1(_objectSpread$1({}, CoreConfig.operators.proximity), {}, {
        options: _objectSpread$1(_objectSpread$1({}, CoreConfig.operators.proximity.options), {}, {
          factory: function factory(props, _ref) {
            var RCE = _ref.RCE, ProximityOperator = _ref.O.ProximityOperator;
            return RCE(ProximityOperator, props);
          }
        })
      })
    });
    var widgets$1 = {
      text: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.text), {}, {
        factory: function factory(props, _ref2) {
          var RCE = _ref2.RCE, VanillaTextWidget = _ref2.W.VanillaTextWidget;
          return RCE(VanillaTextWidget, props);
        }
      }),
      textarea: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.textarea), {}, {
        factory: function factory(props, _ref3) {
          var RCE = _ref3.RCE, VanillaTextAreaWidget = _ref3.W.VanillaTextAreaWidget;
          return RCE(VanillaTextAreaWidget, props);
        }
      }),
      number: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.number), {}, {
        factory: function factory(props, _ref4) {
          var RCE = _ref4.RCE, VanillaNumberWidget = _ref4.W.VanillaNumberWidget;
          return RCE(VanillaNumberWidget, props);
        }
      }),
      slider: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.slider), {}, {
        factory: function factory(props, _ref5) {
          var RCE = _ref5.RCE, VanillaSliderWidget = _ref5.W.VanillaSliderWidget;
          return RCE(VanillaSliderWidget, props);
        }
      }),
      select: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.select), {}, {
        factory: function factory(props, _ref6) {
          var RCE = _ref6.RCE, VanillaSelectWidget = _ref6.W.VanillaSelectWidget;
          return RCE(VanillaSelectWidget, props);
        }
      }),
      multiselect: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.multiselect), {}, {
        factory: function factory(props, _ref7) {
          var RCE = _ref7.RCE, VanillaMultiSelectWidget = _ref7.W.VanillaMultiSelectWidget;
          return RCE(VanillaMultiSelectWidget, props);
        }
      }),
      date: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.date), {}, {
        factory: function factory(props, _ref8) {
          var RCE = _ref8.RCE, VanillaDateWidget = _ref8.W.VanillaDateWidget;
          return RCE(VanillaDateWidget, props);
        }
      }),
      time: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.time), {}, {
        factory: function factory(props, _ref9) {
          var RCE = _ref9.RCE, VanillaTimeWidget = _ref9.W.VanillaTimeWidget;
          return RCE(VanillaTimeWidget, props);
        }
      }),
      datetime: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.datetime), {}, {
        factory: function factory(props, _ref10) {
          var RCE = _ref10.RCE, VanillaDateTimeWidget = _ref10.W.VanillaDateTimeWidget;
          return RCE(VanillaDateTimeWidget, props);
        }
      }),
      "boolean": _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets["boolean"]), {}, {
        factory: function factory(props, _ref11) {
          var RCE = _ref11.RCE, VanillaBooleanWidget = _ref11.W.VanillaBooleanWidget;
          return RCE(VanillaBooleanWidget, props);
        }
      }),
      field: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.field), {}, {
        factory: function factory(props, _ref12) {
          var RCE = _ref12.RCE, ValueFieldWidget = _ref12.W.ValueFieldWidget;
          return RCE(ValueFieldWidget, props);
        },
        customProps: {
          showSearch: true
        }
      }),
      func: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.func), {}, {
        factory: function factory(props, _ref13) {
          var RCE = _ref13.RCE, FuncWidget2 = _ref13.W.FuncWidget;
          return RCE(FuncWidget2, props);
        },
        customProps: {
          //showSearch: true
        }
      }),
      /**
       * @deprecated
       */
      case_value: _objectSpread$1(_objectSpread$1({}, CoreConfig.widgets.case_value), {}, {
        // simple text value
        factory: function factory(props, _ref14) {
          var RCE = _ref14.RCE, VanillaTextWidget = _ref14.W.VanillaTextWidget;
          return RCE(VanillaTextWidget, props);
        }
      })
    };
    var types$1 = _objectSpread$1(_objectSpread$1({}, CoreConfig.types), {}, {
      select: _objectSpread$1(_objectSpread$1({}, CoreConfig.types.select), {}, {
        widgets: _objectSpread$1(_objectSpread$1({}, CoreConfig.types.select.widgets), {}, {
          select: _objectSpread$1(_objectSpread$1({}, CoreConfig.types.select.widgets.select), {}, {
            widgetProps: {
              customProps: {
                showSearch: true
              }
            }
          })
        })
      })
    });
    var settings$1 = _objectSpread$1(_objectSpread$1({}, CoreConfig.settings), {}, {
      renderField: function renderField(props, _ref15) {
        var RCE = _ref15.RCE, VanillaFieldSelect2 = _ref15.W.VanillaFieldSelect;
        return RCE(VanillaFieldSelect2, props);
      },
      renderOperator: function renderOperator(props, _ref16) {
        var RCE = _ref16.RCE, VanillaFieldSelect2 = _ref16.W.VanillaFieldSelect;
        return RCE(VanillaFieldSelect2, props);
      },
      renderFunc: function renderFunc(props, _ref17) {
        var RCE = _ref17.RCE, VanillaFieldSelect2 = _ref17.W.VanillaFieldSelect;
        return RCE(VanillaFieldSelect2, props);
      },
      renderConjs: function renderConjs(props, _ref18) {
        var RCE = _ref18.RCE, VanillaConjs2 = _ref18.W.VanillaConjs;
        return RCE(VanillaConjs2, props);
      },
      renderSwitch: function renderSwitch(props, _ref19) {
        var RCE = _ref19.RCE, VanillaSwitch2 = _ref19.W.VanillaSwitch;
        return RCE(VanillaSwitch2, props);
      },
      renderButton: function renderButton(props, _ref20) {
        var RCE = _ref20.RCE, VanillaButton2 = _ref20.W.VanillaButton;
        return RCE(VanillaButton2, props);
      },
      renderIcon: function renderIcon(props, _ref21) {
        var RCE = _ref21.RCE, VanillaIcon2 = _ref21.W.VanillaIcon;
        return RCE(VanillaIcon2, props);
      },
      renderButtonGroup: function renderButtonGroup(props, _ref22) {
        var RCE = _ref22.RCE, VanillaButtonGroup2 = _ref22.W.VanillaButtonGroup;
        return RCE(VanillaButtonGroup2, props);
      },
      renderProvider: function renderProvider(props, _ref23) {
        var RCE = _ref23.RCE, VanillaProvider2 = _ref23.W.VanillaProvider;
        return RCE(VanillaProvider2, props);
      },
      renderValueSources: function renderValueSources(props, _ref24) {
        var RCE = _ref24.RCE, VanillaValueSources2 = _ref24.W.VanillaValueSources;
        return RCE(VanillaValueSources2, props);
      },
      renderFieldSources: function renderFieldSources(props, _ref25) {
        var RCE = _ref25.RCE, VanillaValueSources2 = _ref25.W.VanillaValueSources;
        return RCE(VanillaValueSources2, props);
      },
      renderConfirm: function renderConfirm(props, _ref26) {
        var vanillaConfirm2 = _ref26.W.vanillaConfirm;
        return vanillaConfirm2(props);
      },
      renderSwitchPrefix: "IF",
      renderBeforeCaseValue: function renderBeforeCaseValue(props, _ref27) {
        var RCE = _ref27.RCE;
        return RCE("span", {
          children: [" then "]
        });
      },
      customFieldSelectProps: {
        showSearch: true
      },
      customOperatorSelectProps: {
        // showSearch: false
      },
      defaultSliderWidth: "200px",
      defaultSelectWidth: "200px",
      defaultSearchWidth: "100px",
      defaultMaxRows: 5,
      renderSize: "small",
      maxLabelsLength: 100,
      showLock: false,
      showNot: true,
      forceShowConj: false,
      groupActionsPosition: "topRight"
      // oneOf [topLeft, topCenter, topRight, bottomLeft, bottomCenter, bottomRight]
    });
    var ctx$1 = _objectSpread$1(_objectSpread$1({}, CoreConfig.ctx), {}, {
      W: _objectSpread$1({}, Widgets),
      O: _objectSpread$1({}, CustomOperators),
      RCE: function RCE(C2, P2) {
        return /* @__PURE__ */ React.createElement(C2, P2);
      }
    });
    var config$1 = {
      conjunctions: conjunctions$1,
      operators: operators$1,
      widgets: widgets$1,
      types: types$1,
      settings: settings$1,
      ctx: ctx$1
    };
    config$1 = Utils$1.ConfigMixins.removeMixins(config$1, ["rangeslider", "treeselect", "treemultiselect"]);
    const BasicConfig = config$1;
    var _Utils$Autocomplete = Utils$1.Autocomplete;
    _Utils$Autocomplete.mergeListValues;
    _Utils$Autocomplete.listValueToOption;
    _Utils$Autocomplete.optionToListValue;
    _Utils$Autocomplete.optionsToListValues;
    _Utils$Autocomplete.fixListValuesGroupOrder;
    var _Utils$ListUtils = Utils$1.ListUtils;
    _Utils$ListUtils.mapListValues;
    _Utils$ListUtils.listValuesToArray;
    _Utils$ListUtils.getListValue;
    _Utils$ListUtils.makeCustomListValue;
    _Utils$ListUtils.searchListValue;
    _Utils$ListUtils.getItemInListValues;
    function ownKeys(e2, r2) {
      var t2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e2);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
        })), t2.push.apply(t2, o);
      }
      return t2;
    }
    function _objectSpread(e2) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e2, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e2;
    }
    const Utils = _objectSpread(_objectSpread({}, Utils$1), {}, {
      ReactUtils,
      DragIcon
    });
    const InitialConfig = BasicConfig;
    const fields = {
      user: {
        label: "User",
        tooltip: "Group of fields",
        type: "!struct",
        subfields: {
          firstName: {
            label2: "Username",
            //only for menu's toggler
            type: "text",
            mainWidgetProps: {
              valueLabel: "Name",
              valuePlaceholder: "Enter name"
            },
            fieldSettings: {
              validateValue: (val, fieldSettings) => {
                return val.length < 10;
              }
            }
          },
          login: {
            type: "text",
            fieldSettings: {
              validateValue: (val, fieldSettings) => {
                return val.length < 10 && (val === "" || val.match(/^[A-Za-z0-9_-]+$/) !== null);
              }
            },
            mainWidgetProps: {
              valueLabel: "Login",
              valuePlaceholder: "Enter login"
            }
          }
        }
      },
      num: {
        label: "Number",
        type: "number",
        preferWidgets: ["number"],
        fieldSettings: {
          min: -1,
          max: 5
        }
      },
      slider: {
        label: "Slider",
        type: "number",
        preferWidgets: ["slider", "rangeslider"],
        valueSources: ["value", "field"],
        fieldSettings: {
          min: 0,
          max: 100,
          step: 1,
          marks: {
            0: /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "0%" }),
            100: /* @__PURE__ */ jsxRuntimeExports.jsx("strong", { children: "100%" })
          }
        },
        //overrides
        widgets: {
          slider: {
            widgetProps: {
              valuePlaceholder: "..Slider"
            }
          }
        }
      },
      date: {
        label: "Date",
        type: "date",
        valueSources: ["value"]
      },
      time: {
        label: "Time",
        type: "time",
        valueSources: ["value"],
        operators: ["greater_or_equal", "less_or_equal", "between"],
        defaultOperator: "between"
      },
      datetime: {
        label: "DateTime",
        type: "datetime",
        valueSources: ["value"]
      },
      datetime2: {
        label: "DateTime2",
        type: "datetime",
        valueSources: ["field"]
      },
      color: {
        label: "Color",
        type: "select",
        valueSources: ["value"],
        fieldSettings: {
          listValues: [
            { value: "yellow", title: "Yellow" },
            { value: "green", title: "Green" },
            { value: "orange", title: "Orange" }
          ]
        }
      },
      color2: {
        label: "Color2",
        type: "select",
        fieldSettings: {
          listValues: {
            yellow: "Yellow",
            green: "Green",
            orange: "Orange",
            purple: "Purple"
          }
        }
      },
      multicolor: {
        label: "Colors",
        type: "multiselect",
        fieldSettings: {
          listValues: {
            yellow: "Yellow",
            green: "Green",
            orange: "Orange"
          },
          allowCustomValues: true
        }
      },
      stock: {
        label: "In stock",
        type: "boolean",
        defaultValue: true,
        mainWidgetProps: {
          labelYes: "+",
          labelNo: "-"
        }
      }
    };
    const conjunctions = {
      AND: InitialConfig.conjunctions.AND,
      OR: InitialConfig.conjunctions.OR
    };
    const operators = {
      ...InitialConfig.operators,
      // examples of  overriding
      between: {
        ...InitialConfig.operators.between,
        textSeparators: [
          "from",
          "to"
        ]
      }
    };
    delete operators.proximity;
    const widgets = {
      ...InitialConfig.widgets,
      // examples of  overriding
      slider: {
        ...InitialConfig.widgets.slider,
        customProps: {
          width: "300px"
        }
      },
      rangeslider: {
        ...InitialConfig.widgets.rangeslider,
        customProps: {
          width: "300px"
        }
      },
      date: {
        ...InitialConfig.widgets.date,
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD"
      },
      time: {
        ...InitialConfig.widgets.time,
        timeFormat: "HH:mm",
        valueFormat: "HH:mm:ss"
      },
      datetime: {
        ...InitialConfig.widgets.datetime,
        timeFormat: "HH:mm",
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD HH:mm:ss"
      }
    };
    const types = {
      ...InitialConfig.types,
      // examples of  overriding
      boolean: merge$1({}, InitialConfig.types.boolean, {
        widgets: {
          boolean: {
            widgetProps: {
              hideOperator: true,
              operatorInlineLabel: "is"
            }
          }
        }
      })
    };
    const localeSettings = {
      locale: {
        moment: "ru"
      },
      valueLabel: "Value",
      valuePlaceholder: "Value",
      fieldLabel: "Field",
      operatorLabel: "Operator",
      fieldPlaceholder: "Select field",
      operatorPlaceholder: "Select operator",
      deleteLabel: null,
      addGroupLabel: "Add group",
      addRuleLabel: "Add rule",
      addSubRuleLabel: "Add sub rule",
      addSubGroupLabel: "Add sub group",
      delGroupLabel: null,
      notLabel: "Not",
      fieldSourcesPopupTitle: "Select source",
      valueSourcesPopupTitle: "Select value source",
      removeRuleConfirmOptions: {
        title: "Are you sure delete this rule?",
        okText: "Yes",
        okType: "danger"
      },
      removeGroupConfirmOptions: {
        title: "Are you sure delete this group?",
        okText: "Yes",
        okType: "danger"
      }
    };
    const settings = {
      ...InitialConfig.settings,
      ...localeSettings,
      valueSourcesInfo: {
        value: {
          label: "Value"
        },
        field: {
          label: "Field",
          widget: "field"
        }
      },
      // canReorder: false,
      // canRegroup: false,
      // showNot: false,
      // showLabels: true,
      maxNesting: 3,
      canLeaveEmptyGroup: true
      //after deletion
    };
    const funcs = {};
    const ctx = InitialConfig.ctx;
    const config = {
      ctx,
      conjunctions,
      operators,
      widgets,
      types,
      settings,
      fields,
      funcs
    };
    const value = {
      "type": "group",
      "id": "9a99988a-0123-4456-b89a-b1607f326fd8",
      "children1": [
        {
          "id": "a98ab9b9-cdef-4012-b456-71607f326fd9",
          "type": "rule",
          "properties": {
            "field": "user.login",
            "operator": "equal",
            "value": [
              "batman"
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "text"
            ]
          }
        },
        {
          "id": "98a8a9ba-0123-4456-b89a-b16e721c8cd0",
          "type": "rule",
          "properties": {
            "field": "stock",
            "operator": "equal",
            "value": [
              false
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "boolean"
            ]
          }
        },
        {
          "id": "aabbab8a-cdef-4012-b456-716e85c65e9c",
          "type": "rule",
          "properties": {
            "field": "slider",
            "operator": "equal",
            "value": [
              35
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "number"
            ]
          }
        }
      ],
      "properties": {
        "conjunction": "AND",
        "not": false
      }
    };
    const stringify = JSON.stringify;
    const { jsonLogicFormat, queryString, mongodbFormat, sqlFormat, getTree, sanitizeTree, loadTree, uuid, loadFromJsonLogic } = Utils;
    const preStyle = { backgroundColor: "darkgrey", margin: "10px", padding: "10px" };
    const preErrorStyle = { backgroundColor: "lightpink", margin: "10px", padding: "10px" };
    const emptyInitValue = { "id": uuid(), "type": "group" };
    const initValue = value && Object.keys(value).length > 0 ? value : emptyInitValue;
    const initTree = sanitizeTree(loadTree(initValue), config).fixedTree;
    class DemoQueryBuilder extends reactExports.Component {
      constructor() {
        super(...arguments);
        __publicField(this, "state", {
          tree: initTree,
          config
        });
        __publicField(this, "render", () => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            QueryContainer,
            {
              ...config,
              value: this.state.tree,
              onChange: this.onChange,
              renderBuilder: this.renderBuilder
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: this.resetValue, children: "reset" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: this.clearValue, children: "clear" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "query-builder-result", children: this.renderResult(this.state) })
        ] }));
        __publicField(this, "resetValue", () => {
          this.setState({
            tree: initTree
          });
        });
        __publicField(this, "clearValue", () => {
          this.setState({
            tree: loadTree(emptyInitValue)
          });
        });
        __publicField(this, "renderBuilder", (props) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "query-builder-container", style: { padding: "10px" }, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "query-builder", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Builder$1, { ...props }) }) }));
        __publicField(this, "onChange", (immutableTree, config2) => {
          this.immutableTree = immutableTree;
          this.config = config2;
          this.updateResult();
          getTree(immutableTree);
          jsonLogicFormat(immutableTree, config2);
        });
        __publicField(this, "updateResult", () => {
          this.setState({ tree: this.immutableTree, config: this.config });
        });
        __publicField(this, "renderResult", ({ tree: immutableTree, config: config2 }) => {
          const { logic: logic2, data, errors } = jsonLogicFormat(immutableTree, config2);
          return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              "stringFormat:",
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preStyle, children: stringify(queryString(immutableTree, config2), void 0, 2) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              "humanStringFormat:",
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preStyle, children: stringify(queryString(immutableTree, config2, true), void 0, 2) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              "sqlFormat:",
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preStyle, children: stringify(sqlFormat(immutableTree, config2), void 0, 2) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              "mongodbFormat:",
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preStyle, children: stringify(mongodbFormat(immutableTree, config2), void 0, 2) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("a", { href: "http://jsonlogic.com/play.html", target: "_blank", rel: "noopener noreferrer", children: "jsonLogicFormat" }),
              ":",
              errors.length > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preErrorStyle, children: stringify(errors, void 0, 2) }),
              !!logic2 && /* @__PURE__ */ jsxRuntimeExports.jsxs("pre", { style: preStyle, children: [
                "// Rule",
                ":",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                stringify(logic2, void 0, 2),
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
                "// Data",
                ":",
                /* @__PURE__ */ jsxRuntimeExports.jsx("br", {}),
                stringify(data, void 0, 2)
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("hr", {}),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
              "Tree:",
              /* @__PURE__ */ jsxRuntimeExports.jsx("pre", { style: preStyle, children: stringify(getTree(immutableTree), void 0, 2) })
            ] })
          ] });
        });
      }
    }
    function App() {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "App", children: /* @__PURE__ */ jsxRuntimeExports.jsx(DemoQueryBuilder, {}) });
    }
    const rootElement = document.getElementById("root");
    reactDomExports.render(/* @__PURE__ */ jsxRuntimeExports.jsx(App, {}), rootElement);
  }
});
export default require_index_001();
//# sourceMappingURL=index-Bn_V6uB-.js.map
